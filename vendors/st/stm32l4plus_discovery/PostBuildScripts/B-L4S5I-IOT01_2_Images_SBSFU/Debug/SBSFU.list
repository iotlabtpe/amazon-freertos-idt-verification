
SBSFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 SE_CORE_Bin   0001a27c  08000200  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_IF_Code   00000da8  0801b500  0801b500  0002b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000db30  0801c300  0801c300  0002c300  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00003e10  08029e30  08029e30  00039e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0802dc40  0802dc40  00040170  2**0
                  CONTENTS
  6 .ARM          00000008  0802dc40  0802dc40  0003dc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0802dc48  0802dc48  00040170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0802dc48  0802dc48  0003dc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0802dc50  0802dc50  0003dc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000170  20030000  0802dc58  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002ce0  20030170  0802ddc8  00040170  2**2
                  ALLOC
 12 ._user_heap_stack 0000c000  20032e50  0802ddc8  00042e50  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040170  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004f7b7  00000000  00000000  000401a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a2ca  00000000  00000000  0008f957  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ca8  00000000  00000000  00099c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002ae0  00000000  00000000  0009b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003c26b  00000000  00000000  0009e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002b148  00000000  00000000  000da61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0013f820  00000000  00000000  00105763  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00244f83  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c8c  00000000  00000000  00245000  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0002162f  00000000  00000000  0024ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .SE_IF_Code:

0801b500 <SE_APP_GetActiveFwInfo>:
  * @param peSE_Status Secure Engine Status.
  * @param p_FwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_GetActiveFwInfo(SE_StatusTypeDef *peSE_Status, SE_APP_ActiveFwInfo_t *p_FwInfo)
{
 801b500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b502:	460d      	mov	r5, r1
 801b504:	4604      	mov	r4, r0

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b506:	a801      	add	r0, sp, #4
 801b508:	f000 f9be 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, primask_bit, p_FwInfo);
 801b50c:	4621      	mov	r1, r4
 801b50e:	462b      	mov	r3, r5
 801b510:	9a01      	ldr	r2, [sp, #4]
 801b512:	4c05      	ldr	r4, [pc, #20]	; (801b528 <SE_APP_GetActiveFwInfo+0x28>)
 801b514:	2020      	movs	r0, #32
 801b516:	47a0      	blx	r4
 801b518:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b51a:	9801      	ldr	r0, [sp, #4]
 801b51c:	f000 f9b9 	bl	801b892 <SE_ExitSecureMode>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b520:	4620      	mov	r0, r4
 801b522:	b003      	add	sp, #12
 801b524:	bd30      	pop	{r4, r5, pc}
 801b526:	bf00      	nop
 801b528:	08000205 	.word	0x08000205

0801b52c <SE_APP_GetActiveFwState>:
  * @param peSE_Status Secure Engine Status.
  * @param p_FwState Active Firmware State structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_GetActiveFwState(SE_StatusTypeDef *peSE_Status, SE_FwStateTypeDef* p_FwState)
{
 801b52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b52e:	460d      	mov	r5, r1
 801b530:	4604      	mov	r4, r0

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b532:	a801      	add	r0, sp, #4
 801b534:	f000 f9a8 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_APP_GET_FW_STATE, peSE_Status, primask_bit, p_FwState);
 801b538:	4621      	mov	r1, r4
 801b53a:	462b      	mov	r3, r5
 801b53c:	9a01      	ldr	r2, [sp, #4]
 801b53e:	4c05      	ldr	r4, [pc, #20]	; (801b554 <SE_APP_GetActiveFwState+0x28>)
 801b540:	2021      	movs	r0, #33	; 0x21
 801b542:	47a0      	blx	r4
 801b544:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b546:	9801      	ldr	r0, [sp, #4]
 801b548:	f000 f9a3 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b54c:	4620      	mov	r0, r4
 801b54e:	b003      	add	sp, #12
 801b550:	bd30      	pop	{r4, r5, pc}
 801b552:	bf00      	nop
 801b554:	08000205 	.word	0x08000205

0801b558 <SE_APP_SetActiveFwState>:
  * @param peSE_Status Secure Engine Status.
  * @param p_FwState Active Firmware State structure containing the state that will be set.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_SetActiveFwState(SE_StatusTypeDef *peSE_Status, SE_FwStateTypeDef* p_FwState)
{
 801b558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b55a:	460d      	mov	r5, r1
 801b55c:	4604      	mov	r4, r0

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b55e:	a801      	add	r0, sp, #4
 801b560:	f000 f992 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_APP_SET_FW_STATE, peSE_Status, primask_bit, p_FwState);
 801b564:	4621      	mov	r1, r4
 801b566:	462b      	mov	r3, r5
 801b568:	9a01      	ldr	r2, [sp, #4]
 801b56a:	4c05      	ldr	r4, [pc, #20]	; (801b580 <SE_APP_SetActiveFwState+0x28>)
 801b56c:	2022      	movs	r0, #34	; 0x22
 801b56e:	47a0      	blx	r4
 801b570:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b572:	9801      	ldr	r0, [sp, #4]
 801b574:	f000 f98d 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b578:	4620      	mov	r0, r4
 801b57a:	b003      	add	sp, #12
 801b57c:	bd30      	pop	{r4, r5, pc}
 801b57e:	bf00      	nop
 801b580:	08000205 	.word	0x08000205

0801b584 <SE_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param uSystemCoreClock System clock value.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Init(SE_StatusTypeDef *peSE_Status, uint32_t uSystemCoreClock)
{
 801b584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b586:	4604      	mov	r4, r0
 801b588:	460d      	mov	r5, r1
#define __get_LR __return_address
#elif defined(__GNUC__)
static inline unsigned int __get_LR(void)
{
  register uint32_t result;
  asm volatile("MOV %0, LR\n" : "=r"(result));
 801b58a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 801b58c:	4b0c      	ldr	r3, [pc, #48]	; (801b5c0 <SE_Init+0x3c>)
 801b58e:	429a      	cmp	r2, r3
 801b590:	d314      	bcc.n	801b5bc <SE_Init+0x38>
 801b592:	4672      	mov	r2, lr
 801b594:	4b0b      	ldr	r3, [pc, #44]	; (801b5c4 <SE_Init+0x40>)
 801b596:	429a      	cmp	r2, r3
 801b598:	d810      	bhi.n	801b5bc <SE_Init+0x38>

  /* Check the pointers allocation */
  if (peSE_Status == NULL)
 801b59a:	b178      	cbz	r0, 801b5bc <SE_Init+0x38>

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801b59c:	a801      	add	r0, sp, #4
 801b59e:	f000 f973 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  e_ret_status = (*SE_CallGatePtr)(SE_INIT_ID, peSE_Status, primask_bit, uSystemCoreClock);
 801b5a2:	4621      	mov	r1, r4
 801b5a4:	462b      	mov	r3, r5
 801b5a6:	4c08      	ldr	r4, [pc, #32]	; (801b5c8 <SE_Init+0x44>)
 801b5a8:	9a01      	ldr	r2, [sp, #4]
 801b5aa:	2000      	movs	r0, #0
 801b5ac:	47a0      	blx	r4
 801b5ae:	4604      	mov	r4, r0

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801b5b0:	9801      	ldr	r0, [sp, #4]
 801b5b2:	f000 f96e 	bl	801b892 <SE_ExitSecureMode>


  return e_ret_status;
}
 801b5b6:	4620      	mov	r0, r4
 801b5b8:	b003      	add	sp, #12
 801b5ba:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 801b5bc:	4c03      	ldr	r4, [pc, #12]	; (801b5cc <SE_Init+0x48>)
 801b5be:	e7fa      	b.n	801b5b6 <SE_Init+0x32>
 801b5c0:	0801c300 	.word	0x0801c300
 801b5c4:	08035fff 	.word	0x08035fff
 801b5c8:	08000205 	.word	0x08000205
 801b5cc:	00018799 	.word	0x00018799

0801b5d0 <SE_Startup>:
  *        This function must be called only one time so an internal check is executed.
  * @param None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Startup(void)
{
 801b5d0:	b538      	push	{r3, r4, r5, lr}
 801b5d2:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  static uint8_t b_startup_already_done = 0U;
  static SE_ErrorStatus(*SE_StartupPtr)(void);            /*!< Secure Engine STARTUP  pointer function*/

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b5d4:	4b0a      	ldr	r3, [pc, #40]	; (801b600 <SE_Startup+0x30>)
 801b5d6:	429a      	cmp	r2, r3
 801b5d8:	d30e      	bcc.n	801b5f8 <SE_Startup+0x28>
 801b5da:	4672      	mov	r2, lr
 801b5dc:	4b09      	ldr	r3, [pc, #36]	; (801b604 <SE_Startup+0x34>)
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d80a      	bhi.n	801b5f8 <SE_Startup+0x28>

  /* Need to be sure to execute this initialization only one time! */
  if (b_startup_already_done == 0U)
 801b5e2:	4d09      	ldr	r5, [pc, #36]	; (801b608 <SE_Startup+0x38>)
 801b5e4:	4c09      	ldr	r4, [pc, #36]	; (801b60c <SE_Startup+0x3c>)
 801b5e6:	782b      	ldrb	r3, [r5, #0]
 801b5e8:	b943      	cbnz	r3, 801b5fc <SE_Startup+0x2c>
  {
    /*Secure Core Initialization */
    SE_StartupPtr = (SE_ErrorStatus(*)(void))((uint32_t) SE_STARTUP_REGION_ROM_START + 1U);
 801b5ea:	4b09      	ldr	r3, [pc, #36]	; (801b610 <SE_Startup+0x40>)
    e_ret_status = (*SE_StartupPtr)();
 801b5ec:	4798      	blx	r3
    if (e_ret_status == SE_SUCCESS)
 801b5ee:	42a0      	cmp	r0, r4
 801b5f0:	d101      	bne.n	801b5f6 <SE_Startup+0x26>
    {
      b_startup_already_done = 1U;
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	702b      	strb	r3, [r5, #0]
    /* This function has been already successfully called */
    e_ret_status = SE_SUCCESS;
  }

  return e_ret_status;
}
 801b5f6:	bd38      	pop	{r3, r4, r5, pc}
  __IS_SFU_RESERVED();
 801b5f8:	4806      	ldr	r0, [pc, #24]	; (801b614 <SE_Startup+0x44>)
 801b5fa:	e7fc      	b.n	801b5f6 <SE_Startup+0x26>
    e_ret_status = SE_SUCCESS;
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	e7fa      	b.n	801b5f6 <SE_Startup+0x26>
 801b600:	0801c300 	.word	0x0801c300
 801b604:	08035fff 	.word	0x08035fff
 801b608:	20031de8 	.word	0x20031de8
 801b60c:	0012310f 	.word	0x0012310f
 801b610:	08000501 	.word	0x08000501
 801b614:	00018799 	.word	0x00018799

0801b618 <SE_INFO_ReadBootInfo>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param  pxSE_BootInfo BootInfo area pointer that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_INFO_ReadBootInfo(SE_StatusTypeDef *peSE_Status, SE_BootInfoTypeDef *pxSE_BootInfo)
{
 801b618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b61a:	4604      	mov	r4, r0
 801b61c:	460d      	mov	r5, r1
 801b61e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b620:	4b0c      	ldr	r3, [pc, #48]	; (801b654 <SE_INFO_ReadBootInfo+0x3c>)
 801b622:	429a      	cmp	r2, r3
 801b624:	d313      	bcc.n	801b64e <SE_INFO_ReadBootInfo+0x36>
 801b626:	4672      	mov	r2, lr
 801b628:	4b0b      	ldr	r3, [pc, #44]	; (801b658 <SE_INFO_ReadBootInfo+0x40>)
 801b62a:	429a      	cmp	r2, r3
 801b62c:	d80f      	bhi.n	801b64e <SE_INFO_ReadBootInfo+0x36>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b62e:	a801      	add	r0, sp, #4
 801b630:	f000 f92a 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_BOOT_INFO_READ_ALL_ID, peSE_Status, primask_bit, pxSE_BootInfo);
 801b634:	4621      	mov	r1, r4
 801b636:	462b      	mov	r3, r5
 801b638:	4c08      	ldr	r4, [pc, #32]	; (801b65c <SE_INFO_ReadBootInfo+0x44>)
 801b63a:	9a01      	ldr	r2, [sp, #4]
 801b63c:	2080      	movs	r0, #128	; 0x80
 801b63e:	47a0      	blx	r4
 801b640:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b642:	9801      	ldr	r0, [sp, #4]
 801b644:	f000 f925 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b648:	4620      	mov	r0, r4
 801b64a:	b003      	add	sp, #12
 801b64c:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 801b64e:	4c04      	ldr	r4, [pc, #16]	; (801b660 <SE_INFO_ReadBootInfo+0x48>)
 801b650:	e7fa      	b.n	801b648 <SE_INFO_ReadBootInfo+0x30>
 801b652:	bf00      	nop
 801b654:	0801c300 	.word	0x0801c300
 801b658:	08035fff 	.word	0x08035fff
 801b65c:	08000205 	.word	0x08000205
 801b660:	00018799 	.word	0x00018799

0801b664 <SE_INFO_WriteBootInfo>:
  * @param  peSE_Status Secure Engine Status.
  * @param  pxSE_BootInfo pxSE_BootInfo BootInfo area pointer.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_INFO_WriteBootInfo(SE_StatusTypeDef *peSE_Status, SE_BootInfoTypeDef *pxSE_BootInfo)
{
 801b664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b666:	4604      	mov	r4, r0
 801b668:	460d      	mov	r5, r1
 801b66a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b66c:	4b0c      	ldr	r3, [pc, #48]	; (801b6a0 <SE_INFO_WriteBootInfo+0x3c>)
 801b66e:	429a      	cmp	r2, r3
 801b670:	d313      	bcc.n	801b69a <SE_INFO_WriteBootInfo+0x36>
 801b672:	4672      	mov	r2, lr
 801b674:	4b0b      	ldr	r3, [pc, #44]	; (801b6a4 <SE_INFO_WriteBootInfo+0x40>)
 801b676:	429a      	cmp	r2, r3
 801b678:	d80f      	bhi.n	801b69a <SE_INFO_WriteBootInfo+0x36>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b67a:	a801      	add	r0, sp, #4
 801b67c:	f000 f904 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_BOOT_INFO_WRITE_ALL_ID, peSE_Status, primask_bit, pxSE_BootInfo);
 801b680:	4621      	mov	r1, r4
 801b682:	462b      	mov	r3, r5
 801b684:	4c08      	ldr	r4, [pc, #32]	; (801b6a8 <SE_INFO_WriteBootInfo+0x44>)
 801b686:	9a01      	ldr	r2, [sp, #4]
 801b688:	2081      	movs	r0, #129	; 0x81
 801b68a:	47a0      	blx	r4
 801b68c:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b68e:	9801      	ldr	r0, [sp, #4]
 801b690:	f000 f8ff 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b694:	4620      	mov	r0, r4
 801b696:	b003      	add	sp, #12
 801b698:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 801b69a:	4c04      	ldr	r4, [pc, #16]	; (801b6ac <SE_INFO_WriteBootInfo+0x48>)
 801b69c:	e7fa      	b.n	801b694 <SE_INFO_WriteBootInfo+0x30>
 801b69e:	bf00      	nop
 801b6a0:	0801c300 	.word	0x0801c300
 801b6a4:	08035fff 	.word	0x08035fff
 801b6a8:	08000205 	.word	0x08000205
 801b6ac:	00018799 	.word	0x00018799

0801b6b0 <SE_LockRestrictServices>:
  * @brief call by SFU to lock part of Secure Engine services
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_LockRestrictServices(SE_StatusTypeDef *pSE_Status)
{
 801b6b0:	b513      	push	{r0, r1, r4, lr}
 801b6b2:	4604      	mov	r4, r0
 801b6b4:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 801b6b6:	4b0c      	ldr	r3, [pc, #48]	; (801b6e8 <SE_LockRestrictServices+0x38>)
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	d313      	bcc.n	801b6e4 <SE_LockRestrictServices+0x34>
 801b6bc:	4672      	mov	r2, lr
 801b6be:	4b0b      	ldr	r3, [pc, #44]	; (801b6ec <SE_LockRestrictServices+0x3c>)
 801b6c0:	429a      	cmp	r2, r3
 801b6c2:	d80f      	bhi.n	801b6e4 <SE_LockRestrictServices+0x34>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 801b6c4:	a801      	add	r0, sp, #4
 801b6c6:	f000 f8df 	bl	801b888 <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
 801b6ca:	4621      	mov	r1, r4
 801b6cc:	9a01      	ldr	r2, [sp, #4]
 801b6ce:	4b08      	ldr	r3, [pc, #32]	; (801b6f0 <SE_LockRestrictServices+0x40>)
 801b6d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b6d4:	4798      	blx	r3
 801b6d6:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 801b6d8:	9801      	ldr	r0, [sp, #4]
 801b6da:	f000 f8da 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b6de:	4620      	mov	r0, r4
 801b6e0:	b002      	add	sp, #8
 801b6e2:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 801b6e4:	4c03      	ldr	r4, [pc, #12]	; (801b6f4 <SE_LockRestrictServices+0x44>)
 801b6e6:	e7fa      	b.n	801b6de <SE_LockRestrictServices+0x2e>
 801b6e8:	0801c300 	.word	0x0801c300
 801b6ec:	08035fff 	.word	0x08035fff
 801b6f0:	08000205 	.word	0x08000205
 801b6f4:	00018799 	.word	0x00018799

0801b6f8 <SE_SFU_IMG_Read>:
  * @param  pSource: pointer to the flash area to read.
  * @param  Length: number of bytes to read from flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Read(SE_StatusTypeDef *pSE_Status, void *pDestination, const void *pSource, uint32_t Length)
{
 801b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6fa:	4604      	mov	r4, r0
 801b6fc:	b085      	sub	sp, #20
 801b6fe:	460d      	mov	r5, r1
 801b700:	4616      	mov	r6, r2
 801b702:	461f      	mov	r7, r3
 801b704:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b706:	4b0d      	ldr	r3, [pc, #52]	; (801b73c <SE_SFU_IMG_Read+0x44>)
 801b708:	429a      	cmp	r2, r3
 801b70a:	d315      	bcc.n	801b738 <SE_SFU_IMG_Read+0x40>
 801b70c:	4672      	mov	r2, lr
 801b70e:	4b0c      	ldr	r3, [pc, #48]	; (801b740 <SE_SFU_IMG_Read+0x48>)
 801b710:	429a      	cmp	r2, r3
 801b712:	d811      	bhi.n	801b738 <SE_SFU_IMG_Read+0x40>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b714:	a803      	add	r0, sp, #12
 801b716:	f000 f8b7 	bl	801b888 <SE_EnterSecureMode>

    /*Secure Engine Call*/
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_READ, pSE_Status, primask_bit, pDestination, pSource, Length);;
 801b71a:	4621      	mov	r1, r4
 801b71c:	e9cd 6700 	strd	r6, r7, [sp]
 801b720:	4c08      	ldr	r4, [pc, #32]	; (801b744 <SE_SFU_IMG_Read+0x4c>)
 801b722:	9a03      	ldr	r2, [sp, #12]
 801b724:	462b      	mov	r3, r5
 801b726:	2092      	movs	r0, #146	; 0x92
 801b728:	47a0      	blx	r4
 801b72a:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b72c:	9803      	ldr	r0, [sp, #12]
 801b72e:	f000 f8b0 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b732:	4620      	mov	r0, r4
 801b734:	b005      	add	sp, #20
 801b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 801b738:	4c03      	ldr	r4, [pc, #12]	; (801b748 <SE_SFU_IMG_Read+0x50>)
 801b73a:	e7fa      	b.n	801b732 <SE_SFU_IMG_Read+0x3a>
 801b73c:	0801c300 	.word	0x0801c300
 801b740:	08035fff 	.word	0x08035fff
 801b744:	08000205 	.word	0x08000205
 801b748:	00018799 	.word	0x00018799

0801b74c <SE_SFU_IMG_Write>:
  * @param  pSource: pointer to input buffer.
  * @param  Length: number of bytes to write to flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Write(SE_StatusTypeDef *pSE_Status, void *pDestination, const void *pSource, uint32_t Length)
{
 801b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b74e:	4604      	mov	r4, r0
 801b750:	b085      	sub	sp, #20
 801b752:	460d      	mov	r5, r1
 801b754:	4616      	mov	r6, r2
 801b756:	461f      	mov	r7, r3
 801b758:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b75a:	4b0d      	ldr	r3, [pc, #52]	; (801b790 <SE_SFU_IMG_Write+0x44>)
 801b75c:	429a      	cmp	r2, r3
 801b75e:	d315      	bcc.n	801b78c <SE_SFU_IMG_Write+0x40>
 801b760:	4672      	mov	r2, lr
 801b762:	4b0c      	ldr	r3, [pc, #48]	; (801b794 <SE_SFU_IMG_Write+0x48>)
 801b764:	429a      	cmp	r2, r3
 801b766:	d811      	bhi.n	801b78c <SE_SFU_IMG_Write+0x40>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 801b768:	a803      	add	r0, sp, #12
 801b76a:	f000 f88d 	bl	801b888 <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
 801b76e:	4621      	mov	r1, r4
 801b770:	e9cd 6700 	strd	r6, r7, [sp]
 801b774:	4c08      	ldr	r4, [pc, #32]	; (801b798 <SE_SFU_IMG_Write+0x4c>)
 801b776:	9a03      	ldr	r2, [sp, #12]
 801b778:	462b      	mov	r3, r5
 801b77a:	2093      	movs	r0, #147	; 0x93
 801b77c:	47a0      	blx	r4
 801b77e:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 801b780:	9803      	ldr	r0, [sp, #12]
 801b782:	f000 f886 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b786:	4620      	mov	r0, r4
 801b788:	b005      	add	sp, #20
 801b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __IS_SFU_RESERVED();
 801b78c:	4c03      	ldr	r4, [pc, #12]	; (801b79c <SE_SFU_IMG_Write+0x50>)
 801b78e:	e7fa      	b.n	801b786 <SE_SFU_IMG_Write+0x3a>
 801b790:	0801c300 	.word	0x0801c300
 801b794:	08035fff 	.word	0x08035fff
 801b798:	08000205 	.word	0x08000205
 801b79c:	00018799 	.word	0x00018799

0801b7a0 <SE_SFU_IMG_Erase>:
  * @param  pDestination: pointer to flash area to erase.
  * @param  Length: number of bytes to erase in flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Erase(SE_StatusTypeDef *pSE_Status, void *pDestination, uint32_t Length)
{
 801b7a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	460d      	mov	r5, r1
 801b7a6:	4616      	mov	r6, r2
 801b7a8:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b7aa:	4b0d      	ldr	r3, [pc, #52]	; (801b7e0 <SE_SFU_IMG_Erase+0x40>)
 801b7ac:	429a      	cmp	r2, r3
 801b7ae:	d314      	bcc.n	801b7da <SE_SFU_IMG_Erase+0x3a>
 801b7b0:	4672      	mov	r2, lr
 801b7b2:	4b0c      	ldr	r3, [pc, #48]	; (801b7e4 <SE_SFU_IMG_Erase+0x44>)
 801b7b4:	429a      	cmp	r2, r3
 801b7b6:	d810      	bhi.n	801b7da <SE_SFU_IMG_Erase+0x3a>
#endif /* SFU_ISOLATE_SE_WITH_MPU */

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    SE_EnterSecureMode(&primask_bit);
 801b7b8:	a803      	add	r0, sp, #12
 801b7ba:	f000 f865 	bl	801b888 <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
 801b7be:	4621      	mov	r1, r4
 801b7c0:	9600      	str	r6, [sp, #0]
 801b7c2:	4c09      	ldr	r4, [pc, #36]	; (801b7e8 <SE_SFU_IMG_Erase+0x48>)
 801b7c4:	9a03      	ldr	r2, [sp, #12]
 801b7c6:	462b      	mov	r3, r5
 801b7c8:	2094      	movs	r0, #148	; 0x94
 801b7ca:	47a0      	blx	r4
 801b7cc:	4604      	mov	r4, r0
    SE_ExitSecureMode(primask_bit);
 801b7ce:	9803      	ldr	r0, [sp, #12]
 801b7d0:	f000 f85f 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	b004      	add	sp, #16
 801b7d8:	bd70      	pop	{r4, r5, r6, pc}
  __IS_SFU_RESERVED();
 801b7da:	4c04      	ldr	r4, [pc, #16]	; (801b7ec <SE_SFU_IMG_Erase+0x4c>)
 801b7dc:	e7fa      	b.n	801b7d4 <SE_SFU_IMG_Erase+0x34>
 801b7de:	bf00      	nop
 801b7e0:	0801c300 	.word	0x0801c300
 801b7e4:	08035fff 	.word	0x08035fff
 801b7e8:	08000205 	.word	0x08000205
 801b7ec:	00018799 	.word	0x00018799

0801b7f0 <SE_SFU_IMG_SetActiveFwState>:
  * @param peSE_Status Secure Engine Status.
  * @param p_FwState Active Firmware State structure containing state that should be set.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_SFU_IMG_SetActiveFwState(SE_StatusTypeDef *peSE_Status, SE_FwStateTypeDef* p_FwState)
{
 801b7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7f2:	4604      	mov	r4, r0
 801b7f4:	460d      	mov	r5, r1
 801b7f6:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */
  
  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b7f8:	4b0c      	ldr	r3, [pc, #48]	; (801b82c <SE_SFU_IMG_SetActiveFwState+0x3c>)
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	d313      	bcc.n	801b826 <SE_SFU_IMG_SetActiveFwState+0x36>
 801b7fe:	4672      	mov	r2, lr
 801b800:	4b0b      	ldr	r3, [pc, #44]	; (801b830 <SE_SFU_IMG_SetActiveFwState+0x40>)
 801b802:	429a      	cmp	r2, r3
 801b804:	d80f      	bhi.n	801b826 <SE_SFU_IMG_SetActiveFwState+0x36>
    
    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b806:	a801      	add	r0, sp, #4
 801b808:	f000 f83e 	bl	801b888 <SE_EnterSecureMode>

    e_ret_status = (*SE_CallGatePtr)(SE_IMG_SET_FW_STATE, peSE_Status, primask_bit, p_FwState);
 801b80c:	4621      	mov	r1, r4
 801b80e:	462b      	mov	r3, r5
 801b810:	4c08      	ldr	r4, [pc, #32]	; (801b834 <SE_SFU_IMG_SetActiveFwState+0x44>)
 801b812:	9a01      	ldr	r2, [sp, #4]
 801b814:	2096      	movs	r0, #150	; 0x96
 801b816:	47a0      	blx	r4
 801b818:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b81a:	9801      	ldr	r0, [sp, #4]
 801b81c:	f000 f839 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
}
 801b820:	4620      	mov	r0, r4
 801b822:	b003      	add	sp, #12
 801b824:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 801b826:	4c04      	ldr	r4, [pc, #16]	; (801b838 <SE_SFU_IMG_SetActiveFwState+0x48>)
 801b828:	e7fa      	b.n	801b820 <SE_SFU_IMG_SetActiveFwState+0x30>
 801b82a:	bf00      	nop
 801b82c:	0801c300 	.word	0x0801c300
 801b830:	08035fff 	.word	0x08035fff
 801b834:	08000205 	.word	0x08000205
 801b838:	00018799 	.word	0x00018799

0801b83c <SE_SFU_IMG_GetActiveFwState>:
  * @param peSE_Status Secure Engine Status.
  * @param p_FwState Active Firmware State structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_SFU_IMG_GetActiveFwState(SE_StatusTypeDef *peSE_Status, SE_FwStateTypeDef* p_FwState)
{
 801b83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b83e:	4604      	mov	r4, r0
 801b840:	460d      	mov	r5, r1
 801b842:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */
  
  /* Check if the call is coming from SFU code*/
  __IS_SFU_RESERVED();
 801b844:	4b0c      	ldr	r3, [pc, #48]	; (801b878 <SE_SFU_IMG_GetActiveFwState+0x3c>)
 801b846:	429a      	cmp	r2, r3
 801b848:	d313      	bcc.n	801b872 <SE_SFU_IMG_GetActiveFwState+0x36>
 801b84a:	4672      	mov	r2, lr
 801b84c:	4b0b      	ldr	r3, [pc, #44]	; (801b87c <SE_SFU_IMG_GetActiveFwState+0x40>)
 801b84e:	429a      	cmp	r2, r3
 801b850:	d80f      	bhi.n	801b872 <SE_SFU_IMG_GetActiveFwState+0x36>

    /* Set the CallGate function pointer */
    SET_CALLGATE();

    /*Enter Secure Mode*/
    SE_EnterSecureMode(&primask_bit);
 801b852:	a801      	add	r0, sp, #4
 801b854:	f000 f818 	bl	801b888 <SE_EnterSecureMode>

    e_ret_status = (*SE_CallGatePtr)(SE_IMG_GET_FW_STATE, peSE_Status, primask_bit, p_FwState);
 801b858:	4621      	mov	r1, r4
 801b85a:	462b      	mov	r3, r5
 801b85c:	4c08      	ldr	r4, [pc, #32]	; (801b880 <SE_SFU_IMG_GetActiveFwState+0x44>)
 801b85e:	9a01      	ldr	r2, [sp, #4]
 801b860:	2095      	movs	r0, #149	; 0x95
 801b862:	47a0      	blx	r4
 801b864:	4604      	mov	r4, r0

    /*Exit Secure Mode*/
    SE_ExitSecureMode(primask_bit);
 801b866:	9801      	ldr	r0, [sp, #4]
 801b868:	f000 f813 	bl	801b892 <SE_ExitSecureMode>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
}
 801b86c:	4620      	mov	r0, r4
 801b86e:	b003      	add	sp, #12
 801b870:	bd30      	pop	{r4, r5, pc}
  __IS_SFU_RESERVED();
 801b872:	4c04      	ldr	r4, [pc, #16]	; (801b884 <SE_SFU_IMG_GetActiveFwState+0x48>)
 801b874:	e7fa      	b.n	801b86c <SE_SFU_IMG_GetActiveFwState+0x30>
 801b876:	bf00      	nop
 801b878:	0801c300 	.word	0x0801c300
 801b87c:	08035fff 	.word	0x08035fff
 801b880:	08000205 	.word	0x08000205
 801b884:	00018799 	.word	0x00018799

0801b888 <SE_EnterSecureMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b888:	f3ef 8310 	mrs	r3, PRIMASK
  */
__weak void SE_EnterSecureMode(uint32_t * primask_bit)
{
#if !defined(CKS_ENABLED)
  /* Disable interrupts */
  *primask_bit = __get_PRIMASK();
 801b88c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801b88e:	b672      	cpsid	i
  __disable_irq();
#endif /* !CKS_ENABLED */
}
 801b890:	4770      	bx	lr

0801b892 <SE_ExitSecureMode>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b892:	f380 8810 	msr	PRIMASK, r0
{
#if !defined(CKS_ENABLED)
  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
#endif /* !CKS_ENABLED */
}
 801b896:	4770      	bx	lr

0801b898 <SE_KMS_GetFunctionList>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList)
{
  CK_RV ck_rv_ret_status = CKR_OK;
  CK_FUNCTION_LIST_PTR pFunctionList = *ppFunctionList;
 801b898:	6803      	ldr	r3, [r0, #0]

  pFunctionList->version.major = 2;
 801b89a:	f642 0202 	movw	r2, #10242	; 0x2802
 801b89e:	801a      	strh	r2, [r3, #0]
  pFunctionList->version.minor = 40;

  pFunctionList->C_Initialize = SE_KMS_Initialize;
 801b8a0:	4a3e      	ldr	r2, [pc, #248]	; (801b99c <SE_KMS_GetFunctionList+0x104>)
 801b8a2:	605a      	str	r2, [r3, #4]
  pFunctionList->C_Finalize = SE_KMS_Finalize;
 801b8a4:	4a3e      	ldr	r2, [pc, #248]	; (801b9a0 <SE_KMS_GetFunctionList+0x108>)
 801b8a6:	609a      	str	r2, [r3, #8]
  pFunctionList->C_GetInfo = SE_KMS_GetInfo;
 801b8a8:	4a3e      	ldr	r2, [pc, #248]	; (801b9a4 <SE_KMS_GetFunctionList+0x10c>)
 801b8aa:	60da      	str	r2, [r3, #12]
  pFunctionList->C_GetFunctionList = SE_KMS_GetFunctionList;
 801b8ac:	4a3e      	ldr	r2, [pc, #248]	; (801b9a8 <SE_KMS_GetFunctionList+0x110>)
 801b8ae:	611a      	str	r2, [r3, #16]
  pFunctionList->C_GetSlotList = SE_KMS_GetSlotList;
 801b8b0:	4a3e      	ldr	r2, [pc, #248]	; (801b9ac <SE_KMS_GetFunctionList+0x114>)
 801b8b2:	615a      	str	r2, [r3, #20]
  pFunctionList->C_GetSlotInfo = NULL;
  pFunctionList->C_GetTokenInfo = SE_KMS_GetTokenInfo;
 801b8b4:	4a3e      	ldr	r2, [pc, #248]	; (801b9b0 <SE_KMS_GetFunctionList+0x118>)
  pFunctionList->C_GetSlotInfo = NULL;
 801b8b6:	2000      	movs	r0, #0
  pFunctionList->C_GetMechanismList = NULL;
 801b8b8:	e9c3 2007 	strd	r2, r0, [r3, #28]
  pFunctionList->C_GetMechanismInfo = NULL;
  pFunctionList->C_InitToken = NULL;
  pFunctionList->C_InitPIN = NULL;
  pFunctionList->C_SetPIN = NULL;
  pFunctionList->C_OpenSession = SE_KMS_OpenSession;
 801b8bc:	4a3d      	ldr	r2, [pc, #244]	; (801b9b4 <SE_KMS_GetFunctionList+0x11c>)
 801b8be:	635a      	str	r2, [r3, #52]	; 0x34
  pFunctionList->C_CloseSession = SE_KMS_CloseSession;
 801b8c0:	4a3d      	ldr	r2, [pc, #244]	; (801b9b8 <SE_KMS_GetFunctionList+0x120>)
  pFunctionList->C_GetSlotInfo = NULL;
 801b8c2:	6198      	str	r0, [r3, #24]
  pFunctionList->C_CloseAllSessions = NULL;
 801b8c4:	e9c3 200e 	strd	r2, r0, [r3, #56]	; 0x38
  pFunctionList->C_GetSessionInfo = NULL;
  pFunctionList->C_GetOperationState = NULL;
  pFunctionList->C_SetOperationState = NULL;
  pFunctionList->C_Login = NULL;
  pFunctionList->C_Logout = NULL;
  pFunctionList->C_CreateObject = SE_KMS_CreateObject;
 801b8c8:	4a3c      	ldr	r2, [pc, #240]	; (801b9bc <SE_KMS_GetFunctionList+0x124>)
  pFunctionList->C_Logout = NULL;
 801b8ca:	6518      	str	r0, [r3, #80]	; 0x50
  pFunctionList->C_CopyObject = NULL;
 801b8cc:	e9c3 2015 	strd	r2, r0, [r3, #84]	; 0x54
  pFunctionList->C_DestroyObject = SE_KMS_DestroyObject;
 801b8d0:	4a3b      	ldr	r2, [pc, #236]	; (801b9c0 <SE_KMS_GetFunctionList+0x128>)
  pFunctionList->C_GetObjectSize = NULL;
 801b8d2:	e9c3 2017 	strd	r2, r0, [r3, #92]	; 0x5c
  pFunctionList->C_GetAttributeValue = SE_KMS_GetAttributeValue;
 801b8d6:	4a3b      	ldr	r2, [pc, #236]	; (801b9c4 <SE_KMS_GetFunctionList+0x12c>)
 801b8d8:	665a      	str	r2, [r3, #100]	; 0x64
  pFunctionList->C_SetAttributeValue = SE_KMS_SetAttributeValue;
 801b8da:	4a3b      	ldr	r2, [pc, #236]	; (801b9c8 <SE_KMS_GetFunctionList+0x130>)
 801b8dc:	669a      	str	r2, [r3, #104]	; 0x68
  pFunctionList->C_FindObjectsInit = SE_KMS_FindObjectsInit ;
 801b8de:	4a3b      	ldr	r2, [pc, #236]	; (801b9cc <SE_KMS_GetFunctionList+0x134>)
 801b8e0:	66da      	str	r2, [r3, #108]	; 0x6c
  pFunctionList->C_FindObjects = SE_KMS_FindObjects ;
 801b8e2:	4a3b      	ldr	r2, [pc, #236]	; (801b9d0 <SE_KMS_GetFunctionList+0x138>)
 801b8e4:	671a      	str	r2, [r3, #112]	; 0x70
  pFunctionList->C_FindObjectsFinal = SE_KMS_FindObjectsFinal ;
 801b8e6:	4a3b      	ldr	r2, [pc, #236]	; (801b9d4 <SE_KMS_GetFunctionList+0x13c>)
 801b8e8:	675a      	str	r2, [r3, #116]	; 0x74
  pFunctionList->C_EncryptInit = SE_KMS_EncryptInit;
 801b8ea:	4a3b      	ldr	r2, [pc, #236]	; (801b9d8 <SE_KMS_GetFunctionList+0x140>)
 801b8ec:	679a      	str	r2, [r3, #120]	; 0x78
  pFunctionList->C_Encrypt = SE_KMS_Encrypt;
 801b8ee:	4a3b      	ldr	r2, [pc, #236]	; (801b9dc <SE_KMS_GetFunctionList+0x144>)
  pFunctionList->C_InitToken = NULL;
 801b8f0:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  pFunctionList->C_SetPIN = NULL;
 801b8f4:	e9c3 000b 	strd	r0, r0, [r3, #44]	; 0x2c
  pFunctionList->C_GetOperationState = NULL;
 801b8f8:	e9c3 0010 	strd	r0, r0, [r3, #64]	; 0x40
  pFunctionList->C_Login = NULL;
 801b8fc:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
  pFunctionList->C_Encrypt = SE_KMS_Encrypt;
 801b900:	67da      	str	r2, [r3, #124]	; 0x7c
  pFunctionList->C_EncryptUpdate = SE_KMS_EncryptUpdate;
 801b902:	4a37      	ldr	r2, [pc, #220]	; (801b9e0 <SE_KMS_GetFunctionList+0x148>)
 801b904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  pFunctionList->C_EncryptFinal = SE_KMS_EncryptFinal;
 801b908:	4a36      	ldr	r2, [pc, #216]	; (801b9e4 <SE_KMS_GetFunctionList+0x14c>)
 801b90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  pFunctionList->C_DecryptInit = SE_KMS_DecryptInit;
 801b90e:	4a36      	ldr	r2, [pc, #216]	; (801b9e8 <SE_KMS_GetFunctionList+0x150>)
 801b910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pFunctionList->C_Decrypt = SE_KMS_Decrypt;
 801b914:	4a35      	ldr	r2, [pc, #212]	; (801b9ec <SE_KMS_GetFunctionList+0x154>)
 801b916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  pFunctionList->C_DecryptUpdate = SE_KMS_DecryptUpdate;
 801b91a:	4a35      	ldr	r2, [pc, #212]	; (801b9f0 <SE_KMS_GetFunctionList+0x158>)
 801b91c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  pFunctionList->C_DecryptFinal = SE_KMS_DecryptFinal;
 801b920:	4a34      	ldr	r2, [pc, #208]	; (801b9f4 <SE_KMS_GetFunctionList+0x15c>)
 801b922:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  pFunctionList->C_DigestInit = SE_KMS_DigestInit;
 801b926:	4a34      	ldr	r2, [pc, #208]	; (801b9f8 <SE_KMS_GetFunctionList+0x160>)
 801b928:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  pFunctionList->C_Digest = SE_KMS_Digest;
 801b92c:	4a33      	ldr	r2, [pc, #204]	; (801b9fc <SE_KMS_GetFunctionList+0x164>)
 801b92e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  pFunctionList->C_DigestUpdate = SE_KMS_DigestUpdate;
 801b932:	4a33      	ldr	r2, [pc, #204]	; (801ba00 <SE_KMS_GetFunctionList+0x168>)
 801b934:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  pFunctionList->C_DigestKey = SE_KMS_DigestKey;
 801b938:	4a32      	ldr	r2, [pc, #200]	; (801ba04 <SE_KMS_GetFunctionList+0x16c>)
 801b93a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  pFunctionList->C_DigestFinal = SE_KMS_DigestFinal;
 801b93e:	4a32      	ldr	r2, [pc, #200]	; (801ba08 <SE_KMS_GetFunctionList+0x170>)
 801b940:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  pFunctionList->C_SignInit = SE_KMS_SignInit;
 801b944:	4a31      	ldr	r2, [pc, #196]	; (801ba0c <SE_KMS_GetFunctionList+0x174>)
 801b946:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  pFunctionList->C_Sign = SE_KMS_Sign;
 801b94a:	4a31      	ldr	r2, [pc, #196]	; (801ba10 <SE_KMS_GetFunctionList+0x178>)
  pFunctionList->C_SignUpdate = NULL;
  pFunctionList->C_SignFinal = NULL;
  pFunctionList->C_SignRecoverInit = NULL;
  pFunctionList->C_SignRecover = NULL;
 801b94c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  pFunctionList->C_SignUpdate = NULL;
 801b950:	e9c3 202c 	strd	r2, r0, [r3, #176]	; 0xb0
  pFunctionList->C_VerifyInit = SE_KMS_VerifyInit;
 801b954:	4a2f      	ldr	r2, [pc, #188]	; (801ba14 <SE_KMS_GetFunctionList+0x17c>)
 801b956:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  pFunctionList->C_Verify = SE_KMS_Verify;
 801b95a:	4a2f      	ldr	r2, [pc, #188]	; (801ba18 <SE_KMS_GetFunctionList+0x180>)
  pFunctionList->C_SignEncryptUpdate = NULL;
  pFunctionList->C_DecryptVerifyUpdate = NULL;
  pFunctionList->C_GenerateKey = NULL;
  pFunctionList->C_GenerateKeyPair = SE_KMS_GenerateKeyPair;
  pFunctionList->C_WrapKey = NULL;
  pFunctionList->C_UnwrapKey = NULL;
 801b95c:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
  pFunctionList->C_VerifyUpdate = NULL;
 801b960:	e9c3 2032 	strd	r2, r0, [r3, #200]	; 0xc8
  pFunctionList->C_GenerateKeyPair = SE_KMS_GenerateKeyPair;
 801b964:	4a2d      	ldr	r2, [pc, #180]	; (801ba1c <SE_KMS_GetFunctionList+0x184>)
  pFunctionList->C_WrapKey = NULL;
 801b966:	e9c3 203c 	strd	r2, r0, [r3, #240]	; 0xf0
  pFunctionList->C_DeriveKey = SE_KMS_DeriveKey;
 801b96a:	4a2d      	ldr	r2, [pc, #180]	; (801ba20 <SE_KMS_GetFunctionList+0x188>)
 801b96c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  pFunctionList->C_SeedRandom = NULL;
  pFunctionList->C_GenerateRandom = SE_KMS_GenerateRandom;
 801b970:	4a2c      	ldr	r2, [pc, #176]	; (801ba24 <SE_KMS_GetFunctionList+0x18c>)
  pFunctionList->C_SignRecoverInit = NULL;
 801b972:	e9c3 002e 	strd	r0, r0, [r3, #184]	; 0xb8
  pFunctionList->C_VerifyRecoverInit = NULL;
 801b976:	e9c3 0034 	strd	r0, r0, [r3, #208]	; 0xd0
  pFunctionList->C_DigestEncryptUpdate = NULL;
 801b97a:	e9c3 0036 	strd	r0, r0, [r3, #216]	; 0xd8
  pFunctionList->C_SignEncryptUpdate = NULL;
 801b97e:	e9c3 0038 	strd	r0, r0, [r3, #224]	; 0xe0
  pFunctionList->C_GenerateKey = NULL;
 801b982:	e9c3 003a 	strd	r0, r0, [r3, #232]	; 0xe8
  pFunctionList->C_SeedRandom = NULL;
 801b986:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  pFunctionList->C_GenerateRandom = SE_KMS_GenerateRandom;
 801b98a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  pFunctionList->C_GetFunctionStatus = NULL;
 801b98e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  pFunctionList->C_CancelFunction = NULL;
 801b992:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  pFunctionList->C_WaitForSlotEvent = NULL;
 801b996:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110

  return ck_rv_ret_status;
}
 801b99a:	4770      	bx	lr
 801b99c:	0801ba29 	.word	0x0801ba29
 801b9a0:	0801ba55 	.word	0x0801ba55
 801b9a4:	0801ba85 	.word	0x0801ba85
 801b9a8:	0801b899 	.word	0x0801b899
 801b9ac:	0801bab5 	.word	0x0801bab5
 801b9b0:	0801baed 	.word	0x0801baed
 801b9b4:	0801bb21 	.word	0x0801bb21
 801b9b8:	0801bb61 	.word	0x0801bb61
 801b9bc:	0801bb91 	.word	0x0801bb91
 801b9c0:	0801bbcd 	.word	0x0801bbcd
 801b9c4:	0801bc01 	.word	0x0801bc01
 801b9c8:	0801bc3d 	.word	0x0801bc3d
 801b9cc:	0801bc79 	.word	0x0801bc79
 801b9d0:	0801bcb1 	.word	0x0801bcb1
 801b9d4:	0801bced 	.word	0x0801bced
 801b9d8:	0801bd1d 	.word	0x0801bd1d
 801b9dc:	0801bd55 	.word	0x0801bd55
 801b9e0:	0801bd95 	.word	0x0801bd95
 801b9e4:	0801bdd5 	.word	0x0801bdd5
 801b9e8:	0801be0d 	.word	0x0801be0d
 801b9ec:	0801be45 	.word	0x0801be45
 801b9f0:	0801be85 	.word	0x0801be85
 801b9f4:	0801bec5 	.word	0x0801bec5
 801b9f8:	0801befd 	.word	0x0801befd
 801b9fc:	0801bf31 	.word	0x0801bf31
 801ba00:	0801bf71 	.word	0x0801bf71
 801ba04:	0801bfa9 	.word	0x0801bfa9
 801ba08:	0801bfdd 	.word	0x0801bfdd
 801ba0c:	0801c015 	.word	0x0801c015
 801ba10:	0801c04d 	.word	0x0801c04d
 801ba14:	0801c08d 	.word	0x0801c08d
 801ba18:	0801c0c5 	.word	0x0801c0c5
 801ba1c:	0801c149 	.word	0x0801c149
 801ba20:	0801c105 	.word	0x0801c105
 801ba24:	0801c195 	.word	0x0801c195

0801ba28 <SE_KMS_Initialize>:
{
 801ba28:	b513      	push	{r0, r1, r4, lr}
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba2a:	2300      	movs	r3, #0
{
 801ba2c:	4604      	mov	r4, r0
  SE_EnterSecureMode(&primask_bit);
 801ba2e:	a801      	add	r0, sp, #4
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba30:	9300      	str	r3, [sp, #0]
  SE_EnterSecureMode(&primask_bit);
 801ba32:	f7ff ff29 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_INITIALIZE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, pInitArgs);
 801ba36:	4623      	mov	r3, r4
 801ba38:	9a01      	ldr	r2, [sp, #4]
 801ba3a:	4c05      	ldr	r4, [pc, #20]	; (801ba50 <SE_KMS_Initialize+0x28>)
 801ba3c:	4669      	mov	r1, sp
 801ba3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801ba42:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801ba44:	9801      	ldr	r0, [sp, #4]
 801ba46:	f7ff ff24 	bl	801b892 <SE_ExitSecureMode>
}
 801ba4a:	9800      	ldr	r0, [sp, #0]
 801ba4c:	b002      	add	sp, #8
 801ba4e:	bd10      	pop	{r4, pc}
 801ba50:	08000205 	.word	0x08000205

0801ba54 <SE_KMS_Finalize>:
{
 801ba54:	b513      	push	{r0, r1, r4, lr}
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba56:	2300      	movs	r3, #0
{
 801ba58:	4604      	mov	r4, r0
  SE_EnterSecureMode(&primask_bit);
 801ba5a:	a801      	add	r0, sp, #4
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba5c:	9300      	str	r3, [sp, #0]
  SE_EnterSecureMode(&primask_bit);
 801ba5e:	f7ff ff13 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_FINALIZE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, pReserved);
 801ba62:	4623      	mov	r3, r4
 801ba64:	9a01      	ldr	r2, [sp, #4]
 801ba66:	4c05      	ldr	r4, [pc, #20]	; (801ba7c <SE_KMS_Finalize+0x28>)
 801ba68:	4805      	ldr	r0, [pc, #20]	; (801ba80 <SE_KMS_Finalize+0x2c>)
 801ba6a:	4669      	mov	r1, sp
 801ba6c:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801ba6e:	9801      	ldr	r0, [sp, #4]
 801ba70:	f7ff ff0f 	bl	801b892 <SE_ExitSecureMode>
}
 801ba74:	9800      	ldr	r0, [sp, #0]
 801ba76:	b002      	add	sp, #8
 801ba78:	bd10      	pop	{r4, pc}
 801ba7a:	bf00      	nop
 801ba7c:	08000205 	.word	0x08000205
 801ba80:	10000001 	.word	0x10000001

0801ba84 <SE_KMS_GetInfo>:
{
 801ba84:	b513      	push	{r0, r1, r4, lr}
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba86:	2300      	movs	r3, #0
{
 801ba88:	4604      	mov	r4, r0
  SE_EnterSecureMode(&primask_bit);
 801ba8a:	a801      	add	r0, sp, #4
  CK_RV ck_rv_ret_status = CKR_OK;
 801ba8c:	9300      	str	r3, [sp, #0]
  SE_EnterSecureMode(&primask_bit);
 801ba8e:	f7ff fefb 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_INFO_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, pInfo);
 801ba92:	4623      	mov	r3, r4
 801ba94:	9a01      	ldr	r2, [sp, #4]
 801ba96:	4c05      	ldr	r4, [pc, #20]	; (801baac <SE_KMS_GetInfo+0x28>)
 801ba98:	4805      	ldr	r0, [pc, #20]	; (801bab0 <SE_KMS_GetInfo+0x2c>)
 801ba9a:	4669      	mov	r1, sp
 801ba9c:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801ba9e:	9801      	ldr	r0, [sp, #4]
 801baa0:	f7ff fef7 	bl	801b892 <SE_ExitSecureMode>
}
 801baa4:	9800      	ldr	r0, [sp, #0]
 801baa6:	b002      	add	sp, #8
 801baa8:	bd10      	pop	{r4, pc}
 801baaa:	bf00      	nop
 801baac:	08000205 	.word	0x08000205
 801bab0:	10000002 	.word	0x10000002

0801bab4 <SE_KMS_GetSlotList>:
  * @param  pulCount
  * @retval Operation status
  */
__root CK_RV SE_KMS_GetSlotList(CK_BBOOL tokenPresent, CK_SLOT_ID_PTR pSlotList,
                                CK_ULONG_PTR pulCount)
{
 801bab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bab6:	460d      	mov	r5, r1
 801bab8:	4616      	mov	r6, r2
 801baba:	4604      	mov	r4, r0

  CK_RV ck_rv_ret_status = CKR_OK;
 801babc:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801babe:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bac0:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bac2:	f7ff fee1 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_SLOT_LIST_FCT_ID,
 801bac6:	4623      	mov	r3, r4
 801bac8:	9a03      	ldr	r2, [sp, #12]
 801baca:	4c06      	ldr	r4, [pc, #24]	; (801bae4 <SE_KMS_GetSlotList+0x30>)
 801bacc:	4806      	ldr	r0, [pc, #24]	; (801bae8 <SE_KMS_GetSlotList+0x34>)
 801bace:	a902      	add	r1, sp, #8
 801bad0:	e9cd 5600 	strd	r5, r6, [sp]
 801bad4:	47a0      	blx	r4
                    (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, tokenPresent, pSlotList, pulCount);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bad6:	9803      	ldr	r0, [sp, #12]
 801bad8:	f7ff fedb 	bl	801b892 <SE_ExitSecureMode>

  return ck_rv_ret_status;
}
 801badc:	9802      	ldr	r0, [sp, #8]
 801bade:	b004      	add	sp, #16
 801bae0:	bd70      	pop	{r4, r5, r6, pc}
 801bae2:	bf00      	nop
 801bae4:	08000205 	.word	0x08000205
 801bae8:	10000003 	.word	0x10000003

0801baec <SE_KMS_GetTokenInfo>:
  * @param  slotID
  * @param  pInfo
  * @retval Operation status
  */
__root CK_RV SE_KMS_GetTokenInfo(CK_SLOT_ID slotID, CK_TOKEN_INFO_PTR pInfo)
{
 801baec:	b530      	push	{r4, r5, lr}
 801baee:	b085      	sub	sp, #20
 801baf0:	460d      	mov	r5, r1
 801baf2:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801baf4:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801baf6:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801baf8:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bafa:	f7ff fec5 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_TOKEN_INFO_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, slotID,
 801bafe:	4623      	mov	r3, r4
 801bb00:	9a03      	ldr	r2, [sp, #12]
 801bb02:	9500      	str	r5, [sp, #0]
 801bb04:	a902      	add	r1, sp, #8
 801bb06:	4c04      	ldr	r4, [pc, #16]	; (801bb18 <SE_KMS_GetTokenInfo+0x2c>)
 801bb08:	4804      	ldr	r0, [pc, #16]	; (801bb1c <SE_KMS_GetTokenInfo+0x30>)
 801bb0a:	47a0      	blx	r4
                    pInfo);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bb0c:	9803      	ldr	r0, [sp, #12]
 801bb0e:	f7ff fec0 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bb12:	9802      	ldr	r0, [sp, #8]
 801bb14:	b005      	add	sp, #20
 801bb16:	bd30      	pop	{r4, r5, pc}
 801bb18:	08000205 	.word	0x08000205
 801bb1c:	10000005 	.word	0x10000005

0801bb20 <SE_KMS_OpenSession>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags,
                                CK_VOID_PTR pApplication, CK_NOTIFY Notify,
                                CK_SESSION_HANDLE_PTR phSession)
{
 801bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb22:	b087      	sub	sp, #28
 801bb24:	4604      	mov	r4, r0
 801bb26:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bb28:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bb2a:	2300      	movs	r3, #0
{
 801bb2c:	460d      	mov	r5, r1
 801bb2e:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801bb30:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bb32:	f7ff fea9 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_OPEN_SESSION_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bb36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb38:	9a05      	ldr	r2, [sp, #20]
 801bb3a:	4807      	ldr	r0, [pc, #28]	; (801bb58 <SE_KMS_OpenSession+0x38>)
 801bb3c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801bb40:	a904      	add	r1, sp, #16
 801bb42:	4623      	mov	r3, r4
 801bb44:	e9cd 5600 	strd	r5, r6, [sp]
 801bb48:	4c04      	ldr	r4, [pc, #16]	; (801bb5c <SE_KMS_OpenSession+0x3c>)
 801bb4a:	47a0      	blx	r4
                    slotID, flags, pApplication, Notify, phSession);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bb4c:	9805      	ldr	r0, [sp, #20]
 801bb4e:	f7ff fea0 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bb52:	9804      	ldr	r0, [sp, #16]
 801bb54:	b007      	add	sp, #28
 801bb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb58:	10000008 	.word	0x10000008
 801bb5c:	08000205 	.word	0x08000205

0801bb60 <SE_KMS_CloseSession>:
  *         for more details on the APIs, parameters and possible returned values
  * @param  hSession
  * @retval Operation status
  */
__root CK_RV SE_KMS_CloseSession(CK_SESSION_HANDLE hSession)
{
 801bb60:	b513      	push	{r0, r1, r4, lr}
  CK_RV ck_rv_ret_status = CKR_OK;
 801bb62:	2300      	movs	r3, #0
{
 801bb64:	4604      	mov	r4, r0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bb66:	a801      	add	r0, sp, #4
  CK_RV ck_rv_ret_status = CKR_OK;
 801bb68:	9300      	str	r3, [sp, #0]
  SE_EnterSecureMode(&primask_bit);
 801bb6a:	f7ff fe8d 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_CLOSE_SESSION_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, hSession);
 801bb6e:	4623      	mov	r3, r4
 801bb70:	9a01      	ldr	r2, [sp, #4]
 801bb72:	4c05      	ldr	r4, [pc, #20]	; (801bb88 <SE_KMS_CloseSession+0x28>)
 801bb74:	4805      	ldr	r0, [pc, #20]	; (801bb8c <SE_KMS_CloseSession+0x2c>)
 801bb76:	4669      	mov	r1, sp
 801bb78:	47a0      	blx	r4

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bb7a:	9801      	ldr	r0, [sp, #4]
 801bb7c:	f7ff fe89 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bb80:	9800      	ldr	r0, [sp, #0]
 801bb82:	b002      	add	sp, #8
 801bb84:	bd10      	pop	{r4, pc}
 801bb86:	bf00      	nop
 801bb88:	08000205 	.word	0x08000205
 801bb8c:	10000009 	.word	0x10000009

0801bb90 <SE_KMS_CreateObject>:
  * @param  phObject
  * @retval Operation status
  */
__root CK_RV SE_KMS_CreateObject(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,
                                 CK_ULONG ulCount, CK_OBJECT_HANDLE_PTR phObject)
{
 801bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb92:	b087      	sub	sp, #28
 801bb94:	460d      	mov	r5, r1
 801bb96:	4616      	mov	r6, r2
 801bb98:	4604      	mov	r4, r0
 801bb9a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bb9c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bb9e:	2300      	movs	r3, #0
 801bba0:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bba2:	f7ff fe71 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_CREATE_OBJECT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bba6:	4623      	mov	r3, r4
 801bba8:	9a05      	ldr	r2, [sp, #20]
 801bbaa:	9500      	str	r5, [sp, #0]
 801bbac:	a904      	add	r1, sp, #16
 801bbae:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801bbb2:	4c04      	ldr	r4, [pc, #16]	; (801bbc4 <SE_KMS_CreateObject+0x34>)
 801bbb4:	4804      	ldr	r0, [pc, #16]	; (801bbc8 <SE_KMS_CreateObject+0x38>)
 801bbb6:	47a0      	blx	r4
                    hSession, pTemplate, ulCount, phObject);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bbb8:	9805      	ldr	r0, [sp, #20]
 801bbba:	f7ff fe6a 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bbbe:	9804      	ldr	r0, [sp, #16]
 801bbc0:	b007      	add	sp, #28
 801bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbc4:	08000205 	.word	0x08000205
 801bbc8:	1000000a 	.word	0x1000000a

0801bbcc <SE_KMS_DestroyObject>:
  * @param  hObject
  * @retval Operation status
  */
__root CK_RV SE_KMS_DestroyObject(CK_SESSION_HANDLE hSession,
                                  CK_OBJECT_HANDLE hObject)
{
 801bbcc:	b530      	push	{r4, r5, lr}
 801bbce:	b085      	sub	sp, #20
 801bbd0:	460d      	mov	r5, r1
 801bbd2:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bbd4:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bbd6:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bbd8:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bbda:	f7ff fe55 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DESTROY_OBJECT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bbde:	4623      	mov	r3, r4
 801bbe0:	9a03      	ldr	r2, [sp, #12]
 801bbe2:	9500      	str	r5, [sp, #0]
 801bbe4:	a902      	add	r1, sp, #8
 801bbe6:	4c04      	ldr	r4, [pc, #16]	; (801bbf8 <SE_KMS_DestroyObject+0x2c>)
 801bbe8:	4804      	ldr	r0, [pc, #16]	; (801bbfc <SE_KMS_DestroyObject+0x30>)
 801bbea:	47a0      	blx	r4
                    hSession, hObject);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bbec:	9803      	ldr	r0, [sp, #12]
 801bbee:	f7ff fe50 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bbf2:	9802      	ldr	r0, [sp, #8]
 801bbf4:	b005      	add	sp, #20
 801bbf6:	bd30      	pop	{r4, r5, pc}
 801bbf8:	08000205 	.word	0x08000205
 801bbfc:	1000000b 	.word	0x1000000b

0801bc00 <SE_KMS_GetAttributeValue>:
  * @param  ulCount
  * @retval Operation status
  */
__root CK_RV SE_KMS_GetAttributeValue(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject,
                                      CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)
{
 801bc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc02:	b087      	sub	sp, #28
 801bc04:	460d      	mov	r5, r1
 801bc06:	4616      	mov	r6, r2
 801bc08:	4604      	mov	r4, r0
 801bc0a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bc0c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bc0e:	2300      	movs	r3, #0
 801bc10:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bc12:	f7ff fe39 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_ATTRIBUTE_VALUE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bc16:	4623      	mov	r3, r4
 801bc18:	9a05      	ldr	r2, [sp, #20]
 801bc1a:	9500      	str	r5, [sp, #0]
 801bc1c:	a904      	add	r1, sp, #16
 801bc1e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801bc22:	4c04      	ldr	r4, [pc, #16]	; (801bc34 <SE_KMS_GetAttributeValue+0x34>)
 801bc24:	4804      	ldr	r0, [pc, #16]	; (801bc38 <SE_KMS_GetAttributeValue+0x38>)
 801bc26:	47a0      	blx	r4
                    hSession, hObject, pTemplate, ulCount);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bc28:	9805      	ldr	r0, [sp, #20]
 801bc2a:	f7ff fe32 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bc2e:	9804      	ldr	r0, [sp, #16]
 801bc30:	b007      	add	sp, #28
 801bc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc34:	08000205 	.word	0x08000205
 801bc38:	10000023 	.word	0x10000023

0801bc3c <SE_KMS_SetAttributeValue>:
  * @param  ulCount
  * @retval Operation status
  */
__root CK_RV SE_KMS_SetAttributeValue(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject,
                                      CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)
{
 801bc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc3e:	b087      	sub	sp, #28
 801bc40:	460d      	mov	r5, r1
 801bc42:	4616      	mov	r6, r2
 801bc44:	4604      	mov	r4, r0
 801bc46:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bc48:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bc4e:	f7ff fe1b 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_SET_ATTRIBUTE_VALUE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bc52:	4623      	mov	r3, r4
 801bc54:	9a05      	ldr	r2, [sp, #20]
 801bc56:	9500      	str	r5, [sp, #0]
 801bc58:	a904      	add	r1, sp, #16
 801bc5a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801bc5e:	4c04      	ldr	r4, [pc, #16]	; (801bc70 <SE_KMS_SetAttributeValue+0x34>)
 801bc60:	4804      	ldr	r0, [pc, #16]	; (801bc74 <SE_KMS_SetAttributeValue+0x38>)
 801bc62:	47a0      	blx	r4
                    hSession, hObject, pTemplate, ulCount);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bc64:	9805      	ldr	r0, [sp, #20]
 801bc66:	f7ff fe14 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bc6a:	9804      	ldr	r0, [sp, #16]
 801bc6c:	b007      	add	sp, #28
 801bc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc70:	08000205 	.word	0x08000205
 801bc74:	10000024 	.word	0x10000024

0801bc78 <SE_KMS_FindObjectsInit>:
  * @param  ulCount
  * @retval Operation status
  */
__root CK_RV SE_KMS_FindObjectsInit(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,
                                    CK_ULONG ulCount)
{
 801bc78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bc7a:	460d      	mov	r5, r1
 801bc7c:	4616      	mov	r6, r2
 801bc7e:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bc80:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bc82:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bc84:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bc86:	f7ff fdff 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_FIND_OBJECTS_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bc8a:	4623      	mov	r3, r4
 801bc8c:	9a03      	ldr	r2, [sp, #12]
 801bc8e:	4c06      	ldr	r4, [pc, #24]	; (801bca8 <SE_KMS_FindObjectsInit+0x30>)
 801bc90:	4806      	ldr	r0, [pc, #24]	; (801bcac <SE_KMS_FindObjectsInit+0x34>)
 801bc92:	a902      	add	r1, sp, #8
 801bc94:	e9cd 5600 	strd	r5, r6, [sp]
 801bc98:	47a0      	blx	r4
                    hSession, pTemplate, ulCount);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bc9a:	9803      	ldr	r0, [sp, #12]
 801bc9c:	f7ff fdf9 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bca0:	9802      	ldr	r0, [sp, #8]
 801bca2:	b004      	add	sp, #16
 801bca4:	bd70      	pop	{r4, r5, r6, pc}
 801bca6:	bf00      	nop
 801bca8:	08000205 	.word	0x08000205
 801bcac:	1000000c 	.word	0x1000000c

0801bcb0 <SE_KMS_FindObjects>:
  * @param  pulObjectCount
  * @retval Operation status
  */
__root CK_RV SE_KMS_FindObjects(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE_PTR phObject,
                                CK_ULONG ulMaxObjectCount,  CK_ULONG_PTR pulObjectCount)
{
 801bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcb2:	b087      	sub	sp, #28
 801bcb4:	460d      	mov	r5, r1
 801bcb6:	4616      	mov	r6, r2
 801bcb8:	4604      	mov	r4, r0
 801bcba:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bcbc:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bcc2:	f7ff fde1 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_FIND_OBJECTS_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bcc6:	4623      	mov	r3, r4
 801bcc8:	9a05      	ldr	r2, [sp, #20]
 801bcca:	9500      	str	r5, [sp, #0]
 801bccc:	a904      	add	r1, sp, #16
 801bcce:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801bcd2:	4c04      	ldr	r4, [pc, #16]	; (801bce4 <SE_KMS_FindObjects+0x34>)
 801bcd4:	4804      	ldr	r0, [pc, #16]	; (801bce8 <SE_KMS_FindObjects+0x38>)
 801bcd6:	47a0      	blx	r4
                    hSession, phObject, ulMaxObjectCount, pulObjectCount);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bcd8:	9805      	ldr	r0, [sp, #20]
 801bcda:	f7ff fdda 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bcde:	9804      	ldr	r0, [sp, #16]
 801bce0:	b007      	add	sp, #28
 801bce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bce4:	08000205 	.word	0x08000205
 801bce8:	1000000d 	.word	0x1000000d

0801bcec <SE_KMS_FindObjectsFinal>:
  *         for more details on the APIs, parameters and possible returned values
  * @param  hSession
  * @retval Operation status
  */
__root CK_RV SE_KMS_FindObjectsFinal(CK_SESSION_HANDLE hSession)
{
 801bcec:	b513      	push	{r0, r1, r4, lr}
  CK_RV ck_rv_ret_status = CKR_OK;
 801bcee:	2300      	movs	r3, #0
{
 801bcf0:	4604      	mov	r4, r0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bcf2:	a801      	add	r0, sp, #4
  CK_RV ck_rv_ret_status = CKR_OK;
 801bcf4:	9300      	str	r3, [sp, #0]
  SE_EnterSecureMode(&primask_bit);
 801bcf6:	f7ff fdc7 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_FIND_OBJECTS_FINAL_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bcfa:	4623      	mov	r3, r4
 801bcfc:	9a01      	ldr	r2, [sp, #4]
 801bcfe:	4c05      	ldr	r4, [pc, #20]	; (801bd14 <SE_KMS_FindObjectsFinal+0x28>)
 801bd00:	4805      	ldr	r0, [pc, #20]	; (801bd18 <SE_KMS_FindObjectsFinal+0x2c>)
 801bd02:	4669      	mov	r1, sp
 801bd04:	47a0      	blx	r4
                    hSession);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bd06:	9801      	ldr	r0, [sp, #4]
 801bd08:	f7ff fdc3 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bd0c:	9800      	ldr	r0, [sp, #0]
 801bd0e:	b002      	add	sp, #8
 801bd10:	bd10      	pop	{r4, pc}
 801bd12:	bf00      	nop
 801bd14:	08000205 	.word	0x08000205
 801bd18:	1000000e 	.word	0x1000000e

0801bd1c <SE_KMS_EncryptInit>:
  * @param  hKey
  * @retval Operation status
  */
__root CK_RV SE_KMS_EncryptInit(CK_SESSION_HANDLE hSession,
                                CK_MECHANISM_PTR  pMechanism, CK_OBJECT_HANDLE  hKey)
{
 801bd1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bd1e:	460d      	mov	r5, r1
 801bd20:	4616      	mov	r6, r2
 801bd22:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bd24:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bd26:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bd28:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bd2a:	f7ff fdad 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_ENCRYPT_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bd2e:	4623      	mov	r3, r4
 801bd30:	9a03      	ldr	r2, [sp, #12]
 801bd32:	4c06      	ldr	r4, [pc, #24]	; (801bd4c <SE_KMS_EncryptInit+0x30>)
 801bd34:	4806      	ldr	r0, [pc, #24]	; (801bd50 <SE_KMS_EncryptInit+0x34>)
 801bd36:	a902      	add	r1, sp, #8
 801bd38:	e9cd 5600 	strd	r5, r6, [sp]
 801bd3c:	47a0      	blx	r4
                    hSession, pMechanism, hKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bd3e:	9803      	ldr	r0, [sp, #12]
 801bd40:	f7ff fda7 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bd44:	9802      	ldr	r0, [sp, #8]
 801bd46:	b004      	add	sp, #16
 801bd48:	bd70      	pop	{r4, r5, r6, pc}
 801bd4a:	bf00      	nop
 801bd4c:	08000205 	.word	0x08000205
 801bd50:	1000000f 	.word	0x1000000f

0801bd54 <SE_KMS_Encrypt>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_Encrypt(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                            CK_ULONG  ulDataLen, CK_BYTE_PTR  pEncryptedData,
                            CK_ULONG_PTR      pulEncryptedDataLen)
{
 801bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd56:	b087      	sub	sp, #28
 801bd58:	4604      	mov	r4, r0
 801bd5a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bd5c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bd5e:	2300      	movs	r3, #0
{
 801bd60:	460d      	mov	r5, r1
 801bd62:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801bd64:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bd66:	f7ff fd8f 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_ENCRYPT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd6c:	9a05      	ldr	r2, [sp, #20]
 801bd6e:	4807      	ldr	r0, [pc, #28]	; (801bd8c <SE_KMS_Encrypt+0x38>)
 801bd70:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801bd74:	a904      	add	r1, sp, #16
 801bd76:	4623      	mov	r3, r4
 801bd78:	e9cd 5600 	strd	r5, r6, [sp]
 801bd7c:	4c04      	ldr	r4, [pc, #16]	; (801bd90 <SE_KMS_Encrypt+0x3c>)
 801bd7e:	47a0      	blx	r4
                    hSession, pData, ulDataLen, pEncryptedData,
                    pulEncryptedDataLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bd80:	9805      	ldr	r0, [sp, #20]
 801bd82:	f7ff fd86 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bd86:	9804      	ldr	r0, [sp, #16]
 801bd88:	b007      	add	sp, #28
 801bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd8c:	10000010 	.word	0x10000010
 801bd90:	08000205 	.word	0x08000205

0801bd94 <SE_KMS_EncryptUpdate>:

__root CK_RV SE_KMS_EncryptUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart,
                                  CK_ULONG          ulPartLen,
                                  CK_BYTE_PTR       pEncryptedPart,
                                  CK_ULONG_PTR      pulEncryptedPartLen)
{
 801bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd96:	b087      	sub	sp, #28
 801bd98:	4604      	mov	r4, r0
 801bd9a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bd9c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bd9e:	2300      	movs	r3, #0
{
 801bda0:	460d      	mov	r5, r1
 801bda2:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801bda4:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bda6:	f7ff fd6f 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_ENCRYPT_UPDATE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bdaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdac:	9a05      	ldr	r2, [sp, #20]
 801bdae:	4807      	ldr	r0, [pc, #28]	; (801bdcc <SE_KMS_EncryptUpdate+0x38>)
 801bdb0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801bdb4:	a904      	add	r1, sp, #16
 801bdb6:	4623      	mov	r3, r4
 801bdb8:	e9cd 5600 	strd	r5, r6, [sp]
 801bdbc:	4c04      	ldr	r4, [pc, #16]	; (801bdd0 <SE_KMS_EncryptUpdate+0x3c>)
 801bdbe:	47a0      	blx	r4
                    hSession, pPart, ulPartLen, pEncryptedPart,
                    pulEncryptedPartLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bdc0:	9805      	ldr	r0, [sp, #20]
 801bdc2:	f7ff fd66 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bdc6:	9804      	ldr	r0, [sp, #16]
 801bdc8:	b007      	add	sp, #28
 801bdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdcc:	10000011 	.word	0x10000011
 801bdd0:	08000205 	.word	0x08000205

0801bdd4 <SE_KMS_EncryptFinal>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_EncryptFinal(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR       pLastEncryptedPart,
                                 CK_ULONG_PTR      pulLastEncryptedPartLen)
{
 801bdd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bdd6:	460d      	mov	r5, r1
 801bdd8:	4616      	mov	r6, r2
 801bdda:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bddc:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bdde:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bde0:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bde2:	f7ff fd51 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_ENCRYPT_FINAL_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bde6:	4623      	mov	r3, r4
 801bde8:	9a03      	ldr	r2, [sp, #12]
 801bdea:	4c06      	ldr	r4, [pc, #24]	; (801be04 <SE_KMS_EncryptFinal+0x30>)
 801bdec:	4806      	ldr	r0, [pc, #24]	; (801be08 <SE_KMS_EncryptFinal+0x34>)
 801bdee:	a902      	add	r1, sp, #8
 801bdf0:	e9cd 5600 	strd	r5, r6, [sp]
 801bdf4:	47a0      	blx	r4
                    hSession, pLastEncryptedPart, pulLastEncryptedPartLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bdf6:	9803      	ldr	r0, [sp, #12]
 801bdf8:	f7ff fd4b 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bdfc:	9802      	ldr	r0, [sp, #8]
 801bdfe:	b004      	add	sp, #16
 801be00:	bd70      	pop	{r4, r5, r6, pc}
 801be02:	bf00      	nop
 801be04:	08000205 	.word	0x08000205
 801be08:	10000012 	.word	0x10000012

0801be0c <SE_KMS_DecryptInit>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_DecryptInit(CK_SESSION_HANDLE hSession,
                                CK_MECHANISM_PTR  pMechanism,
                                CK_OBJECT_HANDLE  hKey)
{
 801be0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801be0e:	460d      	mov	r5, r1
 801be10:	4616      	mov	r6, r2
 801be12:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801be14:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801be16:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801be18:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801be1a:	f7ff fd35 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DECRYPT_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801be1e:	4623      	mov	r3, r4
 801be20:	9a03      	ldr	r2, [sp, #12]
 801be22:	4c06      	ldr	r4, [pc, #24]	; (801be3c <SE_KMS_DecryptInit+0x30>)
 801be24:	4806      	ldr	r0, [pc, #24]	; (801be40 <SE_KMS_DecryptInit+0x34>)
 801be26:	a902      	add	r1, sp, #8
 801be28:	e9cd 5600 	strd	r5, r6, [sp]
 801be2c:	47a0      	blx	r4
                    hSession, pMechanism, hKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801be2e:	9803      	ldr	r0, [sp, #12]
 801be30:	f7ff fd2f 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801be34:	9802      	ldr	r0, [sp, #8]
 801be36:	b004      	add	sp, #16
 801be38:	bd70      	pop	{r4, r5, r6, pc}
 801be3a:	bf00      	nop
 801be3c:	08000205 	.word	0x08000205
 801be40:	10000013 	.word	0x10000013

0801be44 <SE_KMS_Decrypt>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_Decrypt(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pEncryptedData,
                            CK_ULONG  ulEncryptedDataLen, CK_BYTE_PTR  pData,
                            CK_ULONG_PTR pulDataLen)
{
 801be44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be46:	b087      	sub	sp, #28
 801be48:	4604      	mov	r4, r0
 801be4a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801be4c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801be4e:	2300      	movs	r3, #0
{
 801be50:	460d      	mov	r5, r1
 801be52:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801be54:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801be56:	f7ff fd17 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DECRYPT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801be5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be5c:	9a05      	ldr	r2, [sp, #20]
 801be5e:	4807      	ldr	r0, [pc, #28]	; (801be7c <SE_KMS_Decrypt+0x38>)
 801be60:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801be64:	a904      	add	r1, sp, #16
 801be66:	4623      	mov	r3, r4
 801be68:	e9cd 5600 	strd	r5, r6, [sp]
 801be6c:	4c04      	ldr	r4, [pc, #16]	; (801be80 <SE_KMS_Decrypt+0x3c>)
 801be6e:	47a0      	blx	r4
                    hSession, pEncryptedData, ulEncryptedDataLen,
                    pData, pulDataLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801be70:	9805      	ldr	r0, [sp, #20]
 801be72:	f7ff fd0e 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801be76:	9804      	ldr	r0, [sp, #16]
 801be78:	b007      	add	sp, #28
 801be7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be7c:	10000014 	.word	0x10000014
 801be80:	08000205 	.word	0x08000205

0801be84 <SE_KMS_DecryptUpdate>:
__root CK_RV SE_KMS_DecryptUpdate(CK_SESSION_HANDLE hSession,
                                  CK_BYTE_PTR       pEncryptedPart,
                                  CK_ULONG          ulEncryptedPartLen,
                                  CK_BYTE_PTR       pPart,
                                  CK_ULONG_PTR      pulPartLen)
{
 801be84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be86:	b087      	sub	sp, #28
 801be88:	4604      	mov	r4, r0
 801be8a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801be8c:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801be8e:	2300      	movs	r3, #0
{
 801be90:	460d      	mov	r5, r1
 801be92:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801be94:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801be96:	f7ff fcf7 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DECRYPT_UPDATE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801be9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be9c:	9a05      	ldr	r2, [sp, #20]
 801be9e:	4807      	ldr	r0, [pc, #28]	; (801bebc <SE_KMS_DecryptUpdate+0x38>)
 801bea0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801bea4:	a904      	add	r1, sp, #16
 801bea6:	4623      	mov	r3, r4
 801bea8:	e9cd 5600 	strd	r5, r6, [sp]
 801beac:	4c04      	ldr	r4, [pc, #16]	; (801bec0 <SE_KMS_DecryptUpdate+0x3c>)
 801beae:	47a0      	blx	r4
                    hSession, pEncryptedPart, ulEncryptedPartLen,
                    pPart, pulPartLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801beb0:	9805      	ldr	r0, [sp, #20]
 801beb2:	f7ff fcee 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801beb6:	9804      	ldr	r0, [sp, #16]
 801beb8:	b007      	add	sp, #28
 801beba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bebc:	10000015 	.word	0x10000015
 801bec0:	08000205 	.word	0x08000205

0801bec4 <SE_KMS_DecryptFinal>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_DecryptFinal(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR       pLastPart,
                                 CK_ULONG_PTR      pulLastPartLen)
{
 801bec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bec6:	460d      	mov	r5, r1
 801bec8:	4616      	mov	r6, r2
 801beca:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801becc:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bece:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bed0:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bed2:	f7ff fcd9 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DECRYPT_FINAL_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bed6:	4623      	mov	r3, r4
 801bed8:	9a03      	ldr	r2, [sp, #12]
 801beda:	4c06      	ldr	r4, [pc, #24]	; (801bef4 <SE_KMS_DecryptFinal+0x30>)
 801bedc:	4806      	ldr	r0, [pc, #24]	; (801bef8 <SE_KMS_DecryptFinal+0x34>)
 801bede:	a902      	add	r1, sp, #8
 801bee0:	e9cd 5600 	strd	r5, r6, [sp]
 801bee4:	47a0      	blx	r4
                    hSession, pLastPart, pulLastPartLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bee6:	9803      	ldr	r0, [sp, #12]
 801bee8:	f7ff fcd3 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801beec:	9802      	ldr	r0, [sp, #8]
 801beee:	b004      	add	sp, #16
 801bef0:	bd70      	pop	{r4, r5, r6, pc}
 801bef2:	bf00      	nop
 801bef4:	08000205 	.word	0x08000205
 801bef8:	10000016 	.word	0x10000016

0801befc <SE_KMS_DigestInit>:
  * @param  hSession
  * @param  pMechanism
  * @retval Operation status
  */
__root CK_RV SE_KMS_DigestInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism)
{
 801befc:	b530      	push	{r4, r5, lr}
 801befe:	b085      	sub	sp, #20
 801bf00:	460d      	mov	r5, r1
 801bf02:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf04:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bf06:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf08:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bf0a:	f7ff fcbd 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DIGEST_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bf0e:	4623      	mov	r3, r4
 801bf10:	9a03      	ldr	r2, [sp, #12]
 801bf12:	9500      	str	r5, [sp, #0]
 801bf14:	a902      	add	r1, sp, #8
 801bf16:	4c04      	ldr	r4, [pc, #16]	; (801bf28 <SE_KMS_DigestInit+0x2c>)
 801bf18:	4804      	ldr	r0, [pc, #16]	; (801bf2c <SE_KMS_DigestInit+0x30>)
 801bf1a:	47a0      	blx	r4
                    hSession, pMechanism);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bf1c:	9803      	ldr	r0, [sp, #12]
 801bf1e:	f7ff fcb8 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bf22:	9802      	ldr	r0, [sp, #8]
 801bf24:	b005      	add	sp, #20
 801bf26:	bd30      	pop	{r4, r5, pc}
 801bf28:	08000205 	.word	0x08000205
 801bf2c:	10000017 	.word	0x10000017

0801bf30 <SE_KMS_Digest>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_Digest(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                           CK_ULONG ulDataLen, CK_BYTE_PTR pDigest,
                           CK_ULONG_PTR pulDigestLen)
{
 801bf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf32:	b087      	sub	sp, #28
 801bf34:	4604      	mov	r4, r0
 801bf36:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bf38:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf3a:	2300      	movs	r3, #0
{
 801bf3c:	460d      	mov	r5, r1
 801bf3e:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf40:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801bf42:	f7ff fca1 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DIGEST_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bf46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf48:	9a05      	ldr	r2, [sp, #20]
 801bf4a:	4807      	ldr	r0, [pc, #28]	; (801bf68 <SE_KMS_Digest+0x38>)
 801bf4c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801bf50:	a904      	add	r1, sp, #16
 801bf52:	4623      	mov	r3, r4
 801bf54:	e9cd 5600 	strd	r5, r6, [sp]
 801bf58:	4c04      	ldr	r4, [pc, #16]	; (801bf6c <SE_KMS_Digest+0x3c>)
 801bf5a:	47a0      	blx	r4
                    hSession, pData, ulDataLen, pDigest, pulDigestLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bf5c:	9805      	ldr	r0, [sp, #20]
 801bf5e:	f7ff fc98 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bf62:	9804      	ldr	r0, [sp, #16]
 801bf64:	b007      	add	sp, #28
 801bf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf68:	10000018 	.word	0x10000018
 801bf6c:	08000205 	.word	0x08000205

0801bf70 <SE_KMS_DigestUpdate>:
  * @param  pPart
  * @param  ulPartLen
  * @retval Operation status
  */
__root CK_RV SE_KMS_DigestUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart, CK_ULONG ulPartLen)
{
 801bf70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bf72:	460d      	mov	r5, r1
 801bf74:	4616      	mov	r6, r2
 801bf76:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf78:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bf7a:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bf7c:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bf7e:	f7ff fc83 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DIGEST_UPDATE_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bf82:	4623      	mov	r3, r4
 801bf84:	9a03      	ldr	r2, [sp, #12]
 801bf86:	4c06      	ldr	r4, [pc, #24]	; (801bfa0 <SE_KMS_DigestUpdate+0x30>)
 801bf88:	4806      	ldr	r0, [pc, #24]	; (801bfa4 <SE_KMS_DigestUpdate+0x34>)
 801bf8a:	a902      	add	r1, sp, #8
 801bf8c:	e9cd 5600 	strd	r5, r6, [sp]
 801bf90:	47a0      	blx	r4
                    hSession, pPart, ulPartLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bf92:	9803      	ldr	r0, [sp, #12]
 801bf94:	f7ff fc7d 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bf98:	9802      	ldr	r0, [sp, #8]
 801bf9a:	b004      	add	sp, #16
 801bf9c:	bd70      	pop	{r4, r5, r6, pc}
 801bf9e:	bf00      	nop
 801bfa0:	08000205 	.word	0x08000205
 801bfa4:	10000019 	.word	0x10000019

0801bfa8 <SE_KMS_DigestKey>:
  * @param  hSession
  * @param  hKey
  * @retval Operation status
  */
__root CK_RV SE_KMS_DigestKey(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hKey)
{
 801bfa8:	b530      	push	{r4, r5, lr}
 801bfaa:	b085      	sub	sp, #20
 801bfac:	460d      	mov	r5, r1
 801bfae:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bfb0:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bfb2:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bfb4:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bfb6:	f7ff fc67 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DIGEST_KEY_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bfba:	4623      	mov	r3, r4
 801bfbc:	9a03      	ldr	r2, [sp, #12]
 801bfbe:	9500      	str	r5, [sp, #0]
 801bfc0:	a902      	add	r1, sp, #8
 801bfc2:	4c04      	ldr	r4, [pc, #16]	; (801bfd4 <SE_KMS_DigestKey+0x2c>)
 801bfc4:	4804      	ldr	r0, [pc, #16]	; (801bfd8 <SE_KMS_DigestKey+0x30>)
 801bfc6:	47a0      	blx	r4
                    hSession, hKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bfc8:	9803      	ldr	r0, [sp, #12]
 801bfca:	f7ff fc62 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801bfce:	9802      	ldr	r0, [sp, #8]
 801bfd0:	b005      	add	sp, #20
 801bfd2:	bd30      	pop	{r4, r5, pc}
 801bfd4:	08000205 	.word	0x08000205
 801bfd8:	1000001a 	.word	0x1000001a

0801bfdc <SE_KMS_DigestFinal>:
  * @param  pulDigestLen
  * @retval Operation status
  */
__root CK_RV SE_KMS_DigestFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pDigest,
                                CK_ULONG_PTR pulDigestLen)
{
 801bfdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bfde:	460d      	mov	r5, r1
 801bfe0:	4616      	mov	r6, r2
 801bfe2:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801bfe4:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801bfe6:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801bfe8:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801bfea:	f7ff fc4d 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DIGEST_FINAL_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801bfee:	4623      	mov	r3, r4
 801bff0:	9a03      	ldr	r2, [sp, #12]
 801bff2:	4c06      	ldr	r4, [pc, #24]	; (801c00c <SE_KMS_DigestFinal+0x30>)
 801bff4:	4806      	ldr	r0, [pc, #24]	; (801c010 <SE_KMS_DigestFinal+0x34>)
 801bff6:	a902      	add	r1, sp, #8
 801bff8:	e9cd 5600 	strd	r5, r6, [sp]
 801bffc:	47a0      	blx	r4
                    hSession, pDigest, pulDigestLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801bffe:	9803      	ldr	r0, [sp, #12]
 801c000:	f7ff fc47 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c004:	9802      	ldr	r0, [sp, #8]
 801c006:	b004      	add	sp, #16
 801c008:	bd70      	pop	{r4, r5, r6, pc}
 801c00a:	bf00      	nop
 801c00c:	08000205 	.word	0x08000205
 801c010:	1000001b 	.word	0x1000001b

0801c014 <SE_KMS_SignInit>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_SignInit(CK_SESSION_HANDLE hSession,
                             CK_MECHANISM_PTR  pMechanism,
                             CK_OBJECT_HANDLE  hKey)
{
 801c014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c016:	460d      	mov	r5, r1
 801c018:	4616      	mov	r6, r2
 801c01a:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c01c:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c01e:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c020:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c022:	f7ff fc31 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_SIGN_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c026:	4623      	mov	r3, r4
 801c028:	9a03      	ldr	r2, [sp, #12]
 801c02a:	4c06      	ldr	r4, [pc, #24]	; (801c044 <SE_KMS_SignInit+0x30>)
 801c02c:	4806      	ldr	r0, [pc, #24]	; (801c048 <SE_KMS_SignInit+0x34>)
 801c02e:	a902      	add	r1, sp, #8
 801c030:	e9cd 5600 	strd	r5, r6, [sp]
 801c034:	47a0      	blx	r4
                    hSession, pMechanism, hKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c036:	9803      	ldr	r0, [sp, #12]
 801c038:	f7ff fc2b 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c03c:	9802      	ldr	r0, [sp, #8]
 801c03e:	b004      	add	sp, #16
 801c040:	bd70      	pop	{r4, r5, r6, pc}
 801c042:	bf00      	nop
 801c044:	08000205 	.word	0x08000205
 801c048:	1000001c 	.word	0x1000001c

0801c04c <SE_KMS_Sign>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_Sign(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                         CK_ULONG  ulDataLen, CK_BYTE_PTR  pSignature,
                         CK_ULONG_PTR pulSignatureLen)
{
 801c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c04e:	b087      	sub	sp, #28
 801c050:	4604      	mov	r4, r0
 801c052:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c054:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801c056:	2300      	movs	r3, #0
{
 801c058:	460d      	mov	r5, r1
 801c05a:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801c05c:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801c05e:	f7ff fc13 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_SIGN_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c064:	9a05      	ldr	r2, [sp, #20]
 801c066:	4807      	ldr	r0, [pc, #28]	; (801c084 <SE_KMS_Sign+0x38>)
 801c068:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c06c:	a904      	add	r1, sp, #16
 801c06e:	4623      	mov	r3, r4
 801c070:	e9cd 5600 	strd	r5, r6, [sp]
 801c074:	4c04      	ldr	r4, [pc, #16]	; (801c088 <SE_KMS_Sign+0x3c>)
 801c076:	47a0      	blx	r4
                    hSession, pData, ulDataLen,
                    pSignature, pulSignatureLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c078:	9805      	ldr	r0, [sp, #20]
 801c07a:	f7ff fc0a 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c07e:	9804      	ldr	r0, [sp, #16]
 801c080:	b007      	add	sp, #28
 801c082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c084:	1000001d 	.word	0x1000001d
 801c088:	08000205 	.word	0x08000205

0801c08c <SE_KMS_VerifyInit>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_VerifyInit(CK_SESSION_HANDLE hSession,
                               CK_MECHANISM_PTR  pMechanism,
                               CK_OBJECT_HANDLE  hKey)
{
 801c08c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c08e:	460d      	mov	r5, r1
 801c090:	4616      	mov	r6, r2
 801c092:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c094:	2300      	movs	r3, #0
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */
  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c096:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c098:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c09a:	f7ff fbf5 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_VERIFY_INIT_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c09e:	4623      	mov	r3, r4
 801c0a0:	9a03      	ldr	r2, [sp, #12]
 801c0a2:	4c06      	ldr	r4, [pc, #24]	; (801c0bc <SE_KMS_VerifyInit+0x30>)
 801c0a4:	4806      	ldr	r0, [pc, #24]	; (801c0c0 <SE_KMS_VerifyInit+0x34>)
 801c0a6:	a902      	add	r1, sp, #8
 801c0a8:	e9cd 5600 	strd	r5, r6, [sp]
 801c0ac:	47a0      	blx	r4
                    hSession, pMechanism, hKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c0ae:	9803      	ldr	r0, [sp, #12]
 801c0b0:	f7ff fbef 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c0b4:	9802      	ldr	r0, [sp, #8]
 801c0b6:	b004      	add	sp, #16
 801c0b8:	bd70      	pop	{r4, r5, r6, pc}
 801c0ba:	bf00      	nop
 801c0bc:	08000205 	.word	0x08000205
 801c0c0:	1000001e 	.word	0x1000001e

0801c0c4 <SE_KMS_Verify>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_Verify(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                           CK_ULONG  ulDataLen, CK_BYTE_PTR  pSignature,
                           CK_ULONG  ulSignatureLen)
{
 801c0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0c6:	b087      	sub	sp, #28
 801c0c8:	4604      	mov	r4, r0
 801c0ca:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c0cc:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801c0ce:	2300      	movs	r3, #0
{
 801c0d0:	460d      	mov	r5, r1
 801c0d2:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801c0d4:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801c0d6:	f7ff fbd7 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_VERIFY_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0dc:	9a05      	ldr	r2, [sp, #20]
 801c0de:	4807      	ldr	r0, [pc, #28]	; (801c0fc <SE_KMS_Verify+0x38>)
 801c0e0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c0e4:	a904      	add	r1, sp, #16
 801c0e6:	4623      	mov	r3, r4
 801c0e8:	e9cd 5600 	strd	r5, r6, [sp]
 801c0ec:	4c04      	ldr	r4, [pc, #16]	; (801c100 <SE_KMS_Verify+0x3c>)
 801c0ee:	47a0      	blx	r4
                    hSession, pData, ulDataLen,
                    pSignature, ulSignatureLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c0f0:	9805      	ldr	r0, [sp, #20]
 801c0f2:	f7ff fbce 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c0f6:	9804      	ldr	r0, [sp, #16]
 801c0f8:	b007      	add	sp, #28
 801c0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0fc:	1000001f 	.word	0x1000001f
 801c100:	08000205 	.word	0x08000205

0801c104 <SE_KMS_DeriveKey>:
  * @retval Operation status
  */
__root CK_RV SE_KMS_DeriveKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                              CK_OBJECT_HANDLE hBaseKey, CK_ATTRIBUTE_PTR  pTemplate,
                              CK_ULONG  ulAttributeCount, CK_OBJECT_HANDLE_PTR  phKey)
{
 801c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c106:	b089      	sub	sp, #36	; 0x24
 801c108:	4604      	mov	r4, r0
 801c10a:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c10c:	a807      	add	r0, sp, #28
  CK_RV ck_rv_ret_status = CKR_OK;
 801c10e:	2300      	movs	r3, #0
{
 801c110:	460d      	mov	r5, r1
 801c112:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801c114:	9306      	str	r3, [sp, #24]
  SE_EnterSecureMode(&primask_bit);
 801c116:	f7ff fbb7 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_DERIVE_KEY_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c11a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c11c:	9304      	str	r3, [sp, #16]
 801c11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c120:	9a07      	ldr	r2, [sp, #28]
 801c122:	4807      	ldr	r0, [pc, #28]	; (801c140 <SE_KMS_DeriveKey+0x3c>)
 801c124:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c128:	a906      	add	r1, sp, #24
 801c12a:	4623      	mov	r3, r4
 801c12c:	e9cd 5600 	strd	r5, r6, [sp]
 801c130:	4c04      	ldr	r4, [pc, #16]	; (801c144 <SE_KMS_DeriveKey+0x40>)
 801c132:	47a0      	blx	r4
                    hSession, pMechanism, hBaseKey, pTemplate, ulAttributeCount, phKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c134:	9807      	ldr	r0, [sp, #28]
 801c136:	f7ff fbac 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c13a:	9806      	ldr	r0, [sp, #24]
 801c13c:	b009      	add	sp, #36	; 0x24
 801c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c140:	10000021 	.word	0x10000021
 801c144:	08000205 	.word	0x08000205

0801c148 <SE_KMS_GenerateKeyPair>:
  */
__root CK_RV SE_KMS_GenerateKeyPair(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                                    CK_ATTRIBUTE_PTR pPublicKeyTemplate, CK_ULONG  ulPublicKeyAttributeCount,
                                    CK_ATTRIBUTE_PTR pPrivateKeyTemplate, CK_ULONG ulPrivateKeyAttributeCount,
                                    CK_OBJECT_HANDLE_PTR phPublicKey, CK_OBJECT_HANDLE_PTR phPrivateKey)
{
 801c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c14a:	b08b      	sub	sp, #44	; 0x2c
 801c14c:	4604      	mov	r4, r0
 801c14e:	461f      	mov	r7, r3

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c150:	a809      	add	r0, sp, #36	; 0x24
  CK_RV ck_rv_ret_status = CKR_OK;
 801c152:	2300      	movs	r3, #0
{
 801c154:	460d      	mov	r5, r1
 801c156:	4616      	mov	r6, r2
  CK_RV ck_rv_ret_status = CKR_OK;
 801c158:	9308      	str	r3, [sp, #32]
  SE_EnterSecureMode(&primask_bit);
 801c15a:	f7ff fb95 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GENERATE_KEYPAIR_FCT_ID,
 801c15e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c160:	9306      	str	r3, [sp, #24]
 801c162:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c164:	9305      	str	r3, [sp, #20]
 801c166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c168:	9304      	str	r3, [sp, #16]
 801c16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c16e:	4807      	ldr	r0, [pc, #28]	; (801c18c <SE_KMS_GenerateKeyPair+0x44>)
 801c170:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c174:	a908      	add	r1, sp, #32
 801c176:	4623      	mov	r3, r4
 801c178:	e9cd 5600 	strd	r5, r6, [sp]
 801c17c:	4c04      	ldr	r4, [pc, #16]	; (801c190 <SE_KMS_GenerateKeyPair+0x48>)
 801c17e:	47a0      	blx	r4
                    (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, hSession,  pMechanism,
                    pPublicKeyTemplate,   ulPublicKeyAttributeCount,  pPrivateKeyTemplate,
                    ulPrivateKeyAttributeCount, phPublicKey,  phPrivateKey);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c180:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c182:	f7ff fb86 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c186:	9808      	ldr	r0, [sp, #32]
 801c188:	b00b      	add	sp, #44	; 0x2c
 801c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c18c:	10000025 	.word	0x10000025
 801c190:	08000205 	.word	0x08000205

0801c194 <SE_KMS_GenerateRandom>:
  * @param  ulRandomLen
  * @retval Operation status
  */
__root CK_RV SE_KMS_GenerateRandom(CK_SESSION_HANDLE hSession, CK_BYTE_PTR  pRandomData,
                                   CK_ULONG  ulRandomLen)
{
 801c194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c196:	460d      	mov	r5, r1
 801c198:	4616      	mov	r6, r2
 801c19a:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c19c:	2300      	movs	r3, #0

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 801c19e:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c1a0:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c1a2:	f7ff fb71 	bl	801b888 <SE_EnterSecureMode>

  /*Secure Engine Call*/
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GENERATE_RANDOM_FCT_ID,
 801c1a6:	4623      	mov	r3, r4
 801c1a8:	9a03      	ldr	r2, [sp, #12]
 801c1aa:	4c06      	ldr	r4, [pc, #24]	; (801c1c4 <SE_KMS_GenerateRandom+0x30>)
 801c1ac:	4806      	ldr	r0, [pc, #24]	; (801c1c8 <SE_KMS_GenerateRandom+0x34>)
 801c1ae:	a902      	add	r1, sp, #8
 801c1b0:	e9cd 5600 	strd	r5, r6, [sp]
 801c1b4:	47a0      	blx	r4
                    (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
                    hSession, pRandomData, ulRandomLen);

  /*Exit Secure Mode*/
  SE_ExitSecureMode(primask_bit);
 801c1b6:	9803      	ldr	r0, [sp, #12]
 801c1b8:	f7ff fb6b 	bl	801b892 <SE_ExitSecureMode>


  return ck_rv_ret_status;
}
 801c1bc:	9802      	ldr	r0, [sp, #8]
 801c1be:	b004      	add	sp, #16
 801c1c0:	bd70      	pop	{r4, r5, r6, pc}
 801c1c2:	bf00      	nop
 801c1c4:	08000205 	.word	0x08000205
 801c1c8:	10000026 	.word	0x10000026

0801c1cc <SE_KMS_GetSlotInfo>:
{
 801c1cc:	b530      	push	{r4, r5, lr}
 801c1ce:	b085      	sub	sp, #20
 801c1d0:	460d      	mov	r5, r1
 801c1d2:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c1d4:	2300      	movs	r3, #0
  SE_EnterSecureMode(&primask_bit);
 801c1d6:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c1d8:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c1da:	f7ff fb55 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_SLOT_INFO_FCT_ID,
 801c1de:	4623      	mov	r3, r4
 801c1e0:	9a03      	ldr	r2, [sp, #12]
 801c1e2:	9500      	str	r5, [sp, #0]
 801c1e4:	a902      	add	r1, sp, #8
 801c1e6:	4c04      	ldr	r4, [pc, #16]	; (801c1f8 <SE_KMS_GetSlotInfo+0x2c>)
 801c1e8:	4804      	ldr	r0, [pc, #16]	; (801c1fc <SE_KMS_GetSlotInfo+0x30>)
 801c1ea:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801c1ec:	9803      	ldr	r0, [sp, #12]
 801c1ee:	f7ff fb50 	bl	801b892 <SE_ExitSecureMode>
}
 801c1f2:	9802      	ldr	r0, [sp, #8]
 801c1f4:	b005      	add	sp, #20
 801c1f6:	bd30      	pop	{r4, r5, pc}
 801c1f8:	08000205 	.word	0x08000205
 801c1fc:	10000004 	.word	0x10000004

0801c200 <SE_KMS_GetMechanismInfo>:
{
 801c200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c202:	460d      	mov	r5, r1
 801c204:	4616      	mov	r6, r2
 801c206:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c208:	2300      	movs	r3, #0
  SE_EnterSecureMode(&primask_bit);
 801c20a:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c20c:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c20e:	f7ff fb3b 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_GET_MECHANISM_INFO_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, slotID, type, pInfo);
 801c212:	4623      	mov	r3, r4
 801c214:	9a03      	ldr	r2, [sp, #12]
 801c216:	4c06      	ldr	r4, [pc, #24]	; (801c230 <SE_KMS_GetMechanismInfo+0x30>)
 801c218:	4806      	ldr	r0, [pc, #24]	; (801c234 <SE_KMS_GetMechanismInfo+0x34>)
 801c21a:	a902      	add	r1, sp, #8
 801c21c:	e9cd 5600 	strd	r5, r6, [sp]
 801c220:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801c222:	9803      	ldr	r0, [sp, #12]
 801c224:	f7ff fb35 	bl	801b892 <SE_ExitSecureMode>
}
 801c228:	9802      	ldr	r0, [sp, #8]
 801c22a:	b004      	add	sp, #16
 801c22c:	bd70      	pop	{r4, r5, r6, pc}
 801c22e:	bf00      	nop
 801c230:	08000205 	.word	0x08000205
 801c234:	10000006 	.word	0x10000006

0801c238 <SE_KMS_InitToken>:
{
 801c238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c23a:	b087      	sub	sp, #28
 801c23c:	460d      	mov	r5, r1
 801c23e:	4616      	mov	r6, r2
 801c240:	4604      	mov	r4, r0
 801c242:	461f      	mov	r7, r3
  SE_EnterSecureMode(&primask_bit);
 801c244:	a805      	add	r0, sp, #20
  CK_RV ck_rv_ret_status = CKR_OK;
 801c246:	2300      	movs	r3, #0
 801c248:	9304      	str	r3, [sp, #16]
  SE_EnterSecureMode(&primask_bit);
 801c24a:	f7ff fb1d 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_INIT_TOKEN_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit, slotID, pPin,
 801c24e:	4623      	mov	r3, r4
 801c250:	9a05      	ldr	r2, [sp, #20]
 801c252:	9500      	str	r5, [sp, #0]
 801c254:	a904      	add	r1, sp, #16
 801c256:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801c25a:	4c04      	ldr	r4, [pc, #16]	; (801c26c <SE_KMS_InitToken+0x34>)
 801c25c:	4804      	ldr	r0, [pc, #16]	; (801c270 <SE_KMS_InitToken+0x38>)
 801c25e:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801c260:	9805      	ldr	r0, [sp, #20]
 801c262:	f7ff fb16 	bl	801b892 <SE_ExitSecureMode>
}
 801c266:	9804      	ldr	r0, [sp, #16]
 801c268:	b007      	add	sp, #28
 801c26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c26c:	08000205 	.word	0x08000205
 801c270:	10000007 	.word	0x10000007

0801c274 <SE_KMS_ImportBlob>:
{
 801c274:	b530      	push	{r4, r5, lr}
 801c276:	b085      	sub	sp, #20
 801c278:	460d      	mov	r5, r1
 801c27a:	4604      	mov	r4, r0
  CK_RV ck_rv_ret_status = CKR_OK;
 801c27c:	2300      	movs	r3, #0
  SE_EnterSecureMode(&primask_bit);
 801c27e:	a803      	add	r0, sp, #12
  CK_RV ck_rv_ret_status = CKR_OK;
 801c280:	9302      	str	r3, [sp, #8]
  SE_EnterSecureMode(&primask_bit);
 801c282:	f7ff fb01 	bl	801b888 <SE_EnterSecureMode>
  (*SE_CallGatePtr)((SE_FunctionIDTypeDef)KMS_IMPORT_BLOB_FCT_ID, (SE_StatusTypeDef *)&ck_rv_ret_status, primask_bit,
 801c286:	4623      	mov	r3, r4
 801c288:	9a03      	ldr	r2, [sp, #12]
 801c28a:	9500      	str	r5, [sp, #0]
 801c28c:	a902      	add	r1, sp, #8
 801c28e:	4c04      	ldr	r4, [pc, #16]	; (801c2a0 <SE_KMS_ImportBlob+0x2c>)
 801c290:	4804      	ldr	r0, [pc, #16]	; (801c2a4 <SE_KMS_ImportBlob+0x30>)
 801c292:	47a0      	blx	r4
  SE_ExitSecureMode(primask_bit);
 801c294:	9803      	ldr	r0, [sp, #12]
 801c296:	f7ff fafc 	bl	801b892 <SE_ExitSecureMode>
}
 801c29a:	9802      	ldr	r0, [sp, #8]
 801c29c:	b005      	add	sp, #20
 801c29e:	bd30      	pop	{r4, r5, pc}
 801c2a0:	08000205 	.word	0x08000205
 801c2a4:	10000020 	.word	0x10000020

Disassembly of section .text:

0801c300 <__do_global_dtors_aux>:
 801c300:	b510      	push	{r4, lr}
 801c302:	4c05      	ldr	r4, [pc, #20]	; (801c318 <__do_global_dtors_aux+0x18>)
 801c304:	7823      	ldrb	r3, [r4, #0]
 801c306:	b933      	cbnz	r3, 801c316 <__do_global_dtors_aux+0x16>
 801c308:	4b04      	ldr	r3, [pc, #16]	; (801c31c <__do_global_dtors_aux+0x1c>)
 801c30a:	b113      	cbz	r3, 801c312 <__do_global_dtors_aux+0x12>
 801c30c:	4804      	ldr	r0, [pc, #16]	; (801c320 <__do_global_dtors_aux+0x20>)
 801c30e:	f3af 8000 	nop.w
 801c312:	2301      	movs	r3, #1
 801c314:	7023      	strb	r3, [r4, #0]
 801c316:	bd10      	pop	{r4, pc}
 801c318:	20030170 	.word	0x20030170
 801c31c:	00000000 	.word	0x00000000
 801c320:	08029e18 	.word	0x08029e18

0801c324 <frame_dummy>:
 801c324:	b508      	push	{r3, lr}
 801c326:	4b03      	ldr	r3, [pc, #12]	; (801c334 <frame_dummy+0x10>)
 801c328:	b11b      	cbz	r3, 801c332 <frame_dummy+0xe>
 801c32a:	4903      	ldr	r1, [pc, #12]	; (801c338 <frame_dummy+0x14>)
 801c32c:	4803      	ldr	r0, [pc, #12]	; (801c33c <frame_dummy+0x18>)
 801c32e:	f3af 8000 	nop.w
 801c332:	bd08      	pop	{r3, pc}
 801c334:	00000000 	.word	0x00000000
 801c338:	20030174 	.word	0x20030174
 801c33c:	08029e18 	.word	0x08029e18

0801c340 <strlen>:
 801c340:	4603      	mov	r3, r0
 801c342:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c346:	2a00      	cmp	r2, #0
 801c348:	d1fb      	bne.n	801c342 <strlen+0x2>
 801c34a:	1a18      	subs	r0, r3, r0
 801c34c:	3801      	subs	r0, #1
 801c34e:	4770      	bx	lr

0801c350 <memchr>:
 801c350:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801c354:	2a10      	cmp	r2, #16
 801c356:	db2b      	blt.n	801c3b0 <memchr+0x60>
 801c358:	f010 0f07 	tst.w	r0, #7
 801c35c:	d008      	beq.n	801c370 <memchr+0x20>
 801c35e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c362:	3a01      	subs	r2, #1
 801c364:	428b      	cmp	r3, r1
 801c366:	d02d      	beq.n	801c3c4 <memchr+0x74>
 801c368:	f010 0f07 	tst.w	r0, #7
 801c36c:	b342      	cbz	r2, 801c3c0 <memchr+0x70>
 801c36e:	d1f6      	bne.n	801c35e <memchr+0xe>
 801c370:	b4f0      	push	{r4, r5, r6, r7}
 801c372:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 801c376:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801c37a:	f022 0407 	bic.w	r4, r2, #7
 801c37e:	f07f 0700 	mvns.w	r7, #0
 801c382:	2300      	movs	r3, #0
 801c384:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 801c388:	3c08      	subs	r4, #8
 801c38a:	ea85 0501 	eor.w	r5, r5, r1
 801c38e:	ea86 0601 	eor.w	r6, r6, r1
 801c392:	fa85 f547 	uadd8	r5, r5, r7
 801c396:	faa3 f587 	sel	r5, r3, r7
 801c39a:	fa86 f647 	uadd8	r6, r6, r7
 801c39e:	faa5 f687 	sel	r6, r5, r7
 801c3a2:	b98e      	cbnz	r6, 801c3c8 <memchr+0x78>
 801c3a4:	d1ee      	bne.n	801c384 <memchr+0x34>
 801c3a6:	bcf0      	pop	{r4, r5, r6, r7}
 801c3a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801c3ac:	f002 0207 	and.w	r2, r2, #7
 801c3b0:	b132      	cbz	r2, 801c3c0 <memchr+0x70>
 801c3b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c3b6:	3a01      	subs	r2, #1
 801c3b8:	ea83 0301 	eor.w	r3, r3, r1
 801c3bc:	b113      	cbz	r3, 801c3c4 <memchr+0x74>
 801c3be:	d1f8      	bne.n	801c3b2 <memchr+0x62>
 801c3c0:	2000      	movs	r0, #0
 801c3c2:	4770      	bx	lr
 801c3c4:	3801      	subs	r0, #1
 801c3c6:	4770      	bx	lr
 801c3c8:	2d00      	cmp	r5, #0
 801c3ca:	bf06      	itte	eq
 801c3cc:	4635      	moveq	r5, r6
 801c3ce:	3803      	subeq	r0, #3
 801c3d0:	3807      	subne	r0, #7
 801c3d2:	f015 0f01 	tst.w	r5, #1
 801c3d6:	d107      	bne.n	801c3e8 <memchr+0x98>
 801c3d8:	3001      	adds	r0, #1
 801c3da:	f415 7f80 	tst.w	r5, #256	; 0x100
 801c3de:	bf02      	ittt	eq
 801c3e0:	3001      	addeq	r0, #1
 801c3e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 801c3e6:	3001      	addeq	r0, #1
 801c3e8:	bcf0      	pop	{r4, r5, r6, r7}
 801c3ea:	3801      	subs	r0, #1
 801c3ec:	4770      	bx	lr
 801c3ee:	bf00      	nop

0801c3f0 <__aeabi_uldivmod>:
 801c3f0:	b953      	cbnz	r3, 801c408 <__aeabi_uldivmod+0x18>
 801c3f2:	b94a      	cbnz	r2, 801c408 <__aeabi_uldivmod+0x18>
 801c3f4:	2900      	cmp	r1, #0
 801c3f6:	bf08      	it	eq
 801c3f8:	2800      	cmpeq	r0, #0
 801c3fa:	bf1c      	itt	ne
 801c3fc:	f04f 31ff 	movne.w	r1, #4294967295
 801c400:	f04f 30ff 	movne.w	r0, #4294967295
 801c404:	f000 b972 	b.w	801c6ec <__aeabi_idiv0>
 801c408:	f1ad 0c08 	sub.w	ip, sp, #8
 801c40c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801c410:	f000 f806 	bl	801c420 <__udivmoddi4>
 801c414:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c41c:	b004      	add	sp, #16
 801c41e:	4770      	bx	lr

0801c420 <__udivmoddi4>:
 801c420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c424:	9e08      	ldr	r6, [sp, #32]
 801c426:	4604      	mov	r4, r0
 801c428:	4688      	mov	r8, r1
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d14b      	bne.n	801c4c6 <__udivmoddi4+0xa6>
 801c42e:	428a      	cmp	r2, r1
 801c430:	4615      	mov	r5, r2
 801c432:	d967      	bls.n	801c504 <__udivmoddi4+0xe4>
 801c434:	fab2 f282 	clz	r2, r2
 801c438:	b14a      	cbz	r2, 801c44e <__udivmoddi4+0x2e>
 801c43a:	f1c2 0720 	rsb	r7, r2, #32
 801c43e:	fa01 f302 	lsl.w	r3, r1, r2
 801c442:	fa20 f707 	lsr.w	r7, r0, r7
 801c446:	4095      	lsls	r5, r2
 801c448:	ea47 0803 	orr.w	r8, r7, r3
 801c44c:	4094      	lsls	r4, r2
 801c44e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801c452:	0c23      	lsrs	r3, r4, #16
 801c454:	fbb8 f7fe 	udiv	r7, r8, lr
 801c458:	fa1f fc85 	uxth.w	ip, r5
 801c45c:	fb0e 8817 	mls	r8, lr, r7, r8
 801c460:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801c464:	fb07 f10c 	mul.w	r1, r7, ip
 801c468:	4299      	cmp	r1, r3
 801c46a:	d909      	bls.n	801c480 <__udivmoddi4+0x60>
 801c46c:	18eb      	adds	r3, r5, r3
 801c46e:	f107 30ff 	add.w	r0, r7, #4294967295
 801c472:	f080 811b 	bcs.w	801c6ac <__udivmoddi4+0x28c>
 801c476:	4299      	cmp	r1, r3
 801c478:	f240 8118 	bls.w	801c6ac <__udivmoddi4+0x28c>
 801c47c:	3f02      	subs	r7, #2
 801c47e:	442b      	add	r3, r5
 801c480:	1a5b      	subs	r3, r3, r1
 801c482:	b2a4      	uxth	r4, r4
 801c484:	fbb3 f0fe 	udiv	r0, r3, lr
 801c488:	fb0e 3310 	mls	r3, lr, r0, r3
 801c48c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801c490:	fb00 fc0c 	mul.w	ip, r0, ip
 801c494:	45a4      	cmp	ip, r4
 801c496:	d909      	bls.n	801c4ac <__udivmoddi4+0x8c>
 801c498:	192c      	adds	r4, r5, r4
 801c49a:	f100 33ff 	add.w	r3, r0, #4294967295
 801c49e:	f080 8107 	bcs.w	801c6b0 <__udivmoddi4+0x290>
 801c4a2:	45a4      	cmp	ip, r4
 801c4a4:	f240 8104 	bls.w	801c6b0 <__udivmoddi4+0x290>
 801c4a8:	3802      	subs	r0, #2
 801c4aa:	442c      	add	r4, r5
 801c4ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801c4b0:	eba4 040c 	sub.w	r4, r4, ip
 801c4b4:	2700      	movs	r7, #0
 801c4b6:	b11e      	cbz	r6, 801c4c0 <__udivmoddi4+0xa0>
 801c4b8:	40d4      	lsrs	r4, r2
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	e9c6 4300 	strd	r4, r3, [r6]
 801c4c0:	4639      	mov	r1, r7
 801c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4c6:	428b      	cmp	r3, r1
 801c4c8:	d909      	bls.n	801c4de <__udivmoddi4+0xbe>
 801c4ca:	2e00      	cmp	r6, #0
 801c4cc:	f000 80eb 	beq.w	801c6a6 <__udivmoddi4+0x286>
 801c4d0:	2700      	movs	r7, #0
 801c4d2:	e9c6 0100 	strd	r0, r1, [r6]
 801c4d6:	4638      	mov	r0, r7
 801c4d8:	4639      	mov	r1, r7
 801c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4de:	fab3 f783 	clz	r7, r3
 801c4e2:	2f00      	cmp	r7, #0
 801c4e4:	d147      	bne.n	801c576 <__udivmoddi4+0x156>
 801c4e6:	428b      	cmp	r3, r1
 801c4e8:	d302      	bcc.n	801c4f0 <__udivmoddi4+0xd0>
 801c4ea:	4282      	cmp	r2, r0
 801c4ec:	f200 80fa 	bhi.w	801c6e4 <__udivmoddi4+0x2c4>
 801c4f0:	1a84      	subs	r4, r0, r2
 801c4f2:	eb61 0303 	sbc.w	r3, r1, r3
 801c4f6:	2001      	movs	r0, #1
 801c4f8:	4698      	mov	r8, r3
 801c4fa:	2e00      	cmp	r6, #0
 801c4fc:	d0e0      	beq.n	801c4c0 <__udivmoddi4+0xa0>
 801c4fe:	e9c6 4800 	strd	r4, r8, [r6]
 801c502:	e7dd      	b.n	801c4c0 <__udivmoddi4+0xa0>
 801c504:	b902      	cbnz	r2, 801c508 <__udivmoddi4+0xe8>
 801c506:	deff      	udf	#255	; 0xff
 801c508:	fab2 f282 	clz	r2, r2
 801c50c:	2a00      	cmp	r2, #0
 801c50e:	f040 808f 	bne.w	801c630 <__udivmoddi4+0x210>
 801c512:	1b49      	subs	r1, r1, r5
 801c514:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801c518:	fa1f f885 	uxth.w	r8, r5
 801c51c:	2701      	movs	r7, #1
 801c51e:	fbb1 fcfe 	udiv	ip, r1, lr
 801c522:	0c23      	lsrs	r3, r4, #16
 801c524:	fb0e 111c 	mls	r1, lr, ip, r1
 801c528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801c52c:	fb08 f10c 	mul.w	r1, r8, ip
 801c530:	4299      	cmp	r1, r3
 801c532:	d907      	bls.n	801c544 <__udivmoddi4+0x124>
 801c534:	18eb      	adds	r3, r5, r3
 801c536:	f10c 30ff 	add.w	r0, ip, #4294967295
 801c53a:	d202      	bcs.n	801c542 <__udivmoddi4+0x122>
 801c53c:	4299      	cmp	r1, r3
 801c53e:	f200 80cd 	bhi.w	801c6dc <__udivmoddi4+0x2bc>
 801c542:	4684      	mov	ip, r0
 801c544:	1a59      	subs	r1, r3, r1
 801c546:	b2a3      	uxth	r3, r4
 801c548:	fbb1 f0fe 	udiv	r0, r1, lr
 801c54c:	fb0e 1410 	mls	r4, lr, r0, r1
 801c550:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801c554:	fb08 f800 	mul.w	r8, r8, r0
 801c558:	45a0      	cmp	r8, r4
 801c55a:	d907      	bls.n	801c56c <__udivmoddi4+0x14c>
 801c55c:	192c      	adds	r4, r5, r4
 801c55e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c562:	d202      	bcs.n	801c56a <__udivmoddi4+0x14a>
 801c564:	45a0      	cmp	r8, r4
 801c566:	f200 80b6 	bhi.w	801c6d6 <__udivmoddi4+0x2b6>
 801c56a:	4618      	mov	r0, r3
 801c56c:	eba4 0408 	sub.w	r4, r4, r8
 801c570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801c574:	e79f      	b.n	801c4b6 <__udivmoddi4+0x96>
 801c576:	f1c7 0c20 	rsb	ip, r7, #32
 801c57a:	40bb      	lsls	r3, r7
 801c57c:	fa22 fe0c 	lsr.w	lr, r2, ip
 801c580:	ea4e 0e03 	orr.w	lr, lr, r3
 801c584:	fa01 f407 	lsl.w	r4, r1, r7
 801c588:	fa20 f50c 	lsr.w	r5, r0, ip
 801c58c:	fa21 f30c 	lsr.w	r3, r1, ip
 801c590:	ea4f 481e 	mov.w	r8, lr, lsr #16
 801c594:	4325      	orrs	r5, r4
 801c596:	fbb3 f9f8 	udiv	r9, r3, r8
 801c59a:	0c2c      	lsrs	r4, r5, #16
 801c59c:	fb08 3319 	mls	r3, r8, r9, r3
 801c5a0:	fa1f fa8e 	uxth.w	sl, lr
 801c5a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 801c5a8:	fb09 f40a 	mul.w	r4, r9, sl
 801c5ac:	429c      	cmp	r4, r3
 801c5ae:	fa02 f207 	lsl.w	r2, r2, r7
 801c5b2:	fa00 f107 	lsl.w	r1, r0, r7
 801c5b6:	d90b      	bls.n	801c5d0 <__udivmoddi4+0x1b0>
 801c5b8:	eb1e 0303 	adds.w	r3, lr, r3
 801c5bc:	f109 30ff 	add.w	r0, r9, #4294967295
 801c5c0:	f080 8087 	bcs.w	801c6d2 <__udivmoddi4+0x2b2>
 801c5c4:	429c      	cmp	r4, r3
 801c5c6:	f240 8084 	bls.w	801c6d2 <__udivmoddi4+0x2b2>
 801c5ca:	f1a9 0902 	sub.w	r9, r9, #2
 801c5ce:	4473      	add	r3, lr
 801c5d0:	1b1b      	subs	r3, r3, r4
 801c5d2:	b2ad      	uxth	r5, r5
 801c5d4:	fbb3 f0f8 	udiv	r0, r3, r8
 801c5d8:	fb08 3310 	mls	r3, r8, r0, r3
 801c5dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 801c5e0:	fb00 fa0a 	mul.w	sl, r0, sl
 801c5e4:	45a2      	cmp	sl, r4
 801c5e6:	d908      	bls.n	801c5fa <__udivmoddi4+0x1da>
 801c5e8:	eb1e 0404 	adds.w	r4, lr, r4
 801c5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 801c5f0:	d26b      	bcs.n	801c6ca <__udivmoddi4+0x2aa>
 801c5f2:	45a2      	cmp	sl, r4
 801c5f4:	d969      	bls.n	801c6ca <__udivmoddi4+0x2aa>
 801c5f6:	3802      	subs	r0, #2
 801c5f8:	4474      	add	r4, lr
 801c5fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801c5fe:	fba0 8902 	umull	r8, r9, r0, r2
 801c602:	eba4 040a 	sub.w	r4, r4, sl
 801c606:	454c      	cmp	r4, r9
 801c608:	46c2      	mov	sl, r8
 801c60a:	464b      	mov	r3, r9
 801c60c:	d354      	bcc.n	801c6b8 <__udivmoddi4+0x298>
 801c60e:	d051      	beq.n	801c6b4 <__udivmoddi4+0x294>
 801c610:	2e00      	cmp	r6, #0
 801c612:	d069      	beq.n	801c6e8 <__udivmoddi4+0x2c8>
 801c614:	ebb1 050a 	subs.w	r5, r1, sl
 801c618:	eb64 0403 	sbc.w	r4, r4, r3
 801c61c:	fa04 fc0c 	lsl.w	ip, r4, ip
 801c620:	40fd      	lsrs	r5, r7
 801c622:	40fc      	lsrs	r4, r7
 801c624:	ea4c 0505 	orr.w	r5, ip, r5
 801c628:	e9c6 5400 	strd	r5, r4, [r6]
 801c62c:	2700      	movs	r7, #0
 801c62e:	e747      	b.n	801c4c0 <__udivmoddi4+0xa0>
 801c630:	f1c2 0320 	rsb	r3, r2, #32
 801c634:	fa20 f703 	lsr.w	r7, r0, r3
 801c638:	4095      	lsls	r5, r2
 801c63a:	fa01 f002 	lsl.w	r0, r1, r2
 801c63e:	fa21 f303 	lsr.w	r3, r1, r3
 801c642:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801c646:	4338      	orrs	r0, r7
 801c648:	0c01      	lsrs	r1, r0, #16
 801c64a:	fbb3 f7fe 	udiv	r7, r3, lr
 801c64e:	fa1f f885 	uxth.w	r8, r5
 801c652:	fb0e 3317 	mls	r3, lr, r7, r3
 801c656:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801c65a:	fb07 f308 	mul.w	r3, r7, r8
 801c65e:	428b      	cmp	r3, r1
 801c660:	fa04 f402 	lsl.w	r4, r4, r2
 801c664:	d907      	bls.n	801c676 <__udivmoddi4+0x256>
 801c666:	1869      	adds	r1, r5, r1
 801c668:	f107 3cff 	add.w	ip, r7, #4294967295
 801c66c:	d22f      	bcs.n	801c6ce <__udivmoddi4+0x2ae>
 801c66e:	428b      	cmp	r3, r1
 801c670:	d92d      	bls.n	801c6ce <__udivmoddi4+0x2ae>
 801c672:	3f02      	subs	r7, #2
 801c674:	4429      	add	r1, r5
 801c676:	1acb      	subs	r3, r1, r3
 801c678:	b281      	uxth	r1, r0
 801c67a:	fbb3 f0fe 	udiv	r0, r3, lr
 801c67e:	fb0e 3310 	mls	r3, lr, r0, r3
 801c682:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801c686:	fb00 f308 	mul.w	r3, r0, r8
 801c68a:	428b      	cmp	r3, r1
 801c68c:	d907      	bls.n	801c69e <__udivmoddi4+0x27e>
 801c68e:	1869      	adds	r1, r5, r1
 801c690:	f100 3cff 	add.w	ip, r0, #4294967295
 801c694:	d217      	bcs.n	801c6c6 <__udivmoddi4+0x2a6>
 801c696:	428b      	cmp	r3, r1
 801c698:	d915      	bls.n	801c6c6 <__udivmoddi4+0x2a6>
 801c69a:	3802      	subs	r0, #2
 801c69c:	4429      	add	r1, r5
 801c69e:	1ac9      	subs	r1, r1, r3
 801c6a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 801c6a4:	e73b      	b.n	801c51e <__udivmoddi4+0xfe>
 801c6a6:	4637      	mov	r7, r6
 801c6a8:	4630      	mov	r0, r6
 801c6aa:	e709      	b.n	801c4c0 <__udivmoddi4+0xa0>
 801c6ac:	4607      	mov	r7, r0
 801c6ae:	e6e7      	b.n	801c480 <__udivmoddi4+0x60>
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	e6fb      	b.n	801c4ac <__udivmoddi4+0x8c>
 801c6b4:	4541      	cmp	r1, r8
 801c6b6:	d2ab      	bcs.n	801c610 <__udivmoddi4+0x1f0>
 801c6b8:	ebb8 0a02 	subs.w	sl, r8, r2
 801c6bc:	eb69 020e 	sbc.w	r2, r9, lr
 801c6c0:	3801      	subs	r0, #1
 801c6c2:	4613      	mov	r3, r2
 801c6c4:	e7a4      	b.n	801c610 <__udivmoddi4+0x1f0>
 801c6c6:	4660      	mov	r0, ip
 801c6c8:	e7e9      	b.n	801c69e <__udivmoddi4+0x27e>
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	e795      	b.n	801c5fa <__udivmoddi4+0x1da>
 801c6ce:	4667      	mov	r7, ip
 801c6d0:	e7d1      	b.n	801c676 <__udivmoddi4+0x256>
 801c6d2:	4681      	mov	r9, r0
 801c6d4:	e77c      	b.n	801c5d0 <__udivmoddi4+0x1b0>
 801c6d6:	3802      	subs	r0, #2
 801c6d8:	442c      	add	r4, r5
 801c6da:	e747      	b.n	801c56c <__udivmoddi4+0x14c>
 801c6dc:	f1ac 0c02 	sub.w	ip, ip, #2
 801c6e0:	442b      	add	r3, r5
 801c6e2:	e72f      	b.n	801c544 <__udivmoddi4+0x124>
 801c6e4:	4638      	mov	r0, r7
 801c6e6:	e708      	b.n	801c4fa <__udivmoddi4+0xda>
 801c6e8:	4637      	mov	r7, r6
 801c6ea:	e6e9      	b.n	801c4c0 <__udivmoddi4+0xa0>

0801c6ec <__aeabi_idiv0>:
 801c6ec:	4770      	bx	lr
 801c6ee:	bf00      	nop

0801c6f0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 801c6f0:	b500      	push	{lr}
 801c6f2:	b0bd      	sub	sp, #244	; 0xf4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801c6f4:	2244      	movs	r2, #68	; 0x44
 801c6f6:	2100      	movs	r1, #0
 801c6f8:	a806      	add	r0, sp, #24
 801c6fa:	f00c f969 	bl	80289d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801c6fe:	2214      	movs	r2, #20
 801c700:	2100      	movs	r1, #0
 801c702:	a801      	add	r0, sp, #4
 801c704:	f00c f964 	bl	80289d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801c708:	2294      	movs	r2, #148	; 0x94
 801c70a:	2100      	movs	r1, #0
 801c70c:	a817      	add	r0, sp, #92	; 0x5c
 801c70e:	f00c f95f 	bl	80289d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801c712:	2000      	movs	r0, #0
 801c714:	f005 fa00 	bl	8021b18 <HAL_PWREx_ControlVoltageScaling>
 801c718:	b100      	cbz	r0, 801c71c <SystemClock_Config+0x2c>
 801c71a:	e7fe      	b.n	801c71a <SystemClock_Config+0x2a>
  {
    while(1);
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 801c71c:	2338      	movs	r3, #56	; 0x38
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801c71e:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 801c720:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801c722:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801c724:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801c726:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801c728:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801c72a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 801c72e:	900d      	str	r0, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 801c730:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 801c734:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c736:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 60;
 801c738:	233c      	movs	r3, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801c73a:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801c73e:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c742:	f005 facf 	bl	8021ce4 <HAL_RCC_OscConfig>
 801c746:	b100      	cbz	r0, 801c74a <SystemClock_Config+0x5a>
 801c748:	e7fe      	b.n	801c748 <SystemClock_Config+0x58>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801c74a:	220f      	movs	r2, #15
 801c74c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801c74e:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801c752:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801c754:	2105      	movs	r1, #5
 801c756:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801c758:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801c75c:	f005 fd70 	bl	8022240 <HAL_RCC_ClockConfig>
 801c760:	b100      	cbz	r0, 801c764 <SystemClock_Config+0x74>
 801c762:	e7fe      	b.n	801c762 <SystemClock_Config+0x72>
  {
    while(1);
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 801c764:	4b07      	ldr	r3, [pc, #28]	; (801c784 <SystemClock_Config+0x94>)
 801c766:	9317      	str	r3, [sp, #92]	; 0x5c
                              |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801c768:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801c76a:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 801c76e:	9036      	str	r0, [sp, #216]	; 0xd8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801c770:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801c772:	933b      	str	r3, [sp, #236]	; 0xec
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801c774:	f005 ff68 	bl	8022648 <HAL_RCCEx_PeriphCLKConfig>
 801c778:	b100      	cbz	r0, 801c77c <SystemClock_Config+0x8c>
 801c77a:	e7fe      	b.n	801c77a <SystemClock_Config+0x8a>
  {
    while(1);
  }
}
 801c77c:	b03d      	add	sp, #244	; 0xf4
 801c77e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c782:	bf00      	nop
 801c784:	00060001 	.word	0x00060001

0801c788 <main>:
{
 801c788:	b508      	push	{r3, lr}
  HAL_Init();
 801c78a:	f004 fb01 	bl	8020d90 <HAL_Init>
  SystemClock_Config();
 801c78e:	f7ff ffaf 	bl	801c6f0 <SystemClock_Config>
  (void)SFU_BOOT_RunSecureBootService(); /* no need to take care of the returned value as we reboot in all cases */
 801c792:	f000 fc3b 	bl	801d00c <SFU_BOOT_RunSecureBootService>
  SFU_BOOT_ForceReboot();
 801c796:	f000 fba7 	bl	801cee8 <SFU_BOOT_ForceReboot>
}
 801c79a:	2000      	movs	r0, #0
 801c79c:	bd08      	pop	{r3, pc}
	...

0801c7a0 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c7a0:	4b17      	ldr	r3, [pc, #92]	; (801c800 <HAL_MspInit+0x60>)
{
 801c7a2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c7a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801c7a6:	f042 0201 	orr.w	r2, r2, #1
 801c7aa:	661a      	str	r2, [r3, #96]	; 0x60
 801c7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c7ae:	f003 0301 	and.w	r3, r3, #1
 801c7b2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c7b4:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c7b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c7b8:	f004 fb20 	bl	8020dfc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0U, 0U);
 801c7bc:	2200      	movs	r2, #0
 801c7be:	4611      	mov	r1, r2
 801c7c0:	f06f 000b 	mvn.w	r0, #11
 801c7c4:	f004 fb2c 	bl	8020e20 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0U, 0U);
 801c7c8:	2200      	movs	r2, #0
 801c7ca:	4611      	mov	r1, r2
 801c7cc:	f06f 000a 	mvn.w	r0, #10
 801c7d0:	f004 fb26 	bl	8020e20 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0U, 0U);
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	4611      	mov	r1, r2
 801c7d8:	f06f 0009 	mvn.w	r0, #9
 801c7dc:	f004 fb20 	bl	8020e20 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0U, 0U);
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	4611      	mov	r1, r2
 801c7e4:	f06f 0003 	mvn.w	r0, #3
 801c7e8:	f004 fb1a 	bl	8020e20 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	4611      	mov	r1, r2
 801c7f0:	f04f 30ff 	mov.w	r0, #4294967295

}
 801c7f4:	b003      	add	sp, #12
 801c7f6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 801c7fa:	f004 bb11 	b.w	8020e20 <HAL_NVIC_SetPriority>
 801c7fe:	bf00      	nop
 801c800:	40021000 	.word	0x40021000

0801c804 <HAL_UART_MspInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  SFU_LL_UART_MspInit(huart);
 801c804:	f003 be90 	b.w	8020528 <SFU_LL_UART_MspInit>

0801c808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801c808:	b508      	push	{r3, lr}
  HAL_IncTick();
 801c80a:	f004 fad1 	bl	8020db0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 801c80e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 801c812:	f004 bb5e 	b.w	8020ed2 <HAL_SYSTICK_IRQHandler>
	...

0801c818 <SFU_BOOT_SM_HandleCriticalFailure>:
  * @param  None
  * @note   After a Critical Failure a Reboot will be called.
  * @retval None
  */
static void SFU_BOOT_SM_HandleCriticalFailure(void)
{
 801c818:	b510      	push	{r4, lr}
  TRACE("\r\n= [SBOOT] STATE: HANDLE CRITICAL FAILURE");

  /* Any Critical Failure will be served and a SystemReset will be triggered */
  SFU_BOOT_StateExceptionHandler(m_StateMachineContext.PrevState);
 801c81a:	4c06      	ldr	r4, [pc, #24]	; (801c834 <SFU_BOOT_SM_HandleCriticalFailure+0x1c>)
  TRACE("\r\n= [SBOOT] STATE: HANDLE CRITICAL FAILURE");
 801c81c:	4806      	ldr	r0, [pc, #24]	; (801c838 <SFU_BOOT_SM_HandleCriticalFailure+0x20>)
 801c81e:	f00c f995 	bl	8028b4c <iprintf>
  SFU_BOOT_StateExceptionHandler(m_StateMachineContext.PrevState);
 801c822:	7820      	ldrb	r0, [r4, #0]
 801c824:	f000 ff8e 	bl	801d744 <SFU_BOOT_StateExceptionHandler>

  /* It's not possible to continue without compromising the stability or the security of the solution.
     The State Machine needs to be aborted and a Reset must be triggered */
  SFU_SET_SM_IF_CURR_STATE(0U, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_REBOOT_STATE_MACHINE);
 801c828:	7863      	ldrb	r3, [r4, #1]
 801c82a:	b2db      	uxtb	r3, r3
 801c82c:	7023      	strb	r3, [r4, #0]
 801c82e:	230b      	movs	r3, #11
 801c830:	7063      	strb	r3, [r4, #1]
}
 801c832:	bd10      	pop	{r4, pc}
 801c834:	2003018c 	.word	0x2003018c
 801c838:	0802a5f4 	.word	0x0802a5f4

0801c83c <SFU_BOOT_SM_ResumeInstallNewUserFw>:
{
 801c83c:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: RESUME INSTALLATION OF NEW USER FIRMWARE");
 801c83e:	4808      	ldr	r0, [pc, #32]	; (801c860 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x24>)
 801c840:	f00c f984 	bl	8028b4c <iprintf>
  e_ret_status = SFU_IMG_TriggerResumeInstallation();
 801c844:	f002 fb26 	bl	801ee94 <SFU_IMG_TriggerResumeInstallation>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_VERIFY_USER_FW_SIGNATURE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801c848:	4b06      	ldr	r3, [pc, #24]	; (801c864 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x28>)
 801c84a:	785a      	ldrb	r2, [r3, #1]
 801c84c:	b2d2      	uxtb	r2, r2
 801c84e:	701a      	strb	r2, [r3, #0]
 801c850:	4a05      	ldr	r2, [pc, #20]	; (801c868 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x2c>)
 801c852:	4290      	cmp	r0, r2
 801c854:	bf0c      	ite	eq
 801c856:	2207      	moveq	r2, #7
 801c858:	220a      	movne	r2, #10
 801c85a:	705a      	strb	r2, [r3, #1]
}
 801c85c:	bd08      	pop	{r3, pc}
 801c85e:	bf00      	nop
 801c860:	0802a61f 	.word	0x0802a61f
 801c864:	2003018c 	.word	0x2003018c
 801c868:	00122f11 	.word	0x00122f11

0801c86c <SFU_BOOT_SM_VerifyUserFwSignature>:
{
 801c86c:	b570      	push	{r4, r5, r6, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c86e:	4d30      	ldr	r5, [pc, #192]	; (801c930 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>)
  TRACE("\r\n= [SBOOT] STATE: VERIFY USER FW SIGNATURE");
 801c870:	4830      	ldr	r0, [pc, #192]	; (801c934 <SFU_BOOT_SM_VerifyUserFwSignature+0xc8>)
 801c872:	f00c f96b 	bl	8028b4c <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c876:	682a      	ldr	r2, [r5, #0]
 801c878:	4b2f      	ldr	r3, [pc, #188]	; (801c938 <SFU_BOOT_SM_VerifyUserFwSignature+0xcc>)
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d001      	beq.n	801c882 <SFU_BOOT_SM_VerifyUserFwSignature+0x16>
 801c87e:	f000 ff8b 	bl	801d798 <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 801c882:	f245 7376 	movw	r3, #22390	; 0x5776
 801c886:	602b      	str	r3, [r5, #0]
  SFU_LL_SECU_CheckApplyStaticProtections();
 801c888:	f004 f88a 	bl	80209a0 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 801c88c:	682a      	ldr	r2, [r5, #0]
 801c88e:	f243 03f1 	movw	r3, #12529	; 0x30f1
 801c892:	429a      	cmp	r2, r3
 801c894:	d001      	beq.n	801c89a <SFU_BOOT_SM_VerifyUserFwSignature+0x2e>
 801c896:	f000 ff7f 	bl	801d798 <SFU_EXCPT_Security_Error>
  SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_THIRD_CONFIGURATION);
 801c89a:	2002      	movs	r0, #2
 801c89c:	f004 f8d8 	bl	8020a50 <SFU_LL_SECU_CheckApplyRuntimeProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c8a0:	682a      	ldr	r2, [r5, #0]
 801c8a2:	4b25      	ldr	r3, [pc, #148]	; (801c938 <SFU_BOOT_SM_VerifyUserFwSignature+0xcc>)
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	d001      	beq.n	801c8ac <SFU_BOOT_SM_VerifyUserFwSignature+0x40>
 801c8a8:	f000 ff76 	bl	801d798 <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 801c8ac:	f245 7376 	movw	r3, #22390	; 0x5776
 801c8b0:	606b      	str	r3, [r5, #4]
  e_ret_status = SFU_IMG_VerifyActiveImgMetadata();
 801c8b2:	f002 fb05 	bl	801eec0 <SFU_IMG_VerifyActiveImgMetadata>
  if (SFU_SUCCESS == e_ret_status)
 801c8b6:	4e21      	ldr	r6, [pc, #132]	; (801c93c <SFU_BOOT_SM_VerifyUserFwSignature+0xd0>)
 801c8b8:	42b0      	cmp	r0, r6
  e_ret_status = SFU_IMG_VerifyActiveImgMetadata();
 801c8ba:	4604      	mov	r4, r0
  if (SFU_SUCCESS == e_ret_status)
 801c8bc:	d109      	bne.n	801c8d2 <SFU_BOOT_SM_VerifyUserFwSignature+0x66>
    e_ret_status = SFU_IMG_VerifyActiveImg();
 801c8be:	f002 fb05 	bl	801eecc <SFU_IMG_VerifyActiveImg>
  if (SFU_SUCCESS == e_ret_status)
 801c8c2:	42b0      	cmp	r0, r6
    e_ret_status = SFU_IMG_VerifyActiveImg();
 801c8c4:	4604      	mov	r4, r0
  if (SFU_SUCCESS == e_ret_status)
 801c8c6:	d104      	bne.n	801c8d2 <SFU_BOOT_SM_VerifyUserFwSignature+0x66>
    e_ret_status = SFU_IMG_VerifyActiveSlot();
 801c8c8:	f002 fb12 	bl	801eef0 <SFU_IMG_VerifyActiveSlot>
  if (SFU_SUCCESS != e_ret_status)
 801c8cc:	42b0      	cmp	r0, r6
    e_ret_status = SFU_IMG_VerifyActiveSlot();
 801c8ce:	4604      	mov	r4, r0
  if (SFU_SUCCESS != e_ret_status)
 801c8d0:	d005      	beq.n	801c8de <SFU_BOOT_SM_VerifyUserFwSignature+0x72>
    TRACE("\r\n\t  Unexpected code beyond FW image in slot #0: erasing ... ");
 801c8d2:	481b      	ldr	r0, [pc, #108]	; (801c940 <SFU_BOOT_SM_VerifyUserFwSignature+0xd4>)
 801c8d4:	f00c f93a 	bl	8028b4c <iprintf>
    	  (void)SFU_IMG_InvalidateCurrentFirmware(); /* If this fails we continue anyhow */
 801c8d8:	f002 fade 	bl	801ee98 <SFU_IMG_InvalidateCurrentFirmware>
 801c8dc:	e015      	b.n	801c90a <SFU_BOOT_SM_VerifyUserFwSignature+0x9e>
    FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 801c8de:	686a      	ldr	r2, [r5, #4]
 801c8e0:	f248 435a 	movw	r3, #33882	; 0x845a
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d001      	beq.n	801c8ec <SFU_BOOT_SM_VerifyUserFwSignature+0x80>
 801c8e8:	f000 ff56 	bl	801d798 <SFU_EXCPT_Security_Error>
    TRACE("\r\n= [SBOOT] CHECKING IMAGE STATE");
 801c8ec:	4815      	ldr	r0, [pc, #84]	; (801c944 <SFU_BOOT_SM_VerifyUserFwSignature+0xd8>)
    gRollbackDone = 0;
 801c8ee:	4d16      	ldr	r5, [pc, #88]	; (801c948 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
    TRACE("\r\n= [SBOOT] CHECKING IMAGE STATE");
 801c8f0:	f00c f92c 	bl	8028b4c <iprintf>
    gRollbackDone = 0;
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	702b      	strb	r3, [r5, #0]
    e_ret_status = SFU_IMG_CheckImageState();
 801c8f8:	f002 fda2 	bl	801f440 <SFU_IMG_CheckImageState>
    if (SFU_SUCCESS == e_ret_status)
 801c8fc:	4b0f      	ldr	r3, [pc, #60]	; (801c93c <SFU_BOOT_SM_VerifyUserFwSignature+0xd0>)
 801c8fe:	4298      	cmp	r0, r3
    e_ret_status = SFU_IMG_CheckImageState();
 801c900:	4604      	mov	r4, r0
    if (SFU_SUCCESS == e_ret_status)
 801c902:	d10d      	bne.n	801c920 <SFU_BOOT_SM_VerifyUserFwSignature+0xb4>
      TRACE("\r\n= [SBOOT] IMAGE STATE OK");
 801c904:	4811      	ldr	r0, [pc, #68]	; (801c94c <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 801c906:	f00c f921 	bl	8028b4c <iprintf>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801c90a:	4b11      	ldr	r3, [pc, #68]	; (801c950 <SFU_BOOT_SM_VerifyUserFwSignature+0xe4>)
 801c90c:	785a      	ldrb	r2, [r3, #1]
 801c90e:	b2d2      	uxtb	r2, r2
 801c910:	701a      	strb	r2, [r3, #0]
 801c912:	4a0a      	ldr	r2, [pc, #40]	; (801c93c <SFU_BOOT_SM_VerifyUserFwSignature+0xd0>)
 801c914:	4294      	cmp	r4, r2
 801c916:	bf0c      	ite	eq
 801c918:	2208      	moveq	r2, #8
 801c91a:	220a      	movne	r2, #10
 801c91c:	705a      	strb	r2, [r3, #1]
}
 801c91e:	bd70      	pop	{r4, r5, r6, pc}
      TRACE("\r\n= [SBOOT] ERROR: BAD IMAGE STATE");
 801c920:	480c      	ldr	r0, [pc, #48]	; (801c954 <SFU_BOOT_SM_VerifyUserFwSignature+0xe8>)
 801c922:	f00c f913 	bl	8028b4c <iprintf>
      if (0 == gRollbackDone)
 801c926:	782b      	ldrb	r3, [r5, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d1ee      	bne.n	801c90a <SFU_BOOT_SM_VerifyUserFwSignature+0x9e>
 801c92c:	e7d4      	b.n	801c8d8 <SFU_BOOT_SM_VerifyUserFwSignature+0x6c>
 801c92e:	bf00      	nop
 801c930:	20030000 	.word	0x20030000
 801c934:	0802a65b 	.word	0x0802a65b
 801c938:	0001554b 	.word	0x0001554b
 801c93c:	00122f11 	.word	0x00122f11
 801c940:	0802a687 	.word	0x0802a687
 801c944:	0802a703 	.word	0x0802a703
 801c948:	200314f8 	.word	0x200314f8
 801c94c:	0802a6c5 	.word	0x0802a6c5
 801c950:	2003018c 	.word	0x2003018c
 801c954:	0802a6e0 	.word	0x0802a6e0

0801c958 <SFU_BOOT_SM_InstallNewUserFw>:
{
 801c958:	b538      	push	{r3, r4, r5, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c95a:	4c1a      	ldr	r4, [pc, #104]	; (801c9c4 <SFU_BOOT_SM_InstallNewUserFw+0x6c>)
  TRACE("\r\n= [SBOOT] STATE: INSTALL NEW USER FIRMWARE ");
 801c95c:	481a      	ldr	r0, [pc, #104]	; (801c9c8 <SFU_BOOT_SM_InstallNewUserFw+0x70>)
 801c95e:	f00c f8f5 	bl	8028b4c <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c962:	6822      	ldr	r2, [r4, #0]
 801c964:	4b19      	ldr	r3, [pc, #100]	; (801c9cc <SFU_BOOT_SM_InstallNewUserFw+0x74>)
 801c966:	429a      	cmp	r2, r3
 801c968:	d001      	beq.n	801c96e <SFU_BOOT_SM_InstallNewUserFw+0x16>
 801c96a:	f000 ff15 	bl	801d798 <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 801c96e:	f245 7376 	movw	r3, #22390	; 0x5776
 801c972:	6023      	str	r3, [r4, #0]
  SFU_LL_SECU_CheckApplyStaticProtections();
 801c974:	f004 f814 	bl	80209a0 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 801c978:	6822      	ldr	r2, [r4, #0]
 801c97a:	f243 03f1 	movw	r3, #12529	; 0x30f1
 801c97e:	429a      	cmp	r2, r3
 801c980:	d001      	beq.n	801c986 <SFU_BOOT_SM_InstallNewUserFw+0x2e>
 801c982:	f000 ff09 	bl	801d798 <SFU_EXCPT_Security_Error>
  SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_SECOND_CONFIGURATION);
 801c986:	2001      	movs	r0, #1
 801c988:	f004 f862 	bl	8020a50 <SFU_LL_SECU_CheckApplyRuntimeProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 801c98c:	6822      	ldr	r2, [r4, #0]
 801c98e:	4b0f      	ldr	r3, [pc, #60]	; (801c9cc <SFU_BOOT_SM_InstallNewUserFw+0x74>)
 801c990:	429a      	cmp	r2, r3
 801c992:	d001      	beq.n	801c998 <SFU_BOOT_SM_InstallNewUserFw+0x40>
 801c994:	f000 ff00 	bl	801d798 <SFU_EXCPT_Security_Error>
  e_ret_status = SFU_IMG_CheckCandidateMetadata();
 801c998:	f002 fb06 	bl	801efa8 <SFU_IMG_CheckCandidateMetadata>
  if (SFU_SUCCESS != e_ret_status)
 801c99c:	4c0c      	ldr	r4, [pc, #48]	; (801c9d0 <SFU_BOOT_SM_InstallNewUserFw+0x78>)
 801c99e:	42a0      	cmp	r0, r4
  e_ret_status = SFU_IMG_CheckCandidateMetadata();
 801c9a0:	4605      	mov	r5, r0
  if (SFU_SUCCESS != e_ret_status)
 801c9a2:	d00b      	beq.n	801c9bc <SFU_BOOT_SM_InstallNewUserFw+0x64>
    (void) SFU_IMG_EraseDownloadedImg();
 801c9a4:	f002 fb54 	bl	801f050 <SFU_IMG_EraseDownloadedImg>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_VERIFY_USER_FW_SIGNATURE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801c9a8:	4b0a      	ldr	r3, [pc, #40]	; (801c9d4 <SFU_BOOT_SM_InstallNewUserFw+0x7c>)
 801c9aa:	785a      	ldrb	r2, [r3, #1]
 801c9ac:	42a5      	cmp	r5, r4
 801c9ae:	b2d2      	uxtb	r2, r2
 801c9b0:	701a      	strb	r2, [r3, #0]
 801c9b2:	bf0c      	ite	eq
 801c9b4:	2207      	moveq	r2, #7
 801c9b6:	220a      	movne	r2, #10
 801c9b8:	705a      	strb	r2, [r3, #1]
}
 801c9ba:	bd38      	pop	{r3, r4, r5, pc}
    e_ret_status = SFU_IMG_TriggerImageInstallation();
 801c9bc:	f002 fb96 	bl	801f0ec <SFU_IMG_TriggerImageInstallation>
 801c9c0:	4605      	mov	r5, r0
 801c9c2:	e7f1      	b.n	801c9a8 <SFU_BOOT_SM_InstallNewUserFw+0x50>
 801c9c4:	20030000 	.word	0x20030000
 801c9c8:	0802a724 	.word	0x0802a724
 801c9cc:	0001554b 	.word	0x0001554b
 801c9d0:	00122f11 	.word	0x00122f11
 801c9d4:	2003018c 	.word	0x2003018c

0801c9d8 <SFU_BOOT_SM_InstallKMSBlob>:
{
 801c9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TRACE("\r\n= [SBOOT] STATE: INSTALL KMS BLOB");
 801c9da:	4824      	ldr	r0, [pc, #144]	; (801ca6c <SFU_BOOT_SM_InstallKMSBlob+0x94>)
 801c9dc:	f00c f8b6 	bl	8028b4c <iprintf>
  pBlobToImport = SFU_KMS_GetBlobInstallInfo();
 801c9e0:	f002 fda8 	bl	801f534 <SFU_KMS_GetBlobInstallInfo>
 801c9e4:	4605      	mov	r5, r0
  e_status = C_Initialize(NULL);
 801c9e6:	2000      	movs	r0, #0
 801c9e8:	f006 fefa 	bl	80237e0 <C_Initialize>
  if (e_status == CKR_OK)
 801c9ec:	4604      	mov	r4, r0
 801c9ee:	b938      	cbnz	r0, 801ca00 <SFU_BOOT_SM_InstallKMSBlob+0x28>
    e_status = SE_KMS_ImportBlob(pBlobToImport, &ImportBlobResult);
 801c9f0:	a901      	add	r1, sp, #4
 801c9f2:	4628      	mov	r0, r5
 801c9f4:	f7ff fc3e 	bl	801c274 <SE_KMS_ImportBlob>
    if (e_status != CKR_OK)
 801c9f8:	b130      	cbz	r0, 801ca08 <SFU_BOOT_SM_InstallKMSBlob+0x30>
      (void)C_Finalize(NULL);
 801c9fa:	4620      	mov	r0, r4
 801c9fc:	f006 fefe 	bl	80237fc <C_Finalize>
    TRACE("\r\n= [SBOOT] INSTALL KMS: ERROR WHEN COMMUNICATING WITH KMS");
 801ca00:	481b      	ldr	r0, [pc, #108]	; (801ca70 <SFU_BOOT_SM_InstallKMSBlob+0x98>)
 801ca02:	f00c f8a3 	bl	8028b4c <iprintf>
 801ca06:	e003      	b.n	801ca10 <SFU_BOOT_SM_InstallKMSBlob+0x38>
      e_status = C_Finalize(NULL);
 801ca08:	f006 fef8 	bl	80237fc <C_Finalize>
  if (e_status != CKR_OK)
 801ca0c:	2800      	cmp	r0, #0
 801ca0e:	d1f7      	bne.n	801ca00 <SFU_BOOT_SM_InstallKMSBlob+0x28>
  e_ret_status = SFU_KMS_EraseBlob();
 801ca10:	f002 fd94 	bl	801f53c <SFU_KMS_EraseBlob>
  if (e_ret_status != SFU_SUCCESS)
 801ca14:	4b17      	ldr	r3, [pc, #92]	; (801ca74 <SFU_BOOT_SM_InstallKMSBlob+0x9c>)
 801ca16:	4298      	cmp	r0, r3
 801ca18:	d002      	beq.n	801ca20 <SFU_BOOT_SM_InstallKMSBlob+0x48>
    TRACE("\r\n= [SBOOT] INSTALL KMS: ERROR WHEN ERASING KMS BLOB");
 801ca1a:	4817      	ldr	r0, [pc, #92]	; (801ca78 <SFU_BOOT_SM_InstallKMSBlob+0xa0>)
 801ca1c:	f00c f896 	bl	8028b4c <iprintf>
  switch (ImportBlobResult)
 801ca20:	9b01      	ldr	r3, [sp, #4]
 801ca22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ca26:	2b07      	cmp	r3, #7
 801ca28:	d81e      	bhi.n	801ca68 <SFU_BOOT_SM_InstallKMSBlob+0x90>
 801ca2a:	e8df f003 	tbb	[pc, r3]
 801ca2e:	0f04      	.short	0x0f04
 801ca30:	19151311 	.word	0x19151311
 801ca34:	1b17      	.short	0x1b17
      TRACE("\r\n= [SBOOT] INSTALL KMS: KMS BLOB WELL INSTALLED");
 801ca36:	4811      	ldr	r0, [pc, #68]	; (801ca7c <SFU_BOOT_SM_InstallKMSBlob+0xa4>)
      TRACE("\r\n= [SBOOT] INSTALL KMS: UNKNOWN STATUS");
 801ca38:	f00c f888 	bl	8028b4c <iprintf>
  SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_STATUS);
 801ca3c:	4b10      	ldr	r3, [pc, #64]	; (801ca80 <SFU_BOOT_SM_InstallKMSBlob+0xa8>)
 801ca3e:	785a      	ldrb	r2, [r3, #1]
 801ca40:	b2d2      	uxtb	r2, r2
 801ca42:	701a      	strb	r2, [r3, #0]
 801ca44:	2205      	movs	r2, #5
 801ca46:	705a      	strb	r2, [r3, #1]
}
 801ca48:	b003      	add	sp, #12
 801ca4a:	bd30      	pop	{r4, r5, pc}
      TRACE("\r\n= [SBOOT] INSTALL KMS: BLOB AUTHENT ERROR WHEN INSTALLING KMS BLOB");
 801ca4c:	480d      	ldr	r0, [pc, #52]	; (801ca84 <SFU_BOOT_SM_InstallKMSBlob+0xac>)
 801ca4e:	e7f3      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: BLOB VERIF ERROR WHEN INSTALLING KMS BLOB");
 801ca50:	480d      	ldr	r0, [pc, #52]	; (801ca88 <SFU_BOOT_SM_InstallKMSBlob+0xb0>)
 801ca52:	e7f1      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: BLOB FORM ERROR WHEN INSTALLING KMS BLOB");
 801ca54:	480d      	ldr	r0, [pc, #52]	; (801ca8c <SFU_BOOT_SM_InstallKMSBlob+0xb4>)
 801ca56:	e7ef      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: OBJECTID ERROR WHEN INSTALLING KMS BLOB");
 801ca58:	480d      	ldr	r0, [pc, #52]	; (801ca90 <SFU_BOOT_SM_InstallKMSBlob+0xb8>)
 801ca5a:	e7ed      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: NVM WARNING WHEN INSTALLING KMS BLOB");
 801ca5c:	480d      	ldr	r0, [pc, #52]	; (801ca94 <SFU_BOOT_SM_InstallKMSBlob+0xbc>)
 801ca5e:	e7eb      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: NVM ERROR WHEN INSTALLING KMS BLOB");
 801ca60:	480d      	ldr	r0, [pc, #52]	; (801ca98 <SFU_BOOT_SM_InstallKMSBlob+0xc0>)
 801ca62:	e7e9      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: KMS KEYS IN USE WHEN INSTALLING KMS BLOB");
 801ca64:	480d      	ldr	r0, [pc, #52]	; (801ca9c <SFU_BOOT_SM_InstallKMSBlob+0xc4>)
 801ca66:	e7e7      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
      TRACE("\r\n= [SBOOT] INSTALL KMS: UNKNOWN STATUS");
 801ca68:	480d      	ldr	r0, [pc, #52]	; (801caa0 <SFU_BOOT_SM_InstallKMSBlob+0xc8>)
 801ca6a:	e7e5      	b.n	801ca38 <SFU_BOOT_SM_InstallKMSBlob+0x60>
 801ca6c:	0802a752 	.word	0x0802a752
 801ca70:	0802a776 	.word	0x0802a776
 801ca74:	00122f11 	.word	0x00122f11
 801ca78:	0802a7b1 	.word	0x0802a7b1
 801ca7c:	0802a7e6 	.word	0x0802a7e6
 801ca80:	2003018c 	.word	0x2003018c
 801ca84:	0802a817 	.word	0x0802a817
 801ca88:	0802a85c 	.word	0x0802a85c
 801ca8c:	0802a89f 	.word	0x0802a89f
 801ca90:	0802a8e1 	.word	0x0802a8e1
 801ca94:	0802a922 	.word	0x0802a922
 801ca98:	0802a960 	.word	0x0802a960
 801ca9c:	0802a99c 	.word	0x0802a99c
 801caa0:	0802a9de 	.word	0x0802a9de

0801caa4 <SFU_BOOT_SM_CheckKMSBlobToInstall>:
{
 801caa4:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: CHECK KMS BLOB TO INSTALL");
 801caa6:	480b      	ldr	r0, [pc, #44]	; (801cad4 <SFU_BOOT_SM_CheckKMSBlobToInstall+0x30>)
 801caa8:	f00c f850 	bl	8028b4c <iprintf>
  e_PendingInstallStatus = SFU_KMS_CheckPendingBlobInstallation();
 801caac:	f002 fd56 	bl	801f55c <SFU_KMS_CheckPendingBlobInstallation>
 801cab0:	4909      	ldr	r1, [pc, #36]	; (801cad8 <SFU_BOOT_SM_CheckKMSBlobToInstall+0x34>)
    e_ret_status = SFU_SUCCESS;
 801cab2:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801cab6:	2801      	cmp	r0, #1
 801cab8:	bf0c      	ite	eq
 801caba:	4618      	moveq	r0, r3
 801cabc:	4608      	movne	r0, r1
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_INSTALL_KMS_BLOB, SFU_STATE_VERIFY_USER_FW_STATUS);
 801cabe:	4b07      	ldr	r3, [pc, #28]	; (801cadc <SFU_BOOT_SM_CheckKMSBlobToInstall+0x38>)
 801cac0:	785a      	ldrb	r2, [r3, #1]
 801cac2:	4288      	cmp	r0, r1
 801cac4:	b2d2      	uxtb	r2, r2
 801cac6:	701a      	strb	r2, [r3, #0]
 801cac8:	bf0c      	ite	eq
 801caca:	2204      	moveq	r2, #4
 801cacc:	2205      	movne	r2, #5
 801cace:	705a      	strb	r2, [r3, #1]
}
 801cad0:	bd08      	pop	{r3, pc}
 801cad2:	bf00      	nop
 801cad4:	0802aa06 	.word	0x0802aa06
 801cad8:	00122f11 	.word	0x00122f11
 801cadc:	2003018c 	.word	0x2003018c

0801cae0 <SFU_BOOT_SM_DownloadNewUserFw>:
{
 801cae0:	b530      	push	{r4, r5, lr}
 801cae2:	f2ad 7dbc 	subw	sp, sp, #1980	; 0x7bc
  SFU_LOADER_StatusTypeDef  e_ret_status_app = SFU_LOADER_ERR;
 801cae6:	2301      	movs	r3, #1
 801cae8:	f88d 3003 	strb.w	r3, [sp, #3]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 801caec:	4821      	ldr	r0, [pc, #132]	; (801cb74 <SFU_BOOT_SM_DownloadNewUserFw+0x94>)
  uint32_t u_size = 0;
 801caee:	2300      	movs	r3, #0
 801caf0:	9301      	str	r3, [sp, #4]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 801caf2:	f00c f82b 	bl	8028b4c <iprintf>
  if (SFU_IMG_GetDownloadAreaInfo(&x_fw_image_flash_data) == SFU_SUCCESS)
 801caf6:	a802      	add	r0, sp, #8
 801caf8:	f002 fec6 	bl	801f888 <SFU_IMG_GetDownloadAreaInfo>
 801cafc:	4b1e      	ldr	r3, [pc, #120]	; (801cb78 <SFU_BOOT_SM_DownloadNewUserFw+0x98>)
 801cafe:	4298      	cmp	r0, r3
 801cb00:	4605      	mov	r5, r0
 801cb02:	d134      	bne.n	801cb6e <SFU_BOOT_SM_DownloadNewUserFw+0x8e>
    e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &x_fw_image_flash_data, &u_size);
 801cb04:	aa01      	add	r2, sp, #4
 801cb06:	a902      	add	r1, sp, #8
 801cb08:	f10d 0003 	add.w	r0, sp, #3
 801cb0c:	f002 fd38 	bl	801f580 <SFU_LOADER_DownloadNewUserFw>
    if (e_ret_status == SFU_SUCCESS)
 801cb10:	42a8      	cmp	r0, r5
    e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &x_fw_image_flash_data, &u_size);
 801cb12:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 801cb14:	d119      	bne.n	801cb4a <SFU_BOOT_SM_DownloadNewUserFw+0x6a>
      SFU_LL_FLASH_Read((void *) &x_fw_raw_header, (uint32_t *) x_fw_image_flash_data.DownloadAddr,
 801cb16:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801cb1a:	9903      	ldr	r1, [sp, #12]
 801cb1c:	a806      	add	r0, sp, #24
 801cb1e:	f003 fdc1 	bl	80206a4 <SFU_LL_FLASH_Read>
      if (SFU_IMG_InstallAtNextReset((uint8_t *) &x_fw_raw_header) != SFU_SUCCESS)
 801cb22:	a806      	add	r0, sp, #24
 801cb24:	f002 fe8e 	bl	801f844 <SFU_IMG_InstallAtNextReset>
 801cb28:	42a0      	cmp	r0, r4
 801cb2a:	d001      	beq.n	801cb30 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
        (void) SFU_IMG_EraseDownloadedImg();
 801cb2c:	f002 fa90 	bl	801f050 <SFU_IMG_EraseDownloadedImg>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801cb30:	4b12      	ldr	r3, [pc, #72]	; (801cb7c <SFU_BOOT_SM_DownloadNewUserFw+0x9c>)
 801cb32:	785a      	ldrb	r2, [r3, #1]
 801cb34:	b2d2      	uxtb	r2, r2
 801cb36:	701a      	strb	r2, [r3, #0]
 801cb38:	4a0f      	ldr	r2, [pc, #60]	; (801cb78 <SFU_BOOT_SM_DownloadNewUserFw+0x98>)
 801cb3a:	4294      	cmp	r4, r2
 801cb3c:	bf0c      	ite	eq
 801cb3e:	220b      	moveq	r2, #11
 801cb40:	220a      	movne	r2, #10
 801cb42:	705a      	strb	r2, [r3, #1]
}
 801cb44:	f20d 7dbc 	addw	sp, sp, #1980	; 0x7bc
 801cb48:	bd30      	pop	{r4, r5, pc}
      (void) SFU_IMG_EraseDownloadedImg();
 801cb4a:	f002 fa81 	bl	801f050 <SFU_IMG_EraseDownloadedImg>
      switch (e_ret_status_app)
 801cb4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cb52:	2b06      	cmp	r3, #6
 801cb54:	d007      	beq.n	801cb66 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
 801cb56:	2b08      	cmp	r3, #8
 801cb58:	d007      	beq.n	801cb6a <SFU_BOOT_SM_DownloadNewUserFw+0x8a>
 801cb5a:	2b02      	cmp	r3, #2
 801cb5c:	d1e8      	bne.n	801cb30 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
          (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_COM_ERROR);
 801cb5e:	2013      	movs	r0, #19
          (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_DECRYPT_FAILURE);
 801cb60:	f000 fdc8 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
          break;
 801cb64:	e7e4      	b.n	801cb30 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
          (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_DOWNLOAD_ERROR);
 801cb66:	2014      	movs	r0, #20
 801cb68:	e7fa      	b.n	801cb60 <SFU_BOOT_SM_DownloadNewUserFw+0x80>
          (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_DECRYPT_FAILURE);
 801cb6a:	2016      	movs	r0, #22
 801cb6c:	e7f8      	b.n	801cb60 <SFU_BOOT_SM_DownloadNewUserFw+0x80>
  SFU_ErrorStatus           e_ret_status = SFU_ERROR;
 801cb6e:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 801cb72:	e7dd      	b.n	801cb30 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
 801cb74:	0802aa33 	.word	0x0802aa33
 801cb78:	00122f11 	.word	0x00122f11
 801cb7c:	2003018c 	.word	0x2003018c

0801cb80 <SFU_BOOT_SM_CheckNewFwToDownload>:
{
 801cb80:	b508      	push	{r3, lr}
  if (initialDeviceStatusCheck == 1)
 801cb82:	4b0d      	ldr	r3, [pc, #52]	; (801cbb8 <SFU_BOOT_SM_CheckNewFwToDownload+0x38>)
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d106      	bne.n	801cb98 <SFU_BOOT_SM_CheckNewFwToDownload+0x18>
    TRACE("\r\n= [SBOOT] STATE: CHECK NEW FIRMWARE TO DOWNLOAD");
 801cb8a:	480c      	ldr	r0, [pc, #48]	; (801cbbc <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
 801cb8c:	f00b ffde 	bl	8028b4c <iprintf>
    if (0 != BUTTON_PUSHED())
 801cb90:	2000      	movs	r0, #0
 801cb92:	f004 f8a9 	bl	8020ce8 <BSP_PB_GetState>
 801cb96:	b958      	cbnz	r0, 801cbb0 <SFU_BOOT_SM_CheckNewFwToDownload+0x30>
      e_ret_status = SFU_SUCCESS;
 801cb98:	4909      	ldr	r1, [pc, #36]	; (801cbc0 <SFU_BOOT_SM_CheckNewFwToDownload+0x40>)
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_DOWNLOAD_NEW_USER_FW, SFU_STATE_CHECK_KMS_BLOB_TO_INSTALL);
 801cb9a:	4b0a      	ldr	r3, [pc, #40]	; (801cbc4 <SFU_BOOT_SM_CheckNewFwToDownload+0x44>)
 801cb9c:	785a      	ldrb	r2, [r3, #1]
 801cb9e:	b2d2      	uxtb	r2, r2
 801cba0:	701a      	strb	r2, [r3, #0]
 801cba2:	4a07      	ldr	r2, [pc, #28]	; (801cbc0 <SFU_BOOT_SM_CheckNewFwToDownload+0x40>)
 801cba4:	4291      	cmp	r1, r2
 801cba6:	bf0c      	ite	eq
 801cba8:	2202      	moveq	r2, #2
 801cbaa:	2203      	movne	r2, #3
 801cbac:	705a      	strb	r2, [r3, #1]
}
 801cbae:	bd08      	pop	{r3, pc}
  SFU_ErrorStatus  e_ret_status = SFU_ERROR;
 801cbb0:	f641 71e1 	movw	r1, #8161	; 0x1fe1
 801cbb4:	e7f1      	b.n	801cb9a <SFU_BOOT_SM_CheckNewFwToDownload+0x1a>
 801cbb6:	bf00      	nop
 801cbb8:	20031dfc 	.word	0x20031dfc
 801cbbc:	0802aa61 	.word	0x0802aa61
 801cbc0:	00122f11 	.word	0x00122f11
 801cbc4:	2003018c 	.word	0x2003018c

0801cbc8 <SFU_BOOT_DeInit>:
{
 801cbc8:	b538      	push	{r3, r4, r5, lr}
  if (SFU_EXCPT_DeInit() != SFU_SUCCESS)
 801cbca:	f000 fe05 	bl	801d7d8 <SFU_EXCPT_DeInit>
 801cbce:	4b0d      	ldr	r3, [pc, #52]	; (801cc04 <SFU_BOOT_DeInit+0x3c>)
 801cbd0:	4298      	cmp	r0, r3
 801cbd2:	4605      	mov	r5, r0
 801cbd4:	d002      	beq.n	801cbdc <SFU_BOOT_DeInit+0x14>
    return SFU_ERROR;
 801cbd6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 801cbda:	bd38      	pop	{r3, r4, r5, pc}
  if (SFU_LOADER_DeInit() != SFU_SUCCESS)
 801cbdc:	f002 fccc 	bl	801f578 <SFU_LOADER_DeInit>
 801cbe0:	42a8      	cmp	r0, r5
 801cbe2:	4604      	mov	r4, r0
 801cbe4:	d1f7      	bne.n	801cbd6 <SFU_BOOT_DeInit+0xe>
  if (SFU_COM_DeInit() != SFU_SUCCESS)
 801cbe6:	f000 fceb 	bl	801d5c0 <SFU_COM_DeInit>
 801cbea:	42a0      	cmp	r0, r4
 801cbec:	4605      	mov	r5, r0
 801cbee:	d1f2      	bne.n	801cbd6 <SFU_BOOT_DeInit+0xe>
  if (SFU_LL_DeInit() != SFU_SUCCESS)
 801cbf0:	f003 fbde 	bl	80203b0 <SFU_LL_DeInit>
 801cbf4:	42a8      	cmp	r0, r5
 801cbf6:	4604      	mov	r4, r0
 801cbf8:	d1ed      	bne.n	801cbd6 <SFU_BOOT_DeInit+0xe>
  if (SFU_IMG_ShutdownImageHandling() != SFU_SUCCESS)
 801cbfa:	f002 f937 	bl	801ee6c <SFU_IMG_ShutdownImageHandling>
 801cbfe:	42a0      	cmp	r0, r4
 801cc00:	d1e9      	bne.n	801cbd6 <SFU_BOOT_DeInit+0xe>
 801cc02:	e7ea      	b.n	801cbda <SFU_BOOT_DeInit+0x12>
 801cc04:	00122f11 	.word	0x00122f11

0801cc08 <SFU_BOOT_SetLastExecStatus>:
  * @param  uExecID: This parameter can be a value of @ref SFU_BOOT_Private_Defines_Execution_Id
  * @param  uLastExecState: the last SM state to store into the BootInfo structure.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus SFU_BOOT_SetLastExecStatus(uint8_t uExecID, uint8_t uLastExecState)
{
 801cc08:	b570      	push	{r4, r5, r6, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_StatusTypeDef        e_se_status;
  SE_BootInfoTypeDef      x_boot_info;
  uint8_t uFwImageIdx = 0U; /* the active image is always in slot #0 */

  if ((IS_VALID_EXEC_ID(uExecID)) && (IS_SFU_SM_STATE(uLastExecState)))
 801cc0a:	2902      	cmp	r1, #2
{
 801cc0c:	b086      	sub	sp, #24
 801cc0e:	4606      	mov	r6, r0
 801cc10:	460c      	mov	r4, r1
  if ((IS_VALID_EXEC_ID(uExecID)) && (IS_SFU_SM_STATE(uLastExecState)))
 801cc12:	d902      	bls.n	801cc1a <SFU_BOOT_SetLastExecStatus+0x12>
 801cc14:	1f4b      	subs	r3, r1, #5
 801cc16:	2b06      	cmp	r3, #6
 801cc18:	d807      	bhi.n	801cc2a <SFU_BOOT_SetLastExecStatus+0x22>
  {
    if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801cc1a:	a902      	add	r1, sp, #8
 801cc1c:	a801      	add	r0, sp, #4
 801cc1e:	f7fe fcfb 	bl	801b618 <SE_INFO_ReadBootInfo>
 801cc22:	4b0b      	ldr	r3, [pc, #44]	; (801cc50 <SFU_BOOT_SetLastExecStatus+0x48>)
 801cc24:	4298      	cmp	r0, r3
 801cc26:	4605      	mov	r5, r0
 801cc28:	d002      	beq.n	801cc30 <SFU_BOOT_SetLastExecStatus+0x28>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801cc2a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
        e_ret_status = SFU_SUCCESS;
      }

    }
  }
  return e_ret_status;
 801cc2e:	e00c      	b.n	801cc4a <SFU_BOOT_SetLastExecStatus+0x42>
      x_boot_info.LastExecStatus = RESERVED_VALUE | (uLastExecState << 8U) | (uFwImageIdx << 16U) | (uExecID << 24U);
 801cc30:	0220      	lsls	r0, r4, #8
 801cc32:	f040 00fe 	orr.w	r0, r0, #254	; 0xfe
 801cc36:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 801cc3a:	9002      	str	r0, [sp, #8]
      if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801cc3c:	a902      	add	r1, sp, #8
 801cc3e:	a801      	add	r0, sp, #4
 801cc40:	f7fe fd10 	bl	801b664 <SE_INFO_WriteBootInfo>
 801cc44:	42a8      	cmp	r0, r5
 801cc46:	d1f0      	bne.n	801cc2a <SFU_BOOT_SetLastExecStatus+0x22>
        e_ret_status = SFU_SUCCESS;
 801cc48:	4802      	ldr	r0, [pc, #8]	; (801cc54 <SFU_BOOT_SetLastExecStatus+0x4c>)
}
 801cc4a:	b006      	add	sp, #24
 801cc4c:	bd70      	pop	{r4, r5, r6, pc}
 801cc4e:	bf00      	nop
 801cc50:	0012310f 	.word	0x0012310f
 801cc54:	00122f11 	.word	0x00122f11

0801cc58 <SFU_BOOT_SM_CheckUserFwStatus>:
{
 801cc58:	b570      	push	{r4, r5, r6, lr}
  if (initialDeviceStatusCheck == 1U)
 801cc5a:	4d2d      	ldr	r5, [pc, #180]	; (801cd10 <SFU_BOOT_SM_CheckUserFwStatus+0xb8>)
 801cc5c:	782b      	ldrb	r3, [r5, #0]
 801cc5e:	2b01      	cmp	r3, #1
 801cc60:	d102      	bne.n	801cc68 <SFU_BOOT_SM_CheckUserFwStatus+0x10>
    TRACE("\r\n= [SBOOT] STATE: CHECK USER FW STATUS");
 801cc62:	482c      	ldr	r0, [pc, #176]	; (801cd14 <SFU_BOOT_SM_CheckUserFwStatus+0xbc>)
 801cc64:	f00b ff72 	bl	8028b4c <iprintf>
  e_PendingInstallStatus = SFU_IMG_CheckPendingInstallation();
 801cc68:	f002 f902 	bl	801ee70 <SFU_IMG_CheckPendingInstallation>
  switch (e_PendingInstallStatus)
 801cc6c:	2801      	cmp	r0, #1
 801cc6e:	4c2a      	ldr	r4, [pc, #168]	; (801cd18 <SFU_BOOT_SM_CheckUserFwStatus+0xc0>)
 801cc70:	d00a      	beq.n	801cc88 <SFU_BOOT_SM_CheckUserFwStatus+0x30>
 801cc72:	d312      	bcc.n	801cc9a <SFU_BOOT_SM_CheckUserFwStatus+0x42>
 801cc74:	2802      	cmp	r0, #2
 801cc76:	d018      	beq.n	801ccaa <SFU_BOOT_SM_CheckUserFwStatus+0x52>
      TRACE("\r\n\t  Flash State Unknown, Critical failure");
 801cc78:	4828      	ldr	r0, [pc, #160]	; (801cd1c <SFU_BOOT_SM_CheckUserFwStatus+0xc4>)
 801cc7a:	f00b ff67 	bl	8028b4c <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801cc7e:	7863      	ldrb	r3, [r4, #1]
 801cc80:	b2db      	uxtb	r3, r3
 801cc82:	7023      	strb	r3, [r4, #0]
 801cc84:	230a      	movs	r3, #10
 801cc86:	e006      	b.n	801cc96 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
      TRACE("\r\n\t  Installation Failed: resume installation procedure initiated");
 801cc88:	4825      	ldr	r0, [pc, #148]	; (801cd20 <SFU_BOOT_SM_CheckUserFwStatus+0xc8>)
 801cc8a:	f00b ff5f 	bl	8028b4c <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_RESUME_INSTALL_NEW_USER_FW);
 801cc8e:	7863      	ldrb	r3, [r4, #1]
 801cc90:	b2db      	uxtb	r3, r3
 801cc92:	7023      	strb	r3, [r4, #0]
 801cc94:	2309      	movs	r3, #9
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801cc96:	7063      	strb	r3, [r4, #1]
}
 801cc98:	bd70      	pop	{r4, r5, r6, pc}
      TRACE("\r\n\t  New Clear Fw, to be re-ordered in FLASH as expected by the swap procedure");
 801cc9a:	4822      	ldr	r0, [pc, #136]	; (801cd24 <SFU_BOOT_SM_CheckUserFwStatus+0xcc>)
 801cc9c:	f00b ff56 	bl	8028b4c <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_INSTALL_NEW_USER_FW);
 801cca0:	7863      	ldrb	r3, [r4, #1]
 801cca2:	b2db      	uxtb	r3, r3
 801cca4:	7023      	strb	r3, [r4, #0]
 801cca6:	2306      	movs	r3, #6
 801cca8:	e7f5      	b.n	801cc96 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
      e_HasValidFw = SFU_IMG_HasValidActiveFirmware();
 801ccaa:	f002 f9b5 	bl	801f018 <SFU_IMG_HasValidActiveFirmware>
      if (SFU_SUCCESS == e_HasValidFw)
 801ccae:	4e1e      	ldr	r6, [pc, #120]	; (801cd28 <SFU_BOOT_SM_CheckUserFwStatus+0xd0>)
 801ccb0:	42b0      	cmp	r0, r6
 801ccb2:	d10a      	bne.n	801ccca <SFU_BOOT_SM_CheckUserFwStatus+0x72>
        TRACE("\r\n\t  A valid FW is installed in the active slot - version: %d", SFU_IMG_GetActiveFwVersion());
 801ccb4:	f002 f964 	bl	801ef80 <SFU_IMG_GetActiveFwVersion>
 801ccb8:	4601      	mov	r1, r0
 801ccba:	481c      	ldr	r0, [pc, #112]	; (801cd2c <SFU_BOOT_SM_CheckUserFwStatus+0xd4>)
 801ccbc:	f00b ff46 	bl	8028b4c <iprintf>
        SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 801ccc0:	7863      	ldrb	r3, [r4, #1]
 801ccc2:	b2db      	uxtb	r3, r3
 801ccc4:	7023      	strb	r3, [r4, #0]
 801ccc6:	2307      	movs	r3, #7
 801ccc8:	e7e5      	b.n	801cc96 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
        if( SFU_SUCCESS == SFU_IMG_RollbackFWUpdate() )
 801ccca:	f002 faad 	bl	801f228 <SFU_IMG_RollbackFWUpdate>
 801ccce:	42b0      	cmp	r0, r6
 801ccd0:	d104      	bne.n	801ccdc <SFU_BOOT_SM_CheckUserFwStatus+0x84>
          SFU_SET_SM_CURR_STATE(SFU_STATE_REBOOT_STATE_MACHINE);
 801ccd2:	7863      	ldrb	r3, [r4, #1]
 801ccd4:	b2db      	uxtb	r3, r3
 801ccd6:	7023      	strb	r3, [r4, #0]
 801ccd8:	230b      	movs	r3, #11
 801ccda:	e7dc      	b.n	801cc96 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
          if (SFU_IMG_VerifyEmptyActiveSlot() != SFU_SUCCESS)
 801ccdc:	f002 f90c 	bl	801eef8 <SFU_IMG_VerifyEmptyActiveSlot>
 801cce0:	42b0      	cmp	r0, r6
 801cce2:	d004      	beq.n	801ccee <SFU_BOOT_SM_CheckUserFwStatus+0x96>
            TRACE("\r\n\t  Slot #0 not empty : erasing ...");
 801cce4:	4812      	ldr	r0, [pc, #72]	; (801cd30 <SFU_BOOT_SM_CheckUserFwStatus+0xd8>)
 801cce6:	f00b ff31 	bl	8028b4c <iprintf>
            (void)SFU_IMG_InvalidateCurrentFirmware(); /* If this fails we continue anyhow */
 801ccea:	f002 f8d5 	bl	801ee98 <SFU_IMG_InvalidateCurrentFirmware>
          if (1U == initialDeviceStatusCheck)
 801ccee:	782b      	ldrb	r3, [r5, #0]
 801ccf0:	2b01      	cmp	r3, #1
 801ccf2:	d107      	bne.n	801cd04 <SFU_BOOT_SM_CheckUserFwStatus+0xac>
            TRACE("\r\n\t  No valid FW found in the active slot nor new encrypted FW found in the UserApp download area");
 801ccf4:	480f      	ldr	r0, [pc, #60]	; (801cd34 <SFU_BOOT_SM_CheckUserFwStatus+0xdc>)
 801ccf6:	f00b ff29 	bl	8028b4c <iprintf>
            TRACE("\r\n\t  Waiting for the local download to start... ");
 801ccfa:	480f      	ldr	r0, [pc, #60]	; (801cd38 <SFU_BOOT_SM_CheckUserFwStatus+0xe0>)
 801ccfc:	f00b ff26 	bl	8028b4c <iprintf>
            initialDeviceStatusCheck = 0U;
 801cd00:	2300      	movs	r3, #0
 801cd02:	702b      	strb	r3, [r5, #0]
          SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 801cd04:	7863      	ldrb	r3, [r4, #1]
 801cd06:	b2db      	uxtb	r3, r3
 801cd08:	7023      	strb	r3, [r4, #0]
 801cd0a:	2301      	movs	r3, #1
 801cd0c:	e7c3      	b.n	801cc96 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
 801cd0e:	bf00      	nop
 801cd10:	20031dfc 	.word	0x20031dfc
 801cd14:	0802aa93 	.word	0x0802aa93
 801cd18:	2003018c 	.word	0x2003018c
 801cd1c:	0802ac42 	.word	0x0802ac42
 801cd20:	0802aabb 	.word	0x0802aabb
 801cd24:	0802aafd 	.word	0x0802aafd
 801cd28:	00122f11 	.word	0x00122f11
 801cd2c:	0802ab4c 	.word	0x0802ab4c
 801cd30:	0802ab8a 	.word	0x0802ab8a
 801cd34:	0802abaf 	.word	0x0802abaf
 801cd38:	0802ac11 	.word	0x0802ac11

0801cd3c <SFU_BOOT_SM_CheckStatusOnReset>:
{
 801cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TRACE("\r\n= [SBOOT] STATE: CHECK STATUS ON RESET");
 801cd40:	4857      	ldr	r0, [pc, #348]	; (801cea0 <SFU_BOOT_SM_CheckStatusOnReset+0x164>)
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801cd42:	4d58      	ldr	r5, [pc, #352]	; (801cea4 <SFU_BOOT_SM_CheckStatusOnReset+0x168>)
 801cd44:	4f58      	ldr	r7, [pc, #352]	; (801cea8 <SFU_BOOT_SM_CheckStatusOnReset+0x16c>)
{
 801cd46:	b08c      	sub	sp, #48	; 0x30
  TRACE("\r\n= [SBOOT] STATE: CHECK STATUS ON RESET");
 801cd48:	f00b ff00 	bl	8028b4c <iprintf>
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801cd4c:	a904      	add	r1, sp, #16
 801cd4e:	a802      	add	r0, sp, #8
 801cd50:	f7fe fc62 	bl	801b618 <SE_INFO_ReadBootInfo>
 801cd54:	42a8      	cmp	r0, r5
 801cd56:	d002      	beq.n	801cd5e <SFU_BOOT_SM_CheckStatusOnReset+0x22>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801cd58:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 801cd5c:	e087      	b.n	801ce6e <SFU_BOOT_SM_CheckStatusOnReset+0x132>
    if (SFU_BOOT_SetLastExecStatus(EXEC_ID_SECURE_BOOT, m_StateMachineContext.CurrState) == SFU_SUCCESS)
 801cd5e:	7879      	ldrb	r1, [r7, #1]
 801cd60:	2000      	movs	r0, #0
 801cd62:	f7ff ff51 	bl	801cc08 <SFU_BOOT_SetLastExecStatus>
 801cd66:	4b51      	ldr	r3, [pc, #324]	; (801ceac <SFU_BOOT_SM_CheckStatusOnReset+0x170>)
 801cd68:	4298      	cmp	r0, r3
 801cd6a:	4606      	mov	r6, r0
 801cd6c:	d1f4      	bne.n	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus  SFU_BOOT_ManageResetSources(void)
{
  SFU_ErrorStatus     e_ret_status = SFU_ERROR;
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 801cd6e:	a80c      	add	r0, sp, #48	; 0x30
 801cd70:	2300      	movs	r3, #0
 801cd72:	f800 3d29 	strb.w	r3, [r0, #-41]!
  SFU_EXCPT_IdTypeDef e_exception = SFU_EXCPT_NONE;
  SE_BootInfoTypeDef  x_boot_info; /* to retrieve and  update the counter of consecutive errors */
  SE_StatusTypeDef    e_se_status;

  /* Check the wakeup sources */
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 801cd76:	f003 fe95 	bl	8020aa4 <SFU_LL_SECU_GetResetSources>
  switch (e_wakeup_source_id)
 801cd7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801cd7e:	3b01      	subs	r3, #1
 801cd80:	2b06      	cmp	r3, #6
 801cd82:	d831      	bhi.n	801cde8 <SFU_BOOT_SM_CheckStatusOnReset+0xac>
 801cd84:	e8df f003 	tbb	[pc, r3]
 801cd88:	28231e04 	.word	0x28231e04
 801cd8c:	2c2a      	.short	0x2c2a
 801cd8e:	2e          	.byte	0x2e
 801cd8f:	00          	.byte	0x00
       *
       * One may use the "uExecID" parameter to determine if the last exec status was in the SB_SFU context or UserApp
       * context to implement more clever checks in the reset cause handling below.
       */
    case SFU_RESET_FIREWALL:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by a Firewall reset!");
 801cd90:	4847      	ldr	r0, [pc, #284]	; (801ceb0 <SFU_BOOT_SM_CheckStatusOnReset+0x174>)
 801cd92:	f00b fedb 	bl	8028b4c <iprintf>
         protect your system, or simply discard it if this is expected.
         ...
         ...
      */
      /* This event has to be considered as an error to manage */
      e_exception = SFU_EXCPT_FIREWALL_RESET;
 801cd96:	2401      	movs	r4, #1
         please add the right error code in the following src code line */
      e_exception = SFU_EXCPT_NONE;
      break;
  }

  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) != SE_SUCCESS)
 801cd98:	a908      	add	r1, sp, #32
 801cd9a:	a803      	add	r0, sp, #12
 801cd9c:	f7fe fc3c 	bl	801b618 <SE_INFO_ReadBootInfo>
 801cda0:	42a8      	cmp	r0, r5
 801cda2:	d023      	beq.n	801cdec <SFU_BOOT_SM_CheckStatusOnReset+0xb0>
  {
    /* This is not supposed to occur because ReadBootInfo is already called before SFU_BOOT_ManageResetSources() is
       entered... */
    TRACE("\r\n\t  BOOT INFO reading Error");
 801cda4:	4843      	ldr	r0, [pc, #268]	; (801ceb4 <SFU_BOOT_SM_CheckStatusOnReset+0x178>)
    TRACE("\r\n\t  Consecutive Boot on error counter = %d ", x_boot_info.ConsecutiveBootOnErrorCounter);

    /* Update BootInfo structure with  consecutive boot counter */
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) != SE_SUCCESS)
    {
      TRACE("\r\n\t  BOOT INFO Consecutive Boot on error counter writing error ");
 801cda6:	f00b fed1 	bl	8028b4c <iprintf>
#endif /* SFU_VERBOSE_DEBUG_MODE */
    }
  }

  /* Update the last exec error if needed */
  if (e_exception != SFU_EXCPT_NONE)
 801cdaa:	b144      	cbz	r4, 801cdbe <SFU_BOOT_SM_CheckStatusOnReset+0x82>
 801cdac:	f641 78e1 	movw	r8, #8161	; 0x1fe1
  {
    if (SFU_BOOT_SetLastExecError((uint32_t)e_exception) != SFU_SUCCESS)
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	f000 fc9f 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
 801cdb6:	4b3d      	ldr	r3, [pc, #244]	; (801ceac <SFU_BOOT_SM_CheckStatusOnReset+0x170>)
 801cdb8:	4298      	cmp	r0, r3
 801cdba:	4604      	mov	r4, r0
 801cdbc:	d028      	beq.n	801ce10 <SFU_BOOT_SM_CheckStatusOnReset+0xd4>
      e_ret_status = SFU_ERROR;
    } /* else keep the previous e_ret_status value */
  } /* else: no need to update it */

  /* Once the reset sources has been managed and a possible error has been set, clear the reset sources */
  SFU_LL_SECU_ClearResetSources();
 801cdbe:	f003 fe99 	bl	8020af4 <SFU_LL_SECU_ClearResetSources>
 801cdc2:	e7c9      	b.n	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by a Watchdog reset!");
 801cdc4:	483c      	ldr	r0, [pc, #240]	; (801ceb8 <SFU_BOOT_SM_CheckStatusOnReset+0x17c>)
 801cdc6:	f00b fec1 	bl	8028b4c <iprintf>
      e_exception = SFU_EXCPT_WATCHDOG_RESET;
 801cdca:	2402      	movs	r4, #2
 801cdcc:	e7e4      	b.n	801cd98 <SFU_BOOT_SM_CheckStatusOnReset+0x5c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a LowPower reset!");
 801cdce:	483b      	ldr	r0, [pc, #236]	; (801cebc <SFU_BOOT_SM_CheckStatusOnReset+0x180>)
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 801cdd0:	f00b febc 	bl	8028b4c <iprintf>
      e_exception = SFU_EXCPT_NONE;
 801cdd4:	2400      	movs	r4, #0
 801cdd6:	e7df      	b.n	801cd98 <SFU_BOOT_SM_CheckStatusOnReset+0x5c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Hardware reset!");
 801cdd8:	4839      	ldr	r0, [pc, #228]	; (801cec0 <SFU_BOOT_SM_CheckStatusOnReset+0x184>)
 801cdda:	e7f9      	b.n	801cdd0 <SFU_BOOT_SM_CheckStatusOnReset+0x94>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a BOR reset!");
 801cddc:	4839      	ldr	r0, [pc, #228]	; (801cec4 <SFU_BOOT_SM_CheckStatusOnReset+0x188>)
 801cdde:	e7f7      	b.n	801cdd0 <SFU_BOOT_SM_CheckStatusOnReset+0x94>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Software reset!");
 801cde0:	4839      	ldr	r0, [pc, #228]	; (801cec8 <SFU_BOOT_SM_CheckStatusOnReset+0x18c>)
 801cde2:	e7f5      	b.n	801cdd0 <SFU_BOOT_SM_CheckStatusOnReset+0x94>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Option Bytes reload!");
 801cde4:	4839      	ldr	r0, [pc, #228]	; (801cecc <SFU_BOOT_SM_CheckStatusOnReset+0x190>)
 801cde6:	e7f3      	b.n	801cdd0 <SFU_BOOT_SM_CheckStatusOnReset+0x94>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 801cde8:	4839      	ldr	r0, [pc, #228]	; (801ced0 <SFU_BOOT_SM_CheckStatusOnReset+0x194>)
 801cdea:	e7f1      	b.n	801cdd0 <SFU_BOOT_SM_CheckStatusOnReset+0x94>
    if (e_exception != SFU_EXCPT_NONE)
 801cdec:	b174      	cbz	r4, 801ce0c <SFU_BOOT_SM_CheckStatusOnReset+0xd0>
      x_boot_info.ConsecutiveBootOnErrorCounter++;
 801cdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	930a      	str	r3, [sp, #40]	; 0x28
    TRACE("\r\n\t  Consecutive Boot on error counter = %d ", x_boot_info.ConsecutiveBootOnErrorCounter);
 801cdf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cdf6:	4837      	ldr	r0, [pc, #220]	; (801ced4 <SFU_BOOT_SM_CheckStatusOnReset+0x198>)
 801cdf8:	f00b fea8 	bl	8028b4c <iprintf>
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) != SE_SUCCESS)
 801cdfc:	a908      	add	r1, sp, #32
 801cdfe:	a803      	add	r0, sp, #12
 801ce00:	f7fe fc30 	bl	801b664 <SE_INFO_WriteBootInfo>
 801ce04:	42a8      	cmp	r0, r5
 801ce06:	d046      	beq.n	801ce96 <SFU_BOOT_SM_CheckStatusOnReset+0x15a>
      TRACE("\r\n\t  BOOT INFO Consecutive Boot on error counter writing error ");
 801ce08:	4833      	ldr	r0, [pc, #204]	; (801ced8 <SFU_BOOT_SM_CheckStatusOnReset+0x19c>)
 801ce0a:	e7cc      	b.n	801cda6 <SFU_BOOT_SM_CheckStatusOnReset+0x6a>
      x_boot_info.ConsecutiveBootOnErrorCounter = 0;
 801ce0c:	940a      	str	r4, [sp, #40]	; 0x28
 801ce0e:	e7f1      	b.n	801cdf4 <SFU_BOOT_SM_CheckStatusOnReset+0xb8>
  SFU_LL_SECU_ClearResetSources();
 801ce10:	f003 fe70 	bl	8020af4 <SFU_LL_SECU_ClearResetSources>
      if (SFU_BOOT_ManageResetSources() == SFU_SUCCESS)
 801ce14:	45a0      	cmp	r8, r4
 801ce16:	d19f      	bne.n	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801ce18:	a908      	add	r1, sp, #32
 801ce1a:	a803      	add	r0, sp, #12
 801ce1c:	f7fe fbfc 	bl	801b618 <SE_INFO_ReadBootInfo>
 801ce20:	42a8      	cmp	r0, r5
 801ce22:	d199      	bne.n	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
    u_last_error = x_boot_info.LastExecError;
 801ce24:	9c09      	ldr	r4, [sp, #36]	; 0x24
    TRACE("\r\n\t  INFO: Last execution detected error was:");
 801ce26:	482d      	ldr	r0, [pc, #180]	; (801cedc <SFU_BOOT_SM_CheckStatusOnReset+0x1a0>)
 801ce28:	f00b fe90 	bl	8028b4c <iprintf>
    if (IS_SFU_EXCPT((SFU_EXCPT_IdTypeDef)u_last_error))
 801ce2c:	b2e0      	uxtb	r0, r4
 801ce2e:	f000 fcaf 	bl	801d790 <SFU_EXCPT_Check_Code>
 801ce32:	4b1e      	ldr	r3, [pc, #120]	; (801ceac <SFU_BOOT_SM_CheckStatusOnReset+0x170>)
 801ce34:	4298      	cmp	r0, r3
 801ce36:	d126      	bne.n	801ce86 <SFU_BOOT_SM_CheckStatusOnReset+0x14a>
      TRACE(m_aErrorStrings[u_last_error]);
 801ce38:	4b29      	ldr	r3, [pc, #164]	; (801cee0 <SFU_BOOT_SM_CheckStatusOnReset+0x1a4>)
 801ce3a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ce3e:	6898      	ldr	r0, [r3, #8]
 801ce40:	f00b fe84 	bl	8028b4c <iprintf>
    if ((SFU_EXCPT_IdTypeDef)u_last_error != SFU_EXCPT_NONE)
 801ce44:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
 801ce48:	d001      	beq.n	801ce4e <SFU_BOOT_SM_CheckStatusOnReset+0x112>
      SFU_EXCPT_ResetExceptionHandler((SFU_EXCPT_IdTypeDef)u_last_error);
 801ce4a:	f000 fcc9 	bl	801d7e0 <SFU_EXCPT_ResetExceptionHandler>
    x_boot_info.LastExecError = SFU_EXCPT_NONE;
 801ce4e:	2300      	movs	r3, #0
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801ce50:	a908      	add	r1, sp, #32
 801ce52:	a803      	add	r0, sp, #12
    x_boot_info.LastExecError = SFU_EXCPT_NONE;
 801ce54:	9309      	str	r3, [sp, #36]	; 0x24
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801ce56:	f7fe fc05 	bl	801b664 <SE_INFO_WriteBootInfo>
 801ce5a:	42a8      	cmp	r0, r5
 801ce5c:	f47f af7c 	bne.w	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
          if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801ce60:	a904      	add	r1, sp, #16
 801ce62:	a802      	add	r0, sp, #8
 801ce64:	f7fe fbd8 	bl	801b618 <SE_INFO_ReadBootInfo>
 801ce68:	42a8      	cmp	r0, r5
 801ce6a:	f47f af75 	bne.w	801cd58 <SFU_BOOT_SM_CheckStatusOnReset+0x1c>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 801ce6e:	787b      	ldrb	r3, [r7, #1]
 801ce70:	b2db      	uxtb	r3, r3
 801ce72:	703b      	strb	r3, [r7, #0]
 801ce74:	4b0d      	ldr	r3, [pc, #52]	; (801ceac <SFU_BOOT_SM_CheckStatusOnReset+0x170>)
 801ce76:	429e      	cmp	r6, r3
 801ce78:	bf0c      	ite	eq
 801ce7a:	2301      	moveq	r3, #1
 801ce7c:	230a      	movne	r3, #10
 801ce7e:	707b      	strb	r3, [r7, #1]
}
 801ce80:	b00c      	add	sp, #48	; 0x30
 801ce82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TRACE("Unknown error.");
 801ce86:	4817      	ldr	r0, [pc, #92]	; (801cee4 <SFU_BOOT_SM_CheckStatusOnReset+0x1a8>)
 801ce88:	f00b fe60 	bl	8028b4c <iprintf>
      u_last_error = SFU_EXCPT_UNKNOWN;
 801ce8c:	241d      	movs	r4, #29
 801ce8e:	e7d9      	b.n	801ce44 <SFU_BOOT_SM_CheckStatusOnReset+0x108>
  SFU_LL_SECU_ClearResetSources();
 801ce90:	f003 fe30 	bl	8020af4 <SFU_LL_SECU_ClearResetSources>
 801ce94:	e7c0      	b.n	801ce18 <SFU_BOOT_SM_CheckStatusOnReset+0xdc>
  if (e_exception != SFU_EXCPT_NONE)
 801ce96:	2c00      	cmp	r4, #0
 801ce98:	d0fa      	beq.n	801ce90 <SFU_BOOT_SM_CheckStatusOnReset+0x154>
      e_ret_status = SFU_SUCCESS;
 801ce9a:	46b0      	mov	r8, r6
 801ce9c:	e788      	b.n	801cdb0 <SFU_BOOT_SM_CheckStatusOnReset+0x74>
 801ce9e:	bf00      	nop
 801cea0:	0802ac6d 	.word	0x0802ac6d
 801cea4:	0012310f 	.word	0x0012310f
 801cea8:	2003018c 	.word	0x2003018c
 801ceac:	00122f11 	.word	0x00122f11
 801ceb0:	0802ac96 	.word	0x0802ac96
 801ceb4:	0802ae8a 	.word	0x0802ae8a
 801ceb8:	0802acd5 	.word	0x0802acd5
 801cebc:	0802ad14 	.word	0x0802ad14
 801cec0:	0802ad50 	.word	0x0802ad50
 801cec4:	0802ad8c 	.word	0x0802ad8c
 801cec8:	0802adc3 	.word	0x0802adc3
 801cecc:	0802adff 	.word	0x0802adff
 801ced0:	0802ae44 	.word	0x0802ae44
 801ced4:	0802aea7 	.word	0x0802aea7
 801ced8:	0802aed4 	.word	0x0802aed4
 801cedc:	0802af14 	.word	0x0802af14
 801cee0:	20030000 	.word	0x20030000
 801cee4:	0802af42 	.word	0x0802af42

0801cee8 <SFU_BOOT_ForceReboot>:
{
 801cee8:	b508      	push	{r3, lr}
  TRACE("\r\n========= End of Execution ==========");
 801ceea:	4809      	ldr	r0, [pc, #36]	; (801cf10 <SFU_BOOT_ForceReboot+0x28>)
 801ceec:	f00b fe2e 	bl	8028b4c <iprintf>
  TRACE("\r\n\r\n\r\n");
 801cef0:	4808      	ldr	r0, [pc, #32]	; (801cf14 <SFU_BOOT_ForceReboot+0x2c>)
 801cef2:	f00b feb3 	bl	8028c5c <puts>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801cef6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801cefa:	4907      	ldr	r1, [pc, #28]	; (801cf18 <SFU_BOOT_ForceReboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801cefc:	4b07      	ldr	r3, [pc, #28]	; (801cf1c <SFU_BOOT_ForceReboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801cefe:	68ca      	ldr	r2, [r1, #12]
 801cf00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801cf04:	4313      	orrs	r3, r2
 801cf06:	60cb      	str	r3, [r1, #12]
 801cf08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801cf0c:	bf00      	nop
 801cf0e:	e7fd      	b.n	801cf0c <SFU_BOOT_ForceReboot+0x24>
 801cf10:	0802af51 	.word	0x0802af51
 801cf14:	0802af79 	.word	0x0802af79
 801cf18:	e000ed00 	.word	0xe000ed00
 801cf1c:	05fa0004 	.word	0x05fa0004

0801cf20 <SFU_BOOT_SM_RebootStateMachine>:
{
 801cf20:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: REBOOT STATE MACHINE");
 801cf22:	4803      	ldr	r0, [pc, #12]	; (801cf30 <SFU_BOOT_SM_RebootStateMachine+0x10>)
 801cf24:	f00b fe12 	bl	8028b4c <iprintf>
  (void)SFU_BOOT_DeInit();
 801cf28:	f7ff fe4e 	bl	801cbc8 <SFU_BOOT_DeInit>
  SFU_BOOT_ForceReboot();
 801cf2c:	f7ff ffdc 	bl	801cee8 <SFU_BOOT_ForceReboot>
 801cf30:	0802af7f 	.word	0x0802af7f

0801cf34 <SFU_BOOT_SM_ExecuteUserFw>:
{
 801cf34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SE_StatusTypeDef e_se_status = SE_KO;
 801cf36:	4b27      	ldr	r3, [pc, #156]	; (801cfd4 <SFU_BOOT_SM_ExecuteUserFw+0xa0>)
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE22222");
 801cf38:	4827      	ldr	r0, [pc, #156]	; (801cfd8 <SFU_BOOT_SM_ExecuteUserFw+0xa4>)
  FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 801cf3a:	4c28      	ldr	r4, [pc, #160]	; (801cfdc <SFU_BOOT_SM_ExecuteUserFw+0xa8>)
  SE_StatusTypeDef e_se_status = SE_KO;
 801cf3c:	9301      	str	r3, [sp, #4]
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE22222");
 801cf3e:	f00b fe05 	bl	8028b4c <iprintf>
  FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 801cf42:	f245 7376 	movw	r3, #22390	; 0x5776
 801cf46:	6063      	str	r3, [r4, #4]
  if (SFU_IMG_VerifyActiveImgMetadata() != SFU_SUCCESS)
 801cf48:	f001 ffba 	bl	801eec0 <SFU_IMG_VerifyActiveImgMetadata>
 801cf4c:	4d24      	ldr	r5, [pc, #144]	; (801cfe0 <SFU_BOOT_SM_ExecuteUserFw+0xac>)
 801cf4e:	42a8      	cmp	r0, r5
 801cf50:	d004      	beq.n	801cf5c <SFU_BOOT_SM_ExecuteUserFw+0x28>
    TRACE("\r\n= SFU_IMG_VerifyActiveImgMetadata issue : execution stopped");
 801cf52:	4824      	ldr	r0, [pc, #144]	; (801cfe4 <SFU_BOOT_SM_ExecuteUserFw+0xb0>)
 801cf54:	f00b fdfa 	bl	8028b4c <iprintf>
    SFU_EXCPT_Security_Error();
 801cf58:	f000 fc1e 	bl	801d798 <SFU_EXCPT_Security_Error>
  TRACE("\r\nSFU_BOOT_SM_ExecuteUserFw check 000\n");
 801cf5c:	4822      	ldr	r0, [pc, #136]	; (801cfe8 <SFU_BOOT_SM_ExecuteUserFw+0xb4>)
 801cf5e:	f00b fe7d 	bl	8028c5c <puts>
  if (SFU_IMG_ControlActiveImgTag() != SFU_SUCCESS)
 801cf62:	f001 ffd3 	bl	801ef0c <SFU_IMG_ControlActiveImgTag>
 801cf66:	42a8      	cmp	r0, r5
 801cf68:	d004      	beq.n	801cf74 <SFU_BOOT_SM_ExecuteUserFw+0x40>
    TRACE("\r\n= SFU_IMG_ControlActiveImgTag issue : execution stopped");
 801cf6a:	4820      	ldr	r0, [pc, #128]	; (801cfec <SFU_BOOT_SM_ExecuteUserFw+0xb8>)
 801cf6c:	f00b fdee 	bl	8028b4c <iprintf>
    SFU_EXCPT_Security_Error();
 801cf70:	f000 fc12 	bl	801d798 <SFU_EXCPT_Security_Error>
  TRACE("\r\nSFU_BOOT_SM_ExecuteUserFw check 111\n");
 801cf74:	481e      	ldr	r0, [pc, #120]	; (801cff0 <SFU_BOOT_SM_ExecuteUserFw+0xbc>)
 801cf76:	f00b fe71 	bl	8028c5c <puts>
  SFU_BOOT_SetLastExecStatus(EXEC_ID_USER_APP, m_StateMachineContext.CurrState);
 801cf7a:	4b1e      	ldr	r3, [pc, #120]	; (801cff4 <SFU_BOOT_SM_ExecuteUserFw+0xc0>)
 801cf7c:	2001      	movs	r0, #1
 801cf7e:	7859      	ldrb	r1, [r3, #1]
 801cf80:	f7ff fe42 	bl	801cc08 <SFU_BOOT_SetLastExecStatus>
  TRACE("\r\nSFU_BOOT_SM_ExecuteUserFw check 222\n");
 801cf84:	481c      	ldr	r0, [pc, #112]	; (801cff8 <SFU_BOOT_SM_ExecuteUserFw+0xc4>)
 801cf86:	f00b fe69 	bl	8028c5c <puts>
  if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 801cf8a:	a801      	add	r0, sp, #4
 801cf8c:	f7fe fb90 	bl	801b6b0 <SE_LockRestrictServices>
 801cf90:	4b1a      	ldr	r3, [pc, #104]	; (801cffc <SFU_BOOT_SM_ExecuteUserFw+0xc8>)
 801cf92:	4298      	cmp	r0, r3
 801cf94:	d116      	bne.n	801cfc4 <SFU_BOOT_SM_ExecuteUserFw+0x90>
    TRACE("\r\n= SE_LockRestrictServices SE_SUCCESS");
 801cf96:	481a      	ldr	r0, [pc, #104]	; (801d000 <SFU_BOOT_SM_ExecuteUserFw+0xcc>)
 801cf98:	f00b fdd8 	bl	8028b4c <iprintf>
    (void)SFU_BOOT_DeInit(); /* the return value is not checked, we will always try launching the UserApp */
 801cf9c:	f7ff fe14 	bl	801cbc8 <SFU_BOOT_DeInit>
    FLOW_CONTROL_STEP(uFlowCryptoValue, FLOW_STEP_LOCK_SERVICE, FLOW_CTRL_LOCK_SERVICE);
 801cfa0:	6862      	ldr	r2, [r4, #4]
 801cfa2:	f482 4334 	eor.w	r3, r2, #46080	; 0xb400
 801cfa6:	f083 03ab 	eor.w	r3, r3, #171	; 0xab
 801cfaa:	6063      	str	r3, [r4, #4]
 801cfac:	f248 435a 	movw	r3, #33882	; 0x845a
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d001      	beq.n	801cfb8 <SFU_BOOT_SM_ExecuteUserFw+0x84>
 801cfb4:	f000 fbf0 	bl	801d798 <SFU_EXCPT_Security_Error>
    TRACE("\r\n= SFU_IMG_LaunchActiveImg---->");
 801cfb8:	4812      	ldr	r0, [pc, #72]	; (801d004 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
 801cfba:	f00b fdc7 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_LaunchActiveImg();
 801cfbe:	f001 ffab 	bl	801ef18 <SFU_IMG_LaunchActiveImg>
 801cfc2:	e7fe      	b.n	801cfc2 <SFU_BOOT_SM_ExecuteUserFw+0x8e>
    TRACE("\r\n= [FWIMG] SECURE ENGINE CRITICAL FAILURE!");
 801cfc4:	4810      	ldr	r0, [pc, #64]	; (801d008 <SFU_BOOT_SM_ExecuteUserFw+0xd4>)
 801cfc6:	f00b fdc1 	bl	8028b4c <iprintf>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 801cfca:	2010      	movs	r0, #16
 801cfcc:	f000 fb92 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
    SFU_BOOT_ForceReboot();
 801cfd0:	f7ff ff8a 	bl	801cee8 <SFU_BOOT_ForceReboot>
 801cfd4:	0013023d 	.word	0x0013023d
 801cfd8:	0802afa7 	.word	0x0802afa7
 801cfdc:	20030000 	.word	0x20030000
 801cfe0:	00122f11 	.word	0x00122f11
 801cfe4:	0802afd5 	.word	0x0802afd5
 801cfe8:	0802b013 	.word	0x0802b013
 801cfec:	0802b039 	.word	0x0802b039
 801cff0:	0802b073 	.word	0x0802b073
 801cff4:	2003018c 	.word	0x2003018c
 801cff8:	0802b099 	.word	0x0802b099
 801cffc:	0012310f 	.word	0x0012310f
 801d000:	0802b0bf 	.word	0x0802b0bf
 801d004:	0802b0e6 	.word	0x0802b0e6
 801d008:	0802b107 	.word	0x0802b107

0801d00c <SFU_BOOT_RunSecureBootService>:
{
 801d00c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (SE_Startup() == SE_SUCCESS)
 801d00e:	f7fe fadf 	bl	801b5d0 <SE_Startup>
 801d012:	4b5f      	ldr	r3, [pc, #380]	; (801d190 <SFU_BOOT_RunSecureBootService+0x184>)
 801d014:	4298      	cmp	r0, r3
 801d016:	4605      	mov	r5, r0
 801d018:	f040 80b8 	bne.w	801d18c <SFU_BOOT_RunSecureBootService+0x180>
  SFU_COM_Init();
 801d01c:	f000 fac0 	bl	801d5a0 <SFU_COM_Init>
  if (SFU_LL_SECU_CheckApplyStaticProtections() == SFU_SUCCESS)
 801d020:	f003 fcbe 	bl	80209a0 <SFU_LL_SECU_CheckApplyStaticProtections>
 801d024:	4b5b      	ldr	r3, [pc, #364]	; (801d194 <SFU_BOOT_RunSecureBootService+0x188>)
 801d026:	4298      	cmp	r0, r3
 801d028:	4606      	mov	r6, r0
 801d02a:	d005      	beq.n	801d038 <SFU_BOOT_RunSecureBootService+0x2c>
    TRACE("\r\n= [SBOOT] System Security Check failed! Rebooting...");
 801d02c:	485a      	ldr	r0, [pc, #360]	; (801d198 <SFU_BOOT_RunSecureBootService+0x18c>)
 801d02e:	f00b fd8d 	bl	8028b4c <iprintf>
      e_ret_code = SFU_BOOT_SECIPS_CFG_FAIL;
 801d032:	2001      	movs	r0, #1
}
 801d034:	b002      	add	sp, #8
 801d036:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 801d038:	2000      	movs	r0, #0
 801d03a:	f003 fd09 	bl	8020a50 <SFU_LL_SECU_CheckApplyRuntimeProtections>
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 801d03e:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 801d040:	4604      	mov	r4, r0
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 801d042:	d1f3      	bne.n	801d02c <SFU_BOOT_RunSecureBootService+0x20>
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 801d044:	4855      	ldr	r0, [pc, #340]	; (801d19c <SFU_BOOT_RunSecureBootService+0x190>)
 801d046:	f00b fd81 	bl	8028b4c <iprintf>
  BSP_LED_Init(SFU_STATUS_LED);
 801d04a:	2000      	movs	r0, #0
 801d04c:	f003 fdd8 	bl	8020c00 <BSP_LED_Init>
  BUTTON_INIT();
 801d050:	2100      	movs	r1, #0
 801d052:	4608      	mov	r0, r1
 801d054:	f003 fe0a 	bl	8020c6c <BSP_PB_Init>
      TRACE("lol....Configure the Secure Boot and start the State machine\n");
 801d058:	4851      	ldr	r0, [pc, #324]	; (801d1a0 <SFU_BOOT_RunSecureBootService+0x194>)
 801d05a:	f00b fdff 	bl	8028c5c <puts>
  initialDeviceStatusCheck = 1U;
 801d05e:	4b51      	ldr	r3, [pc, #324]	; (801d1a4 <SFU_BOOT_RunSecureBootService+0x198>)
 801d060:	2201      	movs	r2, #1
 801d062:	701a      	strb	r2, [r3, #0]
  if (SFU_LL_Init() != SFU_SUCCESS)
 801d064:	f003 f9e8 	bl	8020438 <SFU_LL_Init>
 801d068:	42a0      	cmp	r0, r4
 801d06a:	4606      	mov	r6, r0
 801d06c:	d001      	beq.n	801d072 <SFU_BOOT_RunSecureBootService+0x66>
        e_ret_code = SFU_BOOT_INIT_FAIL;
 801d06e:	2002      	movs	r0, #2
 801d070:	e7e0      	b.n	801d034 <SFU_BOOT_RunSecureBootService+0x28>
  if (SFU_COM_Init() != SFU_SUCCESS)
 801d072:	f000 fa95 	bl	801d5a0 <SFU_COM_Init>
 801d076:	42b0      	cmp	r0, r6
 801d078:	4604      	mov	r4, r0
 801d07a:	d1f8      	bne.n	801d06e <SFU_BOOT_RunSecureBootService+0x62>
  if (SFU_LOADER_Init() != SFU_SUCCESS)
 801d07c:	f002 fa78 	bl	801f570 <SFU_LOADER_Init>
 801d080:	42a0      	cmp	r0, r4
 801d082:	4606      	mov	r6, r0
 801d084:	d1f3      	bne.n	801d06e <SFU_BOOT_RunSecureBootService+0x62>
  if (SFU_EXCPT_Init() != SFU_SUCCESS)
 801d086:	f000 fba3 	bl	801d7d0 <SFU_EXCPT_Init>
 801d08a:	42b0      	cmp	r0, r6
 801d08c:	4604      	mov	r4, r0
 801d08e:	d1ee      	bne.n	801d06e <SFU_BOOT_RunSecureBootService+0x62>
  if (SFU_IMG_InitImageHandling() != SFU_IMG_INIT_OK)
 801d090:	f001 feea 	bl	801ee68 <SFU_IMG_InitImageHandling>
 801d094:	2800      	cmp	r0, #0
 801d096:	d1ea      	bne.n	801d06e <SFU_BOOT_RunSecureBootService+0x62>
  TRACE("\r\n\r\n");
 801d098:	4843      	ldr	r0, [pc, #268]	; (801d1a8 <SFU_BOOT_RunSecureBootService+0x19c>)
 801d09a:	f00b fddf 	bl	8028c5c <puts>
  TRACE("\r\n======================================================================");
 801d09e:	4843      	ldr	r0, [pc, #268]	; (801d1ac <SFU_BOOT_RunSecureBootService+0x1a0>)
 801d0a0:	f00b fd54 	bl	8028b4c <iprintf>
  TRACE("\r\n=              (C) COPYRIGHT 2017 STMicroelectronics                 =");
 801d0a4:	4842      	ldr	r0, [pc, #264]	; (801d1b0 <SFU_BOOT_RunSecureBootService+0x1a4>)
 801d0a6:	f00b fd51 	bl	8028b4c <iprintf>
  TRACE("\r\n=                                                                    =");
 801d0aa:	4842      	ldr	r0, [pc, #264]	; (801d1b4 <SFU_BOOT_RunSecureBootService+0x1a8>)
 801d0ac:	f00b fd4e 	bl	8028b4c <iprintf>
  TRACE("\r\n=              Secure Boot and Secure Firmware Update                =");
 801d0b0:	4841      	ldr	r0, [pc, #260]	; (801d1b8 <SFU_BOOT_RunSecureBootService+0x1ac>)
 801d0b2:	f00b fd4b 	bl	8028b4c <iprintf>
  TRACE("\r\n======================================================================");
 801d0b6:	483d      	ldr	r0, [pc, #244]	; (801d1ac <SFU_BOOT_RunSecureBootService+0x1a0>)
 801d0b8:	f00b fd48 	bl	8028b4c <iprintf>
  TRACE("\r\n\r\n");
 801d0bc:	483a      	ldr	r0, [pc, #232]	; (801d1a8 <SFU_BOOT_RunSecureBootService+0x19c>)
 801d0be:	f00b fdcd 	bl	8028c5c <puts>
  if (SE_Init(&e_se_status, SystemCoreClock) != SE_SUCCESS)
 801d0c2:	4b3e      	ldr	r3, [pc, #248]	; (801d1bc <SFU_BOOT_RunSecureBootService+0x1b0>)
 801d0c4:	a801      	add	r0, sp, #4
 801d0c6:	6819      	ldr	r1, [r3, #0]
 801d0c8:	f7fe fa5c 	bl	801b584 <SE_Init>
 801d0cc:	42a8      	cmp	r0, r5
 801d0ce:	d046      	beq.n	801d15e <SFU_BOOT_RunSecureBootService+0x152>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION CRITICAL FAILURE!");
 801d0d0:	483b      	ldr	r0, [pc, #236]	; (801d1c0 <SFU_BOOT_RunSecureBootService+0x1b4>)
 801d0d2:	f00b fd3b 	bl	8028b4c <iprintf>
  SFU_ErrorStatus  e_ret_status = SFU_ERROR;
 801d0d6:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  TRACE("....SFU_BOOT_Init: e_ret_status %d\n", e_ret_status);
 801d0da:	4621      	mov	r1, r4
 801d0dc:	4839      	ldr	r0, [pc, #228]	; (801d1c4 <SFU_BOOT_RunSecureBootService+0x1b8>)
 801d0de:	f00b fd35 	bl	8028b4c <iprintf>
      if (SFU_BOOT_Init() == SFU_SUCCESS)
 801d0e2:	4b2c      	ldr	r3, [pc, #176]	; (801d194 <SFU_BOOT_RunSecureBootService+0x188>)
 801d0e4:	429c      	cmp	r4, r3
 801d0e6:	d1c2      	bne.n	801d06e <SFU_BOOT_RunSecureBootService+0x62>
        TRACE("\n");
 801d0e8:	200a      	movs	r0, #10
 801d0ea:	f00b fd47 	bl	8028b7c <putchar>
        TRACE("SFU_BOOT_Init SFU_SUCCESS !!!\n");
 801d0ee:	4836      	ldr	r0, [pc, #216]	; (801d1c8 <SFU_BOOT_RunSecureBootService+0x1bc>)
      if (m_StateMachineContext.CurrState != SFU_STATE_CHECK_STATUS_ON_RESET)
 801d0f0:	4c36      	ldr	r4, [pc, #216]	; (801d1cc <SFU_BOOT_RunSecureBootService+0x1c0>)
        TRACE("SFU_BOOT_Init SFU_SUCCESS !!!\n");
 801d0f2:	f00b fdb3 	bl	8028c5c <puts>
        TRACE("\n");
 801d0f6:	200a      	movs	r0, #10
 801d0f8:	f00b fd40 	bl	8028b7c <putchar>
  TRACE("\n");
 801d0fc:	200a      	movs	r0, #10
 801d0fe:	f00b fd3d 	bl	8028b7c <putchar>
  TRACE("SFU_BOOT_SM_Run ---> !!!\n");
 801d102:	4833      	ldr	r0, [pc, #204]	; (801d1d0 <SFU_BOOT_RunSecureBootService+0x1c4>)
 801d104:	f00b fdaa 	bl	8028c5c <puts>
  TRACE("\n");
 801d108:	200a      	movs	r0, #10
 801d10a:	f00b fd37 	bl	8028b7c <putchar>
    TRACE("SFU_BOOT_SM_Run loop: e_ret_status %d\n", e_ret_status);
 801d10e:	4d21      	ldr	r5, [pc, #132]	; (801d194 <SFU_BOOT_RunSecureBootService+0x188>)
    TRACE("\n");
 801d110:	200a      	movs	r0, #10
 801d112:	f00b fd33 	bl	8028b7c <putchar>
    TRACE("SFU_BOOT_SM_Run loop: e_ret_status %d\n", e_ret_status);
 801d116:	4629      	mov	r1, r5
 801d118:	482e      	ldr	r0, [pc, #184]	; (801d1d4 <SFU_BOOT_RunSecureBootService+0x1c8>)
 801d11a:	f00b fd17 	bl	8028b4c <iprintf>
    TRACE("\n");
 801d11e:	200a      	movs	r0, #10
 801d120:	f00b fd2c 	bl	8028b7c <putchar>
  e_ret_status = SFU_LL_SECU_IWDG_Refresh();
 801d124:	f003 fcf0 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 801d128:	42a8      	cmp	r0, r5
 801d12a:	d021      	beq.n	801d170 <SFU_BOOT_RunSecureBootService+0x164>
  TRACE("\n");
 801d12c:	200a      	movs	r0, #10
 801d12e:	f00b fd25 	bl	8028b7c <putchar>
  TRACE("SFU_BOOT_SM_Run: e_ret_status %d\n", e_ret_status);
 801d132:	f641 71e1 	movw	r1, #8161	; 0x1fe1
 801d136:	4828      	ldr	r0, [pc, #160]	; (801d1d8 <SFU_BOOT_RunSecureBootService+0x1cc>)
 801d138:	f00b fd08 	bl	8028b4c <iprintf>
  TRACE("\n");
 801d13c:	200a      	movs	r0, #10
 801d13e:	f00b fd1d 	bl	8028b7c <putchar>
    TRACE("\n");
 801d142:	200a      	movs	r0, #10
 801d144:	f00b fd1a 	bl	8028b7c <putchar>
    TRACE("SFU_BOOT_SM_Run: e_ret_status != SFU_SUCCESS\n");
 801d148:	4824      	ldr	r0, [pc, #144]	; (801d1dc <SFU_BOOT_RunSecureBootService+0x1d0>)
 801d14a:	f00b fd87 	bl	8028c5c <puts>
    TRACE("\n");
 801d14e:	200a      	movs	r0, #10
 801d150:	f00b fd14 	bl	8028b7c <putchar>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_UNKNOWN);
 801d154:	201d      	movs	r0, #29
 801d156:	f000 facd 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
    SFU_BOOT_ForceReboot();
 801d15a:	f7ff fec5 	bl	801cee8 <SFU_BOOT_ForceReboot>
    if (e_se_status == SE_BOOT_INFO_ERR_FACTORY_RESET)
 801d15e:	4b20      	ldr	r3, [pc, #128]	; (801d1e0 <SFU_BOOT_RunSecureBootService+0x1d4>)
 801d160:	9a01      	ldr	r2, [sp, #4]
 801d162:	429a      	cmp	r2, r3
      TRACE("\r\n= [SBOOT] STATE: WARNING: SECURE ENGINE INITIALIZATION WITH FACTORY DEFAULT VALUES!");
 801d164:	bf0c      	ite	eq
 801d166:	481f      	ldreq	r0, [pc, #124]	; (801d1e4 <SFU_BOOT_RunSecureBootService+0x1d8>)
      TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 801d168:	481f      	ldrne	r0, [pc, #124]	; (801d1e8 <SFU_BOOT_RunSecureBootService+0x1dc>)
 801d16a:	f00b fcef 	bl	8028b4c <iprintf>
 801d16e:	e7b4      	b.n	801d0da <SFU_BOOT_RunSecureBootService+0xce>
      if (m_StateMachineContext.CurrState != SFU_STATE_CHECK_STATUS_ON_RESET)
 801d170:	7863      	ldrb	r3, [r4, #1]
 801d172:	b11b      	cbz	r3, 801d17c <SFU_BOOT_RunSecureBootService+0x170>
        SFU_BOOT_SetLastExecStatus(EXEC_ID_SECURE_BOOT, m_StateMachineContext.CurrState);
 801d174:	7861      	ldrb	r1, [r4, #1]
 801d176:	2000      	movs	r0, #0
 801d178:	f7ff fd46 	bl	801cc08 <SFU_BOOT_SetLastExecStatus>
      fnStateMachineFunction = fnStateMachineTable[m_StateMachineContext.CurrState];
 801d17c:	7862      	ldrb	r2, [r4, #1]
 801d17e:	4b1b      	ldr	r3, [pc, #108]	; (801d1ec <SFU_BOOT_RunSecureBootService+0x1e0>)
 801d180:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      fnStateMachineFunction();
 801d184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d188:	4798      	blx	r3
 801d18a:	e7c0      	b.n	801d10e <SFU_BOOT_RunSecureBootService+0x102>
    e_ret_code = SFU_BOOT_SECENG_INIT_FAIL;
 801d18c:	2000      	movs	r0, #0
 801d18e:	e751      	b.n	801d034 <SFU_BOOT_RunSecureBootService+0x28>
 801d190:	0012310f 	.word	0x0012310f
 801d194:	00122f11 	.word	0x00122f11
 801d198:	0802b133 	.word	0x0802b133
 801d19c:	0802b16a 	.word	0x0802b16a
 801d1a0:	0802b1ad 	.word	0x0802b1ad
 801d1a4:	20031dfc 	.word	0x20031dfc
 801d1a8:	0802af7b 	.word	0x0802af7b
 801d1ac:	0802b1ea 	.word	0x0802b1ea
 801d1b0:	0802b233 	.word	0x0802b233
 801d1b4:	0802b27c 	.word	0x0802b27c
 801d1b8:	0802b2c5 	.word	0x0802b2c5
 801d1bc:	200300cc 	.word	0x200300cc
 801d1c0:	0802b30e 	.word	0x0802b30e
 801d1c4:	0802b3d3 	.word	0x0802b3d3
 801d1c8:	0802b3f7 	.word	0x0802b3f7
 801d1cc:	2003018c 	.word	0x2003018c
 801d1d0:	0802b415 	.word	0x0802b415
 801d1d4:	0802b47d 	.word	0x0802b47d
 801d1d8:	0802b42e 	.word	0x0802b42e
 801d1dc:	0802b450 	.word	0x0802b450
 801d1e0:	0013b424 	.word	0x0013b424
 801d1e4:	0802b349 	.word	0x0802b349
 801d1e8:	0802b39f 	.word	0x0802b39f
 801d1ec:	20030000 	.word	0x20030000

0801d1f0 <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void SFU_CALLBACK_MemoryFault(void)
{
  SFU_BOOT_IrqExceptionHandler(SFU_EXCPT_MEMORY_FAULT);
 801d1f0:	2003      	movs	r0, #3
 801d1f2:	f000 ba9b 	b.w	801d72c <SFU_BOOT_IrqExceptionHandler>

0801d1f6 <HardFault_Handler>:
  * @param  None
  * @retval None
  */
void SFU_CALLBACK_HardFault(void)
{
  SFU_BOOT_IrqExceptionHandler(SFU_EXCPT_HARD_FAULT);
 801d1f6:	2004      	movs	r0, #4
 801d1f8:	f000 ba98 	b.w	801d72c <SFU_BOOT_IrqExceptionHandler>

0801d1fc <SFU_COM_Transmit>:
  * @param  uTimeOut: Timeout duration
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Transmit(uint8_t *pData, uint16_t uDataLength, uint32_t uTimeOut)
{
  return SFU_LL_UART_Transmit(pData, uDataLength, uTimeOut);
 801d1fc:	f003 b94e 	b.w	802049c <SFU_LL_UART_Transmit>

0801d200 <SFU_COM_Serial_PutByte>:
  * @brief  Transmit a byte to the COM Port.
  * @param  uParam: The byte to be sent.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Serial_PutByte(uint8_t uParam)
{
 801d200:	b507      	push	{r0, r1, r2, lr}
 801d202:	ab02      	add	r3, sp, #8
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 801d204:	2264      	movs	r2, #100	; 0x64
{
 801d206:	f803 0d01 	strb.w	r0, [r3, #-1]!
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 801d20a:	2101      	movs	r1, #1
 801d20c:	4618      	mov	r0, r3
 801d20e:	f003 f945 	bl	802049c <SFU_LL_UART_Transmit>
}
 801d212:	b003      	add	sp, #12
 801d214:	f85d fb04 	ldr.w	pc, [sp], #4

0801d218 <SFU_COM_YMODEM_Receive>:
{
 801d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d21c:	b08b      	sub	sp, #44	; 0x2c
  uint8_t tmp = 0U;
 801d21e:	2400      	movs	r4, #0
{
 801d220:	9102      	str	r1, [sp, #8]
  uint8_t tmp = 0U;
 801d222:	f88d 4012 	strb.w	r4, [sp, #18]
  if ((peCOMStatus == NULL) || (puSize == NULL))
 801d226:	4605      	mov	r5, r0
 801d228:	2800      	cmp	r0, #0
 801d22a:	f000 8148 	beq.w	801d4be <SFU_COM_YMODEM_Receive+0x2a6>
 801d22e:	2900      	cmp	r1, #0
 801d230:	f000 8145 	beq.w	801d4be <SFU_COM_YMODEM_Receive+0x2a6>
        break;
      default:
        status = HAL_ERROR;
        break;
    }
    *pData = char1;
 801d234:	f8df 9364 	ldr.w	r9, [pc, #868]	; 801d59c <SFU_COM_YMODEM_Receive+0x384>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 801d238:	7004      	strb	r4, [r0, #0]
  uint32_t session_begin = 0U;
 801d23a:	9401      	str	r4, [sp, #4]
  uint32_t errors = 0U;
 801d23c:	4626      	mov	r6, r4
  while ((session_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 801d23e:	782f      	ldrb	r7, [r5, #0]
 801d240:	2f00      	cmp	r7, #0
 801d242:	d14e      	bne.n	801d2e2 <SFU_COM_YMODEM_Receive+0xca>
  if (eRetStatus == SFU_SUCCESS)
 801d244:	f8df 8348 	ldr.w	r8, [pc, #840]	; 801d590 <SFU_COM_YMODEM_Receive+0x378>
 801d248:	e159      	b.n	801d4fe <SFU_COM_YMODEM_Receive+0x2e6>
    switch (char1)
 801d24a:	2b61      	cmp	r3, #97	; 0x61
 801d24c:	d003      	beq.n	801d256 <SFU_COM_YMODEM_Receive+0x3e>
 801d24e:	2b72      	cmp	r3, #114	; 0x72
 801d250:	d066      	beq.n	801d320 <SFU_COM_YMODEM_Receive+0x108>
 801d252:	2b41      	cmp	r3, #65	; 0x41
 801d254:	d176      	bne.n	801d344 <SFU_COM_YMODEM_Receive+0x12c>
        status = HAL_BUSY;
 801d256:	f04f 0b02 	mov.w	fp, #2
 801d25a:	e000      	b.n	801d25e <SFU_COM_YMODEM_Receive+0x46>
    status = HAL_OK;
 801d25c:	46d3      	mov	fp, sl
  uint32_t packet_size = 0U;
 801d25e:	f04f 0a00 	mov.w	sl, #0
 801d262:	e002      	b.n	801d26a <SFU_COM_YMODEM_Receive+0x52>
    status = HAL_OK;
 801d264:	46d3      	mov	fp, sl
        packet_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 801d266:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    *pData = char1;
 801d26a:	f89d 1013 	ldrb.w	r1, [sp, #19]
 801d26e:	f889 1000 	strb.w	r1, [r9]

    if (packet_size >= SFU_COM_YMODEM_PACKET_SIZE)
 801d272:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 801d276:	d96b      	bls.n	801d350 <SFU_COM_YMODEM_Receive+0x138>
    {

      eRetStatus = SFU_LL_UART_Receive(&pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX],
 801d278:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801d27c:	f10a 0104 	add.w	r1, sl, #4
 801d280:	48c1      	ldr	r0, [pc, #772]	; (801d588 <SFU_COM_YMODEM_Receive+0x370>)
 801d282:	f003 f91f 	bl	80204c4 <SFU_LL_UART_Receive>
                                       packet_size + SFU_COM_YMODEM_PACKET_OVERHEAD_SIZE, uTimeout);

      /* Simple packet sanity check */
      if (eRetStatus == SFU_SUCCESS)
 801d286:	4540      	cmp	r0, r8
 801d288:	d169      	bne.n	801d35e <SFU_COM_YMODEM_Receive+0x146>
      {
        status = HAL_OK;

        if (pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != ((pData[SFU_COM_YMODEM_PACKET_CNUMBER_INDEX]) ^
 801d28a:	f899 2003 	ldrb.w	r2, [r9, #3]
 801d28e:	f899 1002 	ldrb.w	r1, [r9, #2]
 801d292:	43d2      	mvns	r2, r2
 801d294:	b2d2      	uxtb	r2, r2
 801d296:	4291      	cmp	r1, r2
 801d298:	d161      	bne.n	801d35e <SFU_COM_YMODEM_Receive+0x146>
          status = HAL_ERROR;
        }
        else
        {
          /* Check packet CRC*/
          crc = pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ] << 8U;
 801d29a:	eb09 020a 	add.w	r2, r9, sl
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];

          /*Configure CRC with 16-bit polynomial*/
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 801d29e:	2002      	movs	r0, #2
          crc = pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ] << 8U;
 801d2a0:	7913      	ldrb	r3, [r2, #4]
 801d2a2:	9303      	str	r3, [sp, #12]
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 801d2a4:	f892 b005 	ldrb.w	fp, [r2, #5]
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 801d2a8:	f003 f886 	bl	80203b8 <SFU_LL_CRC_Config>
 801d2ac:	4540      	cmp	r0, r8
 801d2ae:	d156      	bne.n	801d35e <SFU_COM_YMODEM_Receive+0x146>
          {
            if (SFU_LL_CRC_Calculate((uint32_t *)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 801d2b0:	4651      	mov	r1, sl
 801d2b2:	48b6      	ldr	r0, [pc, #728]	; (801d58c <SFU_COM_YMODEM_Receive+0x374>)
 801d2b4:	f003 f8c2 	bl	802043c <SFU_LL_CRC_Calculate>
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 801d2b8:	9b03      	ldr	r3, [sp, #12]
 801d2ba:	eb0b 2303 	add.w	r3, fp, r3, lsl #8
            if (SFU_LL_CRC_Calculate((uint32_t *)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 801d2be:	4283      	cmp	r3, r0
 801d2c0:	d14d      	bne.n	801d35e <SFU_COM_YMODEM_Receive+0x146>
              if (m_aPacketData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 801d2c2:	f899 1002 	ldrb.w	r1, [r9, #2]
 801d2c6:	b2fa      	uxtb	r2, r7
 801d2c8:	4291      	cmp	r1, r2
 801d2ca:	d16c      	bne.n	801d3a6 <SFU_COM_YMODEM_Receive+0x18e>
                if (packets_received == 0U)
 801d2cc:	2f00      	cmp	r7, #0
 801d2ce:	f040 80fb 	bne.w	801d4c8 <SFU_COM_YMODEM_Receive+0x2b0>
                  if (m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX] != 0U)
 801d2d2:	f899 3004 	ldrb.w	r3, [r9, #4]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	f040 8095 	bne.w	801d406 <SFU_COM_YMODEM_Receive+0x1ee>
                    SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 801d2dc:	2006      	movs	r0, #6
 801d2de:	f7ff ff8f 	bl	801d200 <SFU_COM_Serial_PutByte>
  BSP_LED_Off(SFU_STATUS_LED);
 801d2e2:	2000      	movs	r0, #0
 801d2e4:	f003 fcae 	bl	8020c44 <BSP_LED_Off>
  if (*peCOMStatus == SFU_COM_YMODEM_OK)
 801d2e8:	782b      	ldrb	r3, [r5, #0]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	f040 80e7 	bne.w	801d4be <SFU_COM_YMODEM_Receive+0x2a6>
    return SFU_SUCCESS;
 801d2f0:	48a7      	ldr	r0, [pc, #668]	; (801d590 <SFU_COM_YMODEM_Receive+0x378>)
 801d2f2:	e0e6      	b.n	801d4c2 <SFU_COM_YMODEM_Receive+0x2aa>
        if ((SFU_LL_UART_Receive(&char1, 1U, uTimeout) == SFU_SUCCESS) && (char1 == SFU_COM_YMODEM_CA))
 801d2f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801d2f8:	2101      	movs	r1, #1
 801d2fa:	f10d 0013 	add.w	r0, sp, #19
 801d2fe:	f003 f8e1 	bl	80204c4 <SFU_LL_UART_Receive>
 801d302:	4540      	cmp	r0, r8
 801d304:	d121      	bne.n	801d34a <SFU_COM_YMODEM_Receive+0x132>
 801d306:	f89d 3013 	ldrb.w	r3, [sp, #19]
    status = HAL_OK;
 801d30a:	2b18      	cmp	r3, #24
 801d30c:	bf15      	itete	ne
 801d30e:	f04f 0b01 	movne.w	fp, #1
 801d312:	f04f 0b00 	moveq.w	fp, #0
 801d316:	f04f 0a00 	movne.w	sl, #0
 801d31a:	f04f 0a02 	moveq.w	sl, #2
 801d31e:	e7a4      	b.n	801d26a <SFU_COM_YMODEM_Receive+0x52>
        SFU_LL_UART_Receive(&char1, 1U, uTimeout);             /* Ymodem starup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 801d320:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801d324:	2101      	movs	r1, #1
 801d326:	f10d 0013 	add.w	r0, sp, #19
 801d32a:	f003 f8cb 	bl	80204c4 <SFU_LL_UART_Receive>
        SFU_LL_UART_Receive(&char1, 1U, uTimeout);
 801d32e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801d332:	2101      	movs	r1, #1
 801d334:	f10d 0013 	add.w	r0, sp, #19
    status = HAL_OK;
 801d338:	46d3      	mov	fp, sl
        SFU_LL_UART_Receive(&char1, 1U, uTimeout);
 801d33a:	f003 f8c3 	bl	80204c4 <SFU_LL_UART_Receive>
        packet_size = 3U;
 801d33e:	f04f 0a03 	mov.w	sl, #3
 801d342:	e792      	b.n	801d26a <SFU_COM_YMODEM_Receive+0x52>
        status = HAL_ERROR;
 801d344:	f04f 0b01 	mov.w	fp, #1
 801d348:	e789      	b.n	801d25e <SFU_COM_YMODEM_Receive+0x46>
          status = HAL_ERROR;
 801d34a:	f04f 0b01 	mov.w	fp, #1
 801d34e:	e78c      	b.n	801d26a <SFU_COM_YMODEM_Receive+0x52>
      switch (ReceivePacket(m_aPacketData, &packet_length, SFU_COM_YMODEM_DOWNLOAD_TIMEOUT))
 801d350:	f1bb 0f00 	cmp.w	fp, #0
 801d354:	d012      	beq.n	801d37c <SFU_COM_YMODEM_Receive+0x164>
 801d356:	f1bb 0f02 	cmp.w	fp, #2
 801d35a:	f000 80c8 	beq.w	801d4ee <SFU_COM_YMODEM_Receive+0x2d6>
          if (session_begin > 0U)
 801d35e:	9b01      	ldr	r3, [sp, #4]
 801d360:	b103      	cbz	r3, 801d364 <SFU_COM_YMODEM_Receive+0x14c>
            errors ++;
 801d362:	3601      	adds	r6, #1
          if (errors > SFU_COM_YMODEM_MAX_ERRORS)
 801d364:	2e03      	cmp	r6, #3
 801d366:	f240 80f0 	bls.w	801d54a <SFU_COM_YMODEM_Receive+0x332>
            SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d36a:	2018      	movs	r0, #24
 801d36c:	f7ff ff48 	bl	801d200 <SFU_COM_Serial_PutByte>
            SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d370:	2018      	movs	r0, #24
 801d372:	f7ff ff45 	bl	801d200 <SFU_COM_Serial_PutByte>
            *peCOMStatus = SFU_COM_YMODEM_ABORT;
 801d376:	2302      	movs	r3, #2
 801d378:	702b      	strb	r3, [r5, #0]
 801d37a:	e0c0      	b.n	801d4fe <SFU_COM_YMODEM_Receive+0x2e6>
          switch (packet_length)
 801d37c:	f1ba 0f02 	cmp.w	sl, #2
 801d380:	d00c      	beq.n	801d39c <SFU_COM_YMODEM_Receive+0x184>
 801d382:	f1ba 0f03 	cmp.w	sl, #3
 801d386:	d00e      	beq.n	801d3a6 <SFU_COM_YMODEM_Receive+0x18e>
 801d388:	f1ba 0f00 	cmp.w	sl, #0
 801d38c:	d199      	bne.n	801d2c2 <SFU_COM_YMODEM_Receive+0xaa>
              SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 801d38e:	2006      	movs	r0, #6
 801d390:	f7ff ff36 	bl	801d200 <SFU_COM_Serial_PutByte>
              *puSize = filesize;
 801d394:	9b02      	ldr	r3, [sp, #8]
 801d396:	4656      	mov	r6, sl
 801d398:	601c      	str	r4, [r3, #0]
 801d39a:	e750      	b.n	801d23e <SFU_COM_YMODEM_Receive+0x26>
              SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 801d39c:	2006      	movs	r0, #6
 801d39e:	f7ff ff2f 	bl	801d200 <SFU_COM_Serial_PutByte>
              *peCOMStatus = SFU_COM_YMODEM_ABORT;
 801d3a2:	f885 a000 	strb.w	sl, [r5]
          errors = 0U;
 801d3a6:	2600      	movs	r6, #0
 801d3a8:	e0a9      	b.n	801d4fe <SFU_COM_YMODEM_Receive+0x2e6>
                      m_aFileName[i++] = *file_ptr++;
 801d3aa:	548b      	strb	r3, [r1, r2]
 801d3ac:	3201      	adds	r2, #1
                    while ((*file_ptr != 0U) && (i < SFU_COM_YMODEM_FILE_NAME_LENGTH))
 801d3ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d3b2:	b10b      	cbz	r3, 801d3b8 <SFU_COM_YMODEM_Receive+0x1a0>
 801d3b4:	2a40      	cmp	r2, #64	; 0x40
 801d3b6:	d1f8      	bne.n	801d3aa <SFU_COM_YMODEM_Receive+0x192>
                    m_aFileName[i++] = '\0';
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	548b      	strb	r3, [r1, r2]
 801d3bc:	a905      	add	r1, sp, #20
                    while ((*file_ptr != ' ') && (i < SFU_COM_YMODEM_FILE_SIZE_LENGTH))
 801d3be:	5cc2      	ldrb	r2, [r0, r3]
 801d3c0:	2a20      	cmp	r2, #32
 801d3c2:	d001      	beq.n	801d3c8 <SFU_COM_YMODEM_Receive+0x1b0>
 801d3c4:	2b10      	cmp	r3, #16
 801d3c6:	d122      	bne.n	801d40e <SFU_COM_YMODEM_Receive+0x1f6>
                    file_size[i++] = '\0';
 801d3c8:	aa0a      	add	r2, sp, #40	; 0x28
 801d3ca:	4413      	add	r3, r2
 801d3cc:	2000      	movs	r0, #0
 801d3ce:	f803 0c14 	strb.w	r0, [r3, #-20]
  if ((pInputStr[0] == '0') && ((pInputStr[1] == 'x') || (pInputStr[1] == 'X')))
 801d3d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d3d6:	2b30      	cmp	r3, #48	; 0x30
 801d3d8:	d105      	bne.n	801d3e6 <SFU_COM_YMODEM_Receive+0x1ce>
 801d3da:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801d3de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d3e2:	2b58      	cmp	r3, #88	; 0x58
 801d3e4:	d01d      	beq.n	801d422 <SFU_COM_YMODEM_Receive+0x20a>
 801d3e6:	4626      	mov	r6, r4
 801d3e8:	4602      	mov	r2, r0
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 801d3ea:	240a      	movs	r4, #10
      if (pInputStr[i] == '\0')
 801d3ec:	5c8b      	ldrb	r3, [r1, r2]
 801d3ee:	b13b      	cbz	r3, 801d400 <SFU_COM_YMODEM_Receive+0x1e8>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 801d3f0:	2b6b      	cmp	r3, #107	; 0x6b
 801d3f2:	f000 80b4 	beq.w	801d55e <SFU_COM_YMODEM_Receive+0x346>
 801d3f6:	2b4b      	cmp	r3, #75	; 0x4b
 801d3f8:	d148      	bne.n	801d48c <SFU_COM_YMODEM_Receive+0x274>
 801d3fa:	2a00      	cmp	r2, #0
 801d3fc:	d046      	beq.n	801d48c <SFU_COM_YMODEM_Receive+0x274>
        val = val << 10U;
 801d3fe:	0280      	lsls	r0, r0, #10
      if (pInputStr[i] == '\0')
 801d400:	4606      	mov	r6, r0
        res = 1U;
 801d402:	2301      	movs	r3, #1
 801d404:	e0b8      	b.n	801d578 <SFU_COM_YMODEM_Receive+0x360>
 801d406:	463a      	mov	r2, r7
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 801d408:	4860      	ldr	r0, [pc, #384]	; (801d58c <SFU_COM_YMODEM_Receive+0x374>)
 801d40a:	4962      	ldr	r1, [pc, #392]	; (801d594 <SFU_COM_YMODEM_Receive+0x37c>)
 801d40c:	e7cf      	b.n	801d3ae <SFU_COM_YMODEM_Receive+0x196>
                      file_size[i++] = *file_ptr++;
 801d40e:	54ca      	strb	r2, [r1, r3]
 801d410:	3301      	adds	r3, #1
 801d412:	e7d4      	b.n	801d3be <SFU_COM_YMODEM_Receive+0x1a6>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 801d414:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 801d418:	2805      	cmp	r0, #5
 801d41a:	bf94      	ite	ls
 801d41c:	3a37      	subls	r2, #55	; 0x37
 801d41e:	3a57      	subhi	r2, #87	; 0x57
 801d420:	e017      	b.n	801d452 <SFU_COM_YMODEM_Receive+0x23a>
  if ((pInputStr[0] == '0') && ((pInputStr[1] == 'x') || (pInputStr[1] == 'X')))
 801d422:	4606      	mov	r6, r0
 801d424:	2302      	movs	r3, #2
    while ((i < 11U) && (pInputStr[i] != '\0'))
 801d426:	5cca      	ldrb	r2, [r1, r3]
 801d428:	b1ba      	cbz	r2, 801d45a <SFU_COM_YMODEM_Receive+0x242>
      if (ISVALIDHEX(pInputStr[i]))
 801d42a:	f022 0c20 	bic.w	ip, r2, #32
 801d42e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801d432:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 801d436:	f1bc 0f05 	cmp.w	ip, #5
 801d43a:	fa5f fe80 	uxtb.w	lr, r0
 801d43e:	d902      	bls.n	801d446 <SFU_COM_YMODEM_Receive+0x22e>
 801d440:	f1be 0f09 	cmp.w	lr, #9
 801d444:	d809      	bhi.n	801d45a <SFU_COM_YMODEM_Receive+0x242>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 801d446:	f1be 0f09 	cmp.w	lr, #9
 801d44a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801d44e:	d8e1      	bhi.n	801d414 <SFU_COM_YMODEM_Receive+0x1fc>
 801d450:	4602      	mov	r2, r0
      i++;
 801d452:	3301      	adds	r3, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 801d454:	2b0b      	cmp	r3, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 801d456:	4416      	add	r6, r2
    while ((i < 11U) && (pInputStr[i] != '\0'))
 801d458:	d1e5      	bne.n	801d426 <SFU_COM_YMODEM_Receive+0x20e>
    if (pInputStr[i] == '\0')
 801d45a:	aa0a      	add	r2, sp, #40	; 0x28
 801d45c:	4413      	add	r3, r2
 801d45e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 801d462:	2b00      	cmp	r3, #0
 801d464:	bf18      	it	ne
 801d466:	4626      	movne	r6, r4
                    if (SFU_COM_YMODEM_HeaderPktRxCpltCallback((uint32_t) filesize) == SFU_SUCCESS)
 801d468:	4630      	mov	r0, r6
 801d46a:	f002 f8b9 	bl	801f5e0 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>
 801d46e:	4540      	cmp	r0, r8
 801d470:	d115      	bne.n	801d49e <SFU_COM_YMODEM_Receive+0x286>
                      SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 801d472:	2006      	movs	r0, #6
 801d474:	f7ff fec4 	bl	801d200 <SFU_COM_Serial_PutByte>
                      SFU_LL_UART_Flush();
 801d478:	f003 f838 	bl	80204ec <SFU_LL_UART_Flush>
                      SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16);
 801d47c:	2043      	movs	r0, #67	; 0x43
 801d47e:	f7ff febf 	bl	801d200 <SFU_COM_Serial_PutByte>
 801d482:	4634      	mov	r4, r6
                session_begin = 1;
 801d484:	2301      	movs	r3, #1
                packets_received ++;
 801d486:	3701      	adds	r7, #1
                session_begin = 1;
 801d488:	9301      	str	r3, [sp, #4]
 801d48a:	e78c      	b.n	801d3a6 <SFU_COM_YMODEM_Receive+0x18e>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 801d48c:	f003 0cdf 	and.w	ip, r3, #223	; 0xdf
 801d490:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 801d494:	d166      	bne.n	801d564 <SFU_COM_YMODEM_Receive+0x34c>
 801d496:	2a00      	cmp	r2, #0
 801d498:	d0e6      	beq.n	801d468 <SFU_COM_YMODEM_Receive+0x250>
        val = val << 20U;
 801d49a:	0500      	lsls	r0, r0, #20
 801d49c:	e7b0      	b.n	801d400 <SFU_COM_YMODEM_Receive+0x1e8>
                      tmp = SFU_COM_YMODEM_CA;
 801d49e:	ac0a      	add	r4, sp, #40	; 0x28
 801d4a0:	2318      	movs	r3, #24
 801d4a2:	f804 3d16 	strb.w	r3, [r4, #-22]!
                      SFU_COM_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 801d4a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801d4aa:	2101      	movs	r1, #1
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	f7ff fea5 	bl	801d1fc <SFU_COM_Transmit>
                      SFU_COM_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 801d4b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801d4b6:	2101      	movs	r1, #1
 801d4b8:	4620      	mov	r0, r4
 801d4ba:	f7ff fe9f 	bl	801d1fc <SFU_COM_Transmit>
    return SFU_ERROR;
 801d4be:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 801d4c2:	b00b      	add	sp, #44	; 0x2c
 801d4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  if (SFU_COM_YMODEM_DataPktRxCpltCallback((uint8_t *) ramsource, (uint32_t) packet_length) ==
 801d4c8:	4651      	mov	r1, sl
 801d4ca:	4830      	ldr	r0, [pc, #192]	; (801d58c <SFU_COM_YMODEM_Receive+0x374>)
 801d4cc:	f002 f89c 	bl	801f608 <SFU_COM_YMODEM_DataPktRxCpltCallback>
 801d4d0:	4540      	cmp	r0, r8
 801d4d2:	d103      	bne.n	801d4dc <SFU_COM_YMODEM_Receive+0x2c4>
                    SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 801d4d4:	2006      	movs	r0, #6
 801d4d6:	f7ff fe93 	bl	801d200 <SFU_COM_Serial_PutByte>
 801d4da:	e7d3      	b.n	801d484 <SFU_COM_YMODEM_Receive+0x26c>
                    SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d4dc:	2018      	movs	r0, #24
 801d4de:	f7ff fe8f 	bl	801d200 <SFU_COM_Serial_PutByte>
                    SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d4e2:	2018      	movs	r0, #24
 801d4e4:	f7ff fe8c 	bl	801d200 <SFU_COM_Serial_PutByte>
                    *peCOMStatus = SFU_COM_YMODEM_DATA;
 801d4e8:	2304      	movs	r3, #4
 801d4ea:	702b      	strb	r3, [r5, #0]
 801d4ec:	e7ca      	b.n	801d484 <SFU_COM_YMODEM_Receive+0x26c>
          SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d4ee:	2018      	movs	r0, #24
 801d4f0:	f7ff fe86 	bl	801d200 <SFU_COM_Serial_PutByte>
          SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 801d4f4:	2018      	movs	r0, #24
 801d4f6:	f7ff fe83 	bl	801d200 <SFU_COM_Serial_PutByte>
          *peCOMStatus = SFU_COM_YMODEM_ABORT;
 801d4fa:	f885 b000 	strb.w	fp, [r5]
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 801d4fe:	f895 a000 	ldrb.w	sl, [r5]
 801d502:	f1ba 0f00 	cmp.w	sl, #0
 801d506:	f47f ae9a 	bne.w	801d23e <SFU_COM_YMODEM_Receive+0x26>
  SFU_LL_SECU_IWDG_Refresh();
 801d50a:	f003 fafd 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
  eRetStatus = SFU_LL_UART_Receive(&char1, 1, uTimeout);
 801d50e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801d512:	2101      	movs	r1, #1
 801d514:	f10d 0013 	add.w	r0, sp, #19
 801d518:	f002 ffd4 	bl	80204c4 <SFU_LL_UART_Receive>
  if (eRetStatus == SFU_SUCCESS)
 801d51c:	4540      	cmp	r0, r8
 801d51e:	f47f af1e 	bne.w	801d35e <SFU_COM_YMODEM_Receive+0x146>
    switch (char1)
 801d522:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801d526:	2b18      	cmp	r3, #24
 801d528:	f43f aee4 	beq.w	801d2f4 <SFU_COM_YMODEM_Receive+0xdc>
 801d52c:	f63f ae8d 	bhi.w	801d24a <SFU_COM_YMODEM_Receive+0x32>
 801d530:	2b02      	cmp	r3, #2
 801d532:	f43f ae97 	beq.w	801d264 <SFU_COM_YMODEM_Receive+0x4c>
 801d536:	2b04      	cmp	r3, #4
 801d538:	f43f ae90 	beq.w	801d25c <SFU_COM_YMODEM_Receive+0x44>
 801d53c:	2b01      	cmp	r3, #1
 801d53e:	f47f af01 	bne.w	801d344 <SFU_COM_YMODEM_Receive+0x12c>
    status = HAL_OK;
 801d542:	46d3      	mov	fp, sl
        packet_size = SFU_COM_YMODEM_PACKET_SIZE;
 801d544:	f04f 0a80 	mov.w	sl, #128	; 0x80
 801d548:	e68f      	b.n	801d26a <SFU_COM_YMODEM_Receive+0x52>
            SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16); /* Ask for a packet */
 801d54a:	2043      	movs	r0, #67	; 0x43
 801d54c:	f7ff fe58 	bl	801d200 <SFU_COM_Serial_PutByte>
            TRACE("\b.");                                 /* Replace C char by . on display console */
 801d550:	4811      	ldr	r0, [pc, #68]	; (801d598 <SFU_COM_YMODEM_Receive+0x380>)
 801d552:	f00b fafb 	bl	8028b4c <iprintf>
            BSP_LED_Toggle(SFU_STATUS_LED);
 801d556:	2000      	movs	r0, #0
 801d558:	f003 fb7e 	bl	8020c58 <BSP_LED_Toggle>
 801d55c:	e7cf      	b.n	801d4fe <SFU_COM_YMODEM_Receive+0x2e6>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 801d55e:	2a00      	cmp	r2, #0
 801d560:	f47f af4d 	bne.w	801d3fe <SFU_COM_YMODEM_Receive+0x1e6>
      else if (ISVALIDDEC(pInputStr[i]))
 801d564:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 801d568:	f1bc 0f09 	cmp.w	ip, #9
 801d56c:	f63f af7c 	bhi.w	801d468 <SFU_COM_YMODEM_Receive+0x250>
 801d570:	fb04 3000 	mla	r0, r4, r0, r3
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 801d574:	3830      	subs	r0, #48	; 0x30
 801d576:	2300      	movs	r3, #0
      i++;
 801d578:	3201      	adds	r2, #1
    while ((i < 11U) && (res != 1U))
 801d57a:	2a0b      	cmp	r2, #11
 801d57c:	f43f af74 	beq.w	801d468 <SFU_COM_YMODEM_Receive+0x250>
 801d580:	2b00      	cmp	r3, #0
 801d582:	f43f af33 	beq.w	801d3ec <SFU_COM_YMODEM_Receive+0x1d4>
 801d586:	e76f      	b.n	801d468 <SFU_COM_YMODEM_Receive+0x250>
 801d588:	20030192 	.word	0x20030192
 801d58c:	20030194 	.word	0x20030194
 801d590:	00122f11 	.word	0x00122f11
 801d594:	20031dfd 	.word	0x20031dfd
 801d598:	0802b79f 	.word	0x0802b79f
 801d59c:	20030190 	.word	0x20030190

0801d5a0 <SFU_COM_Init>:
  * @brief  SFU Com Init function.
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Init(void)
{
 801d5a0:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 801d5a2:	4b06      	ldr	r3, [pc, #24]	; (801d5bc <SFU_COM_Init+0x1c>)
 801d5a4:	6818      	ldr	r0, [r3, #0]
 801d5a6:	2300      	movs	r3, #0
 801d5a8:	4619      	mov	r1, r3
 801d5aa:	2202      	movs	r2, #2
 801d5ac:	6880      	ldr	r0, [r0, #8]
 801d5ae:	f00b fb6d 	bl	8028c8c <setvbuf>
#endif /* __GNUC__ */
  return SFU_LL_UART_Init();
}
 801d5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SFU_LL_UART_Init();
 801d5b6:	f002 bf49 	b.w	802044c <SFU_LL_UART_Init>
 801d5ba:	bf00      	nop
 801d5bc:	20030108 	.word	0x20030108

0801d5c0 <SFU_COM_DeInit>:
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_DeInit(void)
{
  return SFU_LL_UART_DeInit();
 801d5c0:	f002 bf68 	b.w	8020494 <SFU_LL_UART_DeInit>

0801d5c4 <SFU_COM_Serial_PutString>:
SFU_ErrorStatus SFU_COM_Serial_PutString(uint8_t *pString)
{
  uint16_t length = 0U;

  /* Check the pointers allocation */
  if (pString == NULL)
 801d5c4:	b140      	cbz	r0, 801d5d8 <SFU_COM_Serial_PutString+0x14>
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	b299      	uxth	r1, r3
 801d5ca:	3301      	adds	r3, #1
  {
    return SFU_ERROR;
  }

  while (pString[length] != '\0')
 801d5cc:	5c42      	ldrb	r2, [r0, r1]
 801d5ce:	2a00      	cmp	r2, #0
 801d5d0:	d1fa      	bne.n	801d5c8 <SFU_COM_Serial_PutString+0x4>
  {
    length++;
  }

  return SFU_LL_UART_Transmit(pString, length, SFU_COM_TRACE_SERIAL_TIME_OUT);
 801d5d2:	2264      	movs	r2, #100	; 0x64
 801d5d4:	f002 bf62 	b.w	802049c <SFU_LL_UART_Transmit>

}
 801d5d8:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801d5dc:	4770      	bx	lr

0801d5de <__io_putchar>:
  * @brief  Retargets the C library printf function to SFU UART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 801d5de:	b507      	push	{r0, r1, r2, lr}
 801d5e0:	ab02      	add	r3, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 801d5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801d5e6:	f843 0d04 	str.w	r0, [r3, #-4]!
  SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 801d5ea:	2101      	movs	r1, #1
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f002 ff55 	bl	802049c <SFU_LL_UART_Transmit>

  return ch;
}
 801d5f2:	9801      	ldr	r0, [sp, #4]
 801d5f4:	b003      	add	sp, #12
 801d5f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801d5fc <SFU_EXCPT_RuntimeExceptionHandler>:
  *         the printf inside this function as well, a fault will likely occur.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static void SFU_EXCPT_RuntimeExceptionHandler(SFU_EXCPT_IdTypeDef eExceptionId)
{
  switch (eExceptionId)
 801d5fc:	3803      	subs	r0, #3
 801d5fe:	2819      	cmp	r0, #25
 801d600:	d828      	bhi.n	801d654 <SFU_EXCPT_RuntimeExceptionHandler+0x58>
 801d602:	e8df f000 	tbb	[pc, r0]
 801d606:	1210      	.short	0x1210
 801d608:	1714270d 	.word	0x1714270d
 801d60c:	1f1d1b19 	.word	0x1f1d1b19
 801d610:	29252321 	.word	0x29252321
 801d614:	312f2d2b 	.word	0x312f2d2b
 801d618:	39373533 	.word	0x39373533
 801d61c:	413f3d3b 	.word	0x413f3d3b
         ...
         ...
      */
      /* WARNING: Please consider that at runt-time,  this "case" execution is
      inside an ISR */
      TRACE_IRQ((uint8_t *)"\r\n= [EXCPT] TAMPERING FAULT!");
 801d620:	481a      	ldr	r0, [pc, #104]	; (801d68c <SFU_EXCPT_RuntimeExceptionHandler+0x90>)
         ...
         ...
      */
      /* WARNING: Please consider that at run-time,  this "case" execution is
      inside an ISR */
      TRACE_IRQ((uint8_t *)"\r\n= [EXCPT] MEMORY FAULT!");
 801d622:	f7ff bfcf 	b.w	801d5c4 <SFU_COM_Serial_PutString>
 801d626:	481a      	ldr	r0, [pc, #104]	; (801d690 <SFU_EXCPT_RuntimeExceptionHandler+0x94>)
 801d628:	e7fb      	b.n	801d622 <SFU_EXCPT_RuntimeExceptionHandler+0x26>
         ...
         ...
      */
      /* WARNING: Please consider that at run-time,  this "case" execution is
      inside an ISR */
      TRACE_IRQ((uint8_t *)"\r\n= [EXCPT] HARD FAULT!");
 801d62a:	481a      	ldr	r0, [pc, #104]	; (801d694 <SFU_EXCPT_RuntimeExceptionHandler+0x98>)
 801d62c:	e7f9      	b.n	801d622 <SFU_EXCPT_RuntimeExceptionHandler+0x26>
        e.g. trigger a mass erase or take any other action in order to
        protect your system.
        ...
        ...
      */
      TRACE("\r\n= [EXCPT] CHECK ON-RESET FAILED!");
 801d62e:	481a      	ldr	r0, [pc, #104]	; (801d698 <SFU_EXCPT_RuntimeExceptionHandler+0x9c>)
         e.g. trigger a mass erase or take any other action in order to
         protect your system.
         ...
         ...
      */
      TRACE("\r\n= [EXCPT] INSTALLATION CANCELLED: FORBIDDEN VERSION!");
 801d630:	f00b ba8c 	b.w	8028b4c <iprintf>
      TRACE("\r\n= [EXCPT] CHECK FOR NEW FW DOWNLOAD FAILED!");
 801d634:	4819      	ldr	r0, [pc, #100]	; (801d69c <SFU_EXCPT_RuntimeExceptionHandler+0xa0>)
 801d636:	e7fb      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] FW DOWNLOAD FAILED!");
 801d638:	4819      	ldr	r0, [pc, #100]	; (801d6a0 <SFU_EXCPT_RuntimeExceptionHandler+0xa4>)
 801d63a:	e7f9      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] NOT POSSIBLE TO CHECK THE FW STATUS. FAILURE!");
 801d63c:	4819      	ldr	r0, [pc, #100]	; (801d6a4 <SFU_EXCPT_RuntimeExceptionHandler+0xa8>)
 801d63e:	e7f7      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] USER FW DECRYPTION FAILED!");
 801d640:	4819      	ldr	r0, [pc, #100]	; (801d6a8 <SFU_EXCPT_RuntimeExceptionHandler+0xac>)
 801d642:	e7f5      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] USER FW INSTALLATION FAILED!");
 801d644:	4819      	ldr	r0, [pc, #100]	; (801d6ac <SFU_EXCPT_RuntimeExceptionHandler+0xb0>)
 801d646:	e7f3      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] USER FW CANNOT BE VERIFIED. FAILURE!");
 801d648:	4819      	ldr	r0, [pc, #100]	; (801d6b0 <SFU_EXCPT_RuntimeExceptionHandler+0xb4>)
 801d64a:	e7f1      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] RESUME INSTALL NEW USER FW CANNOT BE EXECUTED. FAILURE!");
 801d64c:	4819      	ldr	r0, [pc, #100]	; (801d6b4 <SFU_EXCPT_RuntimeExceptionHandler+0xb8>)
 801d64e:	e7ef      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] NOT POSSIBLE TO EXECUTE THE NEW FW. FAILURE!");
 801d650:	4819      	ldr	r0, [pc, #100]	; (801d6b8 <SFU_EXCPT_RuntimeExceptionHandler+0xbc>)
 801d652:	e7ed      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] UNKNOWN FAILURE!");
 801d654:	4819      	ldr	r0, [pc, #100]	; (801d6bc <SFU_EXCPT_RuntimeExceptionHandler+0xc0>)
 801d656:	e7eb      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] CANNOT CONFIGURE SECURE ENGINE TO RUN THE FIRMWARE!");
 801d658:	4819      	ldr	r0, [pc, #100]	; (801d6c0 <SFU_EXCPT_RuntimeExceptionHandler+0xc4>)
 801d65a:	e7e9      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] INCONSISTENT FIRMWARE SIZE!");
 801d65c:	4819      	ldr	r0, [pc, #100]	; (801d6c4 <SFU_EXCPT_RuntimeExceptionHandler+0xc8>)
 801d65e:	e7e7      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] BINARY IMAGE TOO BIG TO BE STORED IN SLOT#1!");
 801d660:	4819      	ldr	r0, [pc, #100]	; (801d6c8 <SFU_EXCPT_RuntimeExceptionHandler+0xcc>)
 801d662:	e7e5      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] COM ERROR DURING DOWNLOAD !");
 801d664:	4819      	ldr	r0, [pc, #100]	; (801d6cc <SFU_EXCPT_RuntimeExceptionHandler+0xd0>)
 801d666:	e7e3      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] DOWNLOAD ERROR!");
 801d668:	4819      	ldr	r0, [pc, #100]	; (801d6d0 <SFU_EXCPT_RuntimeExceptionHandler+0xd4>)
 801d66a:	e7e1      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] HEADER AUTHENTICATION FAILURE!");
 801d66c:	4819      	ldr	r0, [pc, #100]	; (801d6d4 <SFU_EXCPT_RuntimeExceptionHandler+0xd8>)
 801d66e:	e7df      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] DECRYPT FAILURE!");
 801d670:	4819      	ldr	r0, [pc, #100]	; (801d6d8 <SFU_EXCPT_RuntimeExceptionHandler+0xdc>)
 801d672:	e7dd      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] SIGNATURE CHECK FAILED!");
 801d674:	4819      	ldr	r0, [pc, #100]	; (801d6dc <SFU_EXCPT_RuntimeExceptionHandler+0xe0>)
 801d676:	e7db      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] INCORRECT BINARY IMAGE!");
 801d678:	4819      	ldr	r0, [pc, #100]	; (801d6e0 <SFU_EXCPT_RuntimeExceptionHandler+0xe4>)
 801d67a:	e7d9      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] FLASH ERROR!");
 801d67c:	4819      	ldr	r0, [pc, #100]	; (801d6e4 <SFU_EXCPT_RuntimeExceptionHandler+0xe8>)
 801d67e:	e7d7      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] INTERNAL FWIMG ISSUE!");
 801d680:	4819      	ldr	r0, [pc, #100]	; (801d6e8 <SFU_EXCPT_RuntimeExceptionHandler+0xec>)
 801d682:	e7d5      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] NOT POSSIBLE TO SWAP THE IMAGES!");
 801d684:	4819      	ldr	r0, [pc, #100]	; (801d6ec <SFU_EXCPT_RuntimeExceptionHandler+0xf0>)
 801d686:	e7d3      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
      TRACE("\r\n= [EXCPT] INSTALLATION CANCELLED: FORBIDDEN VERSION!");
 801d688:	4819      	ldr	r0, [pc, #100]	; (801d6f0 <SFU_EXCPT_RuntimeExceptionHandler+0xf4>)
 801d68a:	e7d1      	b.n	801d630 <SFU_EXCPT_RuntimeExceptionHandler+0x34>
 801d68c:	0802b7a2 	.word	0x0802b7a2
 801d690:	0802b7bf 	.word	0x0802b7bf
 801d694:	0802b7d9 	.word	0x0802b7d9
 801d698:	0802b7f1 	.word	0x0802b7f1
 801d69c:	0802b814 	.word	0x0802b814
 801d6a0:	0802b842 	.word	0x0802b842
 801d6a4:	0802b862 	.word	0x0802b862
 801d6a8:	0802b89c 	.word	0x0802b89c
 801d6ac:	0802b8c3 	.word	0x0802b8c3
 801d6b0:	0802b8ec 	.word	0x0802b8ec
 801d6b4:	0802b91d 	.word	0x0802b91d
 801d6b8:	0802b961 	.word	0x0802b961
 801d6bc:	0802b99a 	.word	0x0802b99a
 801d6c0:	0802b9b7 	.word	0x0802b9b7
 801d6c4:	0802b9f7 	.word	0x0802b9f7
 801d6c8:	0802ba1f 	.word	0x0802ba1f
 801d6cc:	0802ba58 	.word	0x0802ba58
 801d6d0:	0802ba80 	.word	0x0802ba80
 801d6d4:	0802ba9c 	.word	0x0802ba9c
 801d6d8:	0802bac7 	.word	0x0802bac7
 801d6dc:	0802bae4 	.word	0x0802bae4
 801d6e0:	0802bb08 	.word	0x0802bb08
 801d6e4:	0802bb2c 	.word	0x0802bb2c
 801d6e8:	0802bb45 	.word	0x0802bb45
 801d6ec:	0802bb67 	.word	0x0802bb67
 801d6f0:	0802bb94 	.word	0x0802bb94

0801d6f4 <SFU_BOOT_SetLastExecError>:
{
 801d6f4:	b530      	push	{r4, r5, lr}
 801d6f6:	b087      	sub	sp, #28
 801d6f8:	4605      	mov	r5, r0
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801d6fa:	a902      	add	r1, sp, #8
 801d6fc:	a801      	add	r0, sp, #4
 801d6fe:	f7fd ff8b 	bl	801b618 <SE_INFO_ReadBootInfo>
 801d702:	4b08      	ldr	r3, [pc, #32]	; (801d724 <SFU_BOOT_SetLastExecError+0x30>)
 801d704:	4298      	cmp	r0, r3
 801d706:	4604      	mov	r4, r0
 801d708:	d003      	beq.n	801d712 <SFU_BOOT_SetLastExecError+0x1e>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801d70a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 801d70e:	b007      	add	sp, #28
 801d710:	bd30      	pop	{r4, r5, pc}
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801d712:	a902      	add	r1, sp, #8
 801d714:	a801      	add	r0, sp, #4
    x_boot_info.LastExecError = uLastExecError;
 801d716:	9503      	str	r5, [sp, #12]
    if (SE_INFO_WriteBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801d718:	f7fd ffa4 	bl	801b664 <SE_INFO_WriteBootInfo>
 801d71c:	42a0      	cmp	r0, r4
 801d71e:	d1f4      	bne.n	801d70a <SFU_BOOT_SetLastExecError+0x16>
      e_ret_status = SFU_SUCCESS;
 801d720:	4801      	ldr	r0, [pc, #4]	; (801d728 <SFU_BOOT_SetLastExecError+0x34>)
  return e_ret_status;
 801d722:	e7f4      	b.n	801d70e <SFU_BOOT_SetLastExecError+0x1a>
 801d724:	0012310f 	.word	0x0012310f
 801d728:	00122f11 	.word	0x00122f11

0801d72c <SFU_BOOT_IrqExceptionHandler>:
{
 801d72c:	b510      	push	{r4, lr}
 801d72e:	4604      	mov	r4, r0
  SFU_EXCPT_RuntimeExceptionHandler(eExceptionId);
 801d730:	f7ff ff64 	bl	801d5fc <SFU_EXCPT_RuntimeExceptionHandler>
  (void)SFU_BOOT_SetLastExecError((uint32_t) eExceptionId);
 801d734:	4620      	mov	r0, r4
 801d736:	f7ff ffdd 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
}
 801d73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SFU_BOOT_ForceReboot();
 801d73e:	f7ff bbd3 	b.w	801cee8 <SFU_BOOT_ForceReboot>
	...

0801d744 <SFU_BOOT_StateExceptionHandler>:
{
 801d744:	b510      	push	{r4, lr}
 801d746:	b086      	sub	sp, #24
 801d748:	4604      	mov	r4, r0
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801d74a:	a902      	add	r1, sp, #8
 801d74c:	a801      	add	r0, sp, #4
 801d74e:	f7fd ff63 	bl	801b618 <SE_INFO_ReadBootInfo>
 801d752:	4b0d      	ldr	r3, [pc, #52]	; (801d788 <SFU_BOOT_StateExceptionHandler+0x44>)
 801d754:	4298      	cmp	r0, r3
 801d756:	d112      	bne.n	801d77e <SFU_BOOT_StateExceptionHandler+0x3a>
 801d758:	2c09      	cmp	r4, #9
    u_specific_LastExecError = x_boot_info.LastExecError;
 801d75a:	9b03      	ldr	r3, [sp, #12]
 801d75c:	d80d      	bhi.n	801d77a <SFU_BOOT_StateExceptionHandler+0x36>
 801d75e:	4a0b      	ldr	r2, [pc, #44]	; (801d78c <SFU_BOOT_StateExceptionHandler+0x48>)
 801d760:	5d14      	ldrb	r4, [r2, r4]
  if (SFU_EXCPT_NONE != u_specific_LastExecError)
 801d762:	b103      	cbz	r3, 801d766 <SFU_BOOT_StateExceptionHandler+0x22>
    eExceptionId = (SFU_EXCPT_IdTypeDef)u_specific_LastExecError;
 801d764:	b2dc      	uxtb	r4, r3
  SFU_EXCPT_RuntimeExceptionHandler(eExceptionId);
 801d766:	4620      	mov	r0, r4
 801d768:	f7ff ff48 	bl	801d5fc <SFU_EXCPT_RuntimeExceptionHandler>
  (void)SFU_BOOT_SetLastExecError((uint32_t) eExceptionId);
 801d76c:	4620      	mov	r0, r4
 801d76e:	f7ff ffc1 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
}
 801d772:	b006      	add	sp, #24
 801d774:	bd10      	pop	{r4, pc}
  uint32_t u_specific_LastExecError = (uint32_t)SFU_EXCPT_NONE;
 801d776:	2300      	movs	r3, #0
 801d778:	e7f1      	b.n	801d75e <SFU_BOOT_StateExceptionHandler+0x1a>
    u_specific_LastExecError = x_boot_info.LastExecError;
 801d77a:	241d      	movs	r4, #29
 801d77c:	e7f1      	b.n	801d762 <SFU_BOOT_StateExceptionHandler+0x1e>
 801d77e:	2c09      	cmp	r4, #9
 801d780:	d9f9      	bls.n	801d776 <SFU_BOOT_StateExceptionHandler+0x32>
  if (SE_INFO_ReadBootInfo(&e_se_status, &x_boot_info) == SE_SUCCESS)
 801d782:	241d      	movs	r4, #29
 801d784:	e7ef      	b.n	801d766 <SFU_BOOT_StateExceptionHandler+0x22>
 801d786:	bf00      	nop
 801d788:	0012310f 	.word	0x0012310f
 801d78c:	08029e30 	.word	0x08029e30

0801d790 <SFU_EXCPT_Check_Code>:
}
 801d790:	4800      	ldr	r0, [pc, #0]	; (801d794 <SFU_EXCPT_Check_Code+0x4>)
 801d792:	4770      	bx	lr
 801d794:	00122f11 	.word	0x00122f11

0801d798 <SFU_EXCPT_Security_Error>:
{
 801d798:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] Security issue : execution stopped !");
 801d79a:	480a      	ldr	r0, [pc, #40]	; (801d7c4 <SFU_EXCPT_Security_Error+0x2c>)
 801d79c:	f00b f9d6 	bl	8028b4c <iprintf>
  HAL_Delay(1000);
 801d7a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d7a4:	f003 fb16 	bl	8020dd4 <HAL_Delay>
 801d7a8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801d7ac:	4906      	ldr	r1, [pc, #24]	; (801d7c8 <SFU_EXCPT_Security_Error+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801d7ae:	4b07      	ldr	r3, [pc, #28]	; (801d7cc <SFU_EXCPT_Security_Error+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801d7b0:	68ca      	ldr	r2, [r1, #12]
 801d7b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801d7b6:	4313      	orrs	r3, r2
 801d7b8:	60cb      	str	r3, [r1, #12]
 801d7ba:	f3bf 8f4f 	dsb	sy
    __NOP();
 801d7be:	bf00      	nop
 801d7c0:	e7fd      	b.n	801d7be <SFU_EXCPT_Security_Error+0x26>
 801d7c2:	bf00      	nop
 801d7c4:	0802bbcb 	.word	0x0802bbcb
 801d7c8:	e000ed00 	.word	0xe000ed00
 801d7cc:	05fa0004 	.word	0x05fa0004

0801d7d0 <SFU_EXCPT_Init>:
}
 801d7d0:	4800      	ldr	r0, [pc, #0]	; (801d7d4 <SFU_EXCPT_Init+0x4>)
 801d7d2:	4770      	bx	lr
 801d7d4:	00122f11 	.word	0x00122f11

0801d7d8 <SFU_EXCPT_DeInit>:
 801d7d8:	4800      	ldr	r0, [pc, #0]	; (801d7dc <SFU_EXCPT_DeInit+0x4>)
 801d7da:	4770      	bx	lr
 801d7dc:	00122f11 	.word	0x00122f11

0801d7e0 <SFU_EXCPT_ResetExceptionHandler>:
  switch (eExceptionId)
 801d7e0:	2801      	cmp	r0, #1
 801d7e2:	d002      	beq.n	801d7ea <SFU_EXCPT_ResetExceptionHandler+0xa>
 801d7e4:	2802      	cmp	r0, #2
 801d7e6:	d003      	beq.n	801d7f0 <SFU_EXCPT_ResetExceptionHandler+0x10>
 801d7e8:	4770      	bx	lr
      TRACE("\r\n= [EXCPT] FIREWALL RESET FAULT!");
 801d7ea:	4802      	ldr	r0, [pc, #8]	; (801d7f4 <SFU_EXCPT_ResetExceptionHandler+0x14>)
      TRACE("\r\n= [EXCPT] WATCHDOG RESET FAULT!");
 801d7ec:	f00b b9ae 	b.w	8028b4c <iprintf>
 801d7f0:	4801      	ldr	r0, [pc, #4]	; (801d7f8 <SFU_EXCPT_ResetExceptionHandler+0x18>)
 801d7f2:	e7fb      	b.n	801d7ec <SFU_EXCPT_ResetExceptionHandler+0xc>
 801d7f4:	0802bbfc 	.word	0x0802bbfc
 801d7f8:	0802bc1e 	.word	0x0802bc1e

0801d7fc <CheckHeaderValidated>:
  *         (Check if the header has a VALID tag)
  * @param  phdr  pointer to header to check
  * @retval SFU_ SUCCESS if valid, a SFU_ErrorStatus error otherwise.
  */
static SFU_ErrorStatus CheckHeaderValidated(uint8_t *phdr)
{
 801d7fc:	b538      	push	{r3, r4, r5, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_FwRawHeaderTypeDef* pFwHeader = (SE_FwRawHeaderTypeDef*) phdr;
  SFU_FwValidTypeDef* pFwValid = (SFU_FwValidTypeDef*) (((uint8_t*) pFwHeader) + sizeof(SE_FwRawHeaderTypeDef));

  if(memcmp(pFwHeader->HeaderMAC, &pFwValid->Valid[0][0], MAGIC_LENGTH))
 801d7fe:	f500 65dc 	add.w	r5, r0, #1760	; 0x6e0
{
 801d802:	4604      	mov	r4, r0
  if(memcmp(pFwHeader->HeaderMAC, &pFwValid->Valid[0][0], MAGIC_LENGTH))
 801d804:	f500 61f4 	add.w	r1, r0, #1952	; 0x7a0
 801d808:	2220      	movs	r2, #32
 801d80a:	4628      	mov	r0, r5
 801d80c:	f00b f8c6 	bl	802899c <memcmp>
 801d810:	b968      	cbnz	r0, 801d82e <CheckHeaderValidated+0x32>
  {
    return  e_ret_status;
  }
  if(memcmp(pFwHeader->HeaderMAC, &pFwValid->Valid[1][0], MAGIC_LENGTH))
 801d812:	2220      	movs	r2, #32
 801d814:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
 801d818:	4628      	mov	r0, r5
 801d81a:	f00b f8bf 	bl	802899c <memcmp>
  {
    return  e_ret_status;
  }
  return SFU_SUCCESS;
 801d81e:	4a05      	ldr	r2, [pc, #20]	; (801d834 <CheckHeaderValidated+0x38>)
 801d820:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801d824:	2800      	cmp	r0, #0
 801d826:	bf14      	ite	ne
 801d828:	4618      	movne	r0, r3
 801d82a:	4610      	moveq	r0, r2
}
 801d82c:	bd38      	pop	{r3, r4, r5, pc}
    return  e_ret_status;
 801d82e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801d832:	e7fb      	b.n	801d82c <CheckHeaderValidated+0x30>
 801d834:	00122f11 	.word	0x00122f11

0801d838 <VerifyFwRawHeaderTag>:
{
 801d838:	b507      	push	{r0, r1, r2, lr}
  if (SE_VerifyFwRawHeaderTag(&se_status, (SE_FwRawHeaderTypeDef *)pFWInfoInput) == SE_SUCCESS)
 801d83a:	4601      	mov	r1, r0
 801d83c:	a801      	add	r0, sp, #4
 801d83e:	f002 fc37 	bl	80200b0 <SE_VerifyFwRawHeaderTag>
 801d842:	4b08      	ldr	r3, [pc, #32]	; (801d864 <VerifyFwRawHeaderTag+0x2c>)
 801d844:	4298      	cmp	r0, r3
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_AUTHENTICATE);
 801d846:	bf01      	itttt	eq
 801d848:	4a07      	ldreq	r2, [pc, #28]	; (801d868 <VerifyFwRawHeaderTag+0x30>)
 801d84a:	4808      	ldreq	r0, [pc, #32]	; (801d86c <VerifyFwRawHeaderTag+0x34>)
 801d84c:	6813      	ldreq	r3, [r2, #0]
 801d84e:	f483 43f3 	eoreq.w	r3, r3, #31104	; 0x7980
 801d852:	bf0a      	itet	eq
 801d854:	f083 0319 	eoreq.w	r3, r3, #25
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801d858:	f641 70e1 	movwne	r0, #8161	; 0x1fe1
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_AUTHENTICATE);
 801d85c:	6013      	streq	r3, [r2, #0]
}
 801d85e:	b003      	add	sp, #12
 801d860:	f85d fb04 	ldr.w	pc, [sp], #4
 801d864:	0012310f 	.word	0x0012310f
 801d868:	20030004 	.word	0x20030004
 801d86c:	00122f11 	.word	0x00122f11

0801d870 <EraseSlotIndex.part.1>:
  * @note   The erasure occurs at @: @slot + index*swap_area_size
  * @param  SlotNumber This is Slot #0 or Slot #1
  * @param  Index This is the number of "swap size" we jump from the slot start
  * @retval SFU_ SUCCESS if valid, a SFU_ErrorStatus error otherwise.
  */
static SFU_ErrorStatus EraseSlotIndex(uint32_t SlotNumber, uint32_t index)
 801d870:	b513      	push	{r0, r1, r4, lr}
  uint8_t *pbuffer;
  if (SlotNumber > (SFU_SLOTS - 1))
  {
    return SFU_ERROR;
  }
  pbuffer = (uint8_t *) SlotHeaderAddress[SlotNumber];
 801d872:	4b0f      	ldr	r3, [pc, #60]	; (801d8b0 <EraseSlotIndex.part.1+0x40>)
  pbuffer = pbuffer + (SFU_IMG_SWAP_REGION_SIZE * index);
 801d874:	4a0f      	ldr	r2, [pc, #60]	; (801d8b4 <EraseSlotIndex.part.1+0x44>)
  pbuffer = (uint8_t *) SlotHeaderAddress[SlotNumber];
 801d876:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  pbuffer = pbuffer + (SFU_IMG_SWAP_REGION_SIZE * index);
 801d87a:	480f      	ldr	r0, [pc, #60]	; (801d8b8 <EraseSlotIndex.part.1+0x48>)
  e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, pbuffer, SFU_IMG_SWAP_REGION_SIZE) ;
 801d87c:	1a82      	subs	r2, r0, r2
 801d87e:	fb01 3102 	mla	r1, r1, r2, r3
 801d882:	f10d 0007 	add.w	r0, sp, #7
 801d886:	f002 ffd5 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 801d88a:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801d88e:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, pbuffer, SFU_IMG_SWAP_REGION_SIZE) ;
 801d890:	4604      	mov	r4, r0
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 801d892:	d10a      	bne.n	801d8aa <EraseSlotIndex.part.1+0x3a>
 801d894:	4b09      	ldr	r3, [pc, #36]	; (801d8bc <EraseSlotIndex.part.1+0x4c>)
 801d896:	480a      	ldr	r0, [pc, #40]	; (801d8c0 <EraseSlotIndex.part.1+0x50>)
 801d898:	2101      	movs	r1, #1
 801d89a:	7019      	strb	r1, [r3, #0]
 801d89c:	4b09      	ldr	r3, [pc, #36]	; (801d8c4 <EraseSlotIndex.part.1+0x54>)
 801d89e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801d8a2:	601a      	str	r2, [r3, #0]
 801d8a4:	4b08      	ldr	r3, [pc, #32]	; (801d8c8 <EraseSlotIndex.part.1+0x58>)
 801d8a6:	f00b f951 	bl	8028b4c <iprintf>
  return e_ret_status;
}
 801d8aa:	4620      	mov	r0, r4
 801d8ac:	b002      	add	sp, #8
 801d8ae:	bd10      	pop	{r4, pc}
 801d8b0:	08029e3c 	.word	0x08029e3c
 801d8b4:	081d5000 	.word	0x081d5000
 801d8b8:	081e0000 	.word	0x081e0000
 801d8bc:	200325e4 	.word	0x200325e4
 801d8c0:	0802bcc8 	.word	0x0802bcc8
 801d8c4:	200325e0 	.word	0x200325e0
 801d8c8:	0802bc40 	.word	0x0802bc40

0801d8cc <DecryptImageInSlot1.constprop.3>:
  * @brief Decrypt Image in slot #1
  * @ note Decrypt is done from slot 1 to slot 1 + swap with 2 images (swap contains 1st sector)
  * @param  pFwImageHeader
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
static SFU_ErrorStatus DecryptImageInSlot1(SE_FwRawHeaderTypeDef *pFwImageHeader)
 801d8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8d0:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 801d8d4:	b085      	sub	sp, #20
  uint32_t fw_dest_erase_address = 0U;
  int32_t fw_decrypted_total_size = 0;
  int32_t size;
  int32_t oldsize;
  int32_t fw_decrypted_chunk_size;
  int32_t fw_tag_len = 0;
 801d8d6:	2700      	movs	r7, #0
  {
    return e_ret_status;
  }

  /* Decryption process*/
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 801d8d8:	2201      	movs	r2, #1
 801d8da:	498a      	ldr	r1, [pc, #552]	; (801db04 <DecryptImageInSlot1.constprop.3+0x238>)
  int32_t fw_tag_len = 0;
 801d8dc:	970b      	str	r7, [sp, #44]	; 0x2c
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 801d8de:	a809      	add	r0, sp, #36	; 0x24
 801d8e0:	f002 fc18 	bl	8020114 <SE_Decrypt_Init>
  if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK))
 801d8e4:	4b88      	ldr	r3, [pc, #544]	; (801db08 <DecryptImageInSlot1.constprop.3+0x23c>)
 801d8e6:	9306      	str	r3, [sp, #24]
 801d8e8:	4298      	cmp	r0, r3
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_PARTIAL);
 801d8ea:	4683      	mov	fp, r0
  if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK))
 801d8ec:	f040 8087 	bne.w	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
 801d8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8f2:	4a86      	ldr	r2, [pc, #536]	; (801db0c <DecryptImageInSlot1.constprop.3+0x240>)
 801d8f4:	4293      	cmp	r3, r2
 801d8f6:	f040 8082 	bne.w	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
  uint32_t NumberOfChunkPerSwap = SFU_IMG_SWAP_REGION_SIZE / SFU_IMG_CHUNK_SIZE;
 801d8fa:	4a85      	ldr	r2, [pc, #532]	; (801db10 <DecryptImageInSlot1.constprop.3+0x244>)
 801d8fc:	4d85      	ldr	r5, [pc, #532]	; (801db14 <DecryptImageInSlot1.constprop.3+0x248>)
  int32_t fw_decrypted_total_size = 0;
 801d8fe:	9704      	str	r7, [sp, #16]
  uint32_t NumberOfChunkPerSwap = SFU_IMG_SWAP_REGION_SIZE / SFU_IMG_CHUNK_SIZE;
 801d900:	1aad      	subs	r5, r5, r2
 801d902:	0aea      	lsrs	r2, r5, #11
 801d904:	9203      	str	r2, [sp, #12]
  uint32_t fw_dest_erase_address = 0U;
 801d906:	46ba      	mov	sl, r7
  uint32_t fw_dest_address_write = 0U;
 801d908:	46b8      	mov	r8, r7
  uint32_t pass_index = 0;
 801d90a:	463e      	mov	r6, r7
  {
    e_ret_status = SFU_SUCCESS;
    size = SFU_IMG_CHUNK_SIZE;

    /* Decryption loop*/
    while ((e_ret_status == SFU_SUCCESS) && (fw_decrypted_total_size < (pFwImageHeader->PartialFwSize)) &&
 801d90c:	9307      	str	r3, [sp, #28]
 801d90e:	4b7d      	ldr	r3, [pc, #500]	; (801db04 <DecryptImageInSlot1.constprop.3+0x238>)
 801d910:	691a      	ldr	r2, [r3, #16]
 801d912:	9b04      	ldr	r3, [sp, #16]
 801d914:	429a      	cmp	r2, r3
 801d916:	f240 80c1 	bls.w	801da9c <DecryptImageInSlot1.constprop.3+0x1d0>
 801d91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d91c:	9907      	ldr	r1, [sp, #28]
 801d91e:	428b      	cmp	r3, r1
 801d920:	d16d      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
           (e_se_status == SE_OK))
    {
      if (pass_index == NumberOfChunkPerSwap)
 801d922:	9b03      	ldr	r3, [sp, #12]
 801d924:	42b3      	cmp	r3, r6
      {
        fw_dest_address_write = (uint32_t) SFU_IMG_SLOT_1_REGION_BEGIN;
 801d926:	bf02      	ittt	eq
 801d928:	f8df 8204 	ldreq.w	r8, [pc, #516]	; 801db30 <DecryptImageInSlot1.constprop.3+0x264>
 801d92c:	461f      	moveq	r7, r3
        fw_dest_erase_address =  fw_dest_address_write;
 801d92e:	46c2      	moveq	sl, r8
 801d930:	f10d 0928 	add.w	r9, sp, #40	; 0x28
        erase_index = NumberOfChunkPerSwap;
      }
      if (pass_index == 0)
 801d934:	2e00      	cmp	r6, #0
 801d936:	d165      	bne.n	801da04 <DecryptImageInSlot1.constprop.3+0x138>
      {
        pfw_source_address = (uint8_t *)((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET +
                                         (pFwImageHeader->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE));
 801d938:	4b72      	ldr	r3, [pc, #456]	; (801db04 <DecryptImageInSlot1.constprop.3+0x238>)
 801d93a:	68d9      	ldr	r1, [r3, #12]
 801d93c:	fbb1 f3f5 	udiv	r3, r1, r5
 801d940:	fb05 1313 	mls	r3, r5, r3, r1
        pfw_source_address = (uint8_t *)((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET +
 801d944:	4974      	ldr	r1, [pc, #464]	; (801db18 <DecryptImageInSlot1.constprop.3+0x24c>)
 801d946:	4419      	add	r1, r3
        fw_dest_erase_address = (uint32_t)SFU_IMG_SWAP_REGION_BEGIN;
        fw_dest_address_write = fw_dest_erase_address + ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 801d948:	f503 6600 	add.w	r6, r3, #2048	; 0x800
        pfw_source_address = (uint8_t *)((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET +
 801d94c:	9105      	str	r1, [sp, #20]
                                                                                  SFU_IMG_SWAP_REGION_SIZE)) %
                                                         SFU_IMG_SWAP_REGION_SIZE);
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk) - ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset
                                                                 % SFU_IMG_SWAP_REGION_SIZE)) %
 801d94e:	f3c3 030a 	ubfx	r3, r3, #0, #11
        fw_dest_address_write = fw_dest_erase_address + ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 801d952:	496f      	ldr	r1, [pc, #444]	; (801db10 <DecryptImageInSlot1.constprop.3+0x244>)
                                                                                  SFU_IMG_SWAP_REGION_SIZE)) %
 801d954:	fbb6 f8f5 	udiv	r8, r6, r5
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk) - ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset
 801d958:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
                                                                                  SFU_IMG_SWAP_REGION_SIZE)) %
 801d95c:	fb05 6818 	mls	r8, r5, r8, r6
        fw_dest_address_write = fw_dest_erase_address + ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset %
 801d960:	4488      	add	r8, r1
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk) - ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset
 801d962:	4293      	cmp	r3, r2
 801d964:	bf94      	ite	ls
 801d966:	f8c9 3000 	strls.w	r3, [r9]
 801d96a:	f8c9 2000 	strhi.w	r2, [r9]
                                                                sizeof(fw_decrypted_chunk));
        if (fw_decrypted_chunk_size > pFwImageHeader->PartialFwSize)
        {
          fw_decrypted_chunk_size = pFwImageHeader->PartialFwSize;
        }
        pass_index = ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) /
 801d96e:	0af6      	lsrs	r6, r6, #11
        fw_dest_erase_address = (uint32_t)SFU_IMG_SWAP_REGION_BEGIN;
 801d970:	468a      	mov	sl, r1
        {
          /* nothing */
        }
      }

      size = fw_decrypted_chunk_size;
 801d972:	f8d9 4000 	ldr.w	r4, [r9]

      /* Decrypt Append*/
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, pfw_source_address, size);
 801d976:	9905      	ldr	r1, [sp, #20]
 801d978:	4622      	mov	r2, r4
 801d97a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
 801d97e:	f002 fe91 	bl	80206a4 <SFU_LL_FLASH_Read>
      if (e_ret_status != SFU_SUCCESS)
 801d982:	4b66      	ldr	r3, [pc, #408]	; (801db1c <DecryptImageInSlot1.constprop.3+0x250>)
 801d984:	4298      	cmp	r0, r3
 801d986:	d13a      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
      {
        break;
      }
      if (size != 0)
 801d988:	2c00      	cmp	r4, #0
 801d98a:	d04b      	beq.n	801da24 <DecryptImageInSlot1.constprop.3+0x158>
      {
        se_ret_status = SE_Decrypt_Append(&e_se_status, (uint8_t *)fw_encrypted_chunk, size, fw_decrypted_chunk,
 801d98c:	f8cd 9000 	str.w	r9, [sp]
 801d990:	ab14      	add	r3, sp, #80	; 0x50
 801d992:	4622      	mov	r2, r4
 801d994:	f50d 6105 	add.w	r1, sp, #2128	; 0x850
 801d998:	a809      	add	r0, sp, #36	; 0x24
 801d99a:	f002 fbc9 	bl	8020130 <SE_Decrypt_Append>
 801d99e:	4683      	mov	fp, r0
      else
      {
        e_ret_status = SFU_SUCCESS;
        fw_decrypted_chunk_size = 0;
      }
      if ((se_ret_status == SE_SUCCESS) && (e_se_status == SE_OK) && (fw_decrypted_chunk_size == size))
 801d9a0:	9b06      	ldr	r3, [sp, #24]
 801d9a2:	459b      	cmp	fp, r3
 801d9a4:	d1b3      	bne.n	801d90e <DecryptImageInSlot1.constprop.3+0x42>
 801d9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9a8:	9a07      	ldr	r2, [sp, #28]
 801d9aa:	4293      	cmp	r3, r2
 801d9ac:	d1af      	bne.n	801d90e <DecryptImageInSlot1.constprop.3+0x42>
 801d9ae:	f8d9 3000 	ldr.w	r3, [r9]
 801d9b2:	429c      	cmp	r4, r3
 801d9b4:	d1ab      	bne.n	801d90e <DecryptImageInSlot1.constprop.3+0x42>
      {
        /* Erase Page */
        if ((pass_index == erase_index)
 801d9b6:	42be      	cmp	r6, r7
 801d9b8:	d00a      	beq.n	801d9d0 <DecryptImageInSlot1.constprop.3+0x104>
            || (pass_index == ((SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) /
 801d9ba:	4b52      	ldr	r3, [pc, #328]	; (801db04 <DecryptImageInSlot1.constprop.3+0x238>)
 801d9bc:	68da      	ldr	r2, [r3, #12]
 801d9be:	fbb2 f3f5 	udiv	r3, r2, r5
 801d9c2:	fb05 2313 	mls	r3, r5, r3, r2
 801d9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d9ca:	ebb6 2fd3 	cmp.w	r6, r3, lsr #11
 801d9ce:	d132      	bne.n	801da36 <DecryptImageInSlot1.constprop.3+0x16a>
                               sizeof(fw_decrypted_chunk))))
        {
          SFU_LL_SECU_IWDG_Refresh();
 801d9d0:	f003 f89a 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *)fw_dest_erase_address,
 801d9d4:	462a      	mov	r2, r5
 801d9d6:	4651      	mov	r1, sl
 801d9d8:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801d9dc:	f002 ff2a 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
                                                 SFU_IMG_SWAP_REGION_SIZE) ;
          erase_index += NumberOfChunkPerSwap;
          fw_dest_erase_address += SFU_IMG_SWAP_REGION_SIZE;
        }
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801d9e0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801d9e4:	4298      	cmp	r0, r3
 801d9e6:	d120      	bne.n	801da2a <DecryptImageInSlot1.constprop.3+0x15e>
 801d9e8:	4b4d      	ldr	r3, [pc, #308]	; (801db20 <DecryptImageInSlot1.constprop.3+0x254>)
 801d9ea:	2101      	movs	r1, #1
 801d9ec:	7019      	strb	r1, [r3, #0]
 801d9ee:	f240 5239 	movw	r2, #1337	; 0x539
            }
          }

          /* Write Decrypted Data in Flash - size has to be 32-bit aligned */
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (void *)fw_dest_address_write,  fw_decrypted_chunk, size);
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801d9f2:	4b4c      	ldr	r3, [pc, #304]	; (801db24 <DecryptImageInSlot1.constprop.3+0x258>)
 801d9f4:	484c      	ldr	r0, [pc, #304]	; (801db28 <DecryptImageInSlot1.constprop.3+0x25c>)
 801d9f6:	601a      	str	r2, [r3, #0]
 801d9f8:	4b4c      	ldr	r3, [pc, #304]	; (801db2c <DecryptImageInSlot1.constprop.3+0x260>)
 801d9fa:	f00b f8a7 	bl	8028b4c <iprintf>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
    }
  }
  else
  {
    e_ret_status = SFU_ERROR;
 801d9fe:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 801da02:	e079      	b.n	801daf8 <DecryptImageInSlot1.constprop.3+0x22c>
        if ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 801da04:	9b04      	ldr	r3, [sp, #16]
 801da06:	1ad3      	subs	r3, r2, r3
 801da08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801da0c:	d202      	bcs.n	801da14 <DecryptImageInSlot1.constprop.3+0x148>
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 801da0e:	f8c9 3000 	str.w	r3, [r9]
 801da12:	e7ae      	b.n	801d972 <DecryptImageInSlot1.constprop.3+0xa6>
        else if ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) < ((2 * fw_decrypted_chunk_size) - 16U))
 801da14:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 801da18:	bf36      	itet	cc
 801da1a:	095b      	lsrcc	r3, r3, #5
        fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 801da1c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
          fw_decrypted_chunk_size = ((pFwImageHeader->PartialFwSize - fw_decrypted_total_size) / 32U) * 16U;
 801da20:	011b      	lslcc	r3, r3, #4
 801da22:	e7f4      	b.n	801da0e <DecryptImageInSlot1.constprop.3+0x142>
        fw_decrypted_chunk_size = 0;
 801da24:	f8c9 4000 	str.w	r4, [r9]
 801da28:	e7ba      	b.n	801d9a0 <DecryptImageInSlot1.constprop.3+0xd4>
        if (e_ret_status == SFU_SUCCESS)
 801da2a:	4b3c      	ldr	r3, [pc, #240]	; (801db1c <DecryptImageInSlot1.constprop.3+0x250>)
 801da2c:	4298      	cmp	r0, r3
 801da2e:	d1e6      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
          erase_index += NumberOfChunkPerSwap;
 801da30:	9b03      	ldr	r3, [sp, #12]
          fw_dest_erase_address += SFU_IMG_SWAP_REGION_SIZE;
 801da32:	44aa      	add	sl, r5
          erase_index += NumberOfChunkPerSwap;
 801da34:	441f      	add	r7, r3
          if ((size & ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - 1U)) != 0)
 801da36:	f014 0f07 	tst.w	r4, #7
 801da3a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 801da3e:	d006      	beq.n	801da4e <DecryptImageInSlot1.constprop.3+0x182>
            size = size + ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - (size % (uint32_t)sizeof(SFU_LL_FLASH_write_t)));
 801da40:	f024 0307 	bic.w	r3, r4, #7
 801da44:	3308      	adds	r3, #8
              fw_decrypted_chunk[oldsize] = 0xFF;
 801da46:	22ff      	movs	r2, #255	; 0xff
            while (oldsize < size)
 801da48:	42a3      	cmp	r3, r4
 801da4a:	dc11      	bgt.n	801da70 <DecryptImageInSlot1.constprop.3+0x1a4>
 801da4c:	461c      	mov	r4, r3
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (void *)fw_dest_address_write,  fw_decrypted_chunk, size);
 801da4e:	4623      	mov	r3, r4
 801da50:	464a      	mov	r2, r9
 801da52:	4641      	mov	r1, r8
 801da54:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801da58:	f002 fdc2 	bl	80205e0 <SFU_LL_FLASH_Write>
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801da5c:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801da60:	4298      	cmp	r0, r3
 801da62:	d109      	bne.n	801da78 <DecryptImageInSlot1.constprop.3+0x1ac>
 801da64:	4b2e      	ldr	r3, [pc, #184]	; (801db20 <DecryptImageInSlot1.constprop.3+0x254>)
 801da66:	2102      	movs	r1, #2
 801da68:	7019      	strb	r1, [r3, #0]
 801da6a:	f240 5253 	movw	r2, #1363	; 0x553
 801da6e:	e7c0      	b.n	801d9f2 <DecryptImageInSlot1.constprop.3+0x126>
              fw_decrypted_chunk[oldsize] = 0xFF;
 801da70:	f809 2004 	strb.w	r2, [r9, r4]
              oldsize++;
 801da74:	3401      	adds	r4, #1
 801da76:	e7e7      	b.n	801da48 <DecryptImageInSlot1.constprop.3+0x17c>
          if (e_ret_status == SFU_SUCCESS)
 801da78:	4b28      	ldr	r3, [pc, #160]	; (801db1c <DecryptImageInSlot1.constprop.3+0x250>)
 801da7a:	4298      	cmp	r0, r3
 801da7c:	d1bf      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
            pfw_source_address += size;
 801da7e:	9b05      	ldr	r3, [sp, #20]
 801da80:	4423      	add	r3, r4
 801da82:	9305      	str	r3, [sp, #20]
            fw_decrypted_total_size += size;
 801da84:	9b04      	ldr	r3, [sp, #16]
            memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 801da86:	f44f 6200 	mov.w	r2, #2048	; 0x800
            fw_decrypted_total_size += size;
 801da8a:	4423      	add	r3, r4
            memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 801da8c:	21ff      	movs	r1, #255	; 0xff
 801da8e:	4648      	mov	r0, r9
            fw_decrypted_total_size += size;
 801da90:	9304      	str	r3, [sp, #16]
            fw_dest_address_write  += (size);
 801da92:	44a0      	add	r8, r4
            memset(fw_decrypted_chunk, 0xff, sizeof(fw_decrypted_chunk));
 801da94:	f00a ff9c 	bl	80289d0 <memset>
            pass_index += 1;
 801da98:	3601      	adds	r6, #1
 801da9a:	e738      	b.n	801d90e <DecryptImageInSlot1.constprop.3+0x42>
  if ((se_ret_status == SE_SUCCESS) && (e_ret_status == SFU_SUCCESS) && (e_se_status == SE_OK))
 801da9c:	9b06      	ldr	r3, [sp, #24]
 801da9e:	459b      	cmp	fp, r3
 801daa0:	d1ad      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
 801daa2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801daa4:	4b19      	ldr	r3, [pc, #100]	; (801db0c <DecryptImageInSlot1.constprop.3+0x240>)
 801daa6:	429c      	cmp	r4, r3
 801daa8:	d1a9      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
    fw_tag_len = sizeof(fw_tag_output);
 801daaa:	2320      	movs	r3, #32
 801daac:	930b      	str	r3, [sp, #44]	; 0x2c
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, &fw_tag_len);
 801daae:	ab0c      	add	r3, sp, #48	; 0x30
 801dab0:	aa0b      	add	r2, sp, #44	; 0x2c
 801dab2:	4619      	mov	r1, r3
 801dab4:	a809      	add	r0, sp, #36	; 0x24
 801dab6:	f002 fb4b 	bl	8020150 <SE_Decrypt_Finish>
    if ((se_ret_status != SE_SUCCESS) || (e_se_status != SE_OK))
 801daba:	4558      	cmp	r0, fp
 801dabc:	d19f      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
 801dabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dac0:	42a3      	cmp	r3, r4
 801dac2:	d19c      	bne.n	801d9fe <DecryptImageInSlot1.constprop.3+0x132>
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *)fw_dest_erase_address, SFU_IMG_SWAP_REGION_SIZE);
 801dac4:	9b03      	ldr	r3, [sp, #12]
 801dac6:	491a      	ldr	r1, [pc, #104]	; (801db30 <DecryptImageInSlot1.constprop.3+0x264>)
 801dac8:	462a      	mov	r2, r5
 801daca:	42b3      	cmp	r3, r6
 801dacc:	bf38      	it	cc
 801dace:	4651      	movcc	r1, sl
 801dad0:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801dad4:	f002 feae 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801dad8:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801dadc:	4298      	cmp	r0, r3
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *)fw_dest_erase_address, SFU_IMG_SWAP_REGION_SIZE);
 801dade:	4604      	mov	r4, r0
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801dae0:	d10a      	bne.n	801daf8 <DecryptImageInSlot1.constprop.3+0x22c>
 801dae2:	4b0f      	ldr	r3, [pc, #60]	; (801db20 <DecryptImageInSlot1.constprop.3+0x254>)
 801dae4:	4810      	ldr	r0, [pc, #64]	; (801db28 <DecryptImageInSlot1.constprop.3+0x25c>)
 801dae6:	2101      	movs	r1, #1
 801dae8:	7019      	strb	r1, [r3, #0]
 801daea:	4b0e      	ldr	r3, [pc, #56]	; (801db24 <DecryptImageInSlot1.constprop.3+0x258>)
 801daec:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 801daf0:	601a      	str	r2, [r3, #0]
 801daf2:	4b0e      	ldr	r3, [pc, #56]	; (801db2c <DecryptImageInSlot1.constprop.3+0x260>)
 801daf4:	f00b f82a 	bl	8028b4c <iprintf>
  }
  return e_ret_status;
}
 801daf8:	4620      	mov	r0, r4
 801dafa:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 801dafe:	b005      	add	sp, #20
 801db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db04:	20031e40 	.word	0x20031e40
 801db08:	0012310f 	.word	0x0012310f
 801db0c:	0012e223 	.word	0x0012e223
 801db10:	081d5000 	.word	0x081d5000
 801db14:	081e0000 	.word	0x081e0000
 801db18:	08036800 	.word	0x08036800
 801db1c:	00122f11 	.word	0x00122f11
 801db20:	200325e4 	.word	0x200325e4
 801db24:	200325e0 	.word	0x200325e0
 801db28:	0802bcc8 	.word	0x0802bcc8
 801db2c:	0802bc40 	.word	0x0802bc40
 801db30:	08036000 	.word	0x08036000

0801db34 <VerifyTagScatter>:
{
 801db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db38:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 801db3c:	b083      	sub	sp, #12
 801db3e:	4614      	mov	r4, r2
  int32_t fw_tag_len = 0;             /* length of the authentication tag to be verified */
 801db40:	2200      	movs	r2, #0
 801db42:	9208      	str	r2, [sp, #32]
  if ((pSeStatus == NULL) || (pSE_Metadata == NULL) || (pSE_Payload == NULL))
 801db44:	4605      	mov	r5, r0
 801db46:	b910      	cbnz	r0, 801db4e <VerifyTagScatter+0x1a>
          sfu_ret_status = SFU_ERROR;
 801db48:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801db4c:	e086      	b.n	801dc5c <VerifyTagScatter+0x128>
  if ((pSeStatus == NULL) || (pSE_Metadata == NULL) || (pSE_Payload == NULL))
 801db4e:	2900      	cmp	r1, #0
 801db50:	d0fa      	beq.n	801db48 <VerifyTagScatter+0x14>
  if ((pSE_Payload->pPayload[0] == NULL) || ((pSE_Payload->pPayload[1] == NULL) && pSE_Payload->PayloadSize[1]))
 801db52:	6822      	ldr	r2, [r4, #0]
 801db54:	2a00      	cmp	r2, #0
 801db56:	d0f7      	beq.n	801db48 <VerifyTagScatter+0x14>
 801db58:	6862      	ldr	r2, [r4, #4]
 801db5a:	b912      	cbnz	r2, 801db62 <VerifyTagScatter+0x2e>
 801db5c:	68e2      	ldr	r2, [r4, #12]
 801db5e:	2a00      	cmp	r2, #0
 801db60:	d1f2      	bne.n	801db48 <VerifyTagScatter+0x14>
  if (SE_FwType == SE_FW_IMAGE_COMPLETE)
 801db62:	2b00      	cmp	r3, #0
 801db64:	d17f      	bne.n	801dc66 <VerifyTagScatter+0x132>
    fw_size = pSE_Metadata->FwSize;
 801db66:	6888      	ldr	r0, [r1, #8]
    fw_tag = pSE_Metadata->FwTag;
 801db68:	f101 0b14 	add.w	fp, r1, #20
  if ((pSE_Payload->PayloadSize[0] + pSE_Payload->PayloadSize[1]) != fw_size)
 801db6c:	e9d4 6202 	ldrd	r6, r2, [r4, #8]
 801db70:	1996      	adds	r6, r2, r6
 801db72:	4286      	cmp	r6, r0
 801db74:	9604      	str	r6, [sp, #16]
 801db76:	d1e7      	bne.n	801db48 <VerifyTagScatter+0x14>
    scatter_nb = 1;
 801db78:	2a00      	cmp	r2, #0
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 801db7a:	4628      	mov	r0, r5
 801db7c:	461a      	mov	r2, r3
    scatter_nb = 1;
 801db7e:	bf14      	ite	ne
 801db80:	2602      	movne	r6, #2
 801db82:	2601      	moveq	r6, #1
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 801db84:	f002 fa24 	bl	801ffd0 <SE_AuthenticateFW_Init>
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 801db88:	4b63      	ldr	r3, [pc, #396]	; (801dd18 <VerifyTagScatter+0x1e4>)
 801db8a:	9303      	str	r3, [sp, #12]
 801db8c:	4298      	cmp	r0, r3
 801db8e:	d1db      	bne.n	801db48 <VerifyTagScatter+0x14>
 801db90:	682a      	ldr	r2, [r5, #0]
 801db92:	4b62      	ldr	r3, [pc, #392]	; (801dd1c <VerifyTagScatter+0x1e8>)
 801db94:	429a      	cmp	r2, r3
 801db96:	f040 80b5 	bne.w	801dd04 <VerifyTagScatter+0x1d0>
 801db9a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
  SFU_ErrorStatus sfu_ret_status = SFU_SUCCESS;
 801db9e:	4e60      	ldr	r6, [pc, #384]	; (801dd20 <VerifyTagScatter+0x1ec>)
 801dba0:	9307      	str	r3, [sp, #28]
  int32_t fw_verified_total_size = 0; /* number of bytes that have been processed during authentication check */
 801dba2:	f04f 0800 	mov.w	r8, #0
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 801dba6:	af09      	add	r7, sp, #36	; 0x24
      payloadsize = pSE_Payload->PayloadSize[j];
 801dba8:	68a3      	ldr	r3, [r4, #8]
 801dbaa:	9305      	str	r3, [sp, #20]
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 801dbac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dbb0:	603b      	str	r3, [r7, #0]
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 801dbb2:	9b05      	ldr	r3, [sp, #20]
      ppayload = pSE_Payload->pPayload[j];
 801dbb4:	f854 9b04 	ldr.w	r9, [r4], #4
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 801dbb8:	0adb      	lsrs	r3, r3, #11
 801dbba:	9306      	str	r3, [sp, #24]
      i = 0;
 801dbbc:	f04f 0a00 	mov.w	sl, #0
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 801dbc0:	9b06      	ldr	r3, [sp, #24]
 801dbc2:	4553      	cmp	r3, sl
 801dbc4:	d15c      	bne.n	801dc80 <VerifyTagScatter+0x14c>
      fw_chunk_size = (uint32_t)pSE_Payload->pPayload[j] + pSE_Payload->PayloadSize[j] - (uint32_t)ppayload;
 801dbc6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801dbca:	6863      	ldr	r3, [r4, #4]
 801dbcc:	441a      	add	r2, r3
 801dbce:	eba2 0209 	sub.w	r2, r2, r9
 801dbd2:	603a      	str	r2, [r7, #0]
      if ((fw_chunk_size) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 801dbd4:	2a00      	cmp	r2, #0
 801dbd6:	d172      	bne.n	801dcbe <VerifyTagScatter+0x18a>
    for (j = 0; j < scatter_nb; j++)
 801dbd8:	9b07      	ldr	r3, [sp, #28]
 801dbda:	42a3      	cmp	r3, r4
 801dbdc:	d1e4      	bne.n	801dba8 <VerifyTagScatter+0x74>
  if ((sfu_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 801dbde:	4b50      	ldr	r3, [pc, #320]	; (801dd20 <VerifyTagScatter+0x1ec>)
 801dbe0:	429e      	cmp	r6, r3
 801dbe2:	d1b1      	bne.n	801db48 <VerifyTagScatter+0x14>
 801dbe4:	9b03      	ldr	r3, [sp, #12]
 801dbe6:	4298      	cmp	r0, r3
 801dbe8:	d1ae      	bne.n	801db48 <VerifyTagScatter+0x14>
 801dbea:	682e      	ldr	r6, [r5, #0]
 801dbec:	4b4b      	ldr	r3, [pc, #300]	; (801dd1c <VerifyTagScatter+0x1e8>)
 801dbee:	429e      	cmp	r6, r3
 801dbf0:	d1aa      	bne.n	801db48 <VerifyTagScatter+0x14>
    if (fw_verified_total_size <= fw_size)
 801dbf2:	9b04      	ldr	r3, [sp, #16]
 801dbf4:	4543      	cmp	r3, r8
 801dbf6:	d3a7      	bcc.n	801db48 <VerifyTagScatter+0x14>
      fw_tag_len = sizeof(fw_tag_output);
 801dbf8:	2320      	movs	r3, #32
 801dbfa:	ac0a      	add	r4, sp, #40	; 0x28
      se_ret_status =   SE_AuthenticateFW_Finish(pSeStatus, fw_tag_output, &fw_tag_len);
 801dbfc:	eb0d 0203 	add.w	r2, sp, r3
 801dc00:	4621      	mov	r1, r4
 801dc02:	4628      	mov	r0, r5
      fw_tag_len = sizeof(fw_tag_output);
 801dc04:	f844 3c08 	str.w	r3, [r4, #-8]
      se_ret_status =   SE_AuthenticateFW_Finish(pSeStatus, fw_tag_output, &fw_tag_len);
 801dc08:	f002 fa24 	bl	8020054 <SE_AuthenticateFW_Finish>
      if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK) && (fw_tag_len == SE_TAG_LEN))
 801dc0c:	9b03      	ldr	r3, [sp, #12]
 801dc0e:	4298      	cmp	r0, r3
 801dc10:	d19a      	bne.n	801db48 <VerifyTagScatter+0x14>
 801dc12:	682b      	ldr	r3, [r5, #0]
 801dc14:	42b3      	cmp	r3, r6
 801dc16:	d197      	bne.n	801db48 <VerifyTagScatter+0x14>
 801dc18:	9b08      	ldr	r3, [sp, #32]
 801dc1a:	2b20      	cmp	r3, #32
 801dc1c:	d194      	bne.n	801db48 <VerifyTagScatter+0x14>
  uint8_t result = 0x00;
 801dc1e:	2300      	movs	r3, #0
  for (i = 0; i < Size; i++)
 801dc20:	461a      	mov	r2, r3
    result |= pAdd1[i] ^ pAdd2[i];
 801dc22:	5ca1      	ldrb	r1, [r4, r2]
 801dc24:	f81b 0002 	ldrb.w	r0, [fp, r2]
  for (i = 0; i < Size; i++)
 801dc28:	3201      	adds	r2, #1
    result |= pAdd1[i] ^ pAdd2[i];
 801dc2a:	4041      	eors	r1, r0
  for (i = 0; i < Size; i++)
 801dc2c:	2a20      	cmp	r2, #32
    result |= pAdd1[i] ^ pAdd2[i];
 801dc2e:	ea43 0301 	orr.w	r3, r3, r1
  for (i = 0; i < Size; i++)
 801dc32:	d1f6      	bne.n	801dc22 <VerifyTagScatter+0xee>
  if (result == 0x00)
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d168      	bne.n	801dd0a <VerifyTagScatter+0x1d6>
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 801dc38:	4a3a      	ldr	r2, [pc, #232]	; (801dd24 <VerifyTagScatter+0x1f0>)
 801dc3a:	6813      	ldr	r3, [r2, #0]
 801dc3c:	f483 432a 	eor.w	r3, r3, #43520	; 0xaa00
 801dc40:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
 801dc44:	6013      	str	r3, [r2, #0]
          memcpy(fw_tag_validated, fw_tag, SE_TAG_LEN);
 801dc46:	4a38      	ldr	r2, [pc, #224]	; (801dd28 <VerifyTagScatter+0x1f4>)
 801dc48:	465b      	mov	r3, fp
 801dc4a:	f10b 0120 	add.w	r1, fp, #32
 801dc4e:	f853 0b04 	ldr.w	r0, [r3], #4
 801dc52:	f842 0b04 	str.w	r0, [r2], #4
 801dc56:	428b      	cmp	r3, r1
 801dc58:	d1f9      	bne.n	801dc4e <VerifyTagScatter+0x11a>
 801dc5a:	4831      	ldr	r0, [pc, #196]	; (801dd20 <VerifyTagScatter+0x1ec>)
}
 801dc5c:	f50d 5d82 	add.w	sp, sp, #4160	; 0x1040
 801dc60:	b003      	add	sp, #12
 801dc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (SE_FwType == SE_FW_IMAGE_PARTIAL)
 801dc66:	2b01      	cmp	r3, #1
 801dc68:	f47f af6e 	bne.w	801db48 <VerifyTagScatter+0x14>
    fw_size = pSE_Metadata->PartialFwSize;
 801dc6c:	6908      	ldr	r0, [r1, #16]
    fw_tag = pSE_Metadata->PartialFwTag;
 801dc6e:	f101 0b34 	add.w	fp, r1, #52	; 0x34
 801dc72:	e77b      	b.n	801db6c <VerifyTagScatter+0x38>
          *pSeStatus = SE_ERR_FLASH_READ;
 801dc74:	4b2d      	ldr	r3, [pc, #180]	; (801dd2c <VerifyTagScatter+0x1f8>)
 801dc76:	602b      	str	r3, [r5, #0]
          sfu_ret_status = SFU_ERROR;
 801dc78:	f641 76e1 	movw	r6, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 801dc7c:	482c      	ldr	r0, [pc, #176]	; (801dd30 <VerifyTagScatter+0x1fc>)
 801dc7e:	e018      	b.n	801dcb2 <VerifyTagScatter+0x17e>
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 801dc80:	682b      	ldr	r3, [r5, #0]
 801dc82:	4a26      	ldr	r2, [pc, #152]	; (801dd1c <VerifyTagScatter+0x1e8>)
 801dc84:	4293      	cmp	r3, r2
 801dc86:	d19e      	bne.n	801dbc6 <VerifyTagScatter+0x92>
 801dc88:	4b25      	ldr	r3, [pc, #148]	; (801dd20 <VerifyTagScatter+0x1ec>)
 801dc8a:	429e      	cmp	r6, r3
 801dc8c:	d19b      	bne.n	801dbc6 <VerifyTagScatter+0x92>
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, ppayload, fw_chunk_size) ;
 801dc8e:	683a      	ldr	r2, [r7, #0]
 801dc90:	4649      	mov	r1, r9
 801dc92:	f60d 0048 	addw	r0, sp, #2120	; 0x848
 801dc96:	f002 fd05 	bl	80206a4 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 801dc9a:	4b21      	ldr	r3, [pc, #132]	; (801dd20 <VerifyTagScatter+0x1ec>)
 801dc9c:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, ppayload, fw_chunk_size) ;
 801dc9e:	4606      	mov	r6, r0
        if (sfu_ret_status == SFU_SUCCESS)
 801dca0:	d1e8      	bne.n	801dc74 <VerifyTagScatter+0x140>
          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk, fw_chunk_size,
 801dca2:	9700      	str	r7, [sp, #0]
 801dca4:	ab12      	add	r3, sp, #72	; 0x48
 801dca6:	683a      	ldr	r2, [r7, #0]
 801dca8:	f60d 0148 	addw	r1, sp, #2120	; 0x848
 801dcac:	4628      	mov	r0, r5
 801dcae:	f002 f9b9 	bl	8020024 <SE_AuthenticateFW_Append>
        ppayload += fw_chunk_size;
 801dcb2:	683b      	ldr	r3, [r7, #0]
        i++;
 801dcb4:	f10a 0a01 	add.w	sl, sl, #1
        ppayload += fw_chunk_size;
 801dcb8:	4499      	add	r9, r3
        fw_verified_total_size += fw_chunk_size;
 801dcba:	4498      	add	r8, r3
 801dcbc:	e780      	b.n	801dbc0 <VerifyTagScatter+0x8c>
      if ((fw_chunk_size) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 801dcbe:	9b03      	ldr	r3, [sp, #12]
 801dcc0:	4298      	cmp	r0, r3
 801dcc2:	d189      	bne.n	801dbd8 <VerifyTagScatter+0xa4>
 801dcc4:	6829      	ldr	r1, [r5, #0]
 801dcc6:	4b15      	ldr	r3, [pc, #84]	; (801dd1c <VerifyTagScatter+0x1e8>)
 801dcc8:	4299      	cmp	r1, r3
 801dcca:	d185      	bne.n	801dbd8 <VerifyTagScatter+0xa4>
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, ppayload, fw_chunk_size) ;
 801dccc:	4649      	mov	r1, r9
 801dcce:	f60d 0048 	addw	r0, sp, #2120	; 0x848
 801dcd2:	f002 fce7 	bl	80206a4 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 801dcd6:	4b12      	ldr	r3, [pc, #72]	; (801dd20 <VerifyTagScatter+0x1ec>)
 801dcd8:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, ppayload, fw_chunk_size) ;
 801dcda:	4606      	mov	r6, r0
        if (sfu_ret_status == SFU_SUCCESS)
 801dcdc:	d10c      	bne.n	801dcf8 <VerifyTagScatter+0x1c4>
          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk,
 801dcde:	9a05      	ldr	r2, [sp, #20]
 801dce0:	9700      	str	r7, [sp, #0]
 801dce2:	ab12      	add	r3, sp, #72	; 0x48
 801dce4:	eba2 22ca 	sub.w	r2, r2, sl, lsl #11
 801dce8:	f60d 0148 	addw	r1, sp, #2120	; 0x848
 801dcec:	4628      	mov	r0, r5
 801dcee:	f002 f999 	bl	8020024 <SE_AuthenticateFW_Append>
        fw_verified_total_size += fw_chunk_size;
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	4498      	add	r8, r3
 801dcf6:	e76f      	b.n	801dbd8 <VerifyTagScatter+0xa4>
          *pSeStatus = SE_ERR_FLASH_READ;
 801dcf8:	4b0c      	ldr	r3, [pc, #48]	; (801dd2c <VerifyTagScatter+0x1f8>)
 801dcfa:	602b      	str	r3, [r5, #0]
          sfu_ret_status = SFU_ERROR;
 801dcfc:	f641 76e1 	movw	r6, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 801dd00:	480b      	ldr	r0, [pc, #44]	; (801dd30 <VerifyTagScatter+0x1fc>)
 801dd02:	e7f6      	b.n	801dcf2 <VerifyTagScatter+0x1be>
  int32_t fw_verified_total_size = 0; /* number of bytes that have been processed during authentication check */
 801dd04:	f04f 0800 	mov.w	r8, #0
 801dd08:	e76f      	b.n	801dbea <VerifyTagScatter+0xb6>
          *pSeStatus = SE_SIGNATURE_ERR;
 801dd0a:	4b0a      	ldr	r3, [pc, #40]	; (801dd34 <VerifyTagScatter+0x200>)
 801dd0c:	602b      	str	r3, [r5, #0]
          memset(fw_tag_validated, 0x00, SE_TAG_LEN);
 801dd0e:	2100      	movs	r1, #0
 801dd10:	4805      	ldr	r0, [pc, #20]	; (801dd28 <VerifyTagScatter+0x1f4>)
 801dd12:	f00a fe5d 	bl	80289d0 <memset>
 801dd16:	e717      	b.n	801db48 <VerifyTagScatter+0x14>
 801dd18:	0012310f 	.word	0x0012310f
 801dd1c:	0012e223 	.word	0x0012e223
 801dd20:	00122f11 	.word	0x00122f11
 801dd24:	20030004 	.word	0x20030004
 801dd28:	20030598 	.word	0x20030598
 801dd2c:	0014b817 	.word	0x0014b817
 801dd30:	00018799 	.word	0x00018799
 801dd34:	00146ac1 	.word	0x00146ac1

0801dd38 <SFU_IMG_GetFWInfoMAC.part.2>:
  * @param  pFwImageHeader pointer to a structure to handle the header info (filled by this function)
  * @param  SlotNumber slot #0 = active Firmware , slot #1 = downloaded image or backed-up image, slot #2 = swap region
  * @note   Not used in Alpha version -
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus SFU_IMG_GetFWInfoMAC(SE_FwRawHeaderTypeDef *pFwImageHeader, uint32_t SlotNumber)
 801dd38:	b570      	push	{r4, r5, r6, lr}
    return SFU_ERROR;
  }
  pbuffer = (uint8_t *) SlotHeaderAddress[SlotNumber];

  /* use api read to detect possible ECC error */
  e_ret_status = SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer));
 801dd3a:	4b11      	ldr	r3, [pc, #68]	; (801dd80 <SFU_IMG_GetFWInfoMAC.part.2+0x48>)
  if (e_ret_status == SFU_SUCCESS)
 801dd3c:	4e11      	ldr	r6, [pc, #68]	; (801dd84 <SFU_IMG_GetFWInfoMAC.part.2+0x4c>)
  e_ret_status = SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer));
 801dd3e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
SFU_ErrorStatus SFU_IMG_GetFWInfoMAC(SE_FwRawHeaderTypeDef *pFwImageHeader, uint32_t SlotNumber)
 801dd42:	f5ad 6df4 	sub.w	sp, sp, #1952	; 0x7a0
 801dd46:	4605      	mov	r5, r0
  e_ret_status = SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer));
 801dd48:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801dd4c:	4668      	mov	r0, sp
 801dd4e:	f002 fca9 	bl	80206a4 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 801dd52:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer));
 801dd54:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 801dd56:	d10c      	bne.n	801dd72 <SFU_IMG_GetFWInfoMAC.part.2+0x3a>
  {

    e_ret_status = VerifyFwRawHeaderTag(buffer);
 801dd58:	4668      	mov	r0, sp
 801dd5a:	f7ff fd6d 	bl	801d838 <VerifyFwRawHeaderTag>

    if (e_ret_status == SFU_SUCCESS)
 801dd5e:	42b0      	cmp	r0, r6
    e_ret_status = VerifyFwRawHeaderTag(buffer);
 801dd60:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 801dd62:	d106      	bne.n	801dd72 <SFU_IMG_GetFWInfoMAC.part.2+0x3a>
  if ((pFwHeader == NULL) || (pBuffer == NULL))
 801dd64:	b14d      	cbz	r5, 801dd7a <SFU_IMG_GetFWInfoMAC.part.2+0x42>
  memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 801dd66:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801dd6a:	4669      	mov	r1, sp
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f00a fe24 	bl	80289ba <memcpy>
    }
  }
  /*  cleaning */
  memset(buffer, 0, FW_INFO_TOT_LEN);
  return e_ret_status;
}
 801dd72:	4620      	mov	r0, r4
 801dd74:	f50d 6df4 	add.w	sp, sp, #1952	; 0x7a0
 801dd78:	bd70      	pop	{r4, r5, r6, pc}
    return SFU_ERROR;
 801dd7a:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 801dd7e:	e7f8      	b.n	801dd72 <SFU_IMG_GetFWInfoMAC.part.2+0x3a>
 801dd80:	08029e3c 	.word	0x08029e3c
 801dd84:	00122f11 	.word	0x00122f11

0801dd88 <SwapFirmwareImages>:
{
 801dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t number_of_index_slot0 = SFU_IMG_SLOT_0_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801dd8c:	4ba8      	ldr	r3, [pc, #672]	; (801e030 <SwapFirmwareImages+0x2a8>)
 801dd8e:	4ea9      	ldr	r6, [pc, #676]	; (801e034 <SwapFirmwareImages+0x2ac>)
 801dd90:	4da9      	ldr	r5, [pc, #676]	; (801e038 <SwapFirmwareImages+0x2b0>)
  uint32_t number_of_index_slot1 = SFU_IMG_SLOT_1_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801dd92:	4caa      	ldr	r4, [pc, #680]	; (801e03c <SwapFirmwareImages+0x2b4>)
 801dd94:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 801e05c <SwapFirmwareImages+0x2d4>
  TRACE("\r\n\t  Image preparation done.\r\n\t  Swapping the firmware images");
 801dd98:	48a9      	ldr	r0, [pc, #676]	; (801e040 <SwapFirmwareImages+0x2b8>)
{
 801dd9a:	f6ad 0d9c 	subw	sp, sp, #2204	; 0x89c
  uint32_t number_of_index_slot0 = SFU_IMG_SLOT_0_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801dd9e:	1af7      	subs	r7, r6, r3
 801dda0:	4ba8      	ldr	r3, [pc, #672]	; (801e044 <SwapFirmwareImages+0x2bc>)
  uint32_t number_of_index_slot1 = SFU_IMG_SLOT_1_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801dda2:	eba4 080b 	sub.w	r8, r4, fp
  uint32_t number_of_index_slot0 = SFU_IMG_SLOT_0_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801dda6:	1aed      	subs	r5, r5, r3
 801dda8:	fbb7 f3f5 	udiv	r3, r7, r5
 801ddac:	9304      	str	r3, [sp, #16]
  uint32_t number_of_index_slot1 = SFU_IMG_SLOT_1_REGION_SIZE / SFU_IMG_SWAP_REGION_SIZE;
 801ddae:	fbb8 f3f5 	udiv	r3, r8, r5
 801ddb2:	930c      	str	r3, [sp, #48]	; 0x30
  TRACE("\r\n\t  Image preparation done.\r\n\t  Swapping the firmware images");
 801ddb4:	f00a feca 	bl	8028b4c <iprintf>
  index_slot0_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) /
 801ddb8:	49a3      	ldr	r1, [pc, #652]	; (801e048 <SwapFirmwareImages+0x2c0>)
  if ((fw_image_header_to_test.FwSize == fw_image_header_to_test.PartialFwSize) && (SFU_IMG_SLOT_1_REGION_SIZE >= SFU_IMG_SLOT_0_REGION_SIZE))
 801ddba:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801ddbe:	6909      	ldr	r1, [r1, #16]
 801ddc0:	428a      	cmp	r2, r1
 801ddc2:	d124      	bne.n	801de0e <SwapFirmwareImages+0x86>
 801ddc4:	4547      	cmp	r7, r8
 801ddc6:	d822      	bhi.n	801de0e <SwapFirmwareImages+0x86>
	  index_slot0_partial_end = (SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) / SFU_IMG_SWAP_REGION_SIZE;
 801ddc8:	9a04      	ldr	r2, [sp, #16]
 801ddca:	32f6      	adds	r2, #246	; 0xf6
 801ddcc:	eba6 1602 	sub.w	r6, r6, r2, lsl #4
 801ddd0:	4a97      	ldr	r2, [pc, #604]	; (801e030 <SwapFirmwareImages+0x2a8>)
 801ddd2:	1ab6      	subs	r6, r6, r2
 801ddd4:	fbb6 f7f5 	udiv	r7, r6, r5
	    offset_block_partial_end = (SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) % SFU_IMG_SWAP_REGION_SIZE;
 801ddd8:	fb05 6217 	mls	r2, r5, r7, r6
 801dddc:	9206      	str	r2, [sp, #24]
	    index_slot1_partial_end = ((SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) / SFU_IMG_SWAP_REGION_SIZE) - 1U;
 801ddde:	1e7a      	subs	r2, r7, #1
 801dde0:	9201      	str	r2, [sp, #4]
	    offset_block_final_end = (SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) % SFU_IMG_SWAP_REGION_SIZE;
 801dde2:	9a06      	ldr	r2, [sp, #24]
 801dde4:	9208      	str	r2, [sp, #32]
	    index_slot0_final_end = (SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) / SFU_IMG_SWAP_REGION_SIZE;
 801dde6:	9703      	str	r7, [sp, #12]
	  index_slot0_partial_end = (SFU_IMG_SLOT_0_REGION_SIZE - TRAILER_SIZE) / SFU_IMG_SWAP_REGION_SIZE;
 801dde8:	9705      	str	r7, [sp, #20]
  if (offset_block_partial_end == 0)
 801ddea:	9a06      	ldr	r2, [sp, #24]
 801ddec:	2a00      	cmp	r2, #0
 801ddee:	d138      	bne.n	801de62 <SwapFirmwareImages+0xda>
    index_slot0--;
 801ddf0:	9a05      	ldr	r2, [sp, #20]
 801ddf2:	1e56      	subs	r6, r2, #1
    index_slot1_read--;
 801ddf4:	9a01      	ldr	r2, [sp, #4]
 801ddf6:	3a01      	subs	r2, #1
 801ddf8:	9201      	str	r2, [sp, #4]
  if (index_slot1_read >= index_slot1_write)
 801ddfa:	9a01      	ldr	r2, [sp, #4]
 801ddfc:	4297      	cmp	r7, r2
 801ddfe:	dc32      	bgt.n	801de66 <SwapFirmwareImages+0xde>
    return SFU_ERROR;
 801de00:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 801de04:	4620      	mov	r0, r4
 801de06:	f60d 0d9c 	addw	sp, sp, #2204	; 0x89c
 801de0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  index_slot0_partial_end = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset +
 801de0e:	1858      	adds	r0, r3, r1
 801de10:	f500 6000 	add.w	r0, r0, #2048	; 0x800
                             fw_image_header_to_test.PartialFwSize) / SFU_IMG_SWAP_REGION_SIZE;
 801de14:	fbb0 f6f5 	udiv	r6, r0, r5
  offset_block_partial_end = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset +
 801de18:	fb05 0016 	mls	r0, r5, r6, r0
                             fw_image_header_to_test.PartialFwSize) / SFU_IMG_SWAP_REGION_SIZE;
 801de1c:	9605      	str	r6, [sp, #20]
  index_slot1_partial_end = (((SFU_IMG_IMAGE_OFFSET + (fw_image_header_to_test.PartialFwOffset %
 801de1e:	fbb3 f6f5 	udiv	r6, r3, r5
 801de22:	fb05 3616 	mls	r6, r5, r6, r3
 801de26:	f506 6600 	add.w	r6, r6, #2048	; 0x800
  offset_block_partial_end = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset +
 801de2a:	9006      	str	r0, [sp, #24]
                                                       SFU_IMG_SWAP_REGION_SIZE)) % SFU_IMG_SWAP_REGION_SIZE +
 801de2c:	fbb6 f0f5 	udiv	r0, r6, r5
 801de30:	fb05 6010 	mls	r0, r5, r0, r6
  index_slot0_final_end = ((SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.FwSize) / SFU_IMG_SWAP_REGION_SIZE);
 801de34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                                                       SFU_IMG_SWAP_REGION_SIZE)) % SFU_IMG_SWAP_REGION_SIZE +
 801de38:	4401      	add	r1, r0
                              fw_image_header_to_test.PartialFwSize) / SFU_IMG_SWAP_REGION_SIZE) - 1;
 801de3a:	fbb1 f1f5 	udiv	r1, r1, r5
 801de3e:	3901      	subs	r1, #1
 801de40:	9101      	str	r1, [sp, #4]
  index_slot0_final_end = ((SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.FwSize) / SFU_IMG_SWAP_REGION_SIZE);
 801de42:	fbb2 f1f5 	udiv	r1, r2, r5
  offset_block_final_end = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.FwSize) % SFU_IMG_SWAP_REGION_SIZE;
 801de46:	fb05 2211 	mls	r2, r5, r1, r2
 801de4a:	9208      	str	r2, [sp, #32]
  if (index_slot0_partial_end == (number_of_index_slot0 - 1))
 801de4c:	9a04      	ldr	r2, [sp, #16]
  index_slot0_final_end = ((SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.FwSize) / SFU_IMG_SWAP_REGION_SIZE);
 801de4e:	9103      	str	r1, [sp, #12]
  if (index_slot0_partial_end == (number_of_index_slot0 - 1))
 801de50:	9905      	ldr	r1, [sp, #20]
 801de52:	3a01      	subs	r2, #1
 801de54:	4291      	cmp	r1, r2
    index_slot1_write = number_of_index_slot1 - 1;
 801de56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de58:	bf0c      	ite	eq
 801de5a:	f102 37ff 	addeq.w	r7, r2, #4294967295
    index_slot1_write = number_of_index_slot1 - 2;
 801de5e:	1e97      	subne	r7, r2, #2
 801de60:	e7c3      	b.n	801ddea <SwapFirmwareImages+0x62>
  index_slot0 = index_slot0_partial_end;
 801de62:	9e05      	ldr	r6, [sp, #20]
 801de64:	e7c9      	b.n	801ddfa <SwapFirmwareImages+0x72>
  uint32_t number_of_chunk = SFU_IMG_SWAP_REGION_SIZE / SFU_IMG_CHUNK_SIZE;
 801de66:	0aea      	lsrs	r2, r5, #11
  index_slot0_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) /
 801de68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  uint32_t number_of_chunk = SFU_IMG_SWAP_REGION_SIZE / SFU_IMG_CHUNK_SIZE;
 801de6c:	9212      	str	r2, [sp, #72]	; 0x48
  index_slot0_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) /
 801de6e:	fbb3 f2f5 	udiv	r2, r3, r5
  offset_block_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) %
 801de72:	fb05 3312 	mls	r3, r5, r2, r3
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT1(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801de76:	9904      	ldr	r1, [sp, #16]
  offset_block_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) %
 801de78:	9313      	str	r3, [sp, #76]	; 0x4c
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT1(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801de7a:	9b04      	ldr	r3, [sp, #16]
  index_slot0_partial_begin = (SFU_IMG_IMAGE_OFFSET + fw_image_header_to_test.PartialFwOffset) /
 801de7c:	920d      	str	r2, [sp, #52]	; 0x34
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT1(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801de7e:	445c      	add	r4, fp
 801de80:	f06f 0207 	mvn.w	r2, #7
 801de84:	fb02 4401 	mla	r4, r2, r1, r4
 801de88:	00db      	lsls	r3, r3, #3
 801de8a:	1ae2      	subs	r2, r4, r3
 801de8c:	920b      	str	r2, [sp, #44]	; 0x2c
 801de8e:	f5a2 6276 	sub.w	r2, r2, #3936	; 0xf60
 801de92:	9217      	str	r2, [sp, #92]	; 0x5c
 801de94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801de96:	4413      	add	r3, r2
 801de98:	9318      	str	r3, [sp, #96]	; 0x60
              write_len = TRAILER_BEGIN - CHUNK_1_ADDR(index_slot1_write, chunk);
 801de9a:	460b      	mov	r3, r1
 801de9c:	33f6      	adds	r3, #246	; 0xf6
 801de9e:	eba8 1803 	sub.w	r8, r8, r3, lsl #4
 801dea2:	0aeb      	lsrs	r3, r5, #11
 801dea4:	02db      	lsls	r3, r3, #11
 801dea6:	fb05 f207 	mul.w	r2, r5, r7
 801deaa:	eb0b 0103 	add.w	r1, fp, r3
 801deae:	4411      	add	r1, r2
 801deb0:	9102      	str	r1, [sp, #8]
 801deb2:	eba8 0103 	sub.w	r1, r8, r3
 801deb6:	1a8a      	subs	r2, r1, r2
 801deb8:	9209      	str	r2, [sp, #36]	; 0x24
 801deba:	0aea      	lsrs	r2, r5, #11
 801debc:	ebc2 5242 	rsb	r2, r2, r2, lsl #21
 801dec0:	02d2      	lsls	r2, r2, #11
 801dec2:	9207      	str	r2, [sp, #28]
 801dec4:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 801dec8:	440a      	add	r2, r1
 801deca:	921d      	str	r2, [sp, #116]	; 0x74
 801decc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dece:	440a      	add	r2, r1
 801ded0:	921e      	str	r2, [sp, #120]	; 0x78
 801ded2:	9a06      	ldr	r2, [sp, #24]
 801ded4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801ded8:	1ad2      	subs	r2, r2, r3
 801deda:	eba3 0308 	sub.w	r3, r3, r8
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 801dede:	f8df 816c 	ldr.w	r8, [pc, #364]	; 801e04c <SwapFirmwareImages+0x2c4>
 801dee2:	921f      	str	r2, [sp, #124]	; 0x7c
 801dee4:	931b      	str	r3, [sp, #108]	; 0x6c
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801dee6:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  while (index_slot0 >= 0)
 801deea:	2e00      	cmp	r6, #0
 801deec:	da15      	bge.n	801df1a <SwapFirmwareImages+0x192>
  if (offset_block_final_end == 0)
 801deee:	9b08      	ldr	r3, [sp, #32]
 801def0:	b113      	cbz	r3, 801def8 <SwapFirmwareImages+0x170>
    index_slot0_empty_begin = index_slot0_final_end + 1;
 801def2:	9b03      	ldr	r3, [sp, #12]
 801def4:	3301      	adds	r3, #1
 801def6:	9303      	str	r3, [sp, #12]
  index_slot0 = number_of_index_slot0 - 1;
 801def8:	9b04      	ldr	r3, [sp, #16]
    if (e_ret_status !=  SFU_SUCCESS)
 801defa:	4e54      	ldr	r6, [pc, #336]	; (801e04c <SwapFirmwareImages+0x2c4>)
  index_slot0 = number_of_index_slot0 - 1;
 801defc:	1e5d      	subs	r5, r3, #1
  while (index_slot0 >= index_slot0_empty_begin)
 801defe:	9b03      	ldr	r3, [sp, #12]
 801df00:	429d      	cmp	r5, r3
 801df02:	f6ff af7f 	blt.w	801de04 <SwapFirmwareImages+0x7c>
 801df06:	4629      	mov	r1, r5
 801df08:	2000      	movs	r0, #0
 801df0a:	f7ff fcb1 	bl	801d870 <EraseSlotIndex.part.1>
    if (e_ret_status !=  SFU_SUCCESS)
 801df0e:	42b0      	cmp	r0, r6
 801df10:	4604      	mov	r4, r0
 801df12:	f47f af75 	bne.w	801de00 <SwapFirmwareImages+0x78>
    index_slot0--;
 801df16:	3d01      	subs	r5, #1
 801df18:	e7f1      	b.n	801defe <SwapFirmwareImages+0x176>
    SFU_LL_SECU_IWDG_Refresh();
 801df1a:	f002 fdf5 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
    TRACE(".");
 801df1e:	202e      	movs	r0, #46	; 0x2e
 801df20:	f00a fe2c 	bl	8028b7c <putchar>
    if ((index_slot1_write < -1) || (index_slot1_read < -1))
 801df24:	1c79      	adds	r1, r7, #1
 801df26:	f6ff af6b 	blt.w	801de00 <SwapFirmwareImages+0x78>
 801df2a:	9b01      	ldr	r3, [sp, #4]
 801df2c:	3301      	adds	r3, #1
 801df2e:	f6ff af67 	blt.w	801de00 <SwapFirmwareImages+0x78>
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT1(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801df32:	9b04      	ldr	r3, [sp, #16]
 801df34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801df36:	3b01      	subs	r3, #1
 801df38:	1b9b      	subs	r3, r3, r6
 801df3a:	ebcb 03c3 	rsb	r3, fp, r3, lsl #3
 801df3e:	930a      	str	r3, [sp, #40]	; 0x28
 801df40:	4413      	add	r3, r2
 801df42:	4619      	mov	r1, r3
 801df44:	2208      	movs	r2, #8
 801df46:	a824      	add	r0, sp, #144	; 0x90
 801df48:	930e      	str	r3, [sp, #56]	; 0x38
 801df4a:	f002 fbab 	bl	80206a4 <SFU_LL_FLASH_Read>
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 801df4e:	4540      	cmp	r0, r8
 801df50:	f000 8086 	beq.w	801e060 <SwapFirmwareImages+0x2d8>
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT0(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801df54:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 801df58:	4413      	add	r3, r2
 801df5a:	4619      	mov	r1, r3
 801df5c:	2208      	movs	r2, #8
 801df5e:	a824      	add	r0, sp, #144	; 0x90
 801df60:	930f      	str	r3, [sp, #60]	; 0x3c
 801df62:	f002 fb9f 	bl	80206a4 <SFU_LL_FLASH_Read>
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 801df66:	4540      	cmp	r0, r8
    e_ret_status = SFU_LL_FLASH_Read(&trailer, TRAILER_CPY_TO_SLOT0(TRAILER_INDEX - 1 - index_slot0), sizeof(trailer));
 801df68:	9011      	str	r0, [sp, #68]	; 0x44
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 801df6a:	f040 81ee 	bne.w	801e34a <SwapFirmwareImages+0x5c2>
 801df6e:	2208      	movs	r2, #8
 801df70:	4937      	ldr	r1, [pc, #220]	; (801e050 <SwapFirmwareImages+0x2c8>)
 801df72:	a824      	add	r0, sp, #144	; 0x90
 801df74:	f00a fd12 	bl	802899c <memcmp>
 801df78:	2800      	cmp	r0, #0
 801df7a:	f040 81e6 	bne.w	801e34a <SwapFirmwareImages+0x5c2>
 801df7e:	4631      	mov	r1, r6
 801df80:	f7ff fc76 	bl	801d870 <EraseSlotIndex.part.1>
      if (e_ret_status !=  SFU_SUCCESS)
 801df84:	4540      	cmp	r0, r8
 801df86:	f47f af3b 	bne.w	801de00 <SwapFirmwareImages+0x78>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 801df8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801df8c:	9a02      	ldr	r2, [sp, #8]
 801df8e:	f103 3aff 	add.w	sl, r3, #4294967295
 801df92:	9b01      	ldr	r3, [sp, #4]
 801df94:	fb05 b303 	mla	r3, r5, r3, fp
 801df98:	931a      	str	r3, [sp, #104]	; 0x68
 801df9a:	9b07      	ldr	r3, [sp, #28]
 801df9c:	eba3 030b 	sub.w	r3, r3, fp
 801dfa0:	4413      	add	r3, r2
 801dfa2:	931c      	str	r3, [sp, #112]	; 0x70
 801dfa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dfa6:	4413      	add	r3, r2
 801dfa8:	9315      	str	r3, [sp, #84]	; 0x54
 801dfaa:	4613      	mov	r3, r2
 801dfac:	9a07      	ldr	r2, [sp, #28]
 801dfae:	4413      	add	r3, r2
 801dfb0:	930a      	str	r3, [sp, #40]	; 0x28
 801dfb2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801dfb4:	9b02      	ldr	r3, [sp, #8]
 801dfb6:	4413      	add	r3, r2
 801dfb8:	4a1d      	ldr	r2, [pc, #116]	; (801e030 <SwapFirmwareImages+0x2a8>)
 801dfba:	930e      	str	r3, [sp, #56]	; 0x38
          if (CHUNK_0_ADDR(index_slot0, chunk) >= CHUNK_0_ADDR(index_slot0_final_end, 0) + offset_block_final_end)
 801dfbc:	fb06 f305 	mul.w	r3, r6, r5
 801dfc0:	18d1      	adds	r1, r2, r3
 801dfc2:	9114      	str	r1, [sp, #80]	; 0x50
 801dfc4:	9908      	ldr	r1, [sp, #32]
 801dfc6:	440a      	add	r2, r1
 801dfc8:	18d3      	adds	r3, r2, r3
 801dfca:	9310      	str	r3, [sp, #64]	; 0x40
 801dfcc:	9b02      	ldr	r3, [sp, #8]
 801dfce:	9902      	ldr	r1, [sp, #8]
 801dfd0:	f5a3 6900 	sub.w	r9, r3, #2048	; 0x800
 801dfd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dfd6:	eba3 020b 	sub.w	r2, r3, fp
 801dfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfdc:	441a      	add	r2, r3
 801dfde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801dfe0:	eba3 030b 	sub.w	r3, r3, fp
 801dfe4:	440b      	add	r3, r1
 801dfe6:	18d3      	adds	r3, r2, r3
 801dfe8:	9319      	str	r3, [sp, #100]	; 0x64
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 801dfea:	9b06      	ldr	r3, [sp, #24]
 801dfec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dff0:	9316      	str	r3, [sp, #88]	; 0x58
 801dff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dff4:	ab26      	add	r3, sp, #152	; 0x98
 801dff6:	4413      	add	r3, r2
 801dff8:	9320      	str	r3, [sp, #128]	; 0x80
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 801dffa:	f1ba 3fff 	cmp.w	sl, #4294967295
 801dffe:	f040 80d2 	bne.w	801e1a6 <SwapFirmwareImages+0x41e>
      if (index_slot0 != 0)
 801e002:	2e00      	cmp	r6, #0
 801e004:	f000 81a1 	beq.w	801e34a <SwapFirmwareImages+0x5c2>
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, pValue, sizeof(SFU_LL_FLASH_write_t));
 801e008:	2308      	movs	r3, #8
 801e00a:	4a12      	ldr	r2, [pc, #72]	; (801e054 <SwapFirmwareImages+0x2cc>)
 801e00c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e00e:	f10d 008f 	add.w	r0, sp, #143	; 0x8f
 801e012:	f002 fae5 	bl	80205e0 <SFU_LL_FLASH_Write>
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e016:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e01a:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, pValue, sizeof(SFU_LL_FLASH_write_t));
 801e01c:	4604      	mov	r4, r0
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e01e:	f040 8191 	bne.w	801e344 <SwapFirmwareImages+0x5bc>
 801e022:	4b0d      	ldr	r3, [pc, #52]	; (801e058 <SwapFirmwareImages+0x2d0>)
 801e024:	2102      	movs	r1, #2
 801e026:	7019      	strb	r1, [r3, #0]
 801e028:	f240 4279 	movw	r2, #1145	; 0x479
 801e02c:	e05d      	b.n	801e0ea <SwapFirmwareImages+0x362>
 801e02e:	bf00      	nop
 801e030:	08105000 	.word	0x08105000
 801e034:	081c0000 	.word	0x081c0000
 801e038:	081e0000 	.word	0x081e0000
 801e03c:	080f1000 	.word	0x080f1000
 801e040:	0802bd02 	.word	0x0802bd02
 801e044:	081d5000 	.word	0x081d5000
 801e048:	20031e40 	.word	0x20031e40
 801e04c:	00122f11 	.word	0x00122f11
 801e050:	08029e48 	.word	0x08029e48
 801e054:	08029e50 	.word	0x08029e50
 801e058:	200325e4 	.word	0x200325e4
 801e05c:	08036000 	.word	0x08036000
    if ((e_ret_status == SFU_SUCCESS) && (memcmp(&trailer, NOT_SWAPPED, sizeof(trailer)) == 0))
 801e060:	2208      	movs	r2, #8
 801e062:	49b0      	ldr	r1, [pc, #704]	; (801e324 <SwapFirmwareImages+0x59c>)
 801e064:	a824      	add	r0, sp, #144	; 0x90
 801e066:	f00a fc99 	bl	802899c <memcmp>
 801e06a:	2800      	cmp	r0, #0
 801e06c:	f47f af72 	bne.w	801df54 <SwapFirmwareImages+0x1cc>
      if (index_slot1_write != (number_of_index_slot1 - 1))
 801e070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e072:	3b01      	subs	r3, #1
 801e074:	42bb      	cmp	r3, r7
 801e076:	d126      	bne.n	801e0c6 <SwapFirmwareImages+0x33e>
 801e078:	9a07      	ldr	r2, [sp, #28]
 801e07a:	9902      	ldr	r1, [sp, #8]
 801e07c:	4baa      	ldr	r3, [pc, #680]	; (801e328 <SwapFirmwareImages+0x5a0>)
 801e07e:	eba2 020b 	sub.w	r2, r2, fp
 801e082:	440a      	add	r2, r1
 801e084:	920f      	str	r2, [sp, #60]	; 0x3c
        (void)SFU_LL_FLASH_Read(buffer, CHUNK_0_ADDR(index_slot0, chunk), sizeof(buffer));
 801e086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e088:	fb06 3305 	mla	r3, r6, r5, r3
 801e08c:	1a9b      	subs	r3, r3, r2
 801e08e:	eba3 030b 	sub.w	r3, r3, fp
 801e092:	f5a1 6900 	sub.w	r9, r1, #2048	; 0x800
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 801e096:	f04f 0a00 	mov.w	sl, #0
        (void)SFU_LL_FLASH_Read(buffer, CHUNK_0_ADDR(index_slot0, chunk), sizeof(buffer));
 801e09a:	9310      	str	r3, [sp, #64]	; 0x40
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 801e09c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e09e:	459a      	cmp	sl, r3
 801e0a0:	d132      	bne.n	801e108 <SwapFirmwareImages+0x380>
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, pValue, sizeof(SFU_LL_FLASH_write_t));
 801e0a2:	2308      	movs	r3, #8
 801e0a4:	4aa1      	ldr	r2, [pc, #644]	; (801e32c <SwapFirmwareImages+0x5a4>)
 801e0a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e0a8:	f10d 008f 	add.w	r0, sp, #143	; 0x8f
 801e0ac:	f002 fa98 	bl	80205e0 <SFU_LL_FLASH_Write>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e0b0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e0b4:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pAddr, pValue, sizeof(SFU_LL_FLASH_write_t));
 801e0b6:	4604      	mov	r4, r0
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e0b8:	d171      	bne.n	801e19e <SwapFirmwareImages+0x416>
 801e0ba:	4b9d      	ldr	r3, [pc, #628]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e0bc:	2102      	movs	r1, #2
 801e0be:	7019      	strb	r1, [r3, #0]
 801e0c0:	f240 32d7 	movw	r2, #983	; 0x3d7
 801e0c4:	e011      	b.n	801e0ea <SwapFirmwareImages+0x362>
        if (index_slot1_write == -1)
 801e0c6:	1c7a      	adds	r2, r7, #1
 801e0c8:	d116      	bne.n	801e0f8 <SwapFirmwareImages+0x370>
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *) SFU_IMG_SWAP_REGION_BEGIN_VALUE,
 801e0ca:	462a      	mov	r2, r5
 801e0cc:	4999      	ldr	r1, [pc, #612]	; (801e334 <SwapFirmwareImages+0x5ac>)
 801e0ce:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801e0d2:	f002 fbaf 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 801e0d6:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e0da:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *) SFU_IMG_SWAP_REGION_BEGIN_VALUE,
 801e0dc:	4604      	mov	r4, r0
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED)
 801e0de:	d110      	bne.n	801e102 <SwapFirmwareImages+0x37a>
 801e0e0:	4b93      	ldr	r3, [pc, #588]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e0e2:	2101      	movs	r1, #1
 801e0e4:	7019      	strb	r1, [r3, #0]
 801e0e6:	f240 329e 	movw	r2, #926	; 0x39e
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e0ea:	4b93      	ldr	r3, [pc, #588]	; (801e338 <SwapFirmwareImages+0x5b0>)
 801e0ec:	4893      	ldr	r0, [pc, #588]	; (801e33c <SwapFirmwareImages+0x5b4>)
 801e0ee:	601a      	str	r2, [r3, #0]
 801e0f0:	4b93      	ldr	r3, [pc, #588]	; (801e340 <SwapFirmwareImages+0x5b8>)
 801e0f2:	f00a fd2b 	bl	8028b4c <iprintf>
 801e0f6:	e685      	b.n	801de04 <SwapFirmwareImages+0x7c>
 801e0f8:	4639      	mov	r1, r7
 801e0fa:	2001      	movs	r0, #1
 801e0fc:	f7ff fbb8 	bl	801d870 <EraseSlotIndex.part.1>
 801e100:	4604      	mov	r4, r0
        if (e_ret_status !=  SFU_SUCCESS)
 801e102:	4544      	cmp	r4, r8
 801e104:	d0b8      	beq.n	801e078 <SwapFirmwareImages+0x2f0>
 801e106:	e67b      	b.n	801de00 <SwapFirmwareImages+0x78>
        (void)SFU_LL_FLASH_Read(buffer, CHUNK_0_ADDR(index_slot0, chunk), sizeof(buffer));
 801e108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e10a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e10e:	eb03 0109 	add.w	r1, r3, r9
 801e112:	a826      	add	r0, sp, #152	; 0x98
 801e114:	f002 fac6 	bl	80206a4 <SFU_LL_FLASH_Read>
        if (index_slot1_write == -1)
 801e118:	1c7b      	adds	r3, r7, #1
 801e11a:	d117      	bne.n	801e14c <SwapFirmwareImages+0x3c4>
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_SWAP_ADDR(chunk), buffer, write_len);
 801e11c:	4b85      	ldr	r3, [pc, #532]	; (801e334 <SwapFirmwareImages+0x5ac>)
 801e11e:	eba3 010b 	sub.w	r1, r3, fp
 801e122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e124:	1ac9      	subs	r1, r1, r3
 801e126:	aa26      	add	r2, sp, #152	; 0x98
 801e128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e12c:	4449      	add	r1, r9
 801e12e:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801e132:	f002 fa55 	bl	80205e0 <SFU_LL_FLASH_Write>
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e136:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e13a:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_SWAP_ADDR(chunk), buffer, write_len);
 801e13c:	4604      	mov	r4, r0
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e13e:	d126      	bne.n	801e18e <SwapFirmwareImages+0x406>
 801e140:	4b7b      	ldr	r3, [pc, #492]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e142:	2102      	movs	r1, #2
 801e144:	7019      	strb	r1, [r3, #0]
 801e146:	f240 32b5 	movw	r2, #949	; 0x3b5
 801e14a:	e7ce      	b.n	801e0ea <SwapFirmwareImages+0x362>
          if (((uint32_t)CHUNK_1_ADDR(index_slot1_write, chunk)) < (uint32_t)TRAILER_BEGIN)
 801e14c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e14e:	eba3 030b 	sub.w	r3, r3, fp
 801e152:	454b      	cmp	r3, r9
 801e154:	d91e      	bls.n	801e194 <SwapFirmwareImages+0x40c>
            if ((uint32_t)(CHUNK_1_ADDR(index_slot1_write, chunk) + write_len) > (uint32_t)TRAILER_BEGIN)
 801e156:	f509 6200 	add.w	r2, r9, #2048	; 0x800
 801e15a:	4293      	cmp	r3, r2
 801e15c:	bf3d      	ittte	cc
 801e15e:	9b09      	ldrcc	r3, [sp, #36]	; 0x24
 801e160:	f503 6300 	addcc.w	r3, r3, #2048	; 0x800
 801e164:	eb03 23ca 	addcc.w	r3, r3, sl, lsl #11
        write_len = sizeof(buffer);
 801e168:	f44f 6300 	movcs.w	r3, #2048	; 0x800
            e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_1_ADDR(index_slot1_write, chunk), buffer,
 801e16c:	aa26      	add	r2, sp, #152	; 0x98
 801e16e:	4649      	mov	r1, r9
 801e170:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801e174:	f002 fa34 	bl	80205e0 <SFU_LL_FLASH_Write>
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e178:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e17c:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_1_ADDR(index_slot1_write, chunk), buffer,
 801e17e:	4604      	mov	r4, r0
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e180:	d105      	bne.n	801e18e <SwapFirmwareImages+0x406>
 801e182:	4b6b      	ldr	r3, [pc, #428]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e184:	2102      	movs	r1, #2
 801e186:	7019      	strb	r1, [r3, #0]
 801e188:	f240 32c7 	movw	r2, #967	; 0x3c7
 801e18c:	e7ad      	b.n	801e0ea <SwapFirmwareImages+0x362>
            if (e_ret_status != SFU_SUCCESS)
 801e18e:	4544      	cmp	r4, r8
 801e190:	f47f ae36 	bne.w	801de00 <SwapFirmwareImages+0x78>
 801e194:	f10a 0a01 	add.w	sl, sl, #1
 801e198:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 801e19c:	e77e      	b.n	801e09c <SwapFirmwareImages+0x314>
      if (e_ret_status != SFU_SUCCESS)
 801e19e:	4540      	cmp	r0, r8
 801e1a0:	f43f aed8 	beq.w	801df54 <SwapFirmwareImages+0x1cc>
 801e1a4:	e62e      	b.n	801de04 <SwapFirmwareImages+0x7c>
        if (index_slot1_read == -1)
 801e1a6:	9b01      	ldr	r3, [sp, #4]
 801e1a8:	3301      	adds	r3, #1
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_read, chunk), sizeof(buffer));
 801e1aa:	bf1b      	ittet	ne
 801e1ac:	9b1a      	ldrne	r3, [sp, #104]	; 0x68
 801e1ae:	9a0a      	ldrne	r2, [sp, #40]	; 0x28
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_SWAP_ADDR(chunk), sizeof(buffer));
 801e1b0:	4b60      	ldreq	r3, [pc, #384]	; (801e334 <SwapFirmwareImages+0x5ac>)
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_read, chunk), sizeof(buffer));
 801e1b2:	1a99      	subne	r1, r3, r2
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_SWAP_ADDR(chunk), sizeof(buffer));
 801e1b4:	bf07      	ittee	eq
 801e1b6:	eb03 21ca 	addeq.w	r1, r3, sl, lsl #11
 801e1ba:	f44f 6200 	moveq.w	r2, #2048	; 0x800
          (void)SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_read, chunk), sizeof(buffer));
 801e1be:	f44f 6200 	movne.w	r2, #2048	; 0x800
 801e1c2:	4449      	addne	r1, r9
 801e1c4:	a826      	add	r0, sp, #152	; 0x98
 801e1c6:	f002 fa6d 	bl	80206a4 <SFU_LL_FLASH_Read>
        if (index_slot0 == index_slot0_partial_end)
 801e1ca:	9b05      	ldr	r3, [sp, #20]
 801e1cc:	429e      	cmp	r6, r3
 801e1ce:	d034      	beq.n	801e23a <SwapFirmwareImages+0x4b2>
        if (index_slot0 == index_slot0_partial_begin)
 801e1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1d2:	429e      	cmp	r6, r3
 801e1d4:	d17a      	bne.n	801e2cc <SwapFirmwareImages+0x544>
          if (CHUNK_1_ADDR(index_slot1_write, (chunk + 1)) <= (CHUNK_1_ADDR(index_slot1_write, 0) +
 801e1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1d8:	f509 6300 	add.w	r3, r9, #2048	; 0x800
 801e1dc:	4293      	cmp	r3, r2
 801e1de:	d947      	bls.n	801e270 <SwapFirmwareImages+0x4e8>
          if ((CHUNK_1_ADDR(index_slot1_write, chunk) < (CHUNK_1_ADDR(index_slot1_write, 0) +
 801e1e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1e2:	454a      	cmp	r2, r9
 801e1e4:	d85a      	bhi.n	801e29c <SwapFirmwareImages+0x514>
        if (index_slot0 == index_slot0_final_end)
 801e1e6:	9b03      	ldr	r3, [sp, #12]
 801e1e8:	429e      	cmp	r6, r3
 801e1ea:	d10e      	bne.n	801e20a <SwapFirmwareImages+0x482>
 801e1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
          if (CHUNK_0_ADDR(index_slot0, chunk) >= CHUNK_0_ADDR(index_slot0_final_end, 0) + offset_block_final_end)
 801e1f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e1f2:	1a9b      	subs	r3, r3, r2
 801e1f4:	eb03 0209 	add.w	r2, r3, r9
 801e1f8:	4291      	cmp	r1, r2
 801e1fa:	f200 80de 	bhi.w	801e3ba <SwapFirmwareImages+0x632>
            memset(buffer, 0xFF, sizeof(buffer));
 801e1fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e202:	21ff      	movs	r1, #255	; 0xff
 801e204:	a826      	add	r0, sp, #152	; 0x98
            memset(buffer + (offset_block_final_end % SFU_IMG_CHUNK_SIZE), 0xFF,
 801e206:	f00a fbe3 	bl	80289d0 <memset>
        if ((index_slot0 == 0) && (chunk == 0))
 801e20a:	2e00      	cmp	r6, #0
 801e20c:	d079      	beq.n	801e302 <SwapFirmwareImages+0x57a>
 801e20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e212:	1a99      	subs	r1, r3, r2
 801e214:	4449      	add	r1, r9
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(index_slot0, chunk), buffer,
 801e216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e21a:	aa26      	add	r2, sp, #152	; 0x98
 801e21c:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801e220:	f002 f9de 	bl	80205e0 <SFU_LL_FLASH_Write>
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e224:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e228:	4298      	cmp	r0, r3
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(index_slot0, chunk), buffer,
 801e22a:	4604      	mov	r4, r0
        StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e22c:	d171      	bne.n	801e312 <SwapFirmwareImages+0x58a>
 801e22e:	4b40      	ldr	r3, [pc, #256]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e230:	2102      	movs	r1, #2
 801e232:	7019      	strb	r1, [r3, #0]
 801e234:	f44f 628d 	mov.w	r2, #1128	; 0x468
 801e238:	e757      	b.n	801e0ea <SwapFirmwareImages+0x362>
 801e23a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e23c:	eb0b 0103 	add.w	r1, fp, r3
 801e240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e242:	1ac9      	subs	r1, r1, r3
          if (CHUNK_1_ADDR(index_slot1_write, chunk) >= (CHUNK_1_ADDR(index_slot1_write, 0) + offset_block_partial_end))
 801e244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e246:	4449      	add	r1, r9
 801e248:	4299      	cmp	r1, r3
 801e24a:	f0c0 809b 	bcc.w	801e384 <SwapFirmwareImages+0x5fc>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e24e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e252:	a826      	add	r0, sp, #152	; 0x98
 801e254:	f002 fa26 	bl	80206a4 <SFU_LL_FLASH_Read>
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e258:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e25c:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e25e:	4604      	mov	r4, r0
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e260:	f040 808c 	bne.w	801e37c <SwapFirmwareImages+0x5f4>
 801e264:	4b32      	ldr	r3, [pc, #200]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e266:	2103      	movs	r1, #3
 801e268:	7019      	strb	r1, [r3, #0]
 801e26a:	f240 4207 	movw	r2, #1031	; 0x407
 801e26e:	e73c      	b.n	801e0ea <SwapFirmwareImages+0x362>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e274:	4649      	mov	r1, r9
 801e276:	a826      	add	r0, sp, #152	; 0x98
 801e278:	9321      	str	r3, [sp, #132]	; 0x84
 801e27a:	f002 fa13 	bl	80206a4 <SFU_LL_FLASH_Read>
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e27e:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 801e282:	4290      	cmp	r0, r2
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e284:	4604      	mov	r4, r0
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e288:	d105      	bne.n	801e296 <SwapFirmwareImages+0x50e>
 801e28a:	4b29      	ldr	r3, [pc, #164]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e28c:	2103      	movs	r1, #3
 801e28e:	7019      	strb	r1, [r3, #0]
 801e290:	f240 4229 	movw	r2, #1065	; 0x429
 801e294:	e729      	b.n	801e0ea <SwapFirmwareImages+0x362>
            if (e_ret_status != SFU_SUCCESS)
 801e296:	4540      	cmp	r0, r8
 801e298:	d0a2      	beq.n	801e1e0 <SwapFirmwareImages+0x458>
 801e29a:	e5b1      	b.n	801de00 <SwapFirmwareImages+0x78>
              && ((CHUNK_1_ADDR(index_slot1_write, (chunk + 1))) > (CHUNK_1_ADDR(index_slot1_write, 0) +
 801e29c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e29e:	4293      	cmp	r3, r2
 801e2a0:	d9a1      	bls.n	801e1e6 <SwapFirmwareImages+0x45e>
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), offset_block_partial_begin
 801e2a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e2a4:	4649      	mov	r1, r9
 801e2a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801e2aa:	a826      	add	r0, sp, #152	; 0x98
 801e2ac:	f002 f9fa 	bl	80206a4 <SFU_LL_FLASH_Read>
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e2b0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e2b4:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), offset_block_partial_begin
 801e2b6:	4604      	mov	r4, r0
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e2b8:	d105      	bne.n	801e2c6 <SwapFirmwareImages+0x53e>
 801e2ba:	4b1d      	ldr	r3, [pc, #116]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e2bc:	2103      	movs	r1, #3
 801e2be:	7019      	strb	r1, [r3, #0]
 801e2c0:	f240 423a 	movw	r2, #1082	; 0x43a
 801e2c4:	e711      	b.n	801e0ea <SwapFirmwareImages+0x362>
            if (e_ret_status != SFU_SUCCESS)
 801e2c6:	4540      	cmp	r0, r8
 801e2c8:	d08d      	beq.n	801e1e6 <SwapFirmwareImages+0x45e>
 801e2ca:	e599      	b.n	801de00 <SwapFirmwareImages+0x78>
        else if (index_slot0 == 0)
 801e2cc:	2e00      	cmp	r6, #0
 801e2ce:	f040 8084 	bne.w	801e3da <SwapFirmwareImages+0x652>
          e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e2d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e2d6:	4649      	mov	r1, r9
 801e2d8:	a826      	add	r0, sp, #152	; 0x98
 801e2da:	f002 f9e3 	bl	80206a4 <SFU_LL_FLASH_Read>
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e2de:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e2e2:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Read(buffer, CHUNK_1_ADDR(index_slot1_write, chunk), sizeof(buffer));
 801e2e4:	4604      	mov	r4, r0
          StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e2e6:	d105      	bne.n	801e2f4 <SwapFirmwareImages+0x56c>
 801e2e8:	4b11      	ldr	r3, [pc, #68]	; (801e330 <SwapFirmwareImages+0x5a8>)
 801e2ea:	2103      	movs	r1, #3
 801e2ec:	7019      	strb	r1, [r3, #0]
 801e2ee:	f240 4246 	movw	r2, #1094	; 0x446
 801e2f2:	e6fa      	b.n	801e0ea <SwapFirmwareImages+0x362>
          if (e_ret_status != SFU_SUCCESS)
 801e2f4:	4540      	cmp	r0, r8
 801e2f6:	f47f ad83 	bne.w	801de00 <SwapFirmwareImages+0x78>
        if (index_slot0 == index_slot0_final_end)
 801e2fa:	9b03      	ldr	r3, [sp, #12]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	f43f af75 	beq.w	801e1ec <SwapFirmwareImages+0x464>
        if ((index_slot0 == 0) && (chunk == 0))
 801e302:	f1ba 0f00 	cmp.w	sl, #0
 801e306:	d182      	bne.n	801e20e <SwapFirmwareImages+0x486>
        e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, CHUNK_0_ADDR_MODIFIED(index_slot0, chunk), buffer,
 801e308:	4b07      	ldr	r3, [pc, #28]	; (801e328 <SwapFirmwareImages+0x5a0>)
 801e30a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
          write_len = write_len - SFU_IMG_IMAGE_OFFSET;
 801e30e:	4653      	mov	r3, sl
 801e310:	e783      	b.n	801e21a <SwapFirmwareImages+0x492>
        if (e_ret_status != SFU_SUCCESS)
 801e312:	4540      	cmp	r0, r8
 801e314:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 801e318:	f47f ad72 	bne.w	801de00 <SwapFirmwareImages+0x78>
      for (chunk = (number_of_chunk - 1); chunk >= 0 ; chunk--)
 801e31c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e320:	e66b      	b.n	801dffa <SwapFirmwareImages+0x272>
 801e322:	bf00      	nop
 801e324:	08029e48 	.word	0x08029e48
 801e328:	08105000 	.word	0x08105000
 801e32c:	08029e50 	.word	0x08029e50
 801e330:	200325e4 	.word	0x200325e4
 801e334:	081d5000 	.word	0x081d5000
 801e338:	200325e0 	.word	0x200325e0
 801e33c:	0802bcc8 	.word	0x0802bcc8
 801e340:	0802bc40 	.word	0x0802bc40
        if (e_ret_status != SFU_SUCCESS)
 801e344:	4540      	cmp	r0, r8
 801e346:	f47f ad5d 	bne.w	801de04 <SwapFirmwareImages+0x7c>
    index_slot1_read--;
 801e34a:	9b01      	ldr	r3, [sp, #4]
 801e34c:	3b01      	subs	r3, #1
 801e34e:	9301      	str	r3, [sp, #4]
    if ((index_slot0 < index_slot0_partial_begin) && (index_slot0 >= 0))
 801e350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    index_slot0--;
 801e352:	3e01      	subs	r6, #1
    if ((index_slot0 < index_slot0_partial_begin) && (index_slot0 >= 0))
 801e354:	42b3      	cmp	r3, r6
    index_slot1_write--;
 801e356:	f107 37ff 	add.w	r7, r7, #4294967295
    if ((index_slot0 < index_slot0_partial_begin) && (index_slot0 >= 0))
 801e35a:	dd07      	ble.n	801e36c <SwapFirmwareImages+0x5e4>
 801e35c:	2e00      	cmp	r6, #0
      index_slot1_read = -1;  /* force read from swap area, to avoid exiting slot 1 / swap index allowed range */
 801e35e:	bfa9      	itett	ge
 801e360:	f04f 33ff 	movge.w	r3, #4294967295
    if ((index_slot0 < index_slot0_partial_begin) && (index_slot0 >= 0))
 801e364:	f04f 36ff 	movlt.w	r6, #4294967295
      index_slot1_read = -1;  /* force read from swap area, to avoid exiting slot 1 / swap index allowed range */
 801e368:	9301      	strge	r3, [sp, #4]
      index_slot0 = 0;
 801e36a:	2600      	movge	r6, #0
 801e36c:	9b02      	ldr	r3, [sp, #8]
    if ((index_slot0 < index_slot0_partial_begin) && (index_slot0 >= 0))
 801e36e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e370:	1b5b      	subs	r3, r3, r5
 801e372:	9302      	str	r3, [sp, #8]
 801e374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e376:	442b      	add	r3, r5
 801e378:	9309      	str	r3, [sp, #36]	; 0x24
 801e37a:	e5b6      	b.n	801deea <SwapFirmwareImages+0x162>
            if (e_ret_status != SFU_SUCCESS)
 801e37c:	4544      	cmp	r4, r8
 801e37e:	f43f af27 	beq.w	801e1d0 <SwapFirmwareImages+0x448>
 801e382:	e53d      	b.n	801de00 <SwapFirmwareImages+0x78>
              && ((CHUNK_1_ADDR(index_slot1_write, (chunk + 1))) > (CHUNK_1_ADDR(index_slot1_write, 0) +
 801e384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e386:	f509 6300 	add.w	r3, r9, #2048	; 0x800
 801e38a:	429a      	cmp	r2, r3
 801e38c:	f4bf af20 	bcs.w	801e1d0 <SwapFirmwareImages+0x448>
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 801e390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e392:	9820      	ldr	r0, [sp, #128]	; 0x80
 801e394:	eb0b 0103 	add.w	r1, fp, r3
 801e398:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e39a:	4449      	add	r1, r9
 801e39c:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 801e3a0:	f002 f980 	bl	80206a4 <SFU_LL_FLASH_Read>
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e3a4:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e3a8:	4298      	cmp	r0, r3
            e_ret_status = SFU_LL_FLASH_Read(buffer + (offset_block_partial_end % SFU_IMG_CHUNK_SIZE),
 801e3aa:	4604      	mov	r4, r0
            StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e3ac:	d1e6      	bne.n	801e37c <SwapFirmwareImages+0x5f4>
 801e3ae:	4b0d      	ldr	r3, [pc, #52]	; (801e3e4 <SwapFirmwareImages+0x65c>)
 801e3b0:	2103      	movs	r1, #3
 801e3b2:	7019      	strb	r1, [r3, #0]
 801e3b4:	f44f 6283 	mov.w	r2, #1048	; 0x418
 801e3b8:	e697      	b.n	801e0ea <SwapFirmwareImages+0x362>
          if ((CHUNK_0_ADDR(index_slot0, chunk) < (CHUNK_0_ADDR(index_slot0_final_end, 0) + offset_block_final_end)) &&
 801e3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e3c0:	444b      	add	r3, r9
 801e3c2:	429a      	cmp	r2, r3
 801e3c4:	f4bf af21 	bcs.w	801e20a <SwapFirmwareImages+0x482>
            memset(buffer + (offset_block_final_end % SFU_IMG_CHUNK_SIZE), 0xFF,
 801e3c8:	9b08      	ldr	r3, [sp, #32]
 801e3ca:	f3c3 000a 	ubfx	r0, r3, #0, #11
 801e3ce:	ab26      	add	r3, sp, #152	; 0x98
 801e3d0:	f5c0 6200 	rsb	r2, r0, #2048	; 0x800
 801e3d4:	21ff      	movs	r1, #255	; 0xff
 801e3d6:	4418      	add	r0, r3
 801e3d8:	e715      	b.n	801e206 <SwapFirmwareImages+0x47e>
        if (index_slot0 == index_slot0_final_end)
 801e3da:	9b03      	ldr	r3, [sp, #12]
 801e3dc:	429e      	cmp	r6, r3
 801e3de:	f47f af16 	bne.w	801e20e <SwapFirmwareImages+0x486>
 801e3e2:	e703      	b.n	801e1ec <SwapFirmwareImages+0x464>
 801e3e4:	200325e4 	.word	0x200325e4

0801e3e8 <SFU_IMG_CoreInit>:
{
 801e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!(SFU_IMG_REGION_IS_MULTIPLE(SFU_IMG_SLOT_0_REGION_SIZE, SFU_IMG_SWAP_REGION_SIZE)))
 801e3ec:	f8df a204 	ldr.w	sl, [pc, #516]	; 801e5f4 <SFU_IMG_CoreInit+0x20c>
 801e3f0:	f8df 9204 	ldr.w	r9, [pc, #516]	; 801e5f8 <SFU_IMG_CoreInit+0x210>
 801e3f4:	4f60      	ldr	r7, [pc, #384]	; (801e578 <SFU_IMG_CoreInit+0x190>)
  memset(fw_header_validated, 0xFE, sizeof(fw_header_validated));
 801e3f6:	4861      	ldr	r0, [pc, #388]	; (801e57c <SFU_IMG_CoreInit+0x194>)
  if (!(SFU_IMG_REGION_IS_MULTIPLE(SFU_IMG_SLOT_0_REGION_SIZE, SFU_IMG_SWAP_REGION_SIZE)))
 801e3f8:	4e61      	ldr	r6, [pc, #388]	; (801e580 <SFU_IMG_CoreInit+0x198>)
 801e3fa:	f8df 8198 	ldr.w	r8, [pc, #408]	; 801e594 <SFU_IMG_CoreInit+0x1ac>
  memset(fw_header_validated, 0xFE, sizeof(fw_header_validated));
 801e3fe:	21fe      	movs	r1, #254	; 0xfe
{
 801e400:	b085      	sub	sp, #20
  memset(fw_header_validated, 0xFE, sizeof(fw_header_validated));
 801e402:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
  if (!(SFU_IMG_REGION_IS_MULTIPLE(SFU_IMG_SLOT_0_REGION_SIZE, SFU_IMG_SWAP_REGION_SIZE)))
 801e406:	f10a 0401 	add.w	r4, sl, #1
  memset(fw_header_validated, 0xFE, sizeof(fw_header_validated));
 801e40a:	f00a fae1 	bl	80289d0 <memset>
  if (!(SFU_IMG_REGION_IS_MULTIPLE(SFU_IMG_SLOT_0_REGION_SIZE, SFU_IMG_SWAP_REGION_SIZE)))
 801e40e:	1be4      	subs	r4, r4, r7
 801e410:	f109 0101 	add.w	r1, r9, #1
 801e414:	1b89      	subs	r1, r1, r6
 801e416:	fbb1 f5f4 	udiv	r5, r1, r4
 801e41a:	fb05 f304 	mul.w	r3, r5, r4
 801e41e:	4299      	cmp	r1, r3
 801e420:	f000 809a 	beq.w	801e558 <SFU_IMG_CoreInit+0x170>
    TRACE("\r\n= [FWIMG] The image slot size (%d) must be a multiple of the swap region size (%d)\r\n",
 801e424:	4622      	mov	r2, r4
 801e426:	4857      	ldr	r0, [pc, #348]	; (801e584 <SFU_IMG_CoreInit+0x19c>)
 801e428:	f00a fb90 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_SLOTS_SIZE_ERROR;
 801e42c:	2301      	movs	r3, #1
  if (((int32_t)(SFU_IMG_CHUNK_SIZE - (TRAILER_INDEX * sizeof(SFU_LL_FLASH_write_t)))) < 0)
 801e42e:	f06f 0207 	mvn.w	r2, #7
 801e432:	436a      	muls	r2, r5
 801e434:	f512 6f00 	cmn.w	r2, #2048	; 0x800
 801e438:	d504      	bpl.n	801e444 <SFU_IMG_CoreInit+0x5c>
    TRACE("\r\n= [FWIMG] %d bytes required for the swap metadata is too much, please tune your settings",
 801e43a:	00e9      	lsls	r1, r5, #3
 801e43c:	4852      	ldr	r0, [pc, #328]	; (801e588 <SFU_IMG_CoreInit+0x1a0>)
 801e43e:	f00a fb85 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
 801e442:	2302      	movs	r3, #2
  __IO uint32_t swap_size = SFU_IMG_SWAP_REGION_SIZE, swap_chunk = SFU_IMG_CHUNK_SIZE;
 801e444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801e448:	9402      	str	r4, [sp, #8]
 801e44a:	9103      	str	r1, [sp, #12]
  if (0U != ((uint32_t)(swap_size % swap_chunk)))
 801e44c:	9d02      	ldr	r5, [sp, #8]
 801e44e:	9803      	ldr	r0, [sp, #12]
 801e450:	fbb5 f2f0 	udiv	r2, r5, r0
 801e454:	fb00 5212 	mls	r2, r0, r2, r5
 801e458:	b122      	cbz	r2, 801e464 <SFU_IMG_CoreInit+0x7c>
    TRACE("\r\n= [FWIMG] The swap procedure uses chunks of %d bytes but the swap region size (%d) is not a multiple",
 801e45a:	4622      	mov	r2, r4
 801e45c:	484b      	ldr	r0, [pc, #300]	; (801e58c <SFU_IMG_CoreInit+0x1a4>)
 801e45e:	f00a fb75 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_SWAP_SETTINGS_ERROR;
 801e462:	2302      	movs	r3, #2
  if (!IS_ALIGNED(SFU_IMG_SLOT_0_REGION_BEGIN_VALUE))
 801e464:	f3c6 020b 	ubfx	r2, r6, #0, #12
 801e468:	b122      	cbz	r2, 801e474 <SFU_IMG_CoreInit+0x8c>
    TRACE("\r\n= [FWIMG] slot 0 (%x) is not properly aligned: please tune your settings",
 801e46a:	4945      	ldr	r1, [pc, #276]	; (801e580 <SFU_IMG_CoreInit+0x198>)
 801e46c:	4848      	ldr	r0, [pc, #288]	; (801e590 <SFU_IMG_CoreInit+0x1a8>)
 801e46e:	f00a fb6d 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e472:	2303      	movs	r3, #3
  if (!IS_ALIGNED(SFU_IMG_SLOT_1_REGION_BEGIN_VALUE))
 801e474:	f3c8 020b 	ubfx	r2, r8, #0, #12
 801e478:	b122      	cbz	r2, 801e484 <SFU_IMG_CoreInit+0x9c>
    TRACE("\r\n= [FWIMG] slot 1 (%x) is not properly aligned: please tune your settings",
 801e47a:	4946      	ldr	r1, [pc, #280]	; (801e594 <SFU_IMG_CoreInit+0x1ac>)
 801e47c:	4846      	ldr	r0, [pc, #280]	; (801e598 <SFU_IMG_CoreInit+0x1b0>)
 801e47e:	f00a fb65 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e482:	2303      	movs	r3, #3
  if (!IS_ALIGNED(SFU_IMG_SWAP_REGION_BEGIN_VALUE))
 801e484:	f3c7 020b 	ubfx	r2, r7, #0, #12
 801e488:	b122      	cbz	r2, 801e494 <SFU_IMG_CoreInit+0xac>
    TRACE("\r\n= [FWIMG] swap region (%x) is not properly aligned: please tune your settings",
 801e48a:	493b      	ldr	r1, [pc, #236]	; (801e578 <SFU_IMG_CoreInit+0x190>)
 801e48c:	4843      	ldr	r0, [pc, #268]	; (801e59c <SFU_IMG_CoreInit+0x1b4>)
 801e48e:	f00a fb5d 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e492:	2303      	movs	r3, #3
  if (((SFU_IMG_SLOT_0_REGION_BEGIN_VALUE - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 801e494:	f8df b164 	ldr.w	fp, [pc, #356]	; 801e5fc <SFU_IMG_CoreInit+0x214>
 801e498:	4a41      	ldr	r2, [pc, #260]	; (801e5a0 <SFU_IMG_CoreInit+0x1b8>)
 801e49a:	f10b 4478 	add.w	r4, fp, #4160749568	; 0xf8000000
 801e49e:	0b24      	lsrs	r4, r4, #12
 801e4a0:	ebb4 3f12 	cmp.w	r4, r2, lsr #12
 801e4a4:	d303      	bcc.n	801e4ae <SFU_IMG_CoreInit+0xc6>
    TRACE("\r\n= [FWIMG] SLOT 0 overlaps SBSFU code area protected by WRP\r\n");
 801e4a6:	483f      	ldr	r0, [pc, #252]	; (801e5a4 <SFU_IMG_CoreInit+0x1bc>)
 801e4a8:	f00a fbd8 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e4ac:	2303      	movs	r3, #3
  if (((SFU_IMG_SLOT_1_REGION_BEGIN_VALUE - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 801e4ae:	4a3e      	ldr	r2, [pc, #248]	; (801e5a8 <SFU_IMG_CoreInit+0x1c0>)
 801e4b0:	ebb4 3f12 	cmp.w	r4, r2, lsr #12
 801e4b4:	d303      	bcc.n	801e4be <SFU_IMG_CoreInit+0xd6>
    TRACE("\r\n= [FWIMG] SLOT 1 overlaps SBSFU code area protected by WRP\r\n");
 801e4b6:	483d      	ldr	r0, [pc, #244]	; (801e5ac <SFU_IMG_CoreInit+0x1c4>)
 801e4b8:	f00a fbd0 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e4bc:	2303      	movs	r3, #3
  if (((SFU_IMG_SWAP_REGION_BEGIN_VALUE - FLASH_BASE) / FLASH_PAGE_SIZE) <= SFU_PROTECT_WRP_PAGE_END_1)
 801e4be:	4a3c      	ldr	r2, [pc, #240]	; (801e5b0 <SFU_IMG_CoreInit+0x1c8>)
 801e4c0:	ebb4 3f12 	cmp.w	r4, r2, lsr #12
 801e4c4:	d303      	bcc.n	801e4ce <SFU_IMG_CoreInit+0xe6>
    TRACE("\r\n= [FWIMG] SWAP overlaps SBSFU code area protected by WRP\r\n");
 801e4c6:	483b      	ldr	r0, [pc, #236]	; (801e5b4 <SFU_IMG_CoreInit+0x1cc>)
 801e4c8:	f00a fbc8 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e4cc:	2303      	movs	r3, #3
  if (!(((KMS_DATASTORAGE_START) >= (SFU_PROTECT_FWALL_NVDATA_ADDR_START))
 801e4ce:	4a3a      	ldr	r2, [pc, #232]	; (801e5b8 <SFU_IMG_CoreInit+0x1d0>)
 801e4d0:	4c3a      	ldr	r4, [pc, #232]	; (801e5bc <SFU_IMG_CoreInit+0x1d4>)
 801e4d2:	6811      	ldr	r1, [r2, #0]
 801e4d4:	4d3a      	ldr	r5, [pc, #232]	; (801e5c0 <SFU_IMG_CoreInit+0x1d8>)
 801e4d6:	b288      	uxth	r0, r1
 801e4d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e4dc:	4290      	cmp	r0, r2
 801e4de:	d043      	beq.n	801e568 <SFU_IMG_CoreInit+0x180>
 801e4e0:	4a38      	ldr	r2, [pc, #224]	; (801e5c4 <SFU_IMG_CoreInit+0x1dc>)
 801e4e2:	ea02 2141 	and.w	r1, r2, r1, lsl #9
 801e4e6:	f101 6000 	add.w	r0, r1, #134217728	; 0x8000000
 801e4ea:	42a0      	cmp	r0, r4
 801e4ec:	d804      	bhi.n	801e4f8 <SFU_IMG_CoreInit+0x110>
    && ((KMS_DATASTORAGE_END) <= (SFU_PROTECT_FWALL_NVDATA_ADDR_START+SFU_PROTECT_FWALL_NVDATA_SIZE))))
 801e4ee:	4a36      	ldr	r2, [pc, #216]	; (801e5c8 <SFU_IMG_CoreInit+0x1e0>)
 801e4f0:	1a52      	subs	r2, r2, r1
 801e4f2:	4402      	add	r2, r0
  if (!(((KMS_DATASTORAGE_START) >= (SFU_PROTECT_FWALL_NVDATA_ADDR_START))
 801e4f4:	42aa      	cmp	r2, r5
 801e4f6:	d203      	bcs.n	801e500 <SFU_IMG_CoreInit+0x118>
    TRACE("\r\n= [FWIMG] KMS NVM Area not under firewall protection\r\n");
 801e4f8:	4834      	ldr	r0, [pc, #208]	; (801e5cc <SFU_IMG_CoreInit+0x1e4>)
 801e4fa:	f00a fbaf 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e4fe:	2303      	movs	r3, #3
  if (!(((SB_REGION_ROM_START) > KMS_DATASTORAGE_END)
 801e500:	4a33      	ldr	r2, [pc, #204]	; (801e5d0 <SFU_IMG_CoreInit+0x1e8>)
 801e502:	4295      	cmp	r5, r2
 801e504:	d305      	bcc.n	801e512 <SFU_IMG_CoreInit+0x12a>
 801e506:	45a3      	cmp	fp, r4
 801e508:	d303      	bcc.n	801e512 <SFU_IMG_CoreInit+0x12a>
    TRACE("\r\n= [FWIMG] KMS NVM area overlaps SB Code area\r\n");
 801e50a:	4832      	ldr	r0, [pc, #200]	; (801e5d4 <SFU_IMG_CoreInit+0x1ec>)
 801e50c:	f00a fba6 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e510:	2303      	movs	r3, #3
  if (!(((REGION_SLOT_0_START) > KMS_DATASTORAGE_END)
 801e512:	42ae      	cmp	r6, r5
 801e514:	d805      	bhi.n	801e522 <SFU_IMG_CoreInit+0x13a>
 801e516:	45a1      	cmp	r9, r4
 801e518:	d303      	bcc.n	801e522 <SFU_IMG_CoreInit+0x13a>
    TRACE("\r\n= [FWIMG] KMS NVM area overlaps Slot 0 area\r\n");
 801e51a:	482f      	ldr	r0, [pc, #188]	; (801e5d8 <SFU_IMG_CoreInit+0x1f0>)
 801e51c:	f00a fb9e 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e520:	2303      	movs	r3, #3
  if (!(((REGION_SLOT_1_START) > KMS_DATASTORAGE_END)
 801e522:	45a8      	cmp	r8, r5
 801e524:	d806      	bhi.n	801e534 <SFU_IMG_CoreInit+0x14c>
 801e526:	4a2d      	ldr	r2, [pc, #180]	; (801e5dc <SFU_IMG_CoreInit+0x1f4>)
 801e528:	4294      	cmp	r4, r2
 801e52a:	d803      	bhi.n	801e534 <SFU_IMG_CoreInit+0x14c>
    TRACE("\r\n= [FWIMG] KMS NVM area overlaps Slot 1 area\r\n");
 801e52c:	482c      	ldr	r0, [pc, #176]	; (801e5e0 <SFU_IMG_CoreInit+0x1f8>)
 801e52e:	f00a fb95 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e532:	2303      	movs	r3, #3
  if (!(((REGION_SWAP_START) > KMS_DATASTORAGE_END)
 801e534:	42af      	cmp	r7, r5
 801e536:	d805      	bhi.n	801e544 <SFU_IMG_CoreInit+0x15c>
 801e538:	45a2      	cmp	sl, r4
 801e53a:	d303      	bcc.n	801e544 <SFU_IMG_CoreInit+0x15c>
    TRACE("\r\n= [FWIMG] KMS NVM area overlaps Swap area\r\n");
 801e53c:	4829      	ldr	r0, [pc, #164]	; (801e5e4 <SFU_IMG_CoreInit+0x1fc>)
 801e53e:	f00a fb8d 	bl	8028c5c <puts>
    e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 801e542:	2303      	movs	r3, #3
  TRACE("e_ret_status %d\r\n", e_ret_status);
 801e544:	4619      	mov	r1, r3
 801e546:	4828      	ldr	r0, [pc, #160]	; (801e5e8 <SFU_IMG_CoreInit+0x200>)
 801e548:	9301      	str	r3, [sp, #4]
 801e54a:	f00a faff 	bl	8028b4c <iprintf>
  return e_ret_status;
 801e54e:	9b01      	ldr	r3, [sp, #4]
}
 801e550:	4618      	mov	r0, r3
 801e552:	b005      	add	sp, #20
 801e554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TRACE("\r\n= [FWIMG] aaSlot #0 @: %x / Slot #1 @: %x / Swap @: %x", SFU_IMG_SLOT_0_REGION_BEGIN_VALUE,
 801e558:	463b      	mov	r3, r7
 801e55a:	4642      	mov	r2, r8
 801e55c:	4631      	mov	r1, r6
 801e55e:	4823      	ldr	r0, [pc, #140]	; (801e5ec <SFU_IMG_CoreInit+0x204>)
 801e560:	f00a faf4 	bl	8028b4c <iprintf>
    e_ret_status = SFU_IMG_INIT_OK;
 801e564:	2300      	movs	r3, #0
 801e566:	e762      	b.n	801e42e <SFU_IMG_CoreInit+0x46>
  if (!(((KMS_DATASTORAGE_START) >= (SFU_PROTECT_FWALL_NVDATA_ADDR_START))
 801e568:	f1b4 6f01 	cmp.w	r4, #135266304	; 0x8100000
 801e56c:	d3c4      	bcc.n	801e4f8 <SFU_IMG_CoreInit+0x110>
    && ((KMS_DATASTORAGE_END) <= (SFU_PROTECT_FWALL_NVDATA_ADDR_START+SFU_PROTECT_FWALL_NVDATA_SIZE))))
 801e56e:	4a20      	ldr	r2, [pc, #128]	; (801e5f0 <SFU_IMG_CoreInit+0x208>)
 801e570:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801e574:	e7bd      	b.n	801e4f2 <SFU_IMG_CoreInit+0x10a>
 801e576:	bf00      	nop
 801e578:	081d5000 	.word	0x081d5000
 801e57c:	200305b8 	.word	0x200305b8
 801e580:	08105000 	.word	0x08105000
 801e584:	0802bd40 	.word	0x0802bd40
 801e588:	0802bdd0 	.word	0x0802bdd0
 801e58c:	0802be2b 	.word	0x0802be2b
 801e590:	0802be92 	.word	0x0802be92
 801e594:	08036000 	.word	0x08036000
 801e598:	0802bedd 	.word	0x0802bedd
 801e59c:	0802bf28 	.word	0x0802bf28
 801e5a0:	00105000 	.word	0x00105000
 801e5a4:	0802bf78 	.word	0x0802bf78
 801e5a8:	00036000 	.word	0x00036000
 801e5ac:	0802bfb6 	.word	0x0802bfb6
 801e5b0:	001d5000 	.word	0x001d5000
 801e5b4:	0802bff4 	.word	0x0802bff4
 801e5b8:	1fff75e0 	.word	0x1fff75e0
 801e5bc:	08101000 	.word	0x08101000
 801e5c0:	08104fff 	.word	0x08104fff
 801e5c4:	01fffe00 	.word	0x01fffe00
 801e5c8:	00105800 	.word	0x00105800
 801e5cc:	0802c030 	.word	0x0802c030
 801e5d0:	0801c300 	.word	0x0801c300
 801e5d4:	0802c068 	.word	0x0802c068
 801e5d8:	0802c098 	.word	0x0802c098
 801e5dc:	080f0fff 	.word	0x080f0fff
 801e5e0:	0802c0c7 	.word	0x0802c0c7
 801e5e4:	0802c0f6 	.word	0x0802c0f6
 801e5e8:	0802c123 	.word	0x0802c123
 801e5ec:	0802bd97 	.word	0x0802bd97
 801e5f0:	00005800 	.word	0x00005800
 801e5f4:	081dffff 	.word	0x081dffff
 801e5f8:	081bffff 	.word	0x081bffff
 801e5fc:	08035fff 	.word	0x08035fff

0801e600 <SFU_IMG_CoreDeInit>:
}
 801e600:	4800      	ldr	r0, [pc, #0]	; (801e604 <SFU_IMG_CoreDeInit+0x4>)
 801e602:	4770      	bx	lr
 801e604:	00122f11 	.word	0x00122f11

0801e608 <SFU_IMG_CheckSlot0FwValid>:
{
 801e608:	b570      	push	{r4, r5, r6, lr}
 801e60a:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
  e_ret_status = SFU_LL_FLASH_Read(fw_header_slot, (uint8_t *) SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(fw_header_slot));
 801e60e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e612:	4918      	ldr	r1, [pc, #96]	; (801e674 <SFU_IMG_CheckSlot0FwValid+0x6c>)
 801e614:	4668      	mov	r0, sp
 801e616:	f002 f845 	bl	80206a4 <SFU_LL_FLASH_Read>
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e61a:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 801e61e:	42a8      	cmp	r0, r5
  e_ret_status = SFU_LL_FLASH_Read(fw_header_slot, (uint8_t *) SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(fw_header_slot));
 801e620:	4604      	mov	r4, r0
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e622:	d10e      	bne.n	801e642 <SFU_IMG_CheckSlot0FwValid+0x3a>
 801e624:	4b14      	ldr	r3, [pc, #80]	; (801e678 <SFU_IMG_CheckSlot0FwValid+0x70>)
 801e626:	2103      	movs	r1, #3
 801e628:	7019      	strb	r1, [r3, #0]
 801e62a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e62e:	4b13      	ldr	r3, [pc, #76]	; (801e67c <SFU_IMG_CheckSlot0FwValid+0x74>)
 801e630:	4813      	ldr	r0, [pc, #76]	; (801e680 <SFU_IMG_CheckSlot0FwValid+0x78>)
 801e632:	601a      	str	r2, [r3, #0]
 801e634:	4b13      	ldr	r3, [pc, #76]	; (801e684 <SFU_IMG_CheckSlot0FwValid+0x7c>)
 801e636:	f00a fa89 	bl	8028b4c <iprintf>
}
 801e63a:	4620      	mov	r0, r4
 801e63c:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 801e640:	bd70      	pop	{r4, r5, r6, pc}
  if (e_ret_status == SFU_SUCCESS)
 801e642:	4e11      	ldr	r6, [pc, #68]	; (801e688 <SFU_IMG_CheckSlot0FwValid+0x80>)
 801e644:	42b0      	cmp	r0, r6
 801e646:	d1f8      	bne.n	801e63a <SFU_IMG_CheckSlot0FwValid+0x32>
    e_ret_status = CheckHeaderValidated(fw_header_slot);
 801e648:	4668      	mov	r0, sp
 801e64a:	f7ff f8d7 	bl	801d7fc <CheckHeaderValidated>
  if (e_ret_status == SFU_SUCCESS)
 801e64e:	42b0      	cmp	r0, r6
    e_ret_status = CheckHeaderValidated(fw_header_slot);
 801e650:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 801e652:	d1f2      	bne.n	801e63a <SFU_IMG_CheckSlot0FwValid+0x32>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_validated, (uint8_t *) SFU_IMG_SLOT_0_REGION_BEGIN,
 801e654:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e658:	4906      	ldr	r1, [pc, #24]	; (801e674 <SFU_IMG_CheckSlot0FwValid+0x6c>)
 801e65a:	480c      	ldr	r0, [pc, #48]	; (801e68c <SFU_IMG_CheckSlot0FwValid+0x84>)
 801e65c:	f002 f822 	bl	80206a4 <SFU_LL_FLASH_Read>
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e660:	42a8      	cmp	r0, r5
    e_ret_status = SFU_LL_FLASH_Read(fw_header_validated, (uint8_t *) SFU_IMG_SLOT_0_REGION_BEGIN,
 801e662:	4604      	mov	r4, r0
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e664:	d1e9      	bne.n	801e63a <SFU_IMG_CheckSlot0FwValid+0x32>
 801e666:	4b04      	ldr	r3, [pc, #16]	; (801e678 <SFU_IMG_CheckSlot0FwValid+0x70>)
 801e668:	2103      	movs	r1, #3
 801e66a:	7019      	strb	r1, [r3, #0]
 801e66c:	f240 629d 	movw	r2, #1693	; 0x69d
 801e670:	e7dd      	b.n	801e62e <SFU_IMG_CheckSlot0FwValid+0x26>
 801e672:	bf00      	nop
 801e674:	08105000 	.word	0x08105000
 801e678:	200325e4 	.word	0x200325e4
 801e67c:	200325e0 	.word	0x200325e0
 801e680:	0802bcc8 	.word	0x0802bcc8
 801e684:	0802bc40 	.word	0x0802bc40
 801e688:	00122f11 	.word	0x00122f11
 801e68c:	200305b8 	.word	0x200305b8

0801e690 <SFU_IMG_GetFWInfoMAC>:
  if ((pFwImageHeader == NULL) || (SlotNumber > (SFU_SLOTS - 1)))
 801e690:	b118      	cbz	r0, 801e69a <SFU_IMG_GetFWInfoMAC+0xa>
 801e692:	2902      	cmp	r1, #2
 801e694:	d801      	bhi.n	801e69a <SFU_IMG_GetFWInfoMAC+0xa>
 801e696:	f7ff bb4f 	b.w	801dd38 <SFU_IMG_GetFWInfoMAC.part.2>
}
 801e69a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801e69e:	4770      	bx	lr

0801e6a0 <SFU_IMG_VerifyFwSignature>:
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus SFU_IMG_VerifyFwSignature(SE_StatusTypeDef  *pSeStatus, SE_FwRawHeaderTypeDef *pFwImageHeader,
                                          uint32_t SlotNumber, int32_t SE_FwType)
{
 801e6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *pbuffer;
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
  /*  put it OK, to discriminate error in SFU FWIMG parts */
  *pSeStatus = SE_OK;
 801e6a2:	4c14      	ldr	r4, [pc, #80]	; (801e6f4 <SFU_IMG_VerifyFwSignature+0x54>)
 801e6a4:	6004      	str	r4, [r0, #0]
{
 801e6a6:	b085      	sub	sp, #20

  /* Check the parameters value */
  if ((pFwImageHeader == NULL) || (SlotNumber > (SFU_SLOTS - 1)))
 801e6a8:	b301      	cbz	r1, 801e6ec <SFU_IMG_VerifyFwSignature+0x4c>
 801e6aa:	2a02      	cmp	r2, #2
 801e6ac:	d81e      	bhi.n	801e6ec <SFU_IMG_VerifyFwSignature+0x4c>
  {
    return SFU_ERROR;
  }
  if ((SE_FwType != SE_FW_IMAGE_PARTIAL) && (SE_FwType != SE_FW_IMAGE_COMPLETE))
 801e6ae:	2b01      	cmp	r3, #1
 801e6b0:	d81c      	bhi.n	801e6ec <SFU_IMG_VerifyFwSignature+0x4c>
  {
    return SFU_ERROR;
  }

  pbuffer = (uint8_t *)(SlotHeaderAddress[SlotNumber] + SFU_IMG_IMAGE_OFFSET);
 801e6b2:	4c11      	ldr	r4, [pc, #68]	; (801e6f8 <SFU_IMG_VerifyFwSignature+0x58>)
 801e6b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e6b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
  if (SE_FwType == SE_FW_IMAGE_COMPLETE)
 801e6bc:	b963      	cbnz	r3, 801e6d8 <SFU_IMG_VerifyFwSignature+0x38>
    fw_size = pSE_Metadata->FwSize;
 801e6be:	688e      	ldr	r6, [r1, #8]
    fw_offset = 0;
 801e6c0:	461c      	mov	r4, r3
  pse_payload.pPayload[0] = pPayload + fw_offset;
 801e6c2:	4422      	add	r2, r4
 801e6c4:	9200      	str	r2, [sp, #0]
  pse_payload.pPayload[1] = NULL;
 801e6c6:	2200      	movs	r2, #0
 801e6c8:	9201      	str	r2, [sp, #4]
  pse_payload.PayloadSize[1] = 0;
 801e6ca:	9203      	str	r2, [sp, #12]
  return  VerifyTagScatter(pSeStatus, pSE_Metadata, &pse_payload, SE_FwType);
 801e6cc:	466a      	mov	r2, sp
  pse_payload.PayloadSize[0] = fw_size;
 801e6ce:	9602      	str	r6, [sp, #8]
  return  VerifyTagScatter(pSeStatus, pSE_Metadata, &pse_payload, SE_FwType);
 801e6d0:	f7ff fa30 	bl	801db34 <VerifyTagScatter>

  /* Signature Verification */
  e_ret_status = VerifyTag(pSeStatus, pFwImageHeader, (uint8_t *) pbuffer, SE_FwType);

  return e_ret_status;
}
 801e6d4:	b005      	add	sp, #20
 801e6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fw_offset = pSE_Metadata->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE;
 801e6d8:	4c08      	ldr	r4, [pc, #32]	; (801e6fc <SFU_IMG_VerifyFwSignature+0x5c>)
 801e6da:	4d09      	ldr	r5, [pc, #36]	; (801e700 <SFU_IMG_VerifyFwSignature+0x60>)
 801e6dc:	68cf      	ldr	r7, [r1, #12]
    fw_size = pSE_Metadata->PartialFwSize;
 801e6de:	690e      	ldr	r6, [r1, #16]
    fw_offset = pSE_Metadata->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE;
 801e6e0:	1b65      	subs	r5, r4, r5
 801e6e2:	fbb7 f4f5 	udiv	r4, r7, r5
 801e6e6:	fb05 7414 	mls	r4, r5, r4, r7
 801e6ea:	e7ea      	b.n	801e6c2 <SFU_IMG_VerifyFwSignature+0x22>
    return SFU_ERROR;
 801e6ec:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801e6f0:	e7f0      	b.n	801e6d4 <SFU_IMG_VerifyFwSignature+0x34>
 801e6f2:	bf00      	nop
 801e6f4:	0012e223 	.word	0x0012e223
 801e6f8:	08029e3c 	.word	0x08029e3c
 801e6fc:	081e0000 	.word	0x081e0000
 801e700:	081d5000 	.word	0x081d5000

0801e704 <SFU_IMG_WriteHeaderValidated>:
  * @brief  Write a valid header in slot #0
  * @param  pHeader Address of the header to be installed in slot #0
  * @retval SFU_ SUCCESS if valid, a SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_WriteHeaderValidated(uint8_t *pHeader)
{
 801e704:	b510      	push	{r4, lr}
 801e706:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
  uint8_t *pSrcFWInfoInput;
  uint32_t i;
  uint32_t j;

  SE_FwRawHeaderTypeDef *pFwRawHdr = (SE_FwRawHeaderTypeDef*) FWInfoInput;
  e_ret_status =  SFU_LL_FLASH_Read(FWInfoInput, pHeader,  FW_INFO_TOT_LEN);
 801e70a:	4601      	mov	r1, r0
 801e70c:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e710:	a802      	add	r0, sp, #8
 801e712:	f001 ffc7 	bl	80206a4 <SFU_LL_FLASH_Read>
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e716:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e71a:	4298      	cmp	r0, r3
  e_ret_status =  SFU_LL_FLASH_Read(FWInfoInput, pHeader,  FW_INFO_TOT_LEN);
 801e71c:	4604      	mov	r4, r0
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e71e:	d10e      	bne.n	801e73e <SFU_IMG_WriteHeaderValidated+0x3a>
 801e720:	4b21      	ldr	r3, [pc, #132]	; (801e7a8 <SFU_IMG_WriteHeaderValidated+0xa4>)
 801e722:	2103      	movs	r1, #3
 801e724:	7019      	strb	r1, [r3, #0]
 801e726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
      }
    }
#endif /* ENABLE_IMAGE_STATE_HANDLING */
    /*  write in flash  */
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, SFU_IMG_SLOT_0_REGION_BEGIN, FWInfoInput, sizeof(FWInfoInput));
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e72a:	4b20      	ldr	r3, [pc, #128]	; (801e7ac <SFU_IMG_WriteHeaderValidated+0xa8>)
 801e72c:	4820      	ldr	r0, [pc, #128]	; (801e7b0 <SFU_IMG_WriteHeaderValidated+0xac>)
 801e72e:	601a      	str	r2, [r3, #0]
 801e730:	4b20      	ldr	r3, [pc, #128]	; (801e7b4 <SFU_IMG_WriteHeaderValidated+0xb0>)
 801e732:	f00a fa0b 	bl	8028b4c <iprintf>
  }
  return e_ret_status;
}
 801e736:	4620      	mov	r0, r4
 801e738:	f60d 0d08 	addw	sp, sp, #2056	; 0x808
 801e73c:	bd10      	pop	{r4, pc}
  if (e_ret_status == SFU_SUCCESS)
 801e73e:	4b1e      	ldr	r3, [pc, #120]	; (801e7b8 <SFU_IMG_WriteHeaderValidated+0xb4>)
 801e740:	4298      	cmp	r0, r3
 801e742:	d1f8      	bne.n	801e736 <SFU_IMG_WriteHeaderValidated+0x32>
    for (i = 0U, pDestFWInfoInput = FWInfoInput + FW_INFO_TOT_LEN; i < 3U; i++)
 801e744:	f50d 63f5 	add.w	r3, sp, #1960	; 0x7a8
 801e748:	f20d 61e7 	addw	r1, sp, #1767	; 0x6e7
 801e74c:	f103 0220 	add.w	r2, r3, #32
        *pDestFWInfoInput = *pSrcFWInfoInput;
 801e750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e754:	f803 0b01 	strb.w	r0, [r3], #1
      for (j = 0U; j < MAGIC_LENGTH; j++)
 801e758:	429a      	cmp	r2, r3
 801e75a:	d1f9      	bne.n	801e750 <SFU_IMG_WriteHeaderValidated+0x4c>
 801e75c:	4613      	mov	r3, r2
    for (i = 0U, pDestFWInfoInput = FWInfoInput + FW_INFO_TOT_LEN; i < 3U; i++)
 801e75e:	f60d 0208 	addw	r2, sp, #2056	; 0x808
 801e762:	4293      	cmp	r3, r2
 801e764:	d1f0      	bne.n	801e748 <SFU_IMG_WriteHeaderValidated+0x44>
	  TRACE("\n\rCalling SFU_IMG_SetUpdateSourceFingerprint()...");
 801e766:	4815      	ldr	r0, [pc, #84]	; (801e7bc <SFU_IMG_WriteHeaderValidated+0xb8>)
 801e768:	f00a f9f0 	bl	8028b4c <iprintf>
      e_ret_status = SFU_IMG_SetUpdateSourceFingerprint((SE_FwRawHeaderTypeDef*) FWInfoInput, (SE_FwRawHeaderTypeDef*) fw_header_validated);
 801e76c:	4914      	ldr	r1, [pc, #80]	; (801e7c0 <SFU_IMG_WriteHeaderValidated+0xbc>)
 801e76e:	a802      	add	r0, sp, #8
 801e770:	f000 fcce 	bl	801f110 <SFU_IMG_SetUpdateSourceFingerprint>
      if(SFU_SUCCESS == e_ret_status)
 801e774:	4b10      	ldr	r3, [pc, #64]	; (801e7b8 <SFU_IMG_WriteHeaderValidated+0xb4>)
 801e776:	4298      	cmp	r0, r3
        TRACE("\n\rOK");
 801e778:	bf0c      	ite	eq
 801e77a:	4812      	ldreq	r0, [pc, #72]	; (801e7c4 <SFU_IMG_WriteHeaderValidated+0xc0>)
        TRACE("\n\rFAILED");
 801e77c:	4812      	ldrne	r0, [pc, #72]	; (801e7c8 <SFU_IMG_WriteHeaderValidated+0xc4>)
 801e77e:	f00a f9e5 	bl	8028b4c <iprintf>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, SFU_IMG_SLOT_0_REGION_BEGIN, FWInfoInput, sizeof(FWInfoInput));
 801e782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e786:	aa02      	add	r2, sp, #8
 801e788:	4910      	ldr	r1, [pc, #64]	; (801e7cc <SFU_IMG_WriteHeaderValidated+0xc8>)
 801e78a:	f10d 0007 	add.w	r0, sp, #7
 801e78e:	f001 ff27 	bl	80205e0 <SFU_LL_FLASH_Write>
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e792:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e796:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, SFU_IMG_SLOT_0_REGION_BEGIN, FWInfoInput, sizeof(FWInfoInput));
 801e798:	4604      	mov	r4, r0
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 801e79a:	d1cc      	bne.n	801e736 <SFU_IMG_WriteHeaderValidated+0x32>
 801e79c:	4b02      	ldr	r3, [pc, #8]	; (801e7a8 <SFU_IMG_WriteHeaderValidated+0xa4>)
 801e79e:	2102      	movs	r1, #2
 801e7a0:	7019      	strb	r1, [r3, #0]
 801e7a2:	f240 7222 	movw	r2, #1826	; 0x722
 801e7a6:	e7c0      	b.n	801e72a <SFU_IMG_WriteHeaderValidated+0x26>
 801e7a8:	200325e4 	.word	0x200325e4
 801e7ac:	200325e0 	.word	0x200325e0
 801e7b0:	0802bcc8 	.word	0x0802bcc8
 801e7b4:	0802bc40 	.word	0x0802bc40
 801e7b8:	00122f11 	.word	0x00122f11
 801e7bc:	0802c135 	.word	0x0802c135
 801e7c0:	200305b8 	.word	0x200305b8
 801e7c4:	0802c167 	.word	0x0802c167
 801e7c8:	0802c16c 	.word	0x0802c16c
 801e7cc:	08105000 	.word	0x08105000

0801e7d0 <SFU_IMG_VerifySlot>:
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Set dimension to the appropriate length for FLASH programming.
   * Example: 64-bit length for L4.
   */
  if ((uFwSize % (uint32_t)sizeof(SFU_LL_FLASH_write_t)) != 0)
 801e7d0:	0753      	lsls	r3, r2, #29
  {
    uFwSize = uFwSize + ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - (uFwSize % (uint32_t)sizeof(SFU_LL_FLASH_write_t)));
 801e7d2:	bf1c      	itt	ne
 801e7d4:	f022 0207 	bicne.w	r2, r2, #7
 801e7d8:	3208      	addne	r2, #8
  }

  for (i = 0, pAddress  = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize; i < (uSlotSize -
 801e7da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e7de:	4402      	add	r2, r0
 801e7e0:	4401      	add	r1, r0
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
 801e7e2:	4807      	ldr	r0, [pc, #28]	; (801e800 <SFU_IMG_VerifySlot+0x30>)
{
 801e7e4:	b510      	push	{r4, lr}
                                                                            (uFwSize + SFU_IMG_IMAGE_OFFSET)); i++)
  {
    if ((pAddress[i] != 0x00) && (pAddress[i] != 0xFF))
    {
      e_ret_status = SFU_ERROR;
 801e7e6:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  for (i = 0, pAddress  = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize; i < (uSlotSize -
 801e7ea:	428a      	cmp	r2, r1
 801e7ec:	d100      	bne.n	801e7f0 <SFU_IMG_VerifySlot+0x20>
    }
  }

  return (e_ret_status);
}
 801e7ee:	bd10      	pop	{r4, pc}
    if ((pAddress[i] != 0x00) && (pAddress[i] != 0xFF))
 801e7f0:	f812 3b01 	ldrb.w	r3, [r2], #1
 801e7f4:	3b01      	subs	r3, #1
 801e7f6:	b2db      	uxtb	r3, r3
      e_ret_status = SFU_ERROR;
 801e7f8:	2bfd      	cmp	r3, #253	; 0xfd
 801e7fa:	bf98      	it	ls
 801e7fc:	4620      	movls	r0, r4
 801e7fe:	e7f4      	b.n	801e7ea <SFU_IMG_VerifySlot+0x1a>
 801e800:	00122f11 	.word	0x00122f11

0801e804 <SFU_IMG_CheckTrailerValid>:
  *         This function does not modify flash content.
  * @param  None.
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus  SFU_IMG_CheckTrailerValid(void)
{
 801e804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SFU_ErrorStatus hasActiveFw;
  uint8_t FWInfoInput[FW_INFO_TOT_LEN];
  uint8_t FWInfoValid[FW_INFO_TOT_LEN + VALID_SIZE];

  /* check trailer Magic */
  e_ret_status = CHECK_TRAILER_MAGIC;
 801e808:	4a92      	ldr	r2, [pc, #584]	; (801ea54 <SFU_IMG_CheckTrailerValid+0x250>)
 801e80a:	4e93      	ldr	r6, [pc, #588]	; (801ea58 <SFU_IMG_CheckTrailerValid+0x254>)
 801e80c:	4c93      	ldr	r4, [pc, #588]	; (801ea5c <SFU_IMG_CheckTrailerValid+0x258>)
 801e80e:	4b94      	ldr	r3, [pc, #592]	; (801ea60 <SFU_IMG_CheckTrailerValid+0x25c>)
 801e810:	4d94      	ldr	r5, [pc, #592]	; (801ea64 <SFU_IMG_CheckTrailerValid+0x260>)
 801e812:	f06f 0107 	mvn.w	r1, #7
 801e816:	1a9b      	subs	r3, r3, r2
{
 801e818:	f6ad 7db4 	subw	sp, sp, #4020	; 0xfb4
  e_ret_status = CHECK_TRAILER_MAGIC;
 801e81c:	1ba4      	subs	r4, r4, r6
 801e81e:	fbb4 f4f3 	udiv	r4, r4, r3
 801e822:	fb01 5104 	mla	r1, r1, r4, r5
  if (SFU_LL_FLASH_Read(&magic, pMagicAddr, sizeof(magic)) != SFU_SUCCESS)
 801e826:	2220      	movs	r2, #32
 801e828:	eba1 01c4 	sub.w	r1, r1, r4, lsl #3
 801e82c:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 801e830:	f001 ff38 	bl	80206a4 <SFU_LL_FLASH_Read>
 801e834:	4b8c      	ldr	r3, [pc, #560]	; (801ea68 <SFU_IMG_CheckTrailerValid+0x264>)
 801e836:	4298      	cmp	r0, r3
 801e838:	4680      	mov	r8, r0
 801e83a:	d006      	beq.n	801e84a <SFU_IMG_CheckTrailerValid+0x46>
         * Header in slot #0 is not identical to header valid field:
         * Either install is already complete (if header in slot #0 is same as header test field in trailer),
         * or there is hack tentative.
         * In both cases, resume install must not be triggered.
         */
        e_ret_status = SFU_ERROR;
 801e83c:	f641 74e1 	movw	r4, #8161	; 0x1fe1

    /* At this point, if (e_ret_status == SFU_SUCCESS) then resume of installation is allowed */
  }

  return e_ret_status;
}
 801e840:	4620      	mov	r0, r4
 801e842:	f60d 7db4 	addw	sp, sp, #4020	; 0xfb4
 801e846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  e_ret_status = CHECK_TRAILER_MAGIC;
 801e84a:	f104 03f6 	add.w	r3, r4, #246	; 0xf6
 801e84e:	f105 0720 	add.w	r7, r5, #32
 801e852:	eba7 1703 	sub.w	r7, r7, r3, lsl #4
    if (SFU_LL_FLASH_Read(&signature_valid, pFwHdrMacPartial, sizeof(signature_valid)) != SFU_SUCCESS)
 801e856:	2210      	movs	r2, #16
 801e858:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 801e85c:	4668      	mov	r0, sp
 801e85e:	f001 ff21 	bl	80206a4 <SFU_LL_FLASH_Read>
 801e862:	4540      	cmp	r0, r8
 801e864:	4681      	mov	r9, r0
 801e866:	d1e9      	bne.n	801e83c <SFU_IMG_CheckTrailerValid+0x38>
  e_ret_status = CHECK_TRAILER_MAGIC;
 801e868:	f06f 030f 	mvn.w	r3, #15
 801e86c:	f5a5 65f4 	sub.w	r5, r5, #1952	; 0x7a0
 801e870:	fb03 5504 	mla	r5, r3, r4, r5
    if (SFU_LL_FLASH_Read(&signature_test, pFwHdrMacPartial, sizeof(signature_test)) != SFU_SUCCESS)
 801e874:	2210      	movs	r2, #16
 801e876:	f505 61e2 	add.w	r1, r5, #1808	; 0x710
 801e87a:	eb0d 0002 	add.w	r0, sp, r2
 801e87e:	f001 ff11 	bl	80206a4 <SFU_LL_FLASH_Read>
 801e882:	4548      	cmp	r0, r9
 801e884:	4680      	mov	r8, r0
 801e886:	d1d9      	bne.n	801e83c <SFU_IMG_CheckTrailerValid+0x38>
  if ((memcmp(magic, signature_valid, sizeof(signature_valid)))
 801e888:	2210      	movs	r2, #16
 801e88a:	4669      	mov	r1, sp
 801e88c:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 801e890:	f00a f884 	bl	802899c <memcmp>
 801e894:	2800      	cmp	r0, #0
 801e896:	d1d1      	bne.n	801e83c <SFU_IMG_CheckTrailerValid+0x38>
      || (memcmp(&magic[MAGIC_LENGTH / 2], signature_test, sizeof(signature_test))))
 801e898:	2210      	movs	r2, #16
 801e89a:	eb0d 0102 	add.w	r1, sp, r2
 801e89e:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 801e8a2:	f00a f87b 	bl	802899c <memcmp>
 801e8a6:	2800      	cmp	r0, #0
 801e8a8:	d1c8      	bne.n	801e83c <SFU_IMG_CheckTrailerValid+0x38>
  e_ret_status = SFU_LL_FLASH_Read(FWInfoValid, SLOT_0_HDR, sizeof(FWInfoValid));
 801e8aa:	4631      	mov	r1, r6
 801e8ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e8b0:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 801e8b4:	f001 fef6 	bl	80206a4 <SFU_LL_FLASH_Read>
  StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e8b8:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 801e8bc:	42b0      	cmp	r0, r6
 801e8be:	d11b      	bne.n	801e8f8 <SFU_IMG_CheckTrailerValid+0xf4>
 801e8c0:	4b6a      	ldr	r3, [pc, #424]	; (801ea6c <SFU_IMG_CheckTrailerValid+0x268>)
 801e8c2:	486b      	ldr	r0, [pc, #428]	; (801ea70 <SFU_IMG_CheckTrailerValid+0x26c>)
 801e8c4:	2103      	movs	r1, #3
 801e8c6:	7019      	strb	r1, [r3, #0]
 801e8c8:	4b6a      	ldr	r3, [pc, #424]	; (801ea74 <SFU_IMG_CheckTrailerValid+0x270>)
 801e8ca:	f240 7265 	movw	r2, #1893	; 0x765
 801e8ce:	601a      	str	r2, [r3, #0]
 801e8d0:	4b69      	ldr	r3, [pc, #420]	; (801ea78 <SFU_IMG_CheckTrailerValid+0x274>)
 801e8d2:	f00a f93b 	bl	8028b4c <iprintf>
    e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_TEST, sizeof(FWInfoInput));
 801e8d6:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e8da:	4629      	mov	r1, r5
 801e8dc:	a804      	add	r0, sp, #16
 801e8de:	f001 fee1 	bl	80206a4 <SFU_LL_FLASH_Read>
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e8e2:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 801e8e6:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_TEST, sizeof(FWInfoInput));
 801e8e8:	4604      	mov	r4, r0
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e8ea:	d176      	bne.n	801e9da <SFU_IMG_CheckTrailerValid+0x1d6>
 801e8ec:	4b5f      	ldr	r3, [pc, #380]	; (801ea6c <SFU_IMG_CheckTrailerValid+0x268>)
 801e8ee:	2103      	movs	r1, #3
 801e8f0:	7019      	strb	r1, [r3, #0]
 801e8f2:	f240 72b1 	movw	r2, #1969	; 0x7b1
 801e8f6:	e028      	b.n	801e94a <SFU_IMG_CheckTrailerValid+0x146>
  if (e_ret_status == SFU_SUCCESS)
 801e8f8:	4540      	cmp	r0, r8
 801e8fa:	d1ec      	bne.n	801e8d6 <SFU_IMG_CheckTrailerValid+0xd2>
    e_ret_status = VerifyFwRawHeaderTag(FWInfoValid);
 801e8fc:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 801e900:	f7fe ff9a 	bl	801d838 <VerifyFwRawHeaderTag>
  if (e_ret_status == SFU_SUCCESS)
 801e904:	4540      	cmp	r0, r8
 801e906:	d1e6      	bne.n	801e8d6 <SFU_IMG_CheckTrailerValid+0xd2>
    e_ret_status = CheckHeaderValidated(FWInfoValid);
 801e908:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 801e90c:	f7fe ff76 	bl	801d7fc <CheckHeaderValidated>
  if (e_ret_status == SFU_SUCCESS)
 801e910:	4540      	cmp	r0, r8
 801e912:	d1e0      	bne.n	801e8d6 <SFU_IMG_CheckTrailerValid+0xd2>
    memcpy(fw_header_validated, FWInfoValid, sizeof(fw_header_validated));
 801e914:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e918:	f50d 61f6 	add.w	r1, sp, #1968	; 0x7b0
 801e91c:	4857      	ldr	r0, [pc, #348]	; (801ea7c <SFU_IMG_CheckTrailerValid+0x278>)
 801e91e:	f00a f84c 	bl	80289ba <memcpy>
  memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 801e922:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e926:	4955      	ldr	r1, [pc, #340]	; (801ea7c <SFU_IMG_CheckTrailerValid+0x278>)
 801e928:	4855      	ldr	r0, [pc, #340]	; (801ea80 <SFU_IMG_CheckTrailerValid+0x27c>)
 801e92a:	f00a f846 	bl	80289ba <memcpy>
    e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_VALID, sizeof(FWInfoInput));
 801e92e:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e932:	4639      	mov	r1, r7
 801e934:	a804      	add	r0, sp, #16
 801e936:	f001 feb5 	bl	80206a4 <SFU_LL_FLASH_Read>
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e93a:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_VALID, sizeof(FWInfoInput));
 801e93c:	4604      	mov	r4, r0
    StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e93e:	d10b      	bne.n	801e958 <SFU_IMG_CheckTrailerValid+0x154>
 801e940:	4b4a      	ldr	r3, [pc, #296]	; (801ea6c <SFU_IMG_CheckTrailerValid+0x268>)
 801e942:	2103      	movs	r1, #3
 801e944:	7019      	strb	r1, [r3, #0]
 801e946:	f240 727c 	movw	r2, #1916	; 0x77c
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e94a:	4b4a      	ldr	r3, [pc, #296]	; (801ea74 <SFU_IMG_CheckTrailerValid+0x270>)
 801e94c:	4848      	ldr	r0, [pc, #288]	; (801ea70 <SFU_IMG_CheckTrailerValid+0x26c>)
 801e94e:	601a      	str	r2, [r3, #0]
 801e950:	4b49      	ldr	r3, [pc, #292]	; (801ea78 <SFU_IMG_CheckTrailerValid+0x274>)
 801e952:	f00a f8fb 	bl	8028b4c <iprintf>
 801e956:	e773      	b.n	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
    if (e_ret_status == SFU_SUCCESS)
 801e958:	4e43      	ldr	r6, [pc, #268]	; (801ea68 <SFU_IMG_CheckTrailerValid+0x264>)
 801e95a:	42b0      	cmp	r0, r6
 801e95c:	f47f af70 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      if (memcmp(FWInfoInput, fw_header_validated, sizeof(FWInfoInput)) != 0)
 801e960:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e964:	4945      	ldr	r1, [pc, #276]	; (801ea7c <SFU_IMG_CheckTrailerValid+0x278>)
 801e966:	a804      	add	r0, sp, #16
 801e968:	f00a f818 	bl	802899c <memcmp>
 801e96c:	2800      	cmp	r0, #0
 801e96e:	f47f af65 	bne.w	801e83c <SFU_IMG_CheckTrailerValid+0x38>
      e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_TEST, sizeof(FWInfoInput));
 801e972:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e976:	4629      	mov	r1, r5
 801e978:	a804      	add	r0, sp, #16
 801e97a:	f001 fe93 	bl	80206a4 <SFU_LL_FLASH_Read>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e97e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801e982:	4298      	cmp	r0, r3
      e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_TEST, sizeof(FWInfoInput));
 801e984:	4604      	mov	r4, r0
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801e986:	d105      	bne.n	801e994 <SFU_IMG_CheckTrailerValid+0x190>
 801e988:	4b38      	ldr	r3, [pc, #224]	; (801ea6c <SFU_IMG_CheckTrailerValid+0x268>)
 801e98a:	2103      	movs	r1, #3
 801e98c:	7019      	strb	r1, [r3, #0]
 801e98e:	f240 728f 	movw	r2, #1935	; 0x78f
 801e992:	e7da      	b.n	801e94a <SFU_IMG_CheckTrailerValid+0x146>
    if (e_ret_status == SFU_SUCCESS)
 801e994:	42b0      	cmp	r0, r6
 801e996:	f47f af53 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      e_ret_status = VerifyFwRawHeaderTag(FWInfoInput);
 801e99a:	a804      	add	r0, sp, #16
 801e99c:	f7fe ff4c 	bl	801d838 <VerifyFwRawHeaderTag>
    if (e_ret_status == SFU_SUCCESS)
 801e9a0:	42b0      	cmp	r0, r6
      e_ret_status = VerifyFwRawHeaderTag(FWInfoInput);
 801e9a2:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 801e9a4:	f47f af4c 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      memcpy(fw_header_to_test, FWInfoInput, sizeof(fw_header_to_test));
 801e9a8:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e9ac:	a904      	add	r1, sp, #16
 801e9ae:	4835      	ldr	r0, [pc, #212]	; (801ea84 <SFU_IMG_CheckTrailerValid+0x280>)
 801e9b0:	f00a f803 	bl	80289ba <memcpy>
  memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 801e9b4:	4b34      	ldr	r3, [pc, #208]	; (801ea88 <SFU_IMG_CheckTrailerValid+0x284>)
 801e9b6:	4933      	ldr	r1, [pc, #204]	; (801ea84 <SFU_IMG_CheckTrailerValid+0x280>)
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e9be:	f009 fffc 	bl	80289ba <memcpy>
 801e9c2:	4603      	mov	r3, r0
      e_ret_status = SFU_IMG_CheckFwVersion((int32_t)fw_image_header_validated.FwVersion,
 801e9c4:	4a2e      	ldr	r2, [pc, #184]	; (801ea80 <SFU_IMG_CheckTrailerValid+0x27c>)
                                            (int32_t)fw_image_header_to_test.FwVersion);
 801e9c6:	88db      	ldrh	r3, [r3, #6]
    * It is not allowed to install a Firmware with a lower version than the active firmware.
    * But we authorize the re-installation of the current firmware version.
    * We also check that the candidate version is at least the min. allowed version for this device.
    */

  if ((CandidateVersion >= CurrentVersion) && (CandidateVersion >= SFU_FW_VERSION_START_NUM))
 801e9c8:	88d2      	ldrh	r2, [r2, #6]
 801e9ca:	429a      	cmp	r2, r3
 801e9cc:	f63f af36 	bhi.w	801e83c <SFU_IMG_CheckTrailerValid+0x38>
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	f43f af33 	beq.w	801e83c <SFU_IMG_CheckTrailerValid+0x38>
  {
    /* Candidate version is allowed */
    e_ret_status = SFU_SUCCESS;
 801e9d6:	4644      	mov	r4, r8
 801e9d8:	e732      	b.n	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
    if (e_ret_status == SFU_SUCCESS)
 801e9da:	4d23      	ldr	r5, [pc, #140]	; (801ea68 <SFU_IMG_CheckTrailerValid+0x264>)
 801e9dc:	42a8      	cmp	r0, r5
 801e9de:	f47f af2f 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      e_ret_status = VerifyFwRawHeaderTag(FWInfoInput);
 801e9e2:	a804      	add	r0, sp, #16
 801e9e4:	f7fe ff28 	bl	801d838 <VerifyFwRawHeaderTag>
    if (e_ret_status == SFU_SUCCESS)
 801e9e8:	42a8      	cmp	r0, r5
      e_ret_status = VerifyFwRawHeaderTag(FWInfoInput);
 801e9ea:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 801e9ec:	f47f af28 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      memcpy(fw_header_to_test, FWInfoInput, sizeof(fw_header_to_test));
 801e9f0:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801e9f4:	a904      	add	r1, sp, #16
 801e9f6:	4823      	ldr	r0, [pc, #140]	; (801ea84 <SFU_IMG_CheckTrailerValid+0x280>)
 801e9f8:	f009 ffdf 	bl	80289ba <memcpy>
  memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 801e9fc:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801ea00:	4920      	ldr	r1, [pc, #128]	; (801ea84 <SFU_IMG_CheckTrailerValid+0x280>)
 801ea02:	4821      	ldr	r0, [pc, #132]	; (801ea88 <SFU_IMG_CheckTrailerValid+0x284>)
 801ea04:	f009 ffd9 	bl	80289ba <memcpy>
      e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_VALID, sizeof(FWInfoInput));
 801ea08:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801ea0c:	4639      	mov	r1, r7
 801ea0e:	a804      	add	r0, sp, #16
 801ea10:	f001 fe48 	bl	80206a4 <SFU_LL_FLASH_Read>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801ea14:	42b0      	cmp	r0, r6
      e_ret_status = SFU_LL_FLASH_Read(FWInfoInput, TRAILER_HDR_VALID, sizeof(FWInfoInput));
 801ea16:	4604      	mov	r4, r0
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 801ea18:	d105      	bne.n	801ea26 <SFU_IMG_CheckTrailerValid+0x222>
 801ea1a:	4b14      	ldr	r3, [pc, #80]	; (801ea6c <SFU_IMG_CheckTrailerValid+0x268>)
 801ea1c:	2103      	movs	r1, #3
 801ea1e:	7019      	strb	r1, [r3, #0]
 801ea20:	f240 72bf 	movw	r2, #1983	; 0x7bf
 801ea24:	e791      	b.n	801e94a <SFU_IMG_CheckTrailerValid+0x146>
    if (e_ret_status == SFU_SUCCESS)
 801ea26:	42a8      	cmp	r0, r5
 801ea28:	f47f af0a 	bne.w	801e840 <SFU_IMG_CheckTrailerValid+0x3c>
      hasActiveFw = VerifyFwRawHeaderTag(FWInfoInput);
 801ea2c:	a804      	add	r0, sp, #16
 801ea2e:	f7fe ff03 	bl	801d838 <VerifyFwRawHeaderTag>
      if (hasActiveFw == SFU_SUCCESS)
 801ea32:	42a0      	cmp	r0, r4
 801ea34:	d10b      	bne.n	801ea4e <SFU_IMG_CheckTrailerValid+0x24a>
        memcpy(fw_header_validated, FWInfoInput, sizeof(fw_header_validated));
 801ea36:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801ea3a:	a904      	add	r1, sp, #16
 801ea3c:	480f      	ldr	r0, [pc, #60]	; (801ea7c <SFU_IMG_CheckTrailerValid+0x278>)
 801ea3e:	f009 ffbc 	bl	80289ba <memcpy>
  memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 801ea42:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801ea46:	490d      	ldr	r1, [pc, #52]	; (801ea7c <SFU_IMG_CheckTrailerValid+0x278>)
 801ea48:	480d      	ldr	r0, [pc, #52]	; (801ea80 <SFU_IMG_CheckTrailerValid+0x27c>)
 801ea4a:	f009 ffb6 	bl	80289ba <memcpy>
                                            (int32_t)fw_image_header_to_test.FwVersion);
 801ea4e:	4b0e      	ldr	r3, [pc, #56]	; (801ea88 <SFU_IMG_CheckTrailerValid+0x284>)
 801ea50:	e7b8      	b.n	801e9c4 <SFU_IMG_CheckTrailerValid+0x1c0>
 801ea52:	bf00      	nop
 801ea54:	081d5000 	.word	0x081d5000
 801ea58:	08105000 	.word	0x08105000
 801ea5c:	081c0000 	.word	0x081c0000
 801ea60:	081e0000 	.word	0x081e0000
 801ea64:	080f0fe0 	.word	0x080f0fe0
 801ea68:	00122f11 	.word	0x00122f11
 801ea6c:	200325e4 	.word	0x200325e4
 801ea70:	0802bcc8 	.word	0x0802bcc8
 801ea74:	200325e0 	.word	0x200325e0
 801ea78:	0802bc40 	.word	0x0802bc40
 801ea7c:	200305b8 	.word	0x200305b8
 801ea80:	200325e8 	.word	0x200325e8
 801ea84:	20030d58 	.word	0x20030d58
 801ea88:	20031e40 	.word	0x20031e40

0801ea8c <SFU_IMG_Resume>:
{
 801ea8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  e_ret_status = SwapFirmwareImages();
 801ea8e:	f7ff f97b 	bl	801dd88 <SwapFirmwareImages>
  if (e_ret_status != SFU_SUCCESS)
 801ea92:	4b18      	ldr	r3, [pc, #96]	; (801eaf4 <SFU_IMG_Resume+0x68>)
 801ea94:	4298      	cmp	r0, r3
  e_ret_status = SwapFirmwareImages();
 801ea96:	4605      	mov	r5, r0
  if (e_ret_status != SFU_SUCCESS)
 801ea98:	d005      	beq.n	801eaa6 <SFU_IMG_Resume+0x1a>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_SWAP);
 801ea9a:	201b      	movs	r0, #27
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801ea9c:	f7fe fe2a 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
}
 801eaa0:	4628      	mov	r0, r5
 801eaa2:	b003      	add	sp, #12
 801eaa4:	bd30      	pop	{r4, r5, pc}
  e_ret_status = SFU_IMG_Validation(TRAILER_HDR_TEST); /* the header of the newly installed FW is in the trailer */
 801eaa6:	4b14      	ldr	r3, [pc, #80]	; (801eaf8 <SFU_IMG_Resume+0x6c>)
 801eaa8:	4c14      	ldr	r4, [pc, #80]	; (801eafc <SFU_IMG_Resume+0x70>)
 801eaaa:	4915      	ldr	r1, [pc, #84]	; (801eb00 <SFU_IMG_Resume+0x74>)
 801eaac:	1ae4      	subs	r4, r4, r3
 801eaae:	4b15      	ldr	r3, [pc, #84]	; (801eb04 <SFU_IMG_Resume+0x78>)
 801eab0:	1ac9      	subs	r1, r1, r3
 801eab2:	4b15      	ldr	r3, [pc, #84]	; (801eb08 <SFU_IMG_Resume+0x7c>)
 801eab4:	fbb4 f4f1 	udiv	r4, r4, r1
 801eab8:	f06f 000f 	mvn.w	r0, #15
 801eabc:	fb00 3004 	mla	r0, r0, r4, r3
 801eac0:	f000 fac4 	bl	801f04c <SFU_IMG_Validation>
  if (SFU_SUCCESS == e_ret_status)
 801eac4:	42a8      	cmp	r0, r5
 801eac6:	d002      	beq.n	801eace <SFU_IMG_Resume+0x42>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801eac8:	201a      	movs	r0, #26
 801eaca:	f7fe fe13 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
  e_ret_status = CLEAN_TRAILER_MAGIC;
 801eace:	4b0f      	ldr	r3, [pc, #60]	; (801eb0c <SFU_IMG_Resume+0x80>)
  return SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, MAGIC_NULL, MAGIC_LENGTH);
 801ead0:	4a0f      	ldr	r2, [pc, #60]	; (801eb10 <SFU_IMG_Resume+0x84>)
  e_ret_status = CLEAN_TRAILER_MAGIC;
 801ead2:	f06f 0107 	mvn.w	r1, #7
 801ead6:	fb01 3104 	mla	r1, r1, r4, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, MAGIC_NULL, MAGIC_LENGTH);
 801eada:	eba1 01c4 	sub.w	r1, r1, r4, lsl #3
 801eade:	2320      	movs	r3, #32
 801eae0:	f10d 0007 	add.w	r0, sp, #7
 801eae4:	f001 fd7c 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 801eae8:	4b02      	ldr	r3, [pc, #8]	; (801eaf4 <SFU_IMG_Resume+0x68>)
 801eaea:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, MAGIC_NULL, MAGIC_LENGTH);
 801eaec:	4605      	mov	r5, r0
  if (e_ret_status != SFU_SUCCESS)
 801eaee:	d0d7      	beq.n	801eaa0 <SFU_IMG_Resume+0x14>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801eaf0:	201a      	movs	r0, #26
 801eaf2:	e7d3      	b.n	801ea9c <SFU_IMG_Resume+0x10>
 801eaf4:	00122f11 	.word	0x00122f11
 801eaf8:	08105000 	.word	0x08105000
 801eafc:	081c0000 	.word	0x081c0000
 801eb00:	081e0000 	.word	0x081e0000
 801eb04:	081d5000 	.word	0x081d5000
 801eb08:	080f0840 	.word	0x080f0840
 801eb0c:	080f0fe0 	.word	0x080f0fe0
 801eb10:	08029e58 	.word	0x08029e58

0801eb14 <SFU_IMG_FirmwareToInstall>:
{
 801eb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  e_ret_status = SFU_LL_FLASH_Read(fw_header_to_test, pbuffer, sizeof(fw_header_to_test));
 801eb18:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 801ebe4 <SFU_IMG_FirmwareToInstall+0xd0>
 801eb1c:	4827      	ldr	r0, [pc, #156]	; (801ebbc <SFU_IMG_FirmwareToInstall+0xa8>)
  if (e_ret_status == SFU_SUCCESS)
 801eb1e:	4e28      	ldr	r6, [pc, #160]	; (801ebc0 <SFU_IMG_FirmwareToInstall+0xac>)
{
 801eb20:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
  e_ret_status = SFU_LL_FLASH_Read(fw_header_to_test, pbuffer, sizeof(fw_header_to_test));
 801eb24:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801eb28:	4641      	mov	r1, r8
 801eb2a:	f001 fdbb 	bl	80206a4 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 801eb2e:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Read(fw_header_to_test, pbuffer, sizeof(fw_header_to_test));
 801eb30:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 801eb32:	d13b      	bne.n	801ebac <SFU_IMG_FirmwareToInstall+0x98>
 801eb34:	4f23      	ldr	r7, [pc, #140]	; (801ebc4 <SFU_IMG_FirmwareToInstall+0xb0>)
 801eb36:	2102      	movs	r1, #2
 801eb38:	4638      	mov	r0, r7
 801eb3a:	f7ff f8fd 	bl	801dd38 <SFU_IMG_GetFWInfoMAC.part.2>
  if (e_ret_status == SFU_SUCCESS)
 801eb3e:	42b0      	cmp	r0, r6
 801eb40:	4604      	mov	r4, r0
 801eb42:	d133      	bne.n	801ebac <SFU_IMG_FirmwareToInstall+0x98>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_slot, pbuffer, sizeof(fw_header_slot));
 801eb44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eb48:	491f      	ldr	r1, [pc, #124]	; (801ebc8 <SFU_IMG_FirmwareToInstall+0xb4>)
 801eb4a:	4668      	mov	r0, sp
 801eb4c:	f001 fdaa 	bl	80206a4 <SFU_LL_FLASH_Read>
    if (e_ret_status == SFU_SUCCESS)
 801eb50:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Read(fw_header_slot, pbuffer, sizeof(fw_header_slot));
 801eb52:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 801eb54:	d12a      	bne.n	801ebac <SFU_IMG_FirmwareToInstall+0x98>
      uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN;
 801eb56:	4a1d      	ldr	r2, [pc, #116]	; (801ebcc <SFU_IMG_FirmwareToInstall+0xb8>)
 801eb58:	4d1d      	ldr	r5, [pc, #116]	; (801ebd0 <SFU_IMG_FirmwareToInstall+0xbc>)
 801eb5a:	4b1e      	ldr	r3, [pc, #120]	; (801ebd4 <SFU_IMG_FirmwareToInstall+0xc0>)
      int32_t ret = memcmp(fw_header_slot, fw_header_to_test, sizeof(fw_header_to_test)); /* compare the header length*/
 801eb5c:	4917      	ldr	r1, [pc, #92]	; (801ebbc <SFU_IMG_FirmwareToInstall+0xa8>)
      uint32_t end_of_test_image = ((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + fw_image_header_to_test.FwSize +
 801eb5e:	4e1e      	ldr	r6, [pc, #120]	; (801ebd8 <SFU_IMG_FirmwareToInstall+0xc4>)
 801eb60:	68bf      	ldr	r7, [r7, #8]
      uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN;
 801eb62:	1aad      	subs	r5, r5, r2
 801eb64:	4a1d      	ldr	r2, [pc, #116]	; (801ebdc <SFU_IMG_FirmwareToInstall+0xc8>)
 801eb66:	eba3 0308 	sub.w	r3, r3, r8
 801eb6a:	fbb5 f3f3 	udiv	r3, r5, r3
 801eb6e:	f06f 0507 	mvn.w	r5, #7
 801eb72:	fb05 2503 	mla	r5, r5, r3, r2
      int32_t ret = memcmp(fw_header_slot, fw_header_to_test, sizeof(fw_header_to_test)); /* compare the header length*/
 801eb76:	4668      	mov	r0, sp
 801eb78:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
      uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN;
 801eb7c:	eba5 05c3 	sub.w	r5, r5, r3, lsl #3
      int32_t ret = memcmp(fw_header_slot, fw_header_to_test, sizeof(fw_header_to_test)); /* compare the header length*/
 801eb80:	f009 ff0c 	bl	802899c <memcmp>
      uint32_t end_of_test_image = ((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + fw_image_header_to_test.FwSize +
 801eb84:	4437      	add	r7, r6
      int32_t ret = memcmp(fw_header_slot, fw_header_to_test, sizeof(fw_header_to_test)); /* compare the header length*/
 801eb86:	4680      	mov	r8, r0
      e_ret_status = CheckHeaderValidated(fw_header_slot);
 801eb88:	4668      	mov	r0, sp
 801eb8a:	f7fe fe37 	bl	801d7fc <CheckHeaderValidated>
      if ((trailer_begin < end_of_test_image) || (trailer_begin < end_of_valid_image) || (ret)
 801eb8e:	42bd      	cmp	r5, r7
 801eb90:	d311      	bcc.n	801ebb6 <SFU_IMG_FirmwareToInstall+0xa2>
      uint32_t end_of_valid_image = ((uint32_t)SFU_IMG_SLOT_1_REGION_BEGIN + fw_image_header_validated.FwSize +
 801eb92:	4b13      	ldr	r3, [pc, #76]	; (801ebe0 <SFU_IMG_FirmwareToInstall+0xcc>)
 801eb94:	689b      	ldr	r3, [r3, #8]
 801eb96:	441e      	add	r6, r3
      if ((trailer_begin < end_of_test_image) || (trailer_begin < end_of_valid_image) || (ret)
 801eb98:	42b5      	cmp	r5, r6
 801eb9a:	d30c      	bcc.n	801ebb6 <SFU_IMG_FirmwareToInstall+0xa2>
 801eb9c:	f1b8 0f00 	cmp.w	r8, #0
 801eba0:	d109      	bne.n	801ebb6 <SFU_IMG_FirmwareToInstall+0xa2>
        e_ret_status = SFU_ERROR;
 801eba2:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801eba6:	42a0      	cmp	r0, r4
 801eba8:	bf08      	it	eq
 801ebaa:	461c      	moveq	r4, r3
}
 801ebac:	4620      	mov	r0, r4
 801ebae:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 801ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        e_ret_status = SFU_ERROR;
 801ebb6:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 801ebba:	e7f7      	b.n	801ebac <SFU_IMG_FirmwareToInstall+0x98>
 801ebbc:	20030d58 	.word	0x20030d58
 801ebc0:	00122f11 	.word	0x00122f11
 801ebc4:	20031e40 	.word	0x20031e40
 801ebc8:	08036000 	.word	0x08036000
 801ebcc:	08105000 	.word	0x08105000
 801ebd0:	081c0000 	.word	0x081c0000
 801ebd4:	081e0000 	.word	0x081e0000
 801ebd8:	08036800 	.word	0x08036800
 801ebdc:	080f00a0 	.word	0x080f00a0
 801ebe0:	200325e8 	.word	0x200325e8
 801ebe4:	081d5000 	.word	0x081d5000

0801ebe8 <SFU_IMG_PrepareCandidateImageForInstall>:
{
 801ebe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                                    fw_image_header_to_test.PartialFwSize + (fw_image_header_to_test.PartialFwOffset %
 801ebec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801ecb0 <SFU_IMG_PrepareCandidateImageForInstall+0xc8>
                                                                             SFU_IMG_SWAP_REGION_SIZE));
 801ebf0:	4f2c      	ldr	r7, [pc, #176]	; (801eca4 <SFU_IMG_PrepareCandidateImageForInstall+0xbc>)
 801ebf2:	4c2d      	ldr	r4, [pc, #180]	; (801eca8 <SFU_IMG_PrepareCandidateImageForInstall+0xc0>)
                                    fw_image_header_to_test.PartialFwSize + (fw_image_header_to_test.PartialFwOffset %
 801ebf4:	f8d8 200c 	ldr.w	r2, [r8, #12]
  e_ret_status = SFU_IMG_VerifySlot(SFU_IMG_SLOT_1_REGION_BEGIN, SFU_IMG_SLOT_1_REGION_SIZE,
 801ebf8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 801ecb8 <SFU_IMG_PrepareCandidateImageForInstall+0xd0>
 801ebfc:	4e2b      	ldr	r6, [pc, #172]	; (801ecac <SFU_IMG_PrepareCandidateImageForInstall+0xc4>)
  if (e_ret_status != SFU_SUCCESS)
 801ebfe:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 801ecb4 <SFU_IMG_PrepareCandidateImageForInstall+0xcc>
                                                                             SFU_IMG_SWAP_REGION_SIZE));
 801ec02:	1be4      	subs	r4, r4, r7
                                    fw_image_header_to_test.PartialFwSize + (fw_image_header_to_test.PartialFwOffset %
 801ec04:	fbb2 f3f4 	udiv	r3, r2, r4
 801ec08:	fb04 2313 	mls	r3, r4, r3, r2
  e_ret_status = SFU_IMG_VerifySlot(SFU_IMG_SLOT_1_REGION_BEGIN, SFU_IMG_SLOT_1_REGION_SIZE,
 801ec0c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ec10:	eba6 0609 	sub.w	r6, r6, r9
{
 801ec14:	b086      	sub	sp, #24
  e_ret_status = SFU_IMG_VerifySlot(SFU_IMG_SLOT_1_REGION_BEGIN, SFU_IMG_SLOT_1_REGION_SIZE,
 801ec16:	441a      	add	r2, r3
 801ec18:	4631      	mov	r1, r6
 801ec1a:	4648      	mov	r0, r9
 801ec1c:	f7ff fdd8 	bl	801e7d0 <SFU_IMG_VerifySlot>
  if (e_ret_status != SFU_SUCCESS)
 801ec20:	4550      	cmp	r0, sl
  e_ret_status = SFU_IMG_VerifySlot(SFU_IMG_SLOT_1_REGION_BEGIN, SFU_IMG_SLOT_1_REGION_SIZE,
 801ec22:	4605      	mov	r5, r0
  if (e_ret_status != SFU_SUCCESS)
 801ec24:	d003      	beq.n	801ec2e <SFU_IMG_PrepareCandidateImageForInstall+0x46>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FLASH_ERROR);
 801ec26:	2019      	movs	r0, #25
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_SIGNATURE_FAILURE);
 801ec28:	f7fe fd64 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
    return e_ret_status;
 801ec2c:	e031      	b.n	801ec92 <SFU_IMG_PrepareCandidateImageForInstall+0xaa>
  e_ret_status =  DecryptImageInSlot1(&fw_image_header_to_test);
 801ec2e:	f7fe fe4d 	bl	801d8cc <DecryptImageInSlot1.constprop.3>
  if (e_ret_status != SFU_SUCCESS)
 801ec32:	4550      	cmp	r0, sl
  e_ret_status =  DecryptImageInSlot1(&fw_image_header_to_test);
 801ec34:	4605      	mov	r5, r0
  if (e_ret_status != SFU_SUCCESS)
 801ec36:	d001      	beq.n	801ec3c <SFU_IMG_PrepareCandidateImageForInstall+0x54>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_DECRYPT_FAILURE);
 801ec38:	2016      	movs	r0, #22
 801ec3a:	e7f5      	b.n	801ec28 <SFU_IMG_PrepareCandidateImageForInstall+0x40>
  if ((pPayloadDesc->pPayload[0] == NULL) || (pPayloadDesc->PayloadSize[0] < SFU_IMG_IMAGE_OFFSET))
 801ec3c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
  payload_desc.pPayload[0] = (uint8_t *)SFU_IMG_SWAP_REGION_BEGIN;
 801ec40:	9702      	str	r7, [sp, #8]
  payload_desc.pPayload[1] = (uint8_t *)SFU_IMG_SLOT_1_REGION_BEGIN;
 801ec42:	e9cd 9403 	strd	r9, r4, [sp, #12]
  payload_desc.PayloadSize[1] = (uint32_t)SFU_IMG_SLOT_1_REGION_SIZE;
 801ec46:	9605      	str	r6, [sp, #20]
  if ((pPayloadDesc->pPayload[0] == NULL) || (pPayloadDesc->PayloadSize[0] < SFU_IMG_IMAGE_OFFSET))
 801ec48:	d203      	bcs.n	801ec52 <SFU_IMG_PrepareCandidateImageForInstall+0x6a>
    return e_ret_status;
 801ec4a:	f641 75e1 	movw	r5, #8161	; 0x1fe1
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_SIGNATURE_FAILURE);
 801ec4e:	2017      	movs	r0, #23
 801ec50:	e7ea      	b.n	801ec28 <SFU_IMG_PrepareCandidateImageForInstall+0x40>
    fw_offset = (SFU_IMG_IMAGE_OFFSET + (pFwImageHeader->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) %
 801ec52:	e9d8 1303 	ldrd	r1, r3, [r8, #12]
 801ec56:	fbb1 f2f4 	udiv	r2, r1, r4
 801ec5a:	fb04 1212 	mls	r2, r4, r2, r1
 801ec5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ec62:	fbb2 f1f4 	udiv	r1, r2, r4
 801ec66:	fb04 2211 	mls	r2, r4, r1, r2
  pPayloadDesc->PayloadSize[0] = pPayloadDesc->PayloadSize[0] - fw_offset;
 801ec6a:	1aa4      	subs	r4, r4, r2
  pPayloadDesc->pPayload[0] = (uint8_t *)((uint32_t)(pPayloadDesc->pPayload[0]) + fw_offset);
 801ec6c:	4417      	add	r7, r2
  if (fw_size <= pPayloadDesc->PayloadSize[0])
 801ec6e:	42a3      	cmp	r3, r4
  pPayloadDesc->pPayload[0] = (uint8_t *)((uint32_t)(pPayloadDesc->pPayload[0]) + fw_offset);
 801ec70:	9702      	str	r7, [sp, #8]
  pPayloadDesc->PayloadSize[0] = pPayloadDesc->PayloadSize[0] - fw_offset;
 801ec72:	9404      	str	r4, [sp, #16]
  if (fw_size <= pPayloadDesc->PayloadSize[0])
 801ec74:	d811      	bhi.n	801ec9a <SFU_IMG_PrepareCandidateImageForInstall+0xb2>
    pPayloadDesc->PayloadSize[0] = fw_size;
 801ec76:	9304      	str	r3, [sp, #16]
    pPayloadDesc->PayloadSize[1] = 0;
 801ec78:	2300      	movs	r3, #0
 801ec7a:	9305      	str	r3, [sp, #20]
    pPayloadDesc->pPayload[1] = NULL;
 801ec7c:	9303      	str	r3, [sp, #12]
  return VerifyTagScatter(pSeStatus, pFwImageHeader, pPayloadDesc, SE_FwType);
 801ec7e:	2301      	movs	r3, #1
 801ec80:	aa02      	add	r2, sp, #8
 801ec82:	490b      	ldr	r1, [pc, #44]	; (801ecb0 <SFU_IMG_PrepareCandidateImageForInstall+0xc8>)
 801ec84:	a801      	add	r0, sp, #4
 801ec86:	f7fe ff55 	bl	801db34 <VerifyTagScatter>
  if (e_ret_status != SFU_SUCCESS)
 801ec8a:	4b0a      	ldr	r3, [pc, #40]	; (801ecb4 <SFU_IMG_PrepareCandidateImageForInstall+0xcc>)
 801ec8c:	4298      	cmp	r0, r3
  return VerifyTagScatter(pSeStatus, pFwImageHeader, pPayloadDesc, SE_FwType);
 801ec8e:	4605      	mov	r5, r0
  if (e_ret_status != SFU_SUCCESS)
 801ec90:	d1dd      	bne.n	801ec4e <SFU_IMG_PrepareCandidateImageForInstall+0x66>
}
 801ec92:	4628      	mov	r0, r5
 801ec94:	b006      	add	sp, #24
 801ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        || (pPayloadDesc->PayloadSize[1] < (fw_size - pPayloadDesc->PayloadSize[0])))
 801ec9a:	1b1c      	subs	r4, r3, r4
 801ec9c:	42a6      	cmp	r6, r4
 801ec9e:	d3d4      	bcc.n	801ec4a <SFU_IMG_PrepareCandidateImageForInstall+0x62>
    pPayloadDesc->PayloadSize[1] = (fw_size - pPayloadDesc->PayloadSize[0]);
 801eca0:	9405      	str	r4, [sp, #20]
 801eca2:	e7ec      	b.n	801ec7e <SFU_IMG_PrepareCandidateImageForInstall+0x96>
 801eca4:	081d5000 	.word	0x081d5000
 801eca8:	081e0000 	.word	0x081e0000
 801ecac:	080f1000 	.word	0x080f1000
 801ecb0:	20031e40 	.word	0x20031e40
 801ecb4:	00122f11 	.word	0x00122f11
 801ecb8:	08036000 	.word	0x08036000

0801ecbc <SFU_IMG_InstallNewVersion>:
{
 801ecbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  e_ret_status = EraseSlotIndex(1, (TRAILER_INDEX - 1)); /* erase the size of "swap area" at the end of slot #1 */
 801ecc0:	4a3f      	ldr	r2, [pc, #252]	; (801edc0 <SFU_IMG_InstallNewVersion+0x104>)
 801ecc2:	4d40      	ldr	r5, [pc, #256]	; (801edc4 <SFU_IMG_InstallNewVersion+0x108>)
 801ecc4:	4b40      	ldr	r3, [pc, #256]	; (801edc8 <SFU_IMG_InstallNewVersion+0x10c>)
 801ecc6:	1aad      	subs	r5, r5, r2
 801ecc8:	4a40      	ldr	r2, [pc, #256]	; (801edcc <SFU_IMG_InstallNewVersion+0x110>)
{
 801ecca:	b08b      	sub	sp, #44	; 0x2c
  e_ret_status = EraseSlotIndex(1, (TRAILER_INDEX - 1)); /* erase the size of "swap area" at the end of slot #1 */
 801eccc:	1a9b      	subs	r3, r3, r2
 801ecce:	2001      	movs	r0, #1
 801ecd0:	fbb5 f5f3 	udiv	r5, r5, r3
 801ecd4:	1e69      	subs	r1, r5, #1
 801ecd6:	f7fe fdcb 	bl	801d870 <EraseSlotIndex.part.1>
  if (e_ret_status !=  SFU_SUCCESS)
 801ecda:	4b3d      	ldr	r3, [pc, #244]	; (801edd0 <SFU_IMG_InstallNewVersion+0x114>)
 801ecdc:	4298      	cmp	r0, r3
 801ecde:	4681      	mov	r9, r0
 801ece0:	d008      	beq.n	801ecf4 <SFU_IMG_InstallNewVersion+0x38>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FLASH_ERROR);
 801ece2:	2019      	movs	r0, #25
 801ece4:	f7fe fd06 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
    return SFU_ERROR;
 801ece8:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 801ecec:	4620      	mov	r0, r4
 801ecee:	b00b      	add	sp, #44	; 0x2c
 801ecf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST, pTestHeader, FW_INFO_TOT_LEN);
 801ecf4:	4e37      	ldr	r6, [pc, #220]	; (801edd4 <SFU_IMG_InstallNewVersion+0x118>)
 801ecf6:	4a38      	ldr	r2, [pc, #224]	; (801edd8 <SFU_IMG_InstallNewVersion+0x11c>)
 801ecf8:	f06f 080f 	mvn.w	r8, #15
 801ecfc:	fb08 6805 	mla	r8, r8, r5, r6
 801ed00:	af02      	add	r7, sp, #8
 801ed02:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 801ed06:	4641      	mov	r1, r8
 801ed08:	4638      	mov	r0, r7
 801ed0a:	f001 fc69 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (e_ret_status == SFU_SUCCESS)
 801ed0e:	4548      	cmp	r0, r9
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST, pTestHeader, FW_INFO_TOT_LEN);
 801ed10:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 801ed12:	d10f      	bne.n	801ed34 <SFU_IMG_InstallNewVersion+0x78>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID, pValidHeader, FW_INFO_TOT_LEN);
 801ed14:	f105 03f6 	add.w	r3, r5, #246	; 0xf6
 801ed18:	f506 66f8 	add.w	r6, r6, #1984	; 0x7c0
 801ed1c:	eba6 1603 	sub.w	r6, r6, r3, lsl #4
 801ed20:	4a2e      	ldr	r2, [pc, #184]	; (801eddc <SFU_IMG_InstallNewVersion+0x120>)
 801ed22:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 801ed26:	4631      	mov	r1, r6
 801ed28:	4638      	mov	r0, r7
 801ed2a:	f001 fc59 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 801ed2e:	4548      	cmp	r0, r9
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID, pValidHeader, FW_INFO_TOT_LEN);
 801ed30:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 801ed32:	d001      	beq.n	801ed38 <SFU_IMG_InstallNewVersion+0x7c>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801ed34:	201a      	movs	r0, #26
 801ed36:	e026      	b.n	801ed86 <SFU_IMG_InstallNewVersion+0xca>
  (void)SFU_LL_FLASH_Read(&magic[0],
 801ed38:	2210      	movs	r2, #16
 801ed3a:	f506 61e2 	add.w	r1, r6, #1808	; 0x710
 801ed3e:	4638      	mov	r0, r7
 801ed40:	f001 fcb0 	bl	80206a4 <SFU_LL_FLASH_Read>
  (void)SFU_LL_FLASH_Read(&magic[MAGIC_LENGTH / 2],
 801ed44:	2210      	movs	r2, #16
 801ed46:	f508 61e2 	add.w	r1, r8, #1808	; 0x710
 801ed4a:	a806      	add	r0, sp, #24
 801ed4c:	f001 fcaa 	bl	80206a4 <SFU_LL_FLASH_Read>
  for (i = 0; i < MAGIC_LENGTH ; i++)
 801ed50:	2300      	movs	r3, #0
    if (magic[i] != 0)
 801ed52:	5cfa      	ldrb	r2, [r7, r3]
 801ed54:	b1d2      	cbz	r2, 801ed8c <SFU_IMG_InstallNewVersion+0xd0>
  e_ret_status = WRITE_TRAILER_MAGIC;
 801ed56:	4a22      	ldr	r2, [pc, #136]	; (801ede0 <SFU_IMG_InstallNewVersion+0x124>)
  if (e_ret_status != SFU_SUCCESS)
 801ed58:	4e1d      	ldr	r6, [pc, #116]	; (801edd0 <SFU_IMG_InstallNewVersion+0x114>)
  e_ret_status = WRITE_TRAILER_MAGIC;
 801ed5a:	f06f 0307 	mvn.w	r3, #7
 801ed5e:	fb03 2305 	mla	r3, r3, r5, r2
 801ed62:	eba3 05c5 	sub.w	r5, r3, r5, lsl #3
      e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, magic, sizeof(magic));
 801ed66:	463a      	mov	r2, r7
 801ed68:	2320      	movs	r3, #32
 801ed6a:	4629      	mov	r1, r5
 801ed6c:	f10d 0007 	add.w	r0, sp, #7
 801ed70:	f001 fc36 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 801ed74:	42b0      	cmp	r0, r6
      e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, magic, sizeof(magic));
 801ed76:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 801ed78:	d1dc      	bne.n	801ed34 <SFU_IMG_InstallNewVersion+0x78>
  e_ret_status = SwapFirmwareImages();
 801ed7a:	f7ff f805 	bl	801dd88 <SwapFirmwareImages>
  if (e_ret_status != SFU_SUCCESS)
 801ed7e:	42b0      	cmp	r0, r6
  e_ret_status = SwapFirmwareImages();
 801ed80:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 801ed82:	d009      	beq.n	801ed98 <SFU_IMG_InstallNewVersion+0xdc>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_SWAP);
 801ed84:	201b      	movs	r0, #27
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801ed86:	f7fe fcb5 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
 801ed8a:	e7af      	b.n	801ecec <SFU_IMG_InstallNewVersion+0x30>
  for (i = 0; i < MAGIC_LENGTH ; i++)
 801ed8c:	3301      	adds	r3, #1
 801ed8e:	2b20      	cmp	r3, #32
 801ed90:	d1df      	bne.n	801ed52 <SFU_IMG_InstallNewVersion+0x96>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 801ed92:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 801ed96:	e7cd      	b.n	801ed34 <SFU_IMG_InstallNewVersion+0x78>
  e_ret_status = SFU_IMG_Validation(TRAILER_HDR_TEST); /* the header of the newly installed FW is in the trailer */
 801ed98:	4640      	mov	r0, r8
 801ed9a:	f000 f957 	bl	801f04c <SFU_IMG_Validation>
  if (SFU_SUCCESS == e_ret_status)
 801ed9e:	42a0      	cmp	r0, r4
 801eda0:	d002      	beq.n	801eda8 <SFU_IMG_InstallNewVersion+0xec>
    (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_FWIMG_MAGIC);
 801eda2:	201a      	movs	r0, #26
 801eda4:	f7fe fca6 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
  return SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, MAGIC_NULL, MAGIC_LENGTH);
 801eda8:	2320      	movs	r3, #32
 801edaa:	4a0e      	ldr	r2, [pc, #56]	; (801ede4 <SFU_IMG_InstallNewVersion+0x128>)
 801edac:	4629      	mov	r1, r5
 801edae:	4638      	mov	r0, r7
 801edb0:	f001 fc16 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 801edb4:	4b06      	ldr	r3, [pc, #24]	; (801edd0 <SFU_IMG_InstallNewVersion+0x114>)
 801edb6:	4298      	cmp	r0, r3
  return SFU_LL_FLASH_Write(&flash_if_info, pMagicAddr, MAGIC_NULL, MAGIC_LENGTH);
 801edb8:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 801edba:	d1bb      	bne.n	801ed34 <SFU_IMG_InstallNewVersion+0x78>
 801edbc:	e796      	b.n	801ecec <SFU_IMG_InstallNewVersion+0x30>
 801edbe:	bf00      	nop
 801edc0:	08105000 	.word	0x08105000
 801edc4:	081c0000 	.word	0x081c0000
 801edc8:	081e0000 	.word	0x081e0000
 801edcc:	081d5000 	.word	0x081d5000
 801edd0:	00122f11 	.word	0x00122f11
 801edd4:	080f0840 	.word	0x080f0840
 801edd8:	20030d58 	.word	0x20030d58
 801eddc:	200305b8 	.word	0x200305b8
 801ede0:	080f0fe0 	.word	0x080f0fe0
 801ede4:	08029e58 	.word	0x08029e58

0801ede8 <SFU_IMG_ControlFwTag>:
{
 801ede8:	b530      	push	{r4, r5, lr}
  uint8_t result = 0x00;
 801edea:	2200      	movs	r2, #0
    result |= pAdd1[i] ^ pAdd2[i];
 801edec:	4d0b      	ldr	r5, [pc, #44]	; (801ee1c <SFU_IMG_ControlFwTag+0x34>)
  for (i = 0; i < Size; i++)
 801edee:	4613      	mov	r3, r2
    result |= pAdd1[i] ^ pAdd2[i];
 801edf0:	5d59      	ldrb	r1, [r3, r5]
 801edf2:	5cc4      	ldrb	r4, [r0, r3]
  for (i = 0; i < Size; i++)
 801edf4:	3301      	adds	r3, #1
    result |= pAdd1[i] ^ pAdd2[i];
 801edf6:	4061      	eors	r1, r4
  for (i = 0; i < Size; i++)
 801edf8:	2b20      	cmp	r3, #32
    result |= pAdd1[i] ^ pAdd2[i];
 801edfa:	ea42 0201 	orr.w	r2, r2, r1
  for (i = 0; i < Size; i++)
 801edfe:	d1f7      	bne.n	801edf0 <SFU_IMG_ControlFwTag+0x8>
  if (result == 0x00)
 801ee00:	b942      	cbnz	r2, 801ee14 <SFU_IMG_ControlFwTag+0x2c>
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 801ee02:	4a07      	ldr	r2, [pc, #28]	; (801ee20 <SFU_IMG_ControlFwTag+0x38>)
    return SFU_SUCCESS;
 801ee04:	4807      	ldr	r0, [pc, #28]	; (801ee24 <SFU_IMG_ControlFwTag+0x3c>)
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 801ee06:	6813      	ldr	r3, [r2, #0]
 801ee08:	f483 432a 	eor.w	r3, r3, #43520	; 0xaa00
 801ee0c:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
 801ee10:	6013      	str	r3, [r2, #0]
}
 801ee12:	bd30      	pop	{r4, r5, pc}
    return SFU_ERROR;
 801ee14:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801ee18:	e7fb      	b.n	801ee12 <SFU_IMG_ControlFwTag+0x2a>
 801ee1a:	bf00      	nop
 801ee1c:	20030598 	.word	0x20030598
 801ee20:	20030004 	.word	0x20030004
 801ee24:	00122f11 	.word	0x00122f11

0801ee28 <SFU_IMG_GetTrailerSize>:
  return TRAILER_SIZE;
 801ee28:	4a05      	ldr	r2, [pc, #20]	; (801ee40 <SFU_IMG_GetTrailerSize+0x18>)
 801ee2a:	4806      	ldr	r0, [pc, #24]	; (801ee44 <SFU_IMG_GetTrailerSize+0x1c>)
 801ee2c:	4b06      	ldr	r3, [pc, #24]	; (801ee48 <SFU_IMG_GetTrailerSize+0x20>)
 801ee2e:	1a80      	subs	r0, r0, r2
 801ee30:	4a06      	ldr	r2, [pc, #24]	; (801ee4c <SFU_IMG_GetTrailerSize+0x24>)
 801ee32:	1a9b      	subs	r3, r3, r2
 801ee34:	fbb0 f0f3 	udiv	r0, r0, r3
 801ee38:	30f6      	adds	r0, #246	; 0xf6
}
 801ee3a:	0100      	lsls	r0, r0, #4
 801ee3c:	4770      	bx	lr
 801ee3e:	bf00      	nop
 801ee40:	08105000 	.word	0x08105000
 801ee44:	081c0000 	.word	0x081c0000
 801ee48:	081e0000 	.word	0x081e0000
 801ee4c:	081d5000 	.word	0x081d5000

0801ee50 <SFU_IMG_CheckFwVersion>:
  if ((CandidateVersion >= CurrentVersion) && (CandidateVersion >= SFU_FW_VERSION_START_NUM))
 801ee50:	4281      	cmp	r1, r0
    e_ret_status = SFU_SUCCESS;
 801ee52:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  if ((CandidateVersion >= CurrentVersion) && (CandidateVersion >= SFU_FW_VERSION_START_NUM))
 801ee56:	db04      	blt.n	801ee62 <SFU_IMG_CheckFwVersion+0x12>
    e_ret_status = SFU_SUCCESS;
 801ee58:	4b02      	ldr	r3, [pc, #8]	; (801ee64 <SFU_IMG_CheckFwVersion+0x14>)
 801ee5a:	2900      	cmp	r1, #0
 801ee5c:	bf18      	it	ne
 801ee5e:	4618      	movne	r0, r3
 801ee60:	4770      	bx	lr
  }

  return e_ret_status;
}
 801ee62:	4770      	bx	lr
 801ee64:	00122f11 	.word	0x00122f11

0801ee68 <SFU_IMG_InitImageHandling>:
SFU_IMG_InitStatusTypeDef SFU_IMG_InitImageHandling(void)
{
  /*
   * At the moment there is nothing more to do than initializing the fwimg_core part.
   */
  return (SFU_IMG_CoreInit());
 801ee68:	f7ff babe 	b.w	801e3e8 <SFU_IMG_CoreInit>

0801ee6c <SFU_IMG_ShutdownImageHandling>:
SFU_ErrorStatus SFU_IMG_ShutdownImageHandling(void)
{
  /*
   * At the moment there is nothing more to do than shutting down the fwimg_core part.
   */
  return (SFU_IMG_CoreDeInit());
 801ee6c:	f7ff bbc8 	b.w	801e600 <SFU_IMG_CoreDeInit>

0801ee70 <SFU_IMG_CheckPendingInstallation>:
  * @param  None.
  * @retval SFU_IMG_ImgInstallStateTypeDef Pending Installation status (pending install, pending resume install, no
  *         pending action)
  */
SFU_IMG_ImgInstallStateTypeDef SFU_IMG_CheckPendingInstallation(void)
{
 801ee70:	b510      	push	{r4, lr}
   * A. Check if a FW update has been interrupted first.
   *    This check is based on the content of the trailer area and the validity of the update image.
   *
   * B. Check if a Firmware image is waiting to be installed.
   */
  if (SFU_SUCCESS == SFU_IMG_CheckTrailerValid())
 801ee72:	f7ff fcc7 	bl	801e804 <SFU_IMG_CheckTrailerValid>
 801ee76:	4c06      	ldr	r4, [pc, #24]	; (801ee90 <SFU_IMG_CheckPendingInstallation+0x20>)
 801ee78:	42a0      	cmp	r0, r4
 801ee7a:	d006      	beq.n	801ee8a <SFU_IMG_CheckPendingInstallation+0x1a>
  {
    /* A Firmware Update has been stopped */
    e_ret_state = SFU_IMG_FWUPDATE_STOPPED;
  }
  else if (SFU_SUCCESS == SFU_IMG_FirmwareToInstall())
 801ee7c:	f7ff fe4a 	bl	801eb14 <SFU_IMG_FirmwareToInstall>
    e_ret_state = SFU_IMG_FWIMAGE_TO_INSTALL;
  }
  else
  {
    /* No interrupted FW update and no pending update */
    e_ret_state = SFU_IMG_NO_FWUPDATE;
 801ee80:	42a0      	cmp	r0, r4
 801ee82:	bf14      	ite	ne
 801ee84:	2002      	movne	r0, #2
 801ee86:	2000      	moveq	r0, #0
  }

  return e_ret_state;
}
 801ee88:	bd10      	pop	{r4, pc}
    e_ret_state = SFU_IMG_FWUPDATE_STOPPED;
 801ee8a:	2001      	movs	r0, #1
 801ee8c:	e7fc      	b.n	801ee88 <SFU_IMG_CheckPendingInstallation+0x18>
 801ee8e:	bf00      	nop
 801ee90:	00122f11 	.word	0x00122f11

0801ee94 <SFU_IMG_TriggerResumeInstallation>:
{
  /*
   * Nothing more to do than calling the core procedure
   * The core procedure is kept because we do not want code dealing with the internals (like trailers) in this file.
   */
  return (SFU_IMG_Resume());
 801ee94:	f7ff bdfa 	b.w	801ea8c <SFU_IMG_Resume>

0801ee98 <SFU_IMG_InvalidateCurrentFirmware>:
  *       running the procedure).
  * @param  None.
  * @retval SFU_SUCCESS if successful,SFU_ERROR error otherwise.
  */
SFU_ErrorStatus SFU_IMG_InvalidateCurrentFirmware(void)
{
 801ee98:	b507      	push	{r0, r1, r2, lr}
  SFU_FLASH_StatusTypeDef x_flash_info;
  SFU_ErrorStatus e_ret_status;

  /* Reload Watchdog */
  SFU_LL_SECU_IWDG_Refresh();
 801ee9a:	f001 fe35 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>

  /* erase Slot0 except Header (under SECoreBin protection) for the anti-rollback check during next Fw update */
  e_ret_status = SFU_LL_FLASH_CleanUp(&x_flash_info, SFU_IMG_SLOT_0_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET,
 801ee9e:	4906      	ldr	r1, [pc, #24]	; (801eeb8 <SFU_IMG_InvalidateCurrentFirmware+0x20>)
 801eea0:	4a06      	ldr	r2, [pc, #24]	; (801eebc <SFU_IMG_InvalidateCurrentFirmware+0x24>)
 801eea2:	f10d 0007 	add.w	r0, sp, #7
 801eea6:	1a52      	subs	r2, r2, r1
 801eea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eeac:	f001 fc2e 	bl	802070c <SFU_LL_FLASH_CleanUp>
                                      SFU_IMG_SLOT_0_REGION_SIZE - SFU_IMG_IMAGE_OFFSET);

  return (e_ret_status);
}
 801eeb0:	b003      	add	sp, #12
 801eeb2:	f85d fb04 	ldr.w	pc, [sp], #4
 801eeb6:	bf00      	nop
 801eeb8:	08105000 	.word	0x08105000
 801eebc:	081bf800 	.word	0x081bf800

0801eec0 <SFU_IMG_VerifyActiveImgMetadata>:
{
  /*
   * The active FW slot is slot #0.
   * If the metadata is valid then 'fw_image_header_validated' is filled with the metadata.
   */
  return (SFU_IMG_GetFWInfoMAC(&fw_image_header_validated, 0));
 801eec0:	2100      	movs	r1, #0
 801eec2:	4801      	ldr	r0, [pc, #4]	; (801eec8 <SFU_IMG_VerifyActiveImgMetadata+0x8>)
 801eec4:	f7ff bbe4 	b.w	801e690 <SFU_IMG_GetFWInfoMAC>
 801eec8:	200325e8 	.word	0x200325e8

0801eecc <SFU_IMG_VerifyActiveImg>:
  *       fw_image_header_validated.
  * @param None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyActiveImg(void)
{
 801eecc:	b507      	push	{r0, r1, r2, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_StatusTypeDef e_se_status = SE_KO;
 801eece:	a802      	add	r0, sp, #8
 801eed0:	4b05      	ldr	r3, [pc, #20]	; (801eee8 <SFU_IMG_VerifyActiveImg+0x1c>)
 801eed2:	f840 3d04 	str.w	r3, [r0, #-4]!

  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   * slot #0 is the active FW image
   */
  e_ret_status = SFU_IMG_VerifyFwSignature(&e_se_status, &fw_image_header_validated, 0U, SE_FW_IMAGE_COMPLETE);
 801eed6:	2300      	movs	r3, #0
 801eed8:	461a      	mov	r2, r3
 801eeda:	4904      	ldr	r1, [pc, #16]	; (801eeec <SFU_IMG_VerifyActiveImg+0x20>)
 801eedc:	f7ff fbe0 	bl	801e6a0 <SFU_IMG_VerifyFwSignature>
    TRACE("\r\n=         SFU_IMG_VerifyActiveImg failure with se_status=%d!", e_se_status);
  }
#endif /* SFU_VERBOSE_DEBUG_MODE */

  return (e_ret_status);
}
 801eee0:	b003      	add	sp, #12
 801eee2:	f85d fb04 	ldr.w	pc, [sp], #4
 801eee6:	bf00      	nop
 801eee8:	0013023d 	.word	0x0013023d
 801eeec:	200325e8 	.word	0x200325e8

0801eef0 <SFU_IMG_VerifyActiveSlot>:
	return(SFU_SUCCESS);
#else
  return (SFU_IMG_VerifySlot(SFU_IMG_SLOT_0_REGION_BEGIN, SFU_IMG_SLOT_0_REGION_SIZE,
                             fw_image_header_validated.FwSize));
#endif /* SFU_BYPASS_ACTIVE_SLOT_VERIF */
}
 801eef0:	4800      	ldr	r0, [pc, #0]	; (801eef4 <SFU_IMG_VerifyActiveSlot+0x4>)
 801eef2:	4770      	bx	lr
 801eef4:	00122f11 	.word	0x00122f11

0801eef8 <SFU_IMG_VerifyEmptyActiveSlot>:
  * @param None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyEmptyActiveSlot(void)
{
  return (SFU_IMG_VerifySlot(SFU_IMG_SLOT_0_REGION_BEGIN, SFU_IMG_SLOT_0_REGION_SIZE, 0U));
 801eef8:	4802      	ldr	r0, [pc, #8]	; (801ef04 <SFU_IMG_VerifyEmptyActiveSlot+0xc>)
 801eefa:	4903      	ldr	r1, [pc, #12]	; (801ef08 <SFU_IMG_VerifyEmptyActiveSlot+0x10>)
 801eefc:	2200      	movs	r2, #0
 801eefe:	1a09      	subs	r1, r1, r0
 801ef00:	f7ff bc66 	b.w	801e7d0 <SFU_IMG_VerifySlot>
 801ef04:	08105000 	.word	0x08105000
 801ef08:	081c0000 	.word	0x081c0000

0801ef0c <SFU_IMG_ControlActiveImgTag>:
{
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   * slot #0 is the active FW image
   */
  return (SFU_IMG_ControlFwTag(fw_image_header_validated.FwTag));
 801ef0c:	4801      	ldr	r0, [pc, #4]	; (801ef14 <SFU_IMG_ControlActiveImgTag+0x8>)
 801ef0e:	f7ff bf6b 	b.w	801ede8 <SFU_IMG_ControlFwTag>
 801ef12:	bf00      	nop
 801ef14:	200325fc 	.word	0x200325fc

0801ef18 <SFU_IMG_LaunchActiveImg>:
  *       function (as this needs to be done just before jumping into the user application).
  * @param  None.
  * @retval SFU_ErrorStatus Does not return if successful, returns SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_LaunchActiveImg(void)
{
 801ef18:	b538      	push	{r3, r4, r5, lr}
  uint32_t jump_address ;
  typedef void (*Function_Pointer)(void);
  Function_Pointer  p_jump_to_function;
  TRACE("\r\n SFU_IMG_LaunchActiveImg 111 \n");
 801ef1a:	4812      	ldr	r0, [pc, #72]	; (801ef64 <SFU_IMG_LaunchActiveImg+0x4c>)
  HAL_MPU_Disable();
#endif /* SFU_MPU_USERAPP_ACTIVATION */
#endif /* SFU_MPU_PROTECT_ENABLE */

  TRACE("\r\n SFU_IMG_LaunchActiveImg 222 \n");
  jump_address = *(__IO uint32_t *)(((uint32_t)SFU_IMG_SLOT_0_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET + 4));
 801ef1c:	4d12      	ldr	r5, [pc, #72]	; (801ef68 <SFU_IMG_LaunchActiveImg+0x50>)
  TRACE("\r\n SFU_IMG_LaunchActiveImg 111 \n");
 801ef1e:	f009 fe9d 	bl	8028c5c <puts>
  TRACE("\r\n SFU_IMG_LaunchActiveImg 222 \n");
 801ef22:	4812      	ldr	r0, [pc, #72]	; (801ef6c <SFU_IMG_LaunchActiveImg+0x54>)
 801ef24:	f009 fe9a 	bl	8028c5c <puts>
  jump_address = *(__IO uint32_t *)(((uint32_t)SFU_IMG_SLOT_0_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET + 4));
 801ef28:	f8d5 4804 	ldr.w	r4, [r5, #2052]	; 0x804
  /* Jump to user application */
  TRACE("\r\n SFU_IMG_LaunchActiveImg 333 jump_address %x SFU_IMG_SLOT_0_REGION_BEGIN %x \n", jump_address, SFU_IMG_SLOT_0_REGION_BEGIN);
 801ef2c:	4810      	ldr	r0, [pc, #64]	; (801ef70 <SFU_IMG_LaunchActiveImg+0x58>)
 801ef2e:	462a      	mov	r2, r5
 801ef30:	4621      	mov	r1, r4
 801ef32:	f009 fe0b 	bl	8028b4c <iprintf>
  TRACE("\r\n SFU_IMG_LaunchActiveImg 333 jump_address %x SFU_IMG_IMAGE_OFFSET %x \n", jump_address, SFU_IMG_IMAGE_OFFSET);
 801ef36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ef3a:	4621      	mov	r1, r4
 801ef3c:	480d      	ldr	r0, [pc, #52]	; (801ef74 <SFU_IMG_LaunchActiveImg+0x5c>)
 801ef3e:	f009 fe05 	bl	8028b4c <iprintf>
  p_jump_to_function = (Function_Pointer) jump_address;
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t *)(SFU_IMG_SLOT_0_REGION_BEGIN + SFU_IMG_IMAGE_OFFSET));
 801ef42:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 801ef46:	f383 8808 	msr	MSP, r3
  TRACE("\r\n SFU_IMG_LaunchActiveImg 4444 \n");
 801ef4a:	480b      	ldr	r0, [pc, #44]	; (801ef78 <SFU_IMG_LaunchActiveImg+0x60>)
 801ef4c:	f009 fe86 	bl	8028c5c <puts>
  /* Destroy the Volatile data and CSTACK in SRAM used by Secure Boot in order to prevent any access to sensitive data
     from the UserApp.
     If FWall is used and a Secure Engine CStack context switch is implemented, these data are the data
     outside the protected area, so not so sensitive, but still in this way we add increase the level of security.
  */
  TRACE("\r\n SFU_IMG_LaunchActiveImg 5555 \n");
 801ef50:	480a      	ldr	r0, [pc, #40]	; (801ef7c <SFU_IMG_LaunchActiveImg+0x64>)
 801ef52:	f009 fe83 	bl	8028c5c <puts>
  SFU_LL_SB_SRAM_Erase();
 801ef56:	f001 fad9 	bl	802050c <SFU_LL_SB_SRAM_Erase>
  /* JUMP into User App */
  //TRACE("\r\n SFU_IMG_LaunchActiveImg 6666 Jump!!!! \n");
  p_jump_to_function();
 801ef5a:	47a0      	blx	r4


  /* The point below should NOT be reached */
  return (SFU_ERROR);
}
 801ef5c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801ef60:	bd38      	pop	{r3, r4, r5, pc}
 801ef62:	bf00      	nop
 801ef64:	0802c175 	.word	0x0802c175
 801ef68:	08105000 	.word	0x08105000
 801ef6c:	0802c195 	.word	0x0802c195
 801ef70:	0802c1b5 	.word	0x0802c1b5
 801ef74:	0802c205 	.word	0x0802c205
 801ef78:	0802c24e 	.word	0x0802c24e
 801ef7c:	0802c26f 	.word	0x0802c26f

0801ef80 <SFU_IMG_GetActiveFwVersion>:
  *       fails.
  * @param  None.
  * @retval the FW version if it succeeds (coded on uint16_t), -1 otherwise
  */
int32_t SFU_IMG_GetActiveFwVersion(void)
{
 801ef80:	b500      	push	{lr}
 801ef82:	f2ad 7da4 	subw	sp, sp, #1956	; 0x7a4
  SE_FwRawHeaderTypeDef fw_image_header;
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  int32_t version = -1;

  /*  check the header in slot #0 */
  e_ret_status = SFU_IMG_GetFWInfoMAC(&fw_image_header, 0U);
 801ef86:	2100      	movs	r1, #0
 801ef88:	4668      	mov	r0, sp
 801ef8a:	f7ff fb81 	bl	801e690 <SFU_IMG_GetFWInfoMAC>
  if (e_ret_status == SFU_SUCCESS)
 801ef8e:	4b05      	ldr	r3, [pc, #20]	; (801efa4 <SFU_IMG_GetActiveFwVersion+0x24>)
 801ef90:	4298      	cmp	r0, r3
  {
    /* retrieve the version from the header without any further check */
    version = (int32_t)fw_image_header.FwVersion;
 801ef92:	bf0c      	ite	eq
 801ef94:	f8bd 0006 	ldrheq.w	r0, [sp, #6]
  int32_t version = -1;
 801ef98:	f04f 30ff 	movne.w	r0, #4294967295
  }

  return (version);
}
 801ef9c:	f20d 7da4 	addw	sp, sp, #1956	; 0x7a4
 801efa0:	f85d fb04 	ldr.w	pc, [sp], #4
 801efa4:	00122f11 	.word	0x00122f11

0801efa8 <SFU_IMG_CheckCandidateMetadata>:
{
 801efa8:	b513      	push	{r0, r1, r4, lr}
    curVer = SFU_IMG_GetActiveFwVersion();
 801efaa:	f7ff ffe9 	bl	801ef80 <SFU_IMG_GetActiveFwVersion>
    if (SFU_IMG_CheckFwVersion(curVer, (int32_t)fw_image_header_to_test.FwVersion) != SFU_SUCCESS)
 801efae:	4b13      	ldr	r3, [pc, #76]	; (801effc <SFU_IMG_CheckCandidateMetadata+0x54>)
 801efb0:	88d9      	ldrh	r1, [r3, #6]
 801efb2:	f7ff ff4d 	bl	801ee50 <SFU_IMG_CheckFwVersion>
 801efb6:	4b12      	ldr	r3, [pc, #72]	; (801f000 <SFU_IMG_CheckCandidateMetadata+0x58>)
 801efb8:	4298      	cmp	r0, r3
 801efba:	4604      	mov	r4, r0
 801efbc:	d018      	beq.n	801eff0 <SFU_IMG_CheckCandidateMetadata+0x48>
      (void)SFU_BOOT_SetLastExecError(SFU_EXCPT_INCORRECT_VERSION);
 801efbe:	201c      	movs	r0, #28
 801efc0:	f7fe fb98 	bl	801d6f4 <SFU_BOOT_SetLastExecError>
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *)SFU_IMG_SWAP_REGION_BEGIN, SFU_IMG_IMAGE_OFFSET);
 801efc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801efc8:	490e      	ldr	r1, [pc, #56]	; (801f004 <SFU_IMG_CheckCandidateMetadata+0x5c>)
 801efca:	f10d 0007 	add.w	r0, sp, #7
 801efce:	f001 fc31 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801efd2:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801efd6:	4298      	cmp	r0, r3
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (void *)SFU_IMG_SWAP_REGION_BEGIN, SFU_IMG_IMAGE_OFFSET);
 801efd8:	4604      	mov	r4, r0
      StatusFWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801efda:	d10c      	bne.n	801eff6 <SFU_IMG_CheckCandidateMetadata+0x4e>
 801efdc:	4b0a      	ldr	r3, [pc, #40]	; (801f008 <SFU_IMG_CheckCandidateMetadata+0x60>)
 801efde:	480b      	ldr	r0, [pc, #44]	; (801f00c <SFU_IMG_CheckCandidateMetadata+0x64>)
 801efe0:	2101      	movs	r1, #1
 801efe2:	7019      	strb	r1, [r3, #0]
 801efe4:	4b0a      	ldr	r3, [pc, #40]	; (801f010 <SFU_IMG_CheckCandidateMetadata+0x68>)
 801efe6:	22e0      	movs	r2, #224	; 0xe0
 801efe8:	601a      	str	r2, [r3, #0]
 801efea:	4b0a      	ldr	r3, [pc, #40]	; (801f014 <SFU_IMG_CheckCandidateMetadata+0x6c>)
 801efec:	f009 fdae 	bl	8028b4c <iprintf>
}
 801eff0:	4620      	mov	r0, r4
 801eff2:	b002      	add	sp, #8
 801eff4:	bd10      	pop	{r4, pc}
      e_ret_status = SFU_ERROR;
 801eff6:	461c      	mov	r4, r3
  return (e_ret_status);
 801eff8:	e7fa      	b.n	801eff0 <SFU_IMG_CheckCandidateMetadata+0x48>
 801effa:	bf00      	nop
 801effc:	20031e40 	.word	0x20031e40
 801f000:	00122f11 	.word	0x00122f11
 801f004:	081d5000 	.word	0x081d5000
 801f008:	200325e4 	.word	0x200325e4
 801f00c:	0802bcc8 	.word	0x0802bcc8
 801f010:	200325e0 	.word	0x200325e0
 801f014:	0802c290 	.word	0x0802c290

0801f018 <SFU_IMG_HasValidActiveFirmware>:
  * @note This function modifies the FWIMG variables 'fw_image_header_validated' and 'fw_header_validated'
  * @param  None.
  * @retval SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_HasValidActiveFirmware(void)
{
 801f018:	b538      	push	{r3, r4, r5, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Refresh Watchdog */
  SFU_LL_SECU_IWDG_Refresh();
 801f01a:	f001 fd75 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>

  /* check the installed header (metadata) */
  e_ret_status = SFU_IMG_VerifyActiveImgMetadata();
 801f01e:	f7ff ff4f 	bl	801eec0 <SFU_IMG_VerifyActiveImgMetadata>

  /* Refresh Watchdog */
  SFU_LL_SECU_IWDG_Refresh();

  if (e_ret_status == SFU_SUCCESS)
 801f022:	4d09      	ldr	r5, [pc, #36]	; (801f048 <SFU_IMG_HasValidActiveFirmware+0x30>)
  e_ret_status = SFU_IMG_VerifyActiveImgMetadata();
 801f024:	4604      	mov	r4, r0
  SFU_LL_SECU_IWDG_Refresh();
 801f026:	f001 fd6f 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
  if (e_ret_status == SFU_SUCCESS)
 801f02a:	42ac      	cmp	r4, r5
 801f02c:	d102      	bne.n	801f034 <SFU_IMG_HasValidActiveFirmware+0x1c>
  {
    /* check the installed FW image itself */
    e_ret_status = SFU_IMG_VerifyActiveImg();
 801f02e:	f7ff ff4d 	bl	801eecc <SFU_IMG_VerifyActiveImg>
 801f032:	4604      	mov	r4, r0
  }

  /* Refresh Watchdog */
  SFU_LL_SECU_IWDG_Refresh();
 801f034:	f001 fd68 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>

  if (e_ret_status == SFU_SUCCESS)
 801f038:	42ac      	cmp	r4, r5
 801f03a:	d103      	bne.n	801f044 <SFU_IMG_HasValidActiveFirmware+0x2c>
    /* check that this FW has been tagged as valid by the bootloader  */
    e_ret_status = SFU_IMG_CheckSlot0FwValid();
  }

  return e_ret_status;
}
 801f03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e_ret_status = SFU_IMG_CheckSlot0FwValid();
 801f040:	f7ff bae2 	b.w	801e608 <SFU_IMG_CheckSlot0FwValid>
}
 801f044:	4620      	mov	r0, r4
 801f046:	bd38      	pop	{r3, r4, r5, pc}
 801f048:	00122f11 	.word	0x00122f11

0801f04c <SFU_IMG_Validation>:
  * @param  address of the header to be installed in slot #0
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus SFU_IMG_Validation(uint8_t *pHeader)
{
  return (SFU_IMG_WriteHeaderValidated(pHeader));
 801f04c:	f7ff bb5a 	b.w	801e704 <SFU_IMG_WriteHeaderValidated>

0801f050 <SFU_IMG_EraseDownloadedImg>:
  * @brief  Erase downloaded firmware in case of decryption/authentication/integrity error
  * @param  None
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus SFU_IMG_EraseDownloadedImg(void)
{
 801f050:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SFU_FLASH_StatusTypeDef flash_if_status;
  SFU_ErrorStatus e_ret_status_dwl = SFU_SUCCESS;
  SFU_ErrorStatus e_ret_status_swap = SFU_SUCCESS;

  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, SFU_IMG_SLOT_DWL_REGION_BEGIN,
 801f052:	491d      	ldr	r1, [pc, #116]	; (801f0c8 <SFU_IMG_EraseDownloadedImg+0x78>)
 801f054:	4a1d      	ldr	r2, [pc, #116]	; (801f0cc <SFU_IMG_EraseDownloadedImg+0x7c>)
 801f056:	f10d 0007 	add.w	r0, sp, #7
 801f05a:	1a52      	subs	r2, r2, r1
 801f05c:	f001 fbea 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
                                             SFU_IMG_SLOT_DWL_REGION_SIZE);
  StatusFWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801f060:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801f064:	4298      	cmp	r0, r3
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, SFU_IMG_SLOT_DWL_REGION_BEGIN,
 801f066:	4605      	mov	r5, r0
  StatusFWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801f068:	d10a      	bne.n	801f080 <SFU_IMG_EraseDownloadedImg+0x30>
 801f06a:	4b19      	ldr	r3, [pc, #100]	; (801f0d0 <SFU_IMG_EraseDownloadedImg+0x80>)
 801f06c:	4819      	ldr	r0, [pc, #100]	; (801f0d4 <SFU_IMG_EraseDownloadedImg+0x84>)
 801f06e:	2101      	movs	r1, #1
 801f070:	7019      	strb	r1, [r3, #0]
 801f072:	4b19      	ldr	r3, [pc, #100]	; (801f0d8 <SFU_IMG_EraseDownloadedImg+0x88>)
 801f074:	f44f 7213 	mov.w	r2, #588	; 0x24c
 801f078:	601a      	str	r2, [r3, #0]
 801f07a:	4b18      	ldr	r3, [pc, #96]	; (801f0dc <SFU_IMG_EraseDownloadedImg+0x8c>)
 801f07c:	f009 fd66 	bl	8028b4c <iprintf>

  e_ret_status_swap = SFU_LL_FLASH_Erase_Size(&flash_if_status, SFU_IMG_SWAP_REGION_BEGIN, SFU_IMG_SWAP_REGION_SIZE);
 801f080:	4917      	ldr	r1, [pc, #92]	; (801f0e0 <SFU_IMG_EraseDownloadedImg+0x90>)
 801f082:	4a18      	ldr	r2, [pc, #96]	; (801f0e4 <SFU_IMG_EraseDownloadedImg+0x94>)
 801f084:	f10d 0007 	add.w	r0, sp, #7
 801f088:	1a52      	subs	r2, r2, r1
 801f08a:	f001 fbd3 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
  StatusFWIMG(e_ret_status_swap == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801f08e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801f092:	4298      	cmp	r0, r3
  e_ret_status_swap = SFU_LL_FLASH_Erase_Size(&flash_if_status, SFU_IMG_SWAP_REGION_BEGIN, SFU_IMG_SWAP_REGION_SIZE);
 801f094:	4604      	mov	r4, r0
  StatusFWIMG(e_ret_status_swap == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 801f096:	d10d      	bne.n	801f0b4 <SFU_IMG_EraseDownloadedImg+0x64>
 801f098:	4b0d      	ldr	r3, [pc, #52]	; (801f0d0 <SFU_IMG_EraseDownloadedImg+0x80>)
 801f09a:	480e      	ldr	r0, [pc, #56]	; (801f0d4 <SFU_IMG_EraseDownloadedImg+0x84>)
 801f09c:	2101      	movs	r1, #1
 801f09e:	7019      	strb	r1, [r3, #0]
 801f0a0:	4b0d      	ldr	r3, [pc, #52]	; (801f0d8 <SFU_IMG_EraseDownloadedImg+0x88>)
 801f0a2:	f240 224f 	movw	r2, #591	; 0x24f
 801f0a6:	601a      	str	r2, [r3, #0]
 801f0a8:	4b0c      	ldr	r3, [pc, #48]	; (801f0dc <SFU_IMG_EraseDownloadedImg+0x8c>)
 801f0aa:	f009 fd4f 	bl	8028b4c <iprintf>

  return (((e_ret_status_swap != SFU_SUCCESS) || (e_ret_status_dwl != SFU_SUCCESS)) ?  SFU_ERROR : SFU_SUCCESS);
}
 801f0ae:	4620      	mov	r0, r4
 801f0b0:	b003      	add	sp, #12
 801f0b2:	bd30      	pop	{r4, r5, pc}
  return (((e_ret_status_swap != SFU_SUCCESS) || (e_ret_status_dwl != SFU_SUCCESS)) ?  SFU_ERROR : SFU_SUCCESS);
 801f0b4:	4a0c      	ldr	r2, [pc, #48]	; (801f0e8 <SFU_IMG_EraseDownloadedImg+0x98>)
 801f0b6:	4290      	cmp	r0, r2
 801f0b8:	d103      	bne.n	801f0c2 <SFU_IMG_EraseDownloadedImg+0x72>
 801f0ba:	4285      	cmp	r5, r0
 801f0bc:	bf18      	it	ne
 801f0be:	461c      	movne	r4, r3
 801f0c0:	e7f5      	b.n	801f0ae <SFU_IMG_EraseDownloadedImg+0x5e>
 801f0c2:	461c      	mov	r4, r3
 801f0c4:	e7f3      	b.n	801f0ae <SFU_IMG_EraseDownloadedImg+0x5e>
 801f0c6:	bf00      	nop
 801f0c8:	08036000 	.word	0x08036000
 801f0cc:	080f1000 	.word	0x080f1000
 801f0d0:	200325e4 	.word	0x200325e4
 801f0d4:	0802bcc8 	.word	0x0802bcc8
 801f0d8:	200325e0 	.word	0x200325e0
 801f0dc:	0802c290 	.word	0x0802c290
 801f0e0:	081d5000 	.word	0x081d5000
 801f0e4:	081e0000 	.word	0x081e0000
 801f0e8:	00122f11 	.word	0x00122f11

0801f0ec <SFU_IMG_TriggerImageInstallation>:
{
 801f0ec:	b510      	push	{r4, lr}
  e_ret_status = SFU_IMG_PrepareCandidateImageForInstall();
 801f0ee:	f7ff fd7b 	bl	801ebe8 <SFU_IMG_PrepareCandidateImageForInstall>
  if (SFU_SUCCESS == e_ret_status)
 801f0f2:	4b06      	ldr	r3, [pc, #24]	; (801f10c <SFU_IMG_TriggerImageInstallation+0x20>)
 801f0f4:	4298      	cmp	r0, r3
  e_ret_status = SFU_IMG_PrepareCandidateImageForInstall();
 801f0f6:	4604      	mov	r4, r0
  if (SFU_SUCCESS == e_ret_status)
 801f0f8:	d103      	bne.n	801f102 <SFU_IMG_TriggerImageInstallation+0x16>
}
 801f0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e_ret_status = SFU_IMG_InstallNewVersion();
 801f0fe:	f7ff bddd 	b.w	801ecbc <SFU_IMG_InstallNewVersion>
    (void) SFU_IMG_EraseDownloadedImg();
 801f102:	f7ff ffa5 	bl	801f050 <SFU_IMG_EraseDownloadedImg>
}
 801f106:	4620      	mov	r0, r4
 801f108:	bd10      	pop	{r4, pc}
 801f10a:	bf00      	nop
 801f10c:	00122f11 	.word	0x00122f11

0801f110 <SFU_IMG_SetUpdateSourceFingerprint>:
  * @param SE_FwRawHeaderTypeDef* pNewFwHdr Pointer to header of new firmware (updated fw)
  * @param SE_FwRawHeaderTypeDef* pOldFwHdr Pointer to header of old firmware (original fw)
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_SetUpdateSourceFingerprint(SE_FwRawHeaderTypeDef* pNewFwHdr, SE_FwRawHeaderTypeDef* pOldFwHdr)
{
 801f110:	b570      	push	{r4, r5, r6, lr}
 801f112:	460d      	mov	r5, r1
 801f114:	b088      	sub	sp, #32
  SFU_ErrorStatus retval = SFU_SUCCESS;
  uint8_t HashBuffer[32];

  /* The fingerprint of the header of the original fw is stored in the header of the new fw
   */
  if((NULL == pNewFwHdr) || (NULL == pOldFwHdr))
 801f116:	4604      	mov	r4, r0
 801f118:	b338      	cbz	r0, 801f16a <SFU_IMG_SetUpdateSourceFingerprint+0x5a>
 801f11a:	b331      	cbz	r1, 801f16a <SFU_IMG_SetUpdateSourceFingerprint+0x5a>
  {
    return SFU_ERROR;
  }
  /* check these look like headers */
  if(memcmp(&(pOldFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)) || memcmp(&(pNewFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)))
 801f11c:	2204      	movs	r2, #4
 801f11e:	4914      	ldr	r1, [pc, #80]	; (801f170 <SFU_IMG_SetUpdateSourceFingerprint+0x60>)
 801f120:	4628      	mov	r0, r5
 801f122:	f009 fc3b 	bl	802899c <memcmp>
 801f126:	bb00      	cbnz	r0, 801f16a <SFU_IMG_SetUpdateSourceFingerprint+0x5a>
 801f128:	2204      	movs	r2, #4
 801f12a:	4911      	ldr	r1, [pc, #68]	; (801f170 <SFU_IMG_SetUpdateSourceFingerprint+0x60>)
 801f12c:	4620      	mov	r0, r4
 801f12e:	f009 fc35 	bl	802899c <memcmp>
 801f132:	b9d0      	cbnz	r0, 801f16a <SFU_IMG_SetUpdateSourceFingerprint+0x5a>
  {
    return SFU_ERROR;
  }
  /* hash source header */
  retval = SFU_SCHEME_X509_CORE_HashContiguous((uint8_t*) pOldFwHdr, sizeof(SE_FwRawHeaderTypeDef), HashBuffer, sizeof(HashBuffer));
 801f134:	2320      	movs	r3, #32
 801f136:	466a      	mov	r2, sp
 801f138:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 801f13c:	4628      	mov	r0, r5
 801f13e:	f000 fbd1 	bl	801f8e4 <SFU_SCHEME_X509_CORE_HashContiguous>

  if(SFU_SUCCESS == retval)
 801f142:	4b0c      	ldr	r3, [pc, #48]	; (801f174 <SFU_IMG_SetUpdateSourceFingerprint+0x64>)
 801f144:	4298      	cmp	r0, r3
  retval = SFU_SCHEME_X509_CORE_HashContiguous((uint8_t*) pOldFwHdr, sizeof(SE_FwRawHeaderTypeDef), HashBuffer, sizeof(HashBuffer));
 801f146:	4602      	mov	r2, r0
  if(SFU_SUCCESS == retval)
 801f148:	d10c      	bne.n	801f164 <SFU_IMG_SetUpdateSourceFingerprint+0x54>
  {
    /* We store the digest of the source header inside the new image header to lock any rollback to
	 * this firmware image which is last known good and initiated the update
     */
    memcpy(&(pNewFwHdr->UpdateSourceFingerprint), HashBuffer, sizeof(HashBuffer));
 801f14a:	466d      	mov	r5, sp
 801f14c:	f504 63f0 	add.w	r3, r4, #1920	; 0x780
 801f150:	ae08      	add	r6, sp, #32
 801f152:	462c      	mov	r4, r5
 801f154:	cc03      	ldmia	r4!, {r0, r1}
 801f156:	42b4      	cmp	r4, r6
 801f158:	6018      	str	r0, [r3, #0]
 801f15a:	6059      	str	r1, [r3, #4]
 801f15c:	4625      	mov	r5, r4
 801f15e:	f103 0308 	add.w	r3, r3, #8
 801f162:	d1f6      	bne.n	801f152 <SFU_IMG_SetUpdateSourceFingerprint+0x42>
  }

  return retval;
}
 801f164:	4610      	mov	r0, r2
 801f166:	b008      	add	sp, #32
 801f168:	bd70      	pop	{r4, r5, r6, pc}
    return SFU_ERROR;
 801f16a:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 801f16e:	e7f9      	b.n	801f164 <SFU_IMG_SetUpdateSourceFingerprint+0x54>
 801f170:	0802c31c 	.word	0x0802c31c
 801f174:	00122f11 	.word	0x00122f11

0801f178 <SFU_IMG_CheckUpdateSourceFingerprint>:
  * @param SE_FwRawHeaderTypeDef* pNewFwHdr Pointer to header of new firmware (updated fw)
  * @param SE_FwRawHeaderTypeDef* pOldFwHdr Pointer to header of backed-up firmware (original fw?)
  * @retval SFU_ErrorStatus SFU_SUCCESS if match is successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_CheckUpdateSourceFingerprint(SE_FwRawHeaderTypeDef* pNewFwHdr, SE_FwRawHeaderTypeDef* pOldFwHdr)
{
 801f178:	b530      	push	{r4, r5, lr}
 801f17a:	b089      	sub	sp, #36	; 0x24
 801f17c:	4604      	mov	r4, r0
 801f17e:	460d      	mov	r5, r1
  SFU_ErrorStatus retval = SFU_SUCCESS;
  uint8_t HashBuffer[32] = {0};
 801f180:	2220      	movs	r2, #32
 801f182:	2100      	movs	r1, #0
 801f184:	4668      	mov	r0, sp
 801f186:	f009 fc23 	bl	80289d0 <memset>
  /* The fingerprint of the header of the original fw is stored in the header of the new fw
   */
  if((NULL == pNewFwHdr) || (NULL == pOldFwHdr))
 801f18a:	b104      	cbz	r4, 801f18e <SFU_IMG_CheckUpdateSourceFingerprint+0x16>
 801f18c:	b94d      	cbnz	r5, 801f1a2 <SFU_IMG_CheckUpdateSourceFingerprint+0x2a>
  {
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, NULL pointer pNewFwHdr=0x%08x, pOldFwHdr=0x%08x", pNewFwHdr, pOldFwHdr);
 801f18e:	481f      	ldr	r0, [pc, #124]	; (801f20c <SFU_IMG_CheckUpdateSourceFingerprint+0x94>)
 801f190:	462a      	mov	r2, r5
 801f192:	4621      	mov	r1, r4
    return SFU_ERROR;
  }
  /* check that these look like headers */
  if(memcmp(&(pOldFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)) || memcmp(&(pNewFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)))
  {
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, Not a Header: pNewFwHdr=0x%08x, pOldFwHdr=0x%08x", pNewFwHdr->SFUMagic, pOldFwHdr->SFUMagic);
 801f194:	f009 fcda 	bl	8028b4c <iprintf>
    /* check the fingerprint held in the new header matches the old header fingerprint */
    // if(memcmp(&(pNewFwHdr->UpdateSourceFingerprint), &(pOldFwHdr->HeaderMAC), sizeof(pNewFwHdr->UpdateSourceFingerprint)))
    if(0 != memcmp(&(pNewFwHdr->UpdateSourceFingerprint), HashBuffer, sizeof(HashBuffer)))
    {
      TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, UpdateSourceFingerprint does not match header hash");
      retval = SFU_ERROR;
 801f198:	f641 75e1 	movw	r5, #8161	; 0x1fe1
  else
  {
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, SFU_SCHEME_X509_CORE_HashContiguous returned error: 0x%x", retval);
  }
  return retval;
}
 801f19c:	4628      	mov	r0, r5
 801f19e:	b009      	add	sp, #36	; 0x24
 801f1a0:	bd30      	pop	{r4, r5, pc}
  if(memcmp(&(pOldFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)) || memcmp(&(pNewFwHdr->SFUMagic), SBMAGIC, strlen(SBMAGIC)))
 801f1a2:	2204      	movs	r2, #4
 801f1a4:	491a      	ldr	r1, [pc, #104]	; (801f210 <SFU_IMG_CheckUpdateSourceFingerprint+0x98>)
 801f1a6:	4628      	mov	r0, r5
 801f1a8:	f009 fbf8 	bl	802899c <memcmp>
 801f1ac:	b928      	cbnz	r0, 801f1ba <SFU_IMG_CheckUpdateSourceFingerprint+0x42>
 801f1ae:	2204      	movs	r2, #4
 801f1b0:	4917      	ldr	r1, [pc, #92]	; (801f210 <SFU_IMG_CheckUpdateSourceFingerprint+0x98>)
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	f009 fbf2 	bl	802899c <memcmp>
 801f1b8:	b118      	cbz	r0, 801f1c2 <SFU_IMG_CheckUpdateSourceFingerprint+0x4a>
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, Not a Header: pNewFwHdr=0x%08x, pOldFwHdr=0x%08x", pNewFwHdr->SFUMagic, pOldFwHdr->SFUMagic);
 801f1ba:	682a      	ldr	r2, [r5, #0]
 801f1bc:	6821      	ldr	r1, [r4, #0]
 801f1be:	4815      	ldr	r0, [pc, #84]	; (801f214 <SFU_IMG_CheckUpdateSourceFingerprint+0x9c>)
 801f1c0:	e7e8      	b.n	801f194 <SFU_IMG_CheckUpdateSourceFingerprint+0x1c>
  if(0 == memcmp(&(pNewFwHdr->UpdateSourceFingerprint), HashBuffer, sizeof(HashBuffer)))
 801f1c2:	f504 64f0 	add.w	r4, r4, #1920	; 0x780
 801f1c6:	2220      	movs	r2, #32
 801f1c8:	4669      	mov	r1, sp
 801f1ca:	4620      	mov	r0, r4
 801f1cc:	f009 fbe6 	bl	802899c <memcmp>
 801f1d0:	b918      	cbnz	r0, 801f1da <SFU_IMG_CheckUpdateSourceFingerprint+0x62>
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, No UpdateSourceFingerprint");
 801f1d2:	4811      	ldr	r0, [pc, #68]	; (801f218 <SFU_IMG_CheckUpdateSourceFingerprint+0xa0>)
      TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, UpdateSourceFingerprint does not match header hash");
 801f1d4:	f009 fcba 	bl	8028b4c <iprintf>
 801f1d8:	e7de      	b.n	801f198 <SFU_IMG_CheckUpdateSourceFingerprint+0x20>
  retval = SFU_SCHEME_X509_CORE_HashContiguous((uint8_t*) pOldFwHdr, sizeof(SE_FwRawHeaderTypeDef), HashBuffer, sizeof(HashBuffer));
 801f1da:	2320      	movs	r3, #32
 801f1dc:	4628      	mov	r0, r5
 801f1de:	466a      	mov	r2, sp
 801f1e0:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 801f1e4:	f000 fb7e 	bl	801f8e4 <SFU_SCHEME_X509_CORE_HashContiguous>
  if(SFU_SUCCESS == retval)
 801f1e8:	4b0c      	ldr	r3, [pc, #48]	; (801f21c <SFU_IMG_CheckUpdateSourceFingerprint+0xa4>)
 801f1ea:	4298      	cmp	r0, r3
  retval = SFU_SCHEME_X509_CORE_HashContiguous((uint8_t*) pOldFwHdr, sizeof(SE_FwRawHeaderTypeDef), HashBuffer, sizeof(HashBuffer));
 801f1ec:	4605      	mov	r5, r0
  if(SFU_SUCCESS == retval)
 801f1ee:	d108      	bne.n	801f202 <SFU_IMG_CheckUpdateSourceFingerprint+0x8a>
    if(0 != memcmp(&(pNewFwHdr->UpdateSourceFingerprint), HashBuffer, sizeof(HashBuffer)))
 801f1f0:	2220      	movs	r2, #32
 801f1f2:	4669      	mov	r1, sp
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f009 fbd1 	bl	802899c <memcmp>
 801f1fa:	2800      	cmp	r0, #0
 801f1fc:	d0ce      	beq.n	801f19c <SFU_IMG_CheckUpdateSourceFingerprint+0x24>
      TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, UpdateSourceFingerprint does not match header hash");
 801f1fe:	4808      	ldr	r0, [pc, #32]	; (801f220 <SFU_IMG_CheckUpdateSourceFingerprint+0xa8>)
 801f200:	e7e8      	b.n	801f1d4 <SFU_IMG_CheckUpdateSourceFingerprint+0x5c>
    TRACE("\n\rSFU_IMG_CheckUpdateSourceFingerprint: Failed, SFU_SCHEME_X509_CORE_HashContiguous returned error: 0x%x", retval);
 801f202:	4601      	mov	r1, r0
 801f204:	4807      	ldr	r0, [pc, #28]	; (801f224 <SFU_IMG_CheckUpdateSourceFingerprint+0xac>)
 801f206:	f009 fca1 	bl	8028b4c <iprintf>
 801f20a:	e7c7      	b.n	801f19c <SFU_IMG_CheckUpdateSourceFingerprint+0x24>
 801f20c:	0802c321 	.word	0x0802c321
 801f210:	0802c31c 	.word	0x0802c31c
 801f214:	0802c381 	.word	0x0802c381
 801f218:	0802c3e2 	.word	0x0802c3e2
 801f21c:	00122f11 	.word	0x00122f11
 801f220:	0802c42d 	.word	0x0802c42d
 801f224:	0802c490 	.word	0x0802c490

0801f228 <SFU_IMG_RollbackFWUpdate>:
{
 801f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f22c:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 801f230:	b087      	sub	sp, #28
  uint8_t ZeroBuffer[32] = {0x00};
 801f232:	2220      	movs	r2, #32
 801f234:	2100      	movs	r1, #0
  gRollbackDone = 0;
 801f236:	4d72      	ldr	r5, [pc, #456]	; (801f400 <SFU_IMG_RollbackFWUpdate+0x1d8>)
  uint8_t ZeroBuffer[32] = {0x00};
 801f238:	a806      	add	r0, sp, #24
 801f23a:	f009 fbc9 	bl	80289d0 <memset>
  gRollbackDone = 0;
 801f23e:	2400      	movs	r4, #0
  e_sfu_result =  SFU_LL_FLASH_Read((void *)Buffer, (const void *) SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(SE_FwRawHeaderTypeDef));
 801f240:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801f244:	496f      	ldr	r1, [pc, #444]	; (801f404 <SFU_IMG_RollbackFWUpdate+0x1dc>)
  gRollbackDone = 0;
 801f246:	702c      	strb	r4, [r5, #0]
  e_sfu_result =  SFU_LL_FLASH_Read((void *)Buffer, (const void *) SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(SE_FwRawHeaderTypeDef));
 801f248:	a80e      	add	r0, sp, #56	; 0x38
 801f24a:	f001 fa2b 	bl	80206a4 <SFU_LL_FLASH_Read>
  if(SFU_SUCCESS != e_sfu_result)
 801f24e:	4b6e      	ldr	r3, [pc, #440]	; (801f408 <SFU_IMG_RollbackFWUpdate+0x1e0>)
 801f250:	9501      	str	r5, [sp, #4]
 801f252:	4298      	cmp	r0, r3
  e_sfu_result =  SFU_LL_FLASH_Read((void *)Buffer, (const void *) SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(SE_FwRawHeaderTypeDef));
 801f254:	4680      	mov	r8, r0
  if(SFU_SUCCESS != e_sfu_result)
 801f256:	d002      	beq.n	801f25e <SFU_IMG_RollbackFWUpdate+0x36>
      return SFU_ERROR;
 801f258:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801f25c:	e05b      	b.n	801f316 <SFU_IMG_RollbackFWUpdate+0xee>
  if(0==memcmp(((SE_FwRawHeaderTypeDef*) Buffer)->UpdateSourceFingerprint, ZeroBuffer, sizeof(ZeroBuffer)))
 801f25e:	2220      	movs	r2, #32
 801f260:	a906      	add	r1, sp, #24
 801f262:	f50d 60f7 	add.w	r0, sp, #1976	; 0x7b8
 801f266:	f009 fb99 	bl	802899c <memcmp>
 801f26a:	2800      	cmp	r0, #0
 801f26c:	d0f4      	beq.n	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
  *pHdr = (uint8_t*) ((REGION_SLOT_1_END + 1) - 2 * SFU_IMG_SWAP_REGION_SIZE);
 801f26e:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 801f438 <SFU_IMG_RollbackFWUpdate+0x210>
 801f272:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 801f43c <SFU_IMG_RollbackFWUpdate+0x214>
  uint8_t Buffer[4] = {0};
 801f276:	9405      	str	r4, [sp, #20]
  *pHdr = (uint8_t*) ((REGION_SLOT_1_END + 1) - 2 * SFU_IMG_SWAP_REGION_SIZE);
 801f278:	f10a 0701 	add.w	r7, sl, #1
 801f27c:	4c63      	ldr	r4, [pc, #396]	; (801f40c <SFU_IMG_RollbackFWUpdate+0x1e4>)
 801f27e:	eba7 070b 	sub.w	r7, r7, fp
 801f282:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
  int32_t result = 1;
 801f286:	2601      	movs	r6, #1
  while((result!=0) && ((uint32_t)*pHdr>=REGION_SLOT_1_START) && (sfu_result==SFU_SUCCESS))
 801f288:	46c1      	mov	r9, r8
    TRACE("\n\rCheck for header at 0x%08x", *pHdr);
 801f28a:	4b61      	ldr	r3, [pc, #388]	; (801f410 <SFU_IMG_RollbackFWUpdate+0x1e8>)
  int32_t result = 1;
 801f28c:	4645      	mov	r5, r8
  while((result!=0) && ((uint32_t)*pHdr>=REGION_SLOT_1_START) && (sfu_result==SFU_SUCCESS))
 801f28e:	2e00      	cmp	r6, #0
 801f290:	f000 809d 	beq.w	801f3ce <SFU_IMG_RollbackFWUpdate+0x1a6>
 801f294:	4a5f      	ldr	r2, [pc, #380]	; (801f414 <SFU_IMG_RollbackFWUpdate+0x1ec>)
 801f296:	4294      	cmp	r4, r2
 801f298:	d301      	bcc.n	801f29e <SFU_IMG_RollbackFWUpdate+0x76>
 801f29a:	454d      	cmp	r5, r9
 801f29c:	d003      	beq.n	801f2a6 <SFU_IMG_RollbackFWUpdate+0x7e>
    TRACE("\n\rHeader not found");
 801f29e:	485e      	ldr	r0, [pc, #376]	; (801f418 <SFU_IMG_RollbackFWUpdate+0x1f0>)
    TRACE("\n\rRollback Failed, backup fingerprint does not match original");
 801f2a0:	f009 fc54 	bl	8028b4c <iprintf>
 801f2a4:	e7d8      	b.n	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
    TRACE("\n\rCheck for header at 0x%08x", *pHdr);
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	4621      	mov	r1, r4
 801f2aa:	9302      	str	r3, [sp, #8]
 801f2ac:	f009 fc4e 	bl	8028b4c <iprintf>
    sfu_result =  SFU_LL_FLASH_Read(Buffer, *pHdr, sizeof(Buffer));
 801f2b0:	2204      	movs	r2, #4
 801f2b2:	4621      	mov	r1, r4
 801f2b4:	a805      	add	r0, sp, #20
 801f2b6:	f001 f9f5 	bl	80206a4 <SFU_LL_FLASH_Read>
    if(sfu_result==SFU_SUCCESS)
 801f2ba:	4548      	cmp	r0, r9
    sfu_result =  SFU_LL_FLASH_Read(Buffer, *pHdr, sizeof(Buffer));
 801f2bc:	4605      	mov	r5, r0
    if(sfu_result==SFU_SUCCESS)
 801f2be:	9b02      	ldr	r3, [sp, #8]
 801f2c0:	d1e5      	bne.n	801f28e <SFU_IMG_RollbackFWUpdate+0x66>
      result = memcmp(Buffer, SBMAGIC, sizeof(SBMAGIC)-1);
 801f2c2:	2204      	movs	r2, #4
 801f2c4:	4955      	ldr	r1, [pc, #340]	; (801f41c <SFU_IMG_RollbackFWUpdate+0x1f4>)
 801f2c6:	a805      	add	r0, sp, #20
 801f2c8:	f009 fb68 	bl	802899c <memcmp>
      *pHdr -= SFU_IMG_SWAP_REGION_SIZE;
 801f2cc:	ebaa 030b 	sub.w	r3, sl, fp
 801f2d0:	43db      	mvns	r3, r3
      result = memcmp(Buffer, SBMAGIC, sizeof(SBMAGIC)-1);
 801f2d2:	4606      	mov	r6, r0
      *pHdr -= SFU_IMG_SWAP_REGION_SIZE;
 801f2d4:	441c      	add	r4, r3
 801f2d6:	e7d8      	b.n	801f28a <SFU_IMG_RollbackFWUpdate+0x62>
    TRACE("\n\rStarting Rollback, Fingerprint OK");
 801f2d8:	4851      	ldr	r0, [pc, #324]	; (801f420 <SFU_IMG_RollbackFWUpdate+0x1f8>)
 801f2da:	f009 fc37 	bl	8028b4c <iprintf>
  uint32_t PageOffset = ((sizeof(SE_FwRawHeaderTypeDef) + pHdr->FwSize) / PAGE_SIZE) * PAGE_SIZE;
 801f2de:	68a7      	ldr	r7, [r4, #8]
  TRACE("\n\rRollback ");
 801f2e0:	4850      	ldr	r0, [pc, #320]	; (801f424 <SFU_IMG_RollbackFWUpdate+0x1fc>)
 801f2e2:	f009 fc33 	bl	8028b4c <iprintf>
  uint32_t PageOffset = ((sizeof(SE_FwRawHeaderTypeDef) + pHdr->FwSize) / PAGE_SIZE) * PAGE_SIZE;
 801f2e6:	f507 68f4 	add.w	r8, r7, #1952	; 0x7a0
      e_sfu_result = SFU_LL_FLASH_Erase_Size(&xFlashStatus, (void*)(REGION_SLOT_0_START+PageOffset), PAGE_SIZE);
 801f2ea:	4b46      	ldr	r3, [pc, #280]	; (801f404 <SFU_IMG_RollbackFWUpdate+0x1dc>)
  uint32_t PageOffset = ((sizeof(SE_FwRawHeaderTypeDef) + pHdr->FwSize) / PAGE_SIZE) * PAGE_SIZE;
 801f2ec:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 801f2f0:	f028 080f 	bic.w	r8, r8, #15
 801f2f4:	1b1b      	subs	r3, r3, r4
  uint32_t BytesRemaining = sizeof(SE_FwRawHeaderTypeDef) + 3*32 + pHdr->FwSize;
 801f2f6:	f507 6900 	add.w	r9, r7, #2048	; 0x800
 801f2fa:	44a0      	add	r8, r4
  while(BytesRemaining>0)
 801f2fc:	46a2      	mov	sl, r4
 801f2fe:	9302      	str	r3, [sp, #8]
 801f300:	f1b9 0f00 	cmp.w	r9, #0
 801f304:	d10c      	bne.n	801f320 <SFU_IMG_RollbackFWUpdate+0xf8>
  TRACE("\n\rDone");
 801f306:	4848      	ldr	r0, [pc, #288]	; (801f428 <SFU_IMG_RollbackFWUpdate+0x200>)
 801f308:	f009 fc20 	bl	8028b4c <iprintf>
    gRollbackDone = 1;
 801f30c:	9a01      	ldr	r2, [sp, #4]
 801f30e:	2301      	movs	r3, #1
 801f310:	7013      	strb	r3, [r2, #0]
    e_sfu_result = SFU_IMG_EraseDownloadedImg();
 801f312:	f7ff fe9d 	bl	801f050 <SFU_IMG_EraseDownloadedImg>
}
 801f316:	f50d 5d81 	add.w	sp, sp, #4128	; 0x1020
 801f31a:	b007      	add	sp, #28
 801f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t BytesToCopy = BytesRemaining%PAGE_SIZE;
 801f320:	f3c9 070b 	ubfx	r7, r9, #0, #12
    if(BytesToCopy==0)
 801f324:	b32f      	cbz	r7, 801f372 <SFU_IMG_RollbackFWUpdate+0x14a>
      memset(Buffer, 0x00, sizeof(Buffer));
 801f326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f32a:	2100      	movs	r1, #0
 801f32c:	a80e      	add	r0, sp, #56	; 0x38
 801f32e:	f009 fb4f 	bl	80289d0 <memset>
    e_sfu_result = SFU_LL_FLASH_Read((void*) Buffer, (void*)(((uint8_t*) pHdr)+PageOffset), BytesToCopy);
 801f332:	463a      	mov	r2, r7
 801f334:	4641      	mov	r1, r8
 801f336:	a80e      	add	r0, sp, #56	; 0x38
 801f338:	f001 f9b4 	bl	80206a4 <SFU_LL_FLASH_Read>
    if(e_sfu_result == SFU_SUCCESS)
 801f33c:	42a8      	cmp	r0, r5
 801f33e:	d18b      	bne.n	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
 801f340:	9b02      	ldr	r3, [sp, #8]
 801f342:	eb03 0b08 	add.w	fp, r3, r8
      e_sfu_result = SFU_LL_FLASH_Erase_Size(&xFlashStatus, (void*)(REGION_SLOT_0_START+PageOffset), PAGE_SIZE);
 801f346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f34a:	4659      	mov	r1, fp
 801f34c:	a805      	add	r0, sp, #20
 801f34e:	f001 fa71 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
      if((void*)(((uint8_t*) pHdr)+PageOffset) == pTempHdr)
 801f352:	45d0      	cmp	r8, sl
 801f354:	d110      	bne.n	801f378 <SFU_IMG_RollbackFWUpdate+0x150>
 801f356:	9003      	str	r0, [sp, #12]
        memset(pTempHdr->UpdateSourceFingerprint, 0x00, sizeof(pTempHdr->UpdateSourceFingerprint));
 801f358:	2220      	movs	r2, #32
 801f35a:	2100      	movs	r1, #0
 801f35c:	f50d 60f7 	add.w	r0, sp, #1976	; 0x7b8
 801f360:	f009 fb36 	bl	80289d0 <memset>
    if(e_sfu_result == SFU_SUCCESS)
 801f364:	9b03      	ldr	r3, [sp, #12]
 801f366:	42ab      	cmp	r3, r5
 801f368:	f47f af76 	bne.w	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
        pTempHdr = (SE_FwRawHeaderTypeDef*) Buffer;
 801f36c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801f370:	e006      	b.n	801f380 <SFU_IMG_RollbackFWUpdate+0x158>
      BytesToCopy = PAGE_SIZE;
 801f372:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801f376:	e7dc      	b.n	801f332 <SFU_IMG_RollbackFWUpdate+0x10a>
    if(e_sfu_result == SFU_SUCCESS)
 801f378:	42a8      	cmp	r0, r5
 801f37a:	f47f af6d 	bne.w	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
      if (1 == isHeader)
 801f37e:	b1fe      	cbz	r6, 801f3c0 <SFU_IMG_RollbackFWUpdate+0x198>
    	  e_sfu_result = SFU_LL_FLASH_Write(&xFlashStatus, (void*)(REGION_SLOT_0_START+PageOffset), (void*)Buffer, PAGE_SIZE/2);
 801f380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f384:	aa0e      	add	r2, sp, #56	; 0x38
 801f386:	4659      	mov	r1, fp
 801f388:	a805      	add	r0, sp, #20
 801f38a:	f001 f929 	bl	80205e0 <SFU_LL_FLASH_Write>
        if (SFU_SUCCESS == e_sfu_result)
 801f38e:	42a8      	cmp	r0, r5
 801f390:	f47f af62 	bne.w	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
          e_sfu_result = SFU_LL_FLASH_Write(&xFlashStatus, (void*)(REGION_SLOT_0_START+PageOffset+PAGE_SIZE/2), (void*)(Buffer+(PAGE_SIZE/2)), PAGE_SIZE/2);
 801f394:	4925      	ldr	r1, [pc, #148]	; (801f42c <SFU_IMG_RollbackFWUpdate+0x204>)
 801f396:	1b09      	subs	r1, r1, r4
 801f398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f39c:	f60d 0238 	addw	r2, sp, #2104	; 0x838
 801f3a0:	4441      	add	r1, r8
 801f3a2:	a805      	add	r0, sp, #20
 801f3a4:	f001 f91c 	bl	80205e0 <SFU_LL_FLASH_Write>
 801f3a8:	2601      	movs	r6, #1
    if(e_sfu_result == SFU_SUCCESS)
 801f3aa:	42a8      	cmp	r0, r5
 801f3ac:	f5a8 5880 	sub.w	r8, r8, #4096	; 0x1000
 801f3b0:	f47f af52 	bne.w	801f258 <SFU_IMG_RollbackFWUpdate+0x30>
	TRACE(".");
 801f3b4:	202e      	movs	r0, #46	; 0x2e
      BytesRemaining-=BytesToCopy;
 801f3b6:	eba9 0907 	sub.w	r9, r9, r7
	TRACE(".");
 801f3ba:	f009 fbdf 	bl	8028b7c <putchar>
 801f3be:	e79f      	b.n	801f300 <SFU_IMG_RollbackFWUpdate+0xd8>
    	  e_sfu_result = SFU_LL_FLASH_Write(&xFlashStatus, (void*)(REGION_SLOT_0_START+PageOffset), (void*)Buffer, BytesToCopy);
 801f3c0:	463b      	mov	r3, r7
 801f3c2:	aa0e      	add	r2, sp, #56	; 0x38
 801f3c4:	4659      	mov	r1, fp
 801f3c6:	a805      	add	r0, sp, #20
 801f3c8:	f001 f90a 	bl	80205e0 <SFU_LL_FLASH_Write>
 801f3cc:	e7ed      	b.n	801f3aa <SFU_IMG_RollbackFWUpdate+0x182>
  if((result==0) && (sfu_result == SFU_SUCCESS))
 801f3ce:	4b0e      	ldr	r3, [pc, #56]	; (801f408 <SFU_IMG_RollbackFWUpdate+0x1e0>)
 801f3d0:	429d      	cmp	r5, r3
 801f3d2:	f47f af64 	bne.w	801f29e <SFU_IMG_RollbackFWUpdate+0x76>
    *pHdr += SFU_IMG_SWAP_REGION_SIZE;
 801f3d6:	443c      	add	r4, r7
    TRACE("\n\rHeader found at 0x%08x", *pHdr);
 801f3d8:	4621      	mov	r1, r4
 801f3da:	4815      	ldr	r0, [pc, #84]	; (801f430 <SFU_IMG_RollbackFWUpdate+0x208>)
 801f3dc:	f009 fbb6 	bl	8028b4c <iprintf>
  e_sfu_result = SFU_IMG_CheckUpdateSourceFingerprint((SE_FwRawHeaderTypeDef*) Buffer, (SE_FwRawHeaderTypeDef*) pHdr);
 801f3e0:	4621      	mov	r1, r4
 801f3e2:	a80e      	add	r0, sp, #56	; 0x38
 801f3e4:	f7ff fec8 	bl	801f178 <SFU_IMG_CheckUpdateSourceFingerprint>
  memset(Buffer, 0x00, sizeof(Buffer));
 801f3e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  e_sfu_result = SFU_IMG_CheckUpdateSourceFingerprint((SE_FwRawHeaderTypeDef*) Buffer, (SE_FwRawHeaderTypeDef*) pHdr);
 801f3ec:	4607      	mov	r7, r0
  memset(Buffer, 0x00, sizeof(Buffer));
 801f3ee:	4631      	mov	r1, r6
 801f3f0:	a80e      	add	r0, sp, #56	; 0x38
 801f3f2:	f009 faed 	bl	80289d0 <memset>
  if(SFU_SUCCESS != e_sfu_result)
 801f3f6:	42af      	cmp	r7, r5
 801f3f8:	f43f af6e 	beq.w	801f2d8 <SFU_IMG_RollbackFWUpdate+0xb0>
    TRACE("\n\rRollback Failed, backup fingerprint does not match original");
 801f3fc:	480d      	ldr	r0, [pc, #52]	; (801f434 <SFU_IMG_RollbackFWUpdate+0x20c>)
 801f3fe:	e74f      	b.n	801f2a0 <SFU_IMG_RollbackFWUpdate+0x78>
 801f400:	200314f8 	.word	0x200314f8
 801f404:	08105000 	.word	0x08105000
 801f408:	00122f11 	.word	0x00122f11
 801f40c:	080f1000 	.word	0x080f1000
 801f410:	0802c4f9 	.word	0x0802c4f9
 801f414:	08036000 	.word	0x08036000
 801f418:	0802c52f 	.word	0x0802c52f
 801f41c:	0802c31c 	.word	0x0802c31c
 801f420:	0802c580 	.word	0x0802c580
 801f424:	0802c5a4 	.word	0x0802c5a4
 801f428:	0802c5b0 	.word	0x0802c5b0
 801f42c:	08105800 	.word	0x08105800
 801f430:	0802c516 	.word	0x0802c516
 801f434:	0802c542 	.word	0x0802c542
 801f438:	081dffff 	.word	0x081dffff
 801f43c:	081d5000 	.word	0x081d5000

0801f440 <SFU_IMG_CheckImageState>:
{
 801f440:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SE_FwStateTypeDef eImageState = FWIMG_STATE_UNKNOWN;
 801f442:	a902      	add	r1, sp, #8
 801f444:	2304      	movs	r3, #4
 801f446:	f801 3d06 	strb.w	r3, [r1, #-6]!
  e_ret_status_se = SE_SFU_IMG_GetActiveFwState(&eSE_Status, &eImageState);
 801f44a:	eb0d 0003 	add.w	r0, sp, r3
 801f44e:	f7fc f9f5 	bl	801b83c <SE_SFU_IMG_GetActiveFwState>
  if(e_ret_status_se == SE_SUCCESS)
 801f452:	4b23      	ldr	r3, [pc, #140]	; (801f4e0 <SFU_IMG_CheckImageState+0xa0>)
 801f454:	4298      	cmp	r0, r3
  e_ret_status_se = SE_SFU_IMG_GetActiveFwState(&eSE_Status, &eImageState);
 801f456:	4604      	mov	r4, r0
  if(e_ret_status_se == SE_SUCCESS)
 801f458:	d124      	bne.n	801f4a4 <SFU_IMG_CheckImageState+0x64>
    TRACE("\r\n=         SFU_IMG_CheckImageState Image State = %d", eImageState);
 801f45a:	f89d 1002 	ldrb.w	r1, [sp, #2]
 801f45e:	4821      	ldr	r0, [pc, #132]	; (801f4e4 <SFU_IMG_CheckImageState+0xa4>)
 801f460:	f009 fb74 	bl	8028b4c <iprintf>
    switch(eImageState)
 801f464:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801f468:	2b02      	cmp	r3, #2
 801f46a:	d01f      	beq.n	801f4ac <SFU_IMG_CheckImageState+0x6c>
 801f46c:	2b03      	cmp	r3, #3
 801f46e:	d003      	beq.n	801f478 <SFU_IMG_CheckImageState+0x38>
 801f470:	2b01      	cmp	r3, #1
 801f472:	d12c      	bne.n	801f4ce <SFU_IMG_CheckImageState+0x8e>
        e_ret_status_sfu = SFU_SUCCESS;
 801f474:	481c      	ldr	r0, [pc, #112]	; (801f4e8 <SFU_IMG_CheckImageState+0xa8>)
  return e_ret_status_sfu;
 801f476:	e017      	b.n	801f4a8 <SFU_IMG_CheckImageState+0x68>
        SE_FwStateTypeDef eTmpImageState = FWIMG_STATE_SELFTEST;
 801f478:	ad02      	add	r5, sp, #8
 801f47a:	2102      	movs	r1, #2
 801f47c:	f805 1d05 	strb.w	r1, [r5, #-5]!
        TRACE("\r\n=         SFU_IMG_CheckImageState Setting Image State to %d", eTmpImageState);
 801f480:	481a      	ldr	r0, [pc, #104]	; (801f4ec <SFU_IMG_CheckImageState+0xac>)
 801f482:	f009 fb63 	bl	8028b4c <iprintf>
        e_ret_status_se = SE_SFU_IMG_SetActiveFwState(&eSE_Status, &eTmpImageState);
 801f486:	4629      	mov	r1, r5
 801f488:	a801      	add	r0, sp, #4
 801f48a:	f7fc f9b1 	bl	801b7f0 <SE_SFU_IMG_SetActiveFwState>
        if(e_ret_status_se == SE_SUCCESS)
 801f48e:	42a0      	cmp	r0, r4
        e_ret_status_se = SE_SFU_IMG_SetActiveFwState(&eSE_Status, &eTmpImageState);
 801f490:	4601      	mov	r1, r0
        if(e_ret_status_se == SE_SUCCESS)
 801f492:	d103      	bne.n	801f49c <SFU_IMG_CheckImageState+0x5c>
          TRACE("\r\n=         OK");
 801f494:	4816      	ldr	r0, [pc, #88]	; (801f4f0 <SFU_IMG_CheckImageState+0xb0>)
 801f496:	f009 fb59 	bl	8028b4c <iprintf>
 801f49a:	e7eb      	b.n	801f474 <SFU_IMG_CheckImageState+0x34>
          TRACE("\r\n=         FAILED (se return status) 0x%08x, (se status) 0x%08x", e_ret_status_se, eSE_Status);
 801f49c:	9a01      	ldr	r2, [sp, #4]
 801f49e:	4815      	ldr	r0, [pc, #84]	; (801f4f4 <SFU_IMG_CheckImageState+0xb4>)
 801f4a0:	f009 fb54 	bl	8028b4c <iprintf>
    e_ret_status_sfu = SFU_ERROR;
 801f4a4:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 801f4a8:	b003      	add	sp, #12
 801f4aa:	bd30      	pop	{r4, r5, pc}
        SE_FwStateTypeDef eTmpImageState = FWIMG_STATE_INVALID;
 801f4ac:	ad02      	add	r5, sp, #8
 801f4ae:	2100      	movs	r1, #0
 801f4b0:	f805 1d05 	strb.w	r1, [r5, #-5]!
        TRACE("\r\n=         SFU_IMG_CheckImageState Setting Image State to %d", eTmpImageState);
 801f4b4:	480d      	ldr	r0, [pc, #52]	; (801f4ec <SFU_IMG_CheckImageState+0xac>)
 801f4b6:	f009 fb49 	bl	8028b4c <iprintf>
        e_ret_status_se = SE_SFU_IMG_SetActiveFwState(&eSE_Status, &eTmpImageState);
 801f4ba:	4629      	mov	r1, r5
 801f4bc:	a801      	add	r0, sp, #4
 801f4be:	f7fc f997 	bl	801b7f0 <SE_SFU_IMG_SetActiveFwState>
        if(e_ret_status_se == SE_SUCCESS)
 801f4c2:	42a0      	cmp	r0, r4
        e_ret_status_se = SE_SFU_IMG_SetActiveFwState(&eSE_Status, &eTmpImageState);
 801f4c4:	4601      	mov	r1, r0
        if(e_ret_status_se == SE_SUCCESS)
 801f4c6:	d105      	bne.n	801f4d4 <SFU_IMG_CheckImageState+0x94>
          TRACE("\r\n=         OK");
 801f4c8:	4809      	ldr	r0, [pc, #36]	; (801f4f0 <SFU_IMG_CheckImageState+0xb0>)
 801f4ca:	f009 fb3f 	bl	8028b4c <iprintf>
        SFU_IMG_RollbackFWUpdate();
 801f4ce:	f7ff feab 	bl	801f228 <SFU_IMG_RollbackFWUpdate>
 801f4d2:	e7e7      	b.n	801f4a4 <SFU_IMG_CheckImageState+0x64>
          TRACE("\r\n=         FAILED (se return status) 0x%08x, (se status) 0x%08x", e_ret_status_se, eSE_Status);
 801f4d4:	9a01      	ldr	r2, [sp, #4]
 801f4d6:	4807      	ldr	r0, [pc, #28]	; (801f4f4 <SFU_IMG_CheckImageState+0xb4>)
 801f4d8:	f009 fb38 	bl	8028b4c <iprintf>
 801f4dc:	e7f7      	b.n	801f4ce <SFU_IMG_CheckImageState+0x8e>
 801f4de:	bf00      	nop
 801f4e0:	0012310f 	.word	0x0012310f
 801f4e4:	0802c5b7 	.word	0x0802c5b7
 801f4e8:	00122f11 	.word	0x00122f11
 801f4ec:	0802c5ec 	.word	0x0802c5ec
 801f4f0:	0802c62a 	.word	0x0802c62a
 801f4f4:	0802c639 	.word	0x0802c639

0801f4f8 <SFU_KMS_BlobToInstall>:
/**
  * @brief  Check that there is a Blob to Install ==> KMSB MAGIC present in SWAP ?
  * @retval SFU_SUCCESS if Image can be installed, a SFU_ERROR  otherwise.
  */
SFU_ErrorStatus SFU_KMS_BlobToInstall(void)
{
 801f4f8:	b510      	push	{r4, lr}
   * The KMS blob header uses a structure dedicated Header.
   * In this function we focus only on the KMS blob header, not the entire KMS blob.
   */

  /*  Loading the KMS blob header contained in the SWAP area to verify if it can be a valid KMS blob */
  e_ret_status = SFU_LL_FLASH_Read(&kmsblob_image_header_to_test, pbuffer, sizeof(KMS_BlobRawHeaderTypeDef));
 801f4fa:	22c0      	movs	r2, #192	; 0xc0
 801f4fc:	4909      	ldr	r1, [pc, #36]	; (801f524 <SFU_KMS_BlobToInstall+0x2c>)
 801f4fe:	480a      	ldr	r0, [pc, #40]	; (801f528 <SFU_KMS_BlobToInstall+0x30>)
 801f500:	f001 f8d0 	bl	80206a4 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 801f504:	4b09      	ldr	r3, [pc, #36]	; (801f52c <SFU_KMS_BlobToInstall+0x34>)
 801f506:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_Read(&kmsblob_image_header_to_test, pbuffer, sizeof(KMS_BlobRawHeaderTypeDef));
 801f508:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 801f50a:	d109      	bne.n	801f520 <SFU_KMS_BlobToInstall+0x28>
  {
    /* Is there any KMSBlob present in the SWAP ? */
    if (memcmp(&kmsblob_image_header_to_test, kms_magic, sizeof(kms_magic)) == 0)
 801f50c:	2204      	movs	r2, #4
 801f50e:	4908      	ldr	r1, [pc, #32]	; (801f530 <SFU_KMS_BlobToInstall+0x38>)
 801f510:	4805      	ldr	r0, [pc, #20]	; (801f528 <SFU_KMS_BlobToInstall+0x30>)
 801f512:	f009 fa43 	bl	802899c <memcmp>
      /* e_ret_status = SFU_KMS_AUTHENTICATE_BLOB_HEADER(&fw_image_header_to_test, 2); */
      e_ret_status = SFU_SUCCESS;
    }
    else
    {
      e_ret_status = SFU_ERROR;
 801f516:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801f51a:	2800      	cmp	r0, #0
 801f51c:	bf18      	it	ne
 801f51e:	461c      	movne	r4, r3
    }
  }

  return e_ret_status;
}
 801f520:	4620      	mov	r0, r4
 801f522:	bd10      	pop	{r4, pc}
 801f524:	08036000 	.word	0x08036000
 801f528:	20032d88 	.word	0x20032d88
 801f52c:	00122f11 	.word	0x00122f11
 801f530:	200300b4 	.word	0x200300b4

0801f534 <SFU_KMS_GetBlobInstallInfo>:
  * @retval none
  */
uint8_t *SFU_KMS_GetBlobInstallInfo(void)
{
  return ((uint8_t *) &kmsblob_image_header_to_test);
}
 801f534:	4800      	ldr	r0, [pc, #0]	; (801f538 <SFU_KMS_GetBlobInstallInfo+0x4>)
 801f536:	4770      	bx	lr
 801f538:	20032d88 	.word	0x20032d88

0801f53c <SFU_KMS_EraseBlob>:
/**
  * @brief  Erase the Blob
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_KMS_EraseBlob(void)
{
 801f53c:	b507      	push	{r0, r1, r2, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SFU_FLASH_StatusTypeDef flash_if_status;

  /*  Erase in flash  */
  e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, SFU_IMG_SLOT_DWL_REGION_BEGIN, SFU_IMG_SLOT_DWL_REGION_SIZE);
 801f53e:	4905      	ldr	r1, [pc, #20]	; (801f554 <SFU_KMS_EraseBlob+0x18>)
 801f540:	4a05      	ldr	r2, [pc, #20]	; (801f558 <SFU_KMS_EraseBlob+0x1c>)
 801f542:	f10d 0007 	add.w	r0, sp, #7
 801f546:	1a52      	subs	r2, r2, r1
 801f548:	f001 f974 	bl	8020834 <SFU_LL_FLASH_Erase_Size>

  return e_ret_status;
}
 801f54c:	b003      	add	sp, #12
 801f54e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f552:	bf00      	nop
 801f554:	08036000 	.word	0x08036000
 801f558:	080f1000 	.word	0x080f1000

0801f55c <SFU_KMS_CheckPendingBlobInstallation>:
  *         If a KMS blob is present then it is copied in fw_image_header_to_test.
  * @param  None.
  * @retval SFU_KMS_BlobInstallStateTypeDef Pending Installation status (installation requested or not)
  */
SFU_KMS_BlobInstallStateTypeDef SFU_KMS_CheckPendingBlobInstallation(void)
{
 801f55c:	b508      	push	{r3, lr}

  /*
   * While the SWAP AREA contains a KMSB Magic, it means the KMSBlob installation is not finalized.
   *
   */
  if (SFU_SUCCESS == SFU_KMS_BlobToInstall())
 801f55e:	f7ff ffcb 	bl	801f4f8 <SFU_KMS_BlobToInstall>
    /* No pending update */
    e_ret_state = SFU_KMS_NO_BLOBUPDATE;
  }

  return e_ret_state;
}
 801f562:	4b02      	ldr	r3, [pc, #8]	; (801f56c <SFU_KMS_CheckPendingBlobInstallation+0x10>)
 801f564:	1ac0      	subs	r0, r0, r3
 801f566:	bf18      	it	ne
 801f568:	2001      	movne	r0, #1
 801f56a:	bd08      	pop	{r3, pc}
 801f56c:	00122f11 	.word	0x00122f11

0801f570 <SFU_LOADER_Init>:
          SFU_COM_YMODEM_PACKET_1K_SIZE);
    return SFU_ERROR;
  } /* else the FW Header Length is fine with regards to FLASH constraints */

  return SFU_SUCCESS;
}
 801f570:	4800      	ldr	r0, [pc, #0]	; (801f574 <SFU_LOADER_Init+0x4>)
 801f572:	4770      	bx	lr
 801f574:	00122f11 	.word	0x00122f11

0801f578 <SFU_LOADER_DeInit>:
 801f578:	4800      	ldr	r0, [pc, #0]	; (801f57c <SFU_LOADER_DeInit+0x4>)
 801f57a:	4770      	bx	lr
 801f57c:	00122f11 	.word	0x00122f11

0801f580 <SFU_LOADER_DownloadNewUserFw>:
  * @param  puSize: Size of the downloaded image.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LOADER_DownloadNewUserFw(SFU_LOADER_StatusTypeDef *peSFU_LOADER_Status,
                                             SFU_FwImageFlashTypeDef *p_FwImageFlashData, uint32_t *puSize)
{
 801f580:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 801f582:	2301      	movs	r3, #1
{
 801f584:	460e      	mov	r6, r1
 801f586:	4615      	mov	r5, r2
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 801f588:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Check the pointers allocation */
  if ((peSFU_LOADER_Status == NULL) || (puSize == NULL) || p_FwImageFlashData == NULL)
 801f58c:	4604      	mov	r4, r0
 801f58e:	b1b8      	cbz	r0, 801f5c0 <SFU_LOADER_DownloadNewUserFw+0x40>
 801f590:	b1b2      	cbz	r2, 801f5c0 <SFU_LOADER_DownloadNewUserFw+0x40>
 801f592:	b1a9      	cbz	r1, 801f5c0 <SFU_LOADER_DownloadNewUserFw+0x40>
  {
    return SFU_ERROR;
  }

  /* Set it to OK by default then log the error in case of issue */
  *peSFU_LOADER_Status = SFU_LOADER_OK;
 801f594:	2300      	movs	r3, #0
 801f596:	7003      	strb	r3, [r0, #0]

  /* Refresh Watchdog */
  SFU_LL_SECU_IWDG_Refresh();
 801f598:	f001 fab6 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>

  /* Transfert FW Image via YMODEM protocol */
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 801f59c:	480d      	ldr	r0, [pc, #52]	; (801f5d4 <SFU_LOADER_DownloadNewUserFw+0x54>)
 801f59e:	f009 fad5 	bl	8028b4c <iprintf>

  /* Assign the download flash address to be used during the YMODEM process */
  m_uDwlAreaStart =  p_FwImageFlashData->DownloadAddr;
 801f5a2:	4b0d      	ldr	r3, [pc, #52]	; (801f5d8 <SFU_LOADER_DownloadNewUserFw+0x58>)
 801f5a4:	6872      	ldr	r2, [r6, #4]
 801f5a6:	601a      	str	r2, [r3, #0]
  m_uDwlAreaSize =  p_FwImageFlashData->MaxSizeInBytes;

  /* Receive the FW in RAM and write it in the Flash*/
  if (SFU_COM_YMODEM_Receive(&e_com_status, puSize) != SFU_SUCCESS)
 801f5a8:	4629      	mov	r1, r5
  m_uDwlAreaSize =  p_FwImageFlashData->MaxSizeInBytes;
 801f5aa:	6832      	ldr	r2, [r6, #0]
 801f5ac:	605a      	str	r2, [r3, #4]
  if (SFU_COM_YMODEM_Receive(&e_com_status, puSize) != SFU_SUCCESS)
 801f5ae:	f10d 0007 	add.w	r0, sp, #7
 801f5b2:	f7fd fe31 	bl	801d218 <SFU_COM_YMODEM_Receive>
 801f5b6:	4b09      	ldr	r3, [pc, #36]	; (801f5dc <SFU_LOADER_DownloadNewUserFw+0x5c>)
 801f5b8:	4298      	cmp	r0, r3
 801f5ba:	d005      	beq.n	801f5c8 <SFU_LOADER_DownloadNewUserFw+0x48>
  {
    /*Download did not complete successfully*/
    *peSFU_LOADER_Status = SFU_LOADER_ERR_COM;
 801f5bc:	2302      	movs	r3, #2
  else
  {
    if (*puSize <= 0U)
    {
      /*Download file size is not correct*/
      *peSFU_LOADER_Status = SFU_LOADER_ERR_DOWNLOAD;
 801f5be:	7023      	strb	r3, [r4, #0]
    return SFU_ERROR;
 801f5c0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
    }
  }


  return e_ret_status;
}
 801f5c4:	b002      	add	sp, #8
 801f5c6:	bd70      	pop	{r4, r5, r6, pc}
    if (*puSize <= 0U)
 801f5c8:	682b      	ldr	r3, [r5, #0]
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d1fa      	bne.n	801f5c4 <SFU_LOADER_DownloadNewUserFw+0x44>
      *peSFU_LOADER_Status = SFU_LOADER_ERR_DOWNLOAD;
 801f5ce:	2306      	movs	r3, #6
 801f5d0:	e7f5      	b.n	801f5be <SFU_LOADER_DownloadNewUserFw+0x3e>
 801f5d2:	bf00      	nop
 801f5d4:	0802c67a 	.word	0x0802c67a
 801f5d8:	200314fc 	.word	0x200314fc
 801f5dc:	00122f11 	.word	0x00122f11

0801f5e0 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize: Dimension of the file that will be received.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_YMODEM_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 801f5e0:	b508      	push	{r3, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 801f5e2:	4b07      	ldr	r3, [pc, #28]	; (801f600 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x20>)
 801f5e4:	2200      	movs	r2, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 801f5e6:	e9c3 2002 	strd	r2, r0, [r3, #8]

  /*Compute the number of 1K blocks */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 801f5ea:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 801f5ee:	0a80      	lsrs	r0, r0, #10
 801f5f0:	6118      	str	r0, [r3, #16]

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 801f5f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801f5f6:	f001 fbed 	bl	8020dd4 <HAL_Delay>

  return SFU_SUCCESS;
}
 801f5fa:	4802      	ldr	r0, [pc, #8]	; (801f604 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x24>)
 801f5fc:	bd08      	pop	{r3, pc}
 801f5fe:	bf00      	nop
 801f600:	200314fc 	.word	0x200314fc
 801f604:	00122f11 	.word	0x00122f11

0801f608 <SFU_COM_YMODEM_DataPktRxCpltCallback>:
  * @param  pData: Pointer to the buffer.
  * @param  uSize: Packet dimension.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_YMODEM_DataPktRxCpltCallback(uint8_t *pData, uint32_t uSize)
{
 801f608:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f60c:	460d      	mov	r5, r1
  static uint32_t uSizeBuffered = 0;
  static uint8_t *pBuffer = NULL;
#endif /* SECBOOT_X509_ECDSA_WITHOUT_ENCRYPT_SHA256 */

  /* Check the pointers allocation */
  if (pData == NULL)
 801f60e:	4606      	mov	r6, r0
 801f610:	2800      	cmp	r0, #0
 801f612:	f000 8102 	beq.w	801f81a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x212>
  {
    return SFU_ERROR;
  }

  /*Increase the number of received packets*/
  m_uPacketsReceived++;
 801f616:	4c82      	ldr	r4, [pc, #520]	; (801f820 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x218>)
 801f618:	68a3      	ldr	r3, [r4, #8]

  /* Last packet : size of data to write could be different than SFU_COM_YMODEM_PACKET_1K_SIZE */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 801f61a:	6922      	ldr	r2, [r4, #16]
  m_uPacketsReceived++;
 801f61c:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 801f61e:	4293      	cmp	r3, r2
  m_uPacketsReceived++;
 801f620:	60a3      	str	r3, [r4, #8]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 801f622:	d106      	bne.n	801f632 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x2a>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % SFU_COM_YMODEM_PACKET_1K_SIZE))
 801f624:	68e5      	ldr	r5, [r4, #12]
 801f626:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = SFU_COM_YMODEM_PACKET_1K_SIZE;
 801f62a:	2d00      	cmp	r5, #0
 801f62c:	bf08      	it	eq
 801f62e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    }
  }

#if (SECBOOT_CRYPTO_SCHEME == SECBOOT_X509_ECDSA_WITHOUT_ENCRYPT_SHA256)
  /* In this scheme the header is larger than 1k so we need to receive 2 packets to have the whole header */
  if (m_uPacketsReceived == 1)
 801f632:	2b01      	cmp	r3, #1
 801f634:	d113      	bne.n	801f65e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x56>
  {
    /* 1st packet -> part of header
       we need to buffer it and wait for 2nd packet with the rest of the header */

    /* if buffer was allocated in past free it and start again */
    if (NULL != pBuffer)
 801f636:	6960      	ldr	r0, [r4, #20]
 801f638:	b108      	cbz	r0, 801f63e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x36>
    {
      free(pBuffer);
 801f63a:	f009 f9a7 	bl	802898c <free>
      pBuffer = NULL;
    }
    pBuffer = calloc(SFU_COM_YMODEM_PACKET_1K_SIZE * 2, sizeof(uint8_t));
 801f63e:	2101      	movs	r1, #1
 801f640:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801f644:	f009 f968 	bl	8028918 <calloc>
    if (NULL == pBuffer)
    {
      e_ret_status = SFU_ERROR;
    }
    memcpy(pBuffer, pData, uSize);
 801f648:	4631      	mov	r1, r6
 801f64a:	462a      	mov	r2, r5
    uSizeBuffered = uSize;

    /* can't do anything yet, return and expect 2nd packet */
    return SFU_SUCCESS;
 801f64c:	4e75      	ldr	r6, [pc, #468]	; (801f824 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x21c>)
    pBuffer = calloc(SFU_COM_YMODEM_PACKET_1K_SIZE * 2, sizeof(uint8_t));
 801f64e:	6160      	str	r0, [r4, #20]
    memcpy(pBuffer, pData, uSize);
 801f650:	f009 f9b3 	bl	80289ba <memcpy>
    uSizeBuffered = uSize;
 801f654:	61a5      	str	r5, [r4, #24]
    m_uPacketsReceived = 0U;
    m_uNbrBlocksYmodem = 0U;
  }

  return e_ret_status;
}
 801f656:	4630      	mov	r0, r6
 801f658:	b002      	add	sp, #8
 801f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (m_uPacketsReceived == 2)
 801f65e:	2b02      	cmp	r3, #2
 801f660:	f040 80c2 	bne.w	801f7e8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1e0>
    memcpy(&pBuffer[uSizeBuffered], pData, uSize);
 801f664:	e9d4 7805 	ldrd	r7, r8, [r4, #20]
 801f668:	462a      	mov	r2, r5
 801f66a:	f8d4 9000 	ldr.w	r9, [r4]
 801f66e:	4631      	mov	r1, r6
 801f670:	eb07 0008 	add.w	r0, r7, r8
 801f674:	f009 f9a1 	bl	80289ba <memcpy>
    uSizeBuffered += uSize;
 801f678:	4445      	add	r5, r8
    memcpy(fw_header, pData, SE_FW_HEADER_TOT_LEN);
 801f67a:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801f67e:	4639      	mov	r1, r7
 801f680:	4869      	ldr	r0, [pc, #420]	; (801f828 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x220>)
    m_uDwlAreaAddress = m_uDwlAreaStart;
 801f682:	e9c4 5906 	strd	r5, r9, [r4, #24]
    memcpy(fw_header, pData, SE_FW_HEADER_TOT_LEN);
 801f686:	f009 f998 	bl	80289ba <memcpy>
  if (SE_VerifyFwRawHeaderTag(&e_se_status, p_x_fw_raw_header) != SE_ERROR)
 801f68a:	4639      	mov	r1, r7
 801f68c:	a801      	add	r0, sp, #4
 801f68e:	f000 fd0f 	bl	80200b0 <SE_VerifyFwRawHeaderTag>
 801f692:	4b66      	ldr	r3, [pc, #408]	; (801f82c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x224>)
 801f694:	4298      	cmp	r0, r3
 801f696:	d15a      	bne.n	801f74e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x146>
 801f698:	f641 76e1 	movw	r6, #8161	; 0x1fe1
  if ((m_uDwlAreaAddress < (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET)) &&
 801f69c:	6823      	ldr	r3, [r4, #0]
 801f69e:	69e1      	ldr	r1, [r4, #28]
 801f6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f6a4:	428b      	cmp	r3, r1
 801f6a6:	d91d      	bls.n	801f6e4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xdc>
 801f6a8:	194a      	adds	r2, r1, r5
 801f6aa:	4293      	cmp	r3, r2
 801f6ac:	d81a      	bhi.n	801f6e4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xdc>
    if (SFU_LL_FLASH_Write(&x_flash_info, (void *)m_uDwlAreaAddress, pData, uLength) == SFU_SUCCESS)
 801f6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f6b2:	463a      	mov	r2, r7
 801f6b4:	a801      	add	r0, sp, #4
 801f6b6:	f000 ff93 	bl	80205e0 <SFU_LL_FLASH_Write>
 801f6ba:	4b5a      	ldr	r3, [pc, #360]	; (801f824 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x21c>)
 801f6bc:	4298      	cmp	r0, r3
 801f6be:	f040 8096 	bne.w	801f7ee <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1e6>
      m_uDwlAreaAddress += uLength + ((SE_FwRawHeaderTypeDef *)fw_header)->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE;
 801f6c2:	4b5b      	ldr	r3, [pc, #364]	; (801f830 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x228>)
 801f6c4:	4a5b      	ldr	r2, [pc, #364]	; (801f834 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x22c>)
 801f6c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801f6c8:	1a9a      	subs	r2, r3, r2
 801f6ca:	fbb1 f3f2 	udiv	r3, r1, r2
 801f6ce:	fb02 1313 	mls	r3, r2, r3, r1
 801f6d2:	69e2      	ldr	r2, [r4, #28]
 801f6d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801f6d8:	4413      	add	r3, r2
 801f6da:	61e3      	str	r3, [r4, #28]
      uSize -= uLength;
 801f6dc:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
      pData += uLength;
 801f6e0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  if ((m_uDwlAreaAddress + uSize) > (m_uDwlAreaStart + m_uDwlImgSize))
 801f6e4:	69e1      	ldr	r1, [r4, #28]
 801f6e6:	6823      	ldr	r3, [r4, #0]
 801f6e8:	f8d4 27c0 	ldr.w	r2, [r4, #1984]	; 0x7c0
 801f6ec:	eb01 0c05 	add.w	ip, r1, r5
 801f6f0:	441a      	add	r2, r3
    e_ret_status = SFU_ERROR;
 801f6f2:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801f6f6:	4594      	cmp	ip, r2
 801f6f8:	bf88      	it	hi
 801f6fa:	4606      	movhi	r6, r0
  if ((uSize % (uint32_t)sizeof(SFU_LL_FLASH_write_t)) != 0)
 801f6fc:	076a      	lsls	r2, r5, #29
 801f6fe:	d009      	beq.n	801f714 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x10c>
    uSize = uSize + ((uint32_t)sizeof(SFU_LL_FLASH_write_t) - (uSize % (uint32_t)sizeof(SFU_LL_FLASH_write_t)));
 801f700:	f025 0207 	bic.w	r2, r5, #7
 801f704:	3208      	adds	r2, #8
 801f706:	443d      	add	r5, r7
      pData[uOldSize] = 0xFF;
 801f708:	f04f 0cff 	mov.w	ip, #255	; 0xff
    while (uOldSize < uSize)
 801f70c:	1be8      	subs	r0, r5, r7
 801f70e:	4282      	cmp	r2, r0
 801f710:	d870      	bhi.n	801f7f4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1ec>
 801f712:	4615      	mov	r5, r2
  if ((m_uDwlAreaAddress + uSize) > (m_uDwlAreaStart + m_uDwlAreaSize))
 801f714:	6860      	ldr	r0, [r4, #4]
 801f716:	194a      	adds	r2, r1, r5
 801f718:	4403      	add	r3, r0
 801f71a:	429a      	cmp	r2, r3
 801f71c:	d96d      	bls.n	801f7fa <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1f2>
    e_ret_status = SFU_ERROR;
 801f71e:	f641 76e1 	movw	r6, #8161	; 0x1fe1
  if (m_uPacketsReceived == 2)
 801f722:	68a5      	ldr	r5, [r4, #8]
 801f724:	2d02      	cmp	r5, #2
 801f726:	d104      	bne.n	801f732 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x12a>
    free(pBuffer);
 801f728:	6960      	ldr	r0, [r4, #20]
 801f72a:	f009 f92f 	bl	802898c <free>
    pBuffer = NULL;
 801f72e:	2300      	movs	r3, #0
 801f730:	6163      	str	r3, [r4, #20]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 801f732:	6923      	ldr	r3, [r4, #16]
 801f734:	429d      	cmp	r5, r3
    m_uPacketsReceived = 0U;
 801f736:	bf04      	itt	eq
 801f738:	2300      	moveq	r3, #0
 801f73a:	60a3      	streq	r3, [r4, #8]
  if (e_ret_status == SFU_ERROR)
 801f73c:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801f740:	429e      	cmp	r6, r3
 801f742:	d188      	bne.n	801f656 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x4e>
    m_uFileSizeYmodem = 0U;
 801f744:	2300      	movs	r3, #0
    m_uPacketsReceived = 0U;
 801f746:	e9c4 3302 	strd	r3, r3, [r4, #8]
    m_uNbrBlocksYmodem = 0U;
 801f74a:	6123      	str	r3, [r4, #16]
 801f74c:	e783      	b.n	801f656 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x4e>
    int32_t curVer = SFU_IMG_GetActiveFwVersion();
 801f74e:	f7ff fc17 	bl	801ef80 <SFU_IMG_GetActiveFwVersion>
    if ((((int32_t)p_x_fw_raw_header->FwVersion) >= curVer) && (p_x_fw_raw_header->FwVersion >=
 801f752:	88f9      	ldrh	r1, [r7, #6]
 801f754:	4288      	cmp	r0, r1
    int32_t curVer = SFU_IMG_GetActiveFwVersion();
 801f756:	4602      	mov	r2, r0
    if ((((int32_t)p_x_fw_raw_header->FwVersion) >= curVer) && (p_x_fw_raw_header->FwVersion >=
 801f758:	dc41      	bgt.n	801f7de <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1d6>
 801f75a:	2900      	cmp	r1, #0
 801f75c:	d03f      	beq.n	801f7de <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1d6>
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) >
 801f75e:	4b35      	ldr	r3, [pc, #212]	; (801f834 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x22c>)
 801f760:	4e33      	ldr	r6, [pc, #204]	; (801f830 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x228>)
 801f762:	68fa      	ldr	r2, [r7, #12]
          (SFU_IMG_SLOT_DWL_REGION_SIZE - SFU_IMG_IMAGE_OFFSET))
 801f764:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801f83c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x234>
 801f768:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801f840 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x238>
 801f76c:	f8d4 a01c 	ldr.w	sl, [r4, #28]
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) >
 801f770:	1af6      	subs	r6, r6, r3
 801f772:	fbb2 f3f6 	udiv	r3, r2, r6
 801f776:	fb06 2313 	mls	r3, r6, r3, r2
 801f77a:	693a      	ldr	r2, [r7, #16]
 801f77c:	4413      	add	r3, r2
          (SFU_IMG_SLOT_DWL_REGION_SIZE - SFU_IMG_IMAGE_OFFSET))
 801f77e:	eba8 0209 	sub.w	r2, r8, r9
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE)) >
 801f782:	4293      	cmp	r3, r2
 801f784:	d888      	bhi.n	801f698 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x90>
      memset(pHdr->FwImageState[0], 0xFF, 32);
 801f786:	2220      	movs	r2, #32
 801f788:	21ff      	movs	r1, #255	; 0xff
 801f78a:	f507 60e4 	add.w	r0, r7, #1824	; 0x720
 801f78e:	f009 f91f 	bl	80289d0 <memset>
      memset(pHdr->FwImageState[1], 0x00, 32);
 801f792:	2220      	movs	r2, #32
 801f794:	2100      	movs	r1, #0
 801f796:	f507 60e8 	add.w	r0, r7, #1856	; 0x740
 801f79a:	f009 f919 	bl	80289d0 <memset>
      memset(pHdr->FwImageState[2], 0x00, 32);
 801f79e:	2220      	movs	r2, #32
 801f7a0:	2100      	movs	r1, #0
 801f7a2:	f507 60ec 	add.w	r0, r7, #1888	; 0x760
 801f7a6:	f009 f913 	bl	80289d0 <memset>
                        (((SE_FwRawHeaderTypeDef *)fw_header)->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE) +
 801f7aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801f7ac:	fbb2 f3f6 	udiv	r3, r2, r6
 801f7b0:	fb06 2613 	mls	r6, r6, r3, r2
 801f7b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
        && (SFU_LL_FLASH_Erase_Size(&x_flash_info, (void *) m_uDwlAreaAddress, SFU_IMG_SLOT_DWL_REGION_SIZE) !=
 801f7b6:	f508 6200 	add.w	r2, r8, #2048	; 0x800
                        (((SE_FwRawHeaderTypeDef *)fw_header)->PartialFwOffset % SFU_IMG_SWAP_REGION_SIZE) +
 801f7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f7be:	441e      	add	r6, r3
        && (SFU_LL_FLASH_Erase_Size(&x_flash_info, (void *) m_uDwlAreaAddress, SFU_IMG_SLOT_DWL_REGION_SIZE) !=
 801f7c0:	eba2 0209 	sub.w	r2, r2, r9
 801f7c4:	4651      	mov	r1, sl
 801f7c6:	a801      	add	r0, sp, #4
        m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)fw_header)->PartialFwSize +
 801f7c8:	f8c4 67c0 	str.w	r6, [r4, #1984]	; 0x7c0
        && (SFU_LL_FLASH_Erase_Size(&x_flash_info, (void *) m_uDwlAreaAddress, SFU_IMG_SLOT_DWL_REGION_SIZE) !=
 801f7cc:	f001 f832 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
 801f7d0:	4e14      	ldr	r6, [pc, #80]	; (801f824 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x21c>)
      e_ret_status = SFU_ERROR;
 801f7d2:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 801f7d6:	42b0      	cmp	r0, r6
 801f7d8:	bf18      	it	ne
 801f7da:	461e      	movne	r6, r3
 801f7dc:	e75e      	b.n	801f69c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x94>
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 801f7de:	2301      	movs	r3, #1
 801f7e0:	4815      	ldr	r0, [pc, #84]	; (801f838 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x230>)
 801f7e2:	f009 f9b3 	bl	8028b4c <iprintf>
 801f7e6:	e757      	b.n	801f698 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x90>
 801f7e8:	4637      	mov	r7, r6
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
 801f7ea:	4e0e      	ldr	r6, [pc, #56]	; (801f824 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x21c>)
 801f7ec:	e756      	b.n	801f69c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x94>
      e_ret_status = SFU_ERROR;
 801f7ee:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 801f7f2:	e777      	b.n	801f6e4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xdc>
      pData[uOldSize] = 0xFF;
 801f7f4:	f805 cb01 	strb.w	ip, [r5], #1
 801f7f8:	e788      	b.n	801f70c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x104>
  if (e_ret_status == SFU_SUCCESS)
 801f7fa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 801f824 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x21c>
 801f7fe:	4546      	cmp	r6, r8
 801f800:	d18f      	bne.n	801f722 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x11a>
    if (SFU_LL_FLASH_Write(&x_flash_info, (void *)m_uDwlAreaAddress, pData, uSize) == SFU_SUCCESS)
 801f802:	462b      	mov	r3, r5
 801f804:	463a      	mov	r2, r7
 801f806:	a801      	add	r0, sp, #4
 801f808:	f000 feea 	bl	80205e0 <SFU_LL_FLASH_Write>
 801f80c:	4540      	cmp	r0, r8
 801f80e:	4606      	mov	r6, r0
 801f810:	d185      	bne.n	801f71e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x116>
      m_uDwlAreaAddress += (uSize);
 801f812:	69e3      	ldr	r3, [r4, #28]
 801f814:	441d      	add	r5, r3
 801f816:	61e5      	str	r5, [r4, #28]
 801f818:	e783      	b.n	801f722 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x11a>
    return SFU_ERROR;
 801f81a:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 801f81e:	e71a      	b.n	801f656 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x4e>
 801f820:	200314fc 	.word	0x200314fc
 801f824:	00122f11 	.word	0x00122f11
 801f828:	2003151c 	.word	0x2003151c
 801f82c:	00018799 	.word	0x00018799
 801f830:	081e0000 	.word	0x081e0000
 801f834:	081d5000 	.word	0x081d5000
 801f838:	0802c69d 	.word	0x0802c69d
 801f83c:	08036000 	.word	0x08036000
 801f840:	080f0800 	.word	0x080f0800

0801f844 <SFU_IMG_InstallAtNextReset>:
  *         This function is used by the local loader to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval SFU_SUCCESS if successful, otherwise SFU_ERROR
  */
SFU_ErrorStatus SFU_IMG_InstallAtNextReset(uint8_t *fw_header)
{
 801f844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (fw_header == NULL)
 801f846:	4605      	mov	r5, r0
 801f848:	b910      	cbnz	r0, 801f850 <SFU_IMG_InstallAtNextReset+0xc>
  {
    return SFU_ERROR;
  }
  if (WriteInstallHeader(fw_header) != SFU_SUCCESS)
  {
    return SFU_ERROR;
 801f84a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801f84e:	e014      	b.n	801f87a <SFU_IMG_InstallAtNextReset+0x36>
  ret = SFU_LL_FLASH_Erase_Size(&flash_if_info, (void *) SFU_IMG_SWAP_REGION_BEGIN_VALUE, SFU_IMG_IMAGE_OFFSET);
 801f850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f854:	490a      	ldr	r1, [pc, #40]	; (801f880 <SFU_IMG_InstallAtNextReset+0x3c>)
 801f856:	f10d 0007 	add.w	r0, sp, #7
 801f85a:	f000 ffeb 	bl	8020834 <SFU_LL_FLASH_Erase_Size>
  if (ret == SFU_SUCCESS)
 801f85e:	4b09      	ldr	r3, [pc, #36]	; (801f884 <SFU_IMG_InstallAtNextReset+0x40>)
 801f860:	4298      	cmp	r0, r3
  ret = SFU_LL_FLASH_Erase_Size(&flash_if_info, (void *) SFU_IMG_SWAP_REGION_BEGIN_VALUE, SFU_IMG_IMAGE_OFFSET);
 801f862:	4604      	mov	r4, r0
  if (ret == SFU_SUCCESS)
 801f864:	d1f1      	bne.n	801f84a <SFU_IMG_InstallAtNextReset+0x6>
    ret = SFU_LL_FLASH_Write(&flash_if_info, (void *)SFU_IMG_SWAP_REGION_BEGIN_VALUE, pfw_header, SE_FW_HEADER_TOT_LEN);
 801f866:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 801f86a:	462a      	mov	r2, r5
 801f86c:	4904      	ldr	r1, [pc, #16]	; (801f880 <SFU_IMG_InstallAtNextReset+0x3c>)
 801f86e:	f10d 0007 	add.w	r0, sp, #7
 801f872:	f000 feb5 	bl	80205e0 <SFU_LL_FLASH_Write>
  if (WriteInstallHeader(fw_header) != SFU_SUCCESS)
 801f876:	42a0      	cmp	r0, r4
 801f878:	d1e7      	bne.n	801f84a <SFU_IMG_InstallAtNextReset+0x6>
  }
  return SFU_SUCCESS;
}
 801f87a:	b003      	add	sp, #12
 801f87c:	bd30      	pop	{r4, r5, pc}
 801f87e:	bf00      	nop
 801f880:	081d5000 	.word	0x081d5000
 801f884:	00122f11 	.word	0x00122f11

0801f888 <SFU_IMG_GetDownloadAreaInfo>:
  *         installation.
  * @param  pArea pointer to area descriptor
  * @retval SFU_SUCCESS if successful, otherwise SFU_ERROR
  */
SFU_ErrorStatus SFU_IMG_GetDownloadAreaInfo(SFU_FwImageFlashTypeDef *pArea)
{
 801f888:	b538      	push	{r3, r4, r5, lr}
  SFU_ErrorStatus ret;
  if (pArea != NULL)
 801f88a:	4604      	mov	r4, r0
 801f88c:	b160      	cbz	r0, 801f8a8 <SFU_IMG_GetDownloadAreaInfo+0x20>
  {
    pArea->DownloadAddr = SFU_IMG_SLOT_DWL_REGION_BEGIN_VALUE;
 801f88e:	4d08      	ldr	r5, [pc, #32]	; (801f8b0 <SFU_IMG_GetDownloadAreaInfo+0x28>)
 801f890:	6045      	str	r5, [r0, #4]
    pArea->MaxSizeInBytes = (uint32_t)SFU_IMG_SLOT_DWL_REGION_SIZE - SFU_IMG_GetTrailerSize();
 801f892:	f7ff fac9 	bl	801ee28 <SFU_IMG_GetTrailerSize>
 801f896:	4b07      	ldr	r3, [pc, #28]	; (801f8b4 <SFU_IMG_GetDownloadAreaInfo+0x2c>)
 801f898:	1b5b      	subs	r3, r3, r5
 801f89a:	1a18      	subs	r0, r3, r0
 801f89c:	6020      	str	r0, [r4, #0]
    pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 801f89e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    ret =  SFU_SUCCESS;
 801f8a2:	4805      	ldr	r0, [pc, #20]	; (801f8b8 <SFU_IMG_GetDownloadAreaInfo+0x30>)
    pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 801f8a4:	60a3      	str	r3, [r4, #8]
  else
  {
    ret = SFU_ERROR;
  }
  return ret;
}
 801f8a6:	bd38      	pop	{r3, r4, r5, pc}
    ret = SFU_ERROR;
 801f8a8:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  return ret;
 801f8ac:	e7fb      	b.n	801f8a6 <SFU_IMG_GetDownloadAreaInfo+0x1e>
 801f8ae:	bf00      	nop
 801f8b0:	08036000 	.word	0x08036000
 801f8b4:	080f1000 	.word	0x080f1000
 801f8b8:	00122f11 	.word	0x00122f11

0801f8bc <SB_HdrVerifiedInit>:
  * @brief  Initialization function for Header signature verification tracking
    @param  None
  * @retval void This function does not return any value
  */
static void SB_HdrVerifiedInit()
{
 801f8bc:	b538      	push	{r3, r4, r5, lr}
  for (int32_t i = 0; i < HDR_VERIFICATION_RECORDS_NUM; i++)
  {
    memset(SB_HdrVerifiedRecord.Hash[i], 0x00, HDR_VERIFICATION_RECORDS_HASHSIZE);
 801f8be:	4c08      	ldr	r4, [pc, #32]	; (801f8e0 <SB_HdrVerifiedInit+0x24>)
 801f8c0:	2520      	movs	r5, #32
 801f8c2:	462a      	mov	r2, r5
 801f8c4:	2100      	movs	r1, #0
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	f009 f882 	bl	80289d0 <memset>
 801f8cc:	462a      	mov	r2, r5
 801f8ce:	2100      	movs	r1, #0
 801f8d0:	1960      	adds	r0, r4, r5
 801f8d2:	f009 f87d 	bl	80289d0 <memset>
  }
  SB_HdrVerifiedRecord.SlotsUsed = 0;
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 801f8dc:	bd38      	pop	{r3, r4, r5, pc}
 801f8de:	bf00      	nop
 801f8e0:	20031cc0 	.word	0x20031cc0

0801f8e4 <SFU_SCHEME_X509_CORE_HashContiguous>:
}

#ifdef ENABLE_IMAGE_STATE_HANDLING
SFU_ErrorStatus SFU_SCHEME_X509_CORE_HashContiguous(uint8_t* p_Buffer, uint32_t uBufferSize, uint8_t* p_HashBuffer,
                                                    uint32_t uHashBufferSize)
{
 801f8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8e8:	b088      	sub	sp, #32
   * Use PKCS11 C_Digest */
  CK_RV rv;
  CK_SESSION_HANDLE session;
  CK_FLAGS session_flags = CKF_SERIAL_SESSION;  /* Read ONLY session */
  CK_MECHANISM smech;
  CK_ULONG MessageDigestLength = 0;
 801f8ea:	2400      	movs	r4, #0
{
 801f8ec:	4688      	mov	r8, r1
 801f8ee:	4615      	mov	r5, r2
 801f8f0:	461e      	mov	r6, r3
  CK_ULONG MessageDigestLength = 0;
 801f8f2:	9404      	str	r4, [sp, #16]
#endif /* SBSFU_X509_USE_PKCS11DIGEST */
  
  /*
   * check parameters passed are valid
   */
  if ((NULL == p_Buffer) || (NULL == p_HashBuffer) || (uHashBufferSize != 32))
 801f8f4:	4607      	mov	r7, r0
 801f8f6:	b110      	cbz	r0, 801f8fe <SFU_SCHEME_X509_CORE_HashContiguous+0x1a>
 801f8f8:	b10a      	cbz	r2, 801f8fe <SFU_SCHEME_X509_CORE_HashContiguous+0x1a>
 801f8fa:	2b20      	cmp	r3, #32
 801f8fc:	d005      	beq.n	801f90a <SFU_SCHEME_X509_CORE_HashContiguous+0x26>
  {
    TRACE("\n\rSFU_SCHEME_X509_CORE_HashContiguous: Failed - parameters passed not valid");
 801f8fe:	482c      	ldr	r0, [pc, #176]	; (801f9b0 <SFU_SCHEME_X509_CORE_HashContiguous+0xcc>)
 801f900:	f009 f924 	bl	8028b4c <iprintf>
  C_CloseSession(session);
  C_Finalize(NULL);

  if (rv != CKR_OK)
  {
    return SFU_ERROR; /* Error in hash calculation */
 801f904:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801f908:	e033      	b.n	801f972 <SFU_SCHEME_X509_CORE_HashContiguous+0x8e>
  memset(p_HashBuffer, 0x00, uHashBufferSize);
 801f90a:	461a      	mov	r2, r3
 801f90c:	4621      	mov	r1, r4
 801f90e:	4628      	mov	r0, r5
 801f910:	f009 f85e 	bl	80289d0 <memset>
  C_Initialize(NULL);
 801f914:	4620      	mov	r0, r4
 801f916:	f7fc f887 	bl	801ba28 <SE_KMS_Initialize>
  rv = C_OpenSession(0,  session_flags, NULL, 0, &session);
 801f91a:	ab03      	add	r3, sp, #12
 801f91c:	9300      	str	r3, [sp, #0]
 801f91e:	4622      	mov	r2, r4
 801f920:	4623      	mov	r3, r4
 801f922:	4620      	mov	r0, r4
 801f924:	2104      	movs	r1, #4
 801f926:	f7fc f8fb 	bl	801bb20 <SE_KMS_OpenSession>
  if (rv == CKR_OK)
 801f92a:	4604      	mov	r4, r0
 801f92c:	bb20      	cbnz	r0, 801f978 <SFU_SCHEME_X509_CORE_HashContiguous+0x94>
    smech.mechanism = CKM_SHA256; /* mechanism is sha256 hash */
 801f92e:	a908      	add	r1, sp, #32
 801f930:	f44f 7314 	mov.w	r3, #592	; 0x250
    smech.ulParameterLen = 0;
 801f934:	e9cd 0006 	strd	r0, r0, [sp, #24]
    smech.mechanism = CKM_SHA256; /* mechanism is sha256 hash */
 801f938:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rv = C_DigestInit(session, &smech);
 801f93c:	9803      	ldr	r0, [sp, #12]
 801f93e:	f7fc fadd 	bl	801befc <SE_KMS_DigestInit>
  if (rv == CKR_OK) /* Hash Root CA Cert  */
 801f942:	4604      	mov	r4, r0
 801f944:	b1e8      	cbz	r0, 801f982 <SFU_SCHEME_X509_CORE_HashContiguous+0x9e>
    memset(p_HashBuffer, 0, uHashBufferSize);
 801f946:	2220      	movs	r2, #32
 801f948:	2100      	movs	r1, #0
 801f94a:	4628      	mov	r0, r5
 801f94c:	f009 f840 	bl	80289d0 <memset>
    MessageDigestLength = 0;
 801f950:	2300      	movs	r3, #0
 801f952:	9304      	str	r3, [sp, #16]
  C_CloseSession(session);
 801f954:	9803      	ldr	r0, [sp, #12]
 801f956:	f7fc f903 	bl	801bb60 <SE_KMS_CloseSession>
  C_Finalize(NULL);
 801f95a:	2000      	movs	r0, #0
 801f95c:	f7fc f87a 	bl	801ba54 <SE_KMS_Finalize>
  if (rv != CKR_OK)
 801f960:	2c00      	cmp	r4, #0
 801f962:	d1cf      	bne.n	801f904 <SFU_SCHEME_X509_CORE_HashContiguous+0x20>
      memset(p_HashBuffer, 0x00, uHashBufferSize);
      ret == SFU_ERROR;
    }
  }
#endif /* SBSFU_X509_USE_PKCS11DIGEST */
  return ret;
 801f964:	9a04      	ldr	r2, [sp, #16]
 801f966:	4b13      	ldr	r3, [pc, #76]	; (801f9b4 <SFU_SCHEME_X509_CORE_HashContiguous+0xd0>)
 801f968:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801f96c:	2a20      	cmp	r2, #32
 801f96e:	bf08      	it	eq
 801f970:	4618      	moveq	r0, r3
}
 801f972:	b008      	add	sp, #32
 801f974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     TRACE("\n\rSFU_SCHEME_X509_CORE_HashContiguous: Failed - C_OpenSession returned 0x%x", rv);
 801f978:	4601      	mov	r1, r0
 801f97a:	480f      	ldr	r0, [pc, #60]	; (801f9b8 <SFU_SCHEME_X509_CORE_HashContiguous+0xd4>)
      TRACE("\n\rSFU_SCHEME_X509_CORE_HashContiguous: Failed - C_DigestFinal returned 0x%x", rv);
 801f97c:	f009 f8e6 	bl	8028b4c <iprintf>
 801f980:	e7e1      	b.n	801f946 <SFU_SCHEME_X509_CORE_HashContiguous+0x62>
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) p_Buffer, uBufferSize);
 801f982:	4642      	mov	r2, r8
 801f984:	4639      	mov	r1, r7
 801f986:	9803      	ldr	r0, [sp, #12]
 801f988:	f7fc faf2 	bl	801bf70 <SE_KMS_DigestUpdate>
    if(rv != CKR_OK)
 801f98c:	4604      	mov	r4, r0
 801f98e:	b110      	cbz	r0, 801f996 <SFU_SCHEME_X509_CORE_HashContiguous+0xb2>
      TRACE("\n\rSFU_SCHEME_X509_CORE_HashContiguous: Failed - C_DigestUpdate returned 0x%x", rv);
 801f990:	4601      	mov	r1, r0
 801f992:	480a      	ldr	r0, [pc, #40]	; (801f9bc <SFU_SCHEME_X509_CORE_HashContiguous+0xd8>)
 801f994:	e7f2      	b.n	801f97c <SFU_SCHEME_X509_CORE_HashContiguous+0x98>
    MessageDigestLength = uHashBufferSize;
 801f996:	aa08      	add	r2, sp, #32
    rv = C_DigestFinal(session, (CK_BYTE_PTR)p_HashBuffer, &MessageDigestLength);
 801f998:	4629      	mov	r1, r5
    MessageDigestLength = uHashBufferSize;
 801f99a:	f842 6d10 	str.w	r6, [r2, #-16]!
    rv = C_DigestFinal(session, (CK_BYTE_PTR)p_HashBuffer, &MessageDigestLength);
 801f99e:	9803      	ldr	r0, [sp, #12]
 801f9a0:	f7fc fb1c 	bl	801bfdc <SE_KMS_DigestFinal>
    if(rv != CKR_OK)
 801f9a4:	4604      	mov	r4, r0
 801f9a6:	2800      	cmp	r0, #0
 801f9a8:	d0d4      	beq.n	801f954 <SFU_SCHEME_X509_CORE_HashContiguous+0x70>
      TRACE("\n\rSFU_SCHEME_X509_CORE_HashContiguous: Failed - C_DigestFinal returned 0x%x", rv);
 801f9aa:	4621      	mov	r1, r4
 801f9ac:	4804      	ldr	r0, [pc, #16]	; (801f9c0 <SFU_SCHEME_X509_CORE_HashContiguous+0xdc>)
 801f9ae:	e7e5      	b.n	801f97c <SFU_SCHEME_X509_CORE_HashContiguous+0x98>
 801f9b0:	0802c701 	.word	0x0802c701
 801f9b4:	00122f11 	.word	0x00122f11
 801f9b8:	0802c74d 	.word	0x0802c74d
 801f9bc:	0802c799 	.word	0x0802c799
 801f9c0:	0802c7e6 	.word	0x0802c7e6

0801f9c4 <SFU_SCHEME_X509_CORE_Init>:
  * @brief  X509 ECDSA Scheme initialization function
  * @retval SFU_ErrorStatus Returns SFU_ERROR if the function fails or
  *                         SFU_SUCCESS if successful
  */
SFU_ErrorStatus SFU_SCHEME_X509_CORE_Init()
{
 801f9c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SFU_ErrorStatus  e_ret_status = SFU_ERROR;

  SB_HdrVerifiedInit(); /* init preverified header structures */
 801f9c6:	f7ff ff79 	bl	801f8bc <SB_HdrVerifiedInit>
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
  TRACE("\r\n= [SBOOT] LOADING CERTS FROM SECURE ENGINE");
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */

  CK_SESSION_HANDLE xP11Session = (CK_SESSION_HANDLE) NULL;
  CK_FUNCTION_LIST_PTR pxP11FunctionList = (CK_FUNCTION_LIST_PTR) NULL;
 801f9ca:	ad02      	add	r5, sp, #8
  TRACE("\r\n= [SBOOT] LOADING CERTS FROM SECURE ENGINE");
 801f9cc:	4821      	ldr	r0, [pc, #132]	; (801fa54 <SFU_SCHEME_X509_CORE_Init+0x90>)
 801f9ce:	f009 f8bd 	bl	8028b4c <iprintf>
  CK_SESSION_HANDLE xP11Session = (CK_SESSION_HANDLE) NULL;
 801f9d2:	2300      	movs	r3, #0
  CK_FUNCTION_LIST_PTR pxP11FunctionList = (CK_FUNCTION_LIST_PTR) NULL;
 801f9d4:	f845 3d04 	str.w	r3, [r5, #-4]!
  e_ret_status = SFU_SCHEME_X509_CRT_SEOpenSession(&xP11Session, &pxP11FunctionList);
 801f9d8:	4668      	mov	r0, sp
 801f9da:	4629      	mov	r1, r5
  CK_SESSION_HANDLE xP11Session = (CK_SESSION_HANDLE) NULL;
 801f9dc:	9300      	str	r3, [sp, #0]
  e_ret_status = SFU_SCHEME_X509_CRT_SEOpenSession(&xP11Session, &pxP11FunctionList);
 801f9de:	f000 fa53 	bl	801fe88 <SFU_SCHEME_X509_CRT_SEOpenSession>

  if ((SFU_SUCCESS != e_ret_status) || (xP11Session == (CK_SESSION_HANDLE) NULL))
 801f9e2:	4b1d      	ldr	r3, [pc, #116]	; (801fa58 <SFU_SCHEME_X509_CORE_Init+0x94>)
 801f9e4:	4298      	cmp	r0, r3
  e_ret_status = SFU_SCHEME_X509_CRT_SEOpenSession(&xP11Session, &pxP11FunctionList);
 801f9e6:	4604      	mov	r4, r0
  if ((SFU_SUCCESS != e_ret_status) || (xP11Session == (CK_SESSION_HANDLE) NULL))
 801f9e8:	d101      	bne.n	801f9ee <SFU_SCHEME_X509_CORE_Init+0x2a>
 801f9ea:	9800      	ldr	r0, [sp, #0]
 801f9ec:	b930      	cbnz	r0, 801f9fc <SFU_SCHEME_X509_CORE_Init+0x38>
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] FAILED TO OPEN PKCS11 SESSION (%d %d %d)", e_ret_status, (uint32_t) xP11Session,
 801f9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f9f2:	481a      	ldr	r0, [pc, #104]	; (801fa5c <SFU_SCHEME_X509_CORE_Init+0x98>)
 801f9f4:	4621      	mov	r1, r4
    /* success */
  }
  else
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] FAILED TO CLOSE PKCS11 SESSION (%d %d %d)", e_ret_status, (uint32_t) xP11Session,
 801f9f6:	f009 f8a9 	bl	8028b4c <iprintf>
          (uint32_t) pxP11FunctionList);
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    return e_ret_status; /* error */
 801f9fa:	e00b      	b.n	801fa14 <SFU_SCHEME_X509_CORE_Init+0x50>
  e_ret_status = SFU_SCHEME_X509_CRT_GetSECert(xP11Session, pxP11FunctionList, \
 801f9fc:	4b18      	ldr	r3, [pc, #96]	; (801fa60 <SFU_SCHEME_X509_CORE_Init+0x9c>)
 801f9fe:	4a19      	ldr	r2, [pc, #100]	; (801fa64 <SFU_SCHEME_X509_CORE_Init+0xa0>)
 801fa00:	9901      	ldr	r1, [sp, #4]
 801fa02:	f000 fa97 	bl	801ff34 <SFU_SCHEME_X509_CRT_GetSECert>
  if (SFU_SUCCESS != e_ret_status)
 801fa06:	42a0      	cmp	r0, r4
 801fa08:	d007      	beq.n	801fa1a <SFU_SCHEME_X509_CORE_Init+0x56>
    TRACE("\r\n= [SBOOT] FAILED TO LOAD FW SIGNING ROOT CA CERT");
 801fa0a:	4817      	ldr	r0, [pc, #92]	; (801fa68 <SFU_SCHEME_X509_CORE_Init+0xa4>)
    TRACE("\r\n= [SBOOT] FAILED TO LOAD FW SIGNING OEM CA CERT");
 801fa0c:	f009 f89e 	bl	8028b4c <iprintf>
    return SFU_ERROR; /* can't proceed without this intermediate cert */
 801fa10:	f641 74e1 	movw	r4, #8161	; 0x1fe1
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
  p_CertChain_OEM = a_OEMCACert; /* intermediate cert array */
  p_CertChain_RootCA = a_RootCACert; /* root cert array */
  return SFU_SUCCESS;
#endif /* (SBSFU_X509_LOWER_CERTS_SOURCE == SBSFU_X509_USE_PKCS11_CERTS) */
}
 801fa14:	4620      	mov	r0, r4
 801fa16:	b002      	add	sp, #8
 801fa18:	bd70      	pop	{r4, r5, r6, pc}
  e_ret_status = SFU_SCHEME_X509_CRT_GetSECert(xP11Session, pxP11FunctionList, \
 801fa1a:	4b14      	ldr	r3, [pc, #80]	; (801fa6c <SFU_SCHEME_X509_CORE_Init+0xa8>)
 801fa1c:	4a14      	ldr	r2, [pc, #80]	; (801fa70 <SFU_SCHEME_X509_CORE_Init+0xac>)
 801fa1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fa22:	f000 fa87 	bl	801ff34 <SFU_SCHEME_X509_CRT_GetSECert>
  if (SFU_SUCCESS != e_ret_status)
 801fa26:	42a0      	cmp	r0, r4
  e_ret_status = SFU_SCHEME_X509_CRT_GetSECert(xP11Session, pxP11FunctionList, \
 801fa28:	4606      	mov	r6, r0
  if (SFU_SUCCESS != e_ret_status)
 801fa2a:	d001      	beq.n	801fa30 <SFU_SCHEME_X509_CORE_Init+0x6c>
    TRACE("\r\n= [SBOOT] FAILED TO LOAD FW SIGNING OEM CA CERT");
 801fa2c:	4811      	ldr	r0, [pc, #68]	; (801fa74 <SFU_SCHEME_X509_CORE_Init+0xb0>)
 801fa2e:	e7ed      	b.n	801fa0c <SFU_SCHEME_X509_CORE_Init+0x48>
  e_ret_status = SFU_SCHEME_X509_CRT_SECloseSession(&xP11Session, &pxP11FunctionList);
 801fa30:	4629      	mov	r1, r5
 801fa32:	4668      	mov	r0, sp
 801fa34:	f000 fa5a 	bl	801feec <SFU_SCHEME_X509_CRT_SECloseSession>
  if ((SFU_SUCCESS == e_ret_status) && (!xP11Session) && (!pxP11FunctionList))
 801fa38:	42b0      	cmp	r0, r6
  e_ret_status = SFU_SCHEME_X509_CRT_SECloseSession(&xP11Session, &pxP11FunctionList);
 801fa3a:	4604      	mov	r4, r0
  if ((SFU_SUCCESS == e_ret_status) && (!xP11Session) && (!pxP11FunctionList))
 801fa3c:	d104      	bne.n	801fa48 <SFU_SCHEME_X509_CORE_Init+0x84>
 801fa3e:	9b00      	ldr	r3, [sp, #0]
 801fa40:	b913      	cbnz	r3, 801fa48 <SFU_SCHEME_X509_CORE_Init+0x84>
 801fa42:	9b01      	ldr	r3, [sp, #4]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d0e5      	beq.n	801fa14 <SFU_SCHEME_X509_CORE_Init+0x50>
    TRACE("\r\n= [SBOOT] FAILED TO CLOSE PKCS11 SESSION (%d %d %d)", e_ret_status, (uint32_t) xP11Session,
 801fa48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa4c:	4621      	mov	r1, r4
 801fa4e:	480a      	ldr	r0, [pc, #40]	; (801fa78 <SFU_SCHEME_X509_CORE_Init+0xb4>)
 801fa50:	e7d1      	b.n	801f9f6 <SFU_SCHEME_X509_CORE_Init+0x32>
 801fa52:	bf00      	nop
 801fa54:	0802c832 	.word	0x0802c832
 801fa58:	00122f11 	.word	0x00122f11
 801fa5c:	0802c85f 	.word	0x0802c85f
 801fa60:	20031d04 	.word	0x20031d04
 801fa64:	0802c894 	.word	0x0802c894
 801fa68:	0802c8ab 	.word	0x0802c8ab
 801fa6c:	20031d08 	.word	0x20031d08
 801fa70:	0802c8de 	.word	0x0802c8de
 801fa74:	0802c8f5 	.word	0x0802c8f5
 801fa78:	0802c927 	.word	0x0802c927

0801fa7c <SFU_SCHEME_X509_CORE_VerifyFWHeader>:
  * @retval SFU_ErrorStatus  Returns SFU_SUCCESS if certificate chain and header
  *                          verification was successfull, SFU_ERROR if not
  */
SFU_ErrorStatus SFU_SCHEME_X509_CORE_VerifyFWHeader(SB_FWHeaderTypeDef *p_FWHeader, uint8_t *p_CertChain_OEM,
                                                    uint8_t *p_CertChain_RootCA)
{
 801fa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa80:	b0f9      	sub	sp, #484	; 0x1e4
  uint8_t PreVerifiedHash[SE_TAG_LEN];
  uint32_t FWHeader_Size = 0;
  mbedtls_x509_crt MbedCertChain;
  mbedtls_ecdsa_context *p_ecdsa_ctx;
  uint8_t *FW_Int_Certs = NULL;
  uint8_t SigDerBuffer[SE_MAC_LEN + 8] = {0};
 801fa82:	ad19      	add	r5, sp, #100	; 0x64
{
 801fa84:	4607      	mov	r7, r0
 801fa86:	4689      	mov	r9, r1
 801fa88:	4692      	mov	sl, r2
  uint8_t SigDerBuffer[SE_MAC_LEN + 8] = {0};
 801fa8a:	2100      	movs	r1, #0
 801fa8c:	2248      	movs	r2, #72	; 0x48
 801fa8e:	4628      	mov	r0, r5
 801fa90:	f008 ff9e 	bl	80289d0 <memset>
   * Use PKCS11 C_Digest */
  CK_RV rv;
  CK_SESSION_HANDLE session;
  CK_FLAGS session_flags = CKF_SERIAL_SESSION;  /* Read ONLY session */
  CK_MECHANISM smech;
  CK_ULONG MessageDigestLength = 0;
 801fa94:	2300      	movs	r3, #0
 801fa96:	9305      	str	r3, [sp, #20]
#endif /* SBSFU_X509_USE_PKCS11DIGEST */

  /*
   * check parameters passed are valid
   */
  if ((NULL == p_FWHeader) || (NULL == p_CertChain_OEM) || (NULL == p_CertChain_RootCA))
 801fa98:	b917      	cbnz	r7, 801faa0 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x24>
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\r= [SBOOT] FAILED with error %d\n\r", ret);
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    mbedtls_x509_crt_free(&MbedCertChain);
    return SFU_ERROR; /* Signature Verification Failed */
 801fa9a:	f641 79e1 	movw	r9, #8161	; 0x1fe1
 801fa9e:	e11b      	b.n	801fcd8 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x25c>
  if ((NULL == p_FWHeader) || (NULL == p_CertChain_OEM) || (NULL == p_CertChain_RootCA))
 801faa0:	f1b9 0f00 	cmp.w	r9, #0
 801faa4:	d0f9      	beq.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
 801faa6:	f1ba 0f00 	cmp.w	sl, #0
 801faaa:	d0f6      	beq.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  if (memcmp(&(p_FWHeader->SFUMagic), SBMAGIC, strlen(SBMAGIC)))
 801faac:	2204      	movs	r2, #4
 801faae:	499b      	ldr	r1, [pc, #620]	; (801fd1c <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2a0>)
 801fab0:	4638      	mov	r0, r7
 801fab2:	f008 ff73 	bl	802899c <memcmp>
 801fab6:	4604      	mov	r4, r0
 801fab8:	2800      	cmp	r0, #0
 801faba:	d1ee      	bne.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  rv = C_OpenSession(0,  session_flags, NULL, 0, &session);
 801fabc:	ae04      	add	r6, sp, #16
  C_Initialize(NULL);
 801fabe:	f7fb ffb3 	bl	801ba28 <SE_KMS_Initialize>
  rv = C_OpenSession(0,  session_flags, NULL, 0, &session);
 801fac2:	4623      	mov	r3, r4
 801fac4:	4622      	mov	r2, r4
 801fac6:	4620      	mov	r0, r4
 801fac8:	9600      	str	r6, [sp, #0]
 801faca:	2104      	movs	r1, #4
 801facc:	f7fc f828 	bl	801bb20 <SE_KMS_OpenSession>
  if (rv == CKR_OK)
 801fad0:	4604      	mov	r4, r0
 801fad2:	bb88      	cbnz	r0, 801fb38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xbc>
    smech.ulParameterLen = 0;
 801fad4:	e9cd 0007 	strd	r0, r0, [sp, #28]
    smech.mechanism = CKM_SHA256; /* mechanism is sha256 hash */
 801fad8:	f44f 7314 	mov.w	r3, #592	; 0x250
    rv = C_DigestInit(session, &smech);
 801fadc:	a906      	add	r1, sp, #24
 801fade:	6830      	ldr	r0, [r6, #0]
    smech.mechanism = CKM_SHA256; /* mechanism is sha256 hash */
 801fae0:	9306      	str	r3, [sp, #24]
    rv = C_DigestInit(session, &smech);
 801fae2:	f7fc fa0b 	bl	801befc <SE_KMS_DigestInit>
  if (rv == CKR_OK) /* Hash Root CA Cert  */
 801fae6:	4604      	mov	r4, r0
 801fae8:	bb30      	cbnz	r0, 801fb38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xbc>
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) p_CertChain_RootCA, SFU_SCHEME_X509_CRT_SizeOfDer(p_CertChain_RootCA));
 801faea:	4650      	mov	r0, sl
 801faec:	6834      	ldr	r4, [r6, #0]
 801faee:	f000 f925 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
 801faf2:	4651      	mov	r1, sl
 801faf4:	4602      	mov	r2, r0
 801faf6:	4620      	mov	r0, r4
 801faf8:	f7fc fa3a 	bl	801bf70 <SE_KMS_DigestUpdate>
  if (rv == CKR_OK) /* Hash Intermediate Cert */
 801fafc:	4604      	mov	r4, r0
 801fafe:	b9d8      	cbnz	r0, 801fb38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xbc>
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) p_CertChain_OEM, SFU_SCHEME_X509_CRT_SizeOfDer(p_CertChain_OEM));
 801fb00:	4648      	mov	r0, r9
 801fb02:	6834      	ldr	r4, [r6, #0]
 801fb04:	f000 f91a 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
 801fb08:	4649      	mov	r1, r9
 801fb0a:	4602      	mov	r2, r0
 801fb0c:	4620      	mov	r0, r4
 801fb0e:	f7fc fa2f 	bl	801bf70 <SE_KMS_DigestUpdate>
  if (rv == CKR_OK) /* Hash header */
 801fb12:	4604      	mov	r4, r0
 801fb14:	b980      	cbnz	r0, 801fb38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xbc>
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) p_FWHeader, sizeof(*p_FWHeader));
 801fb16:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 801fb1a:	4639      	mov	r1, r7
 801fb1c:	6830      	ldr	r0, [r6, #0]
 801fb1e:	f7fc fa27 	bl	801bf70 <SE_KMS_DigestUpdate>
  if (rv == CKR_OK)
 801fb22:	4604      	mov	r4, r0
 801fb24:	b940      	cbnz	r0, 801fb38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xbc>
    MessageDigestLength = SE_TAG_LEN;  /* Section 5.2: Buffer handling compliance */
 801fb26:	2320      	movs	r3, #32
    rv = C_DigestFinal(session, (CK_BYTE_PTR)PreVerifiedHash, &MessageDigestLength);
 801fb28:	aa05      	add	r2, sp, #20
 801fb2a:	a911      	add	r1, sp, #68	; 0x44
 801fb2c:	6830      	ldr	r0, [r6, #0]
    MessageDigestLength = SE_TAG_LEN;  /* Section 5.2: Buffer handling compliance */
 801fb2e:	9305      	str	r3, [sp, #20]
    rv = C_DigestFinal(session, (CK_BYTE_PTR)PreVerifiedHash, &MessageDigestLength);
 801fb30:	f7fc fa54 	bl	801bfdc <SE_KMS_DigestFinal>
  if (rv != CKR_OK)
 801fb34:	4604      	mov	r4, r0
 801fb36:	b130      	cbz	r0, 801fb46 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xca>
    memset(PreVerifiedHash, 0, SE_TAG_LEN);
 801fb38:	2220      	movs	r2, #32
 801fb3a:	2100      	movs	r1, #0
 801fb3c:	a811      	add	r0, sp, #68	; 0x44
 801fb3e:	f008 ff47 	bl	80289d0 <memset>
    MessageDigestLength = 0;
 801fb42:	2300      	movs	r3, #0
 801fb44:	9305      	str	r3, [sp, #20]
  C_CloseSession(session);
 801fb46:	6830      	ldr	r0, [r6, #0]
 801fb48:	f7fc f80a 	bl	801bb60 <SE_KMS_CloseSession>
  C_Finalize(NULL);
 801fb4c:	2000      	movs	r0, #0
 801fb4e:	f7fb ff81 	bl	801ba54 <SE_KMS_Finalize>
  if (rv != CKR_OK)
 801fb52:	2c00      	cmp	r4, #0
 801fb54:	d1a1      	bne.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  if (MessageDigestLength != SE_TAG_LEN)
 801fb56:	9b05      	ldr	r3, [sp, #20]
 801fb58:	2b20      	cmp	r3, #32
 801fb5a:	d19e      	bne.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  uint8_t uSlot = SB_HdrVerifiedRecord.SlotsUsed;
 801fb5c:	4b70      	ldr	r3, [pc, #448]	; (801fd20 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2a4>)
 801fb5e:	f893 b040 	ldrb.w	fp, [r3, #64]	; 0x40
 801fb62:	4698      	mov	r8, r3
    iResult = memcmp(SB_HdrVerifiedRecord.Hash[uSlot - 1], p_Hash, HDR_VERIFICATION_RECORDS_HASHSIZE);
 801fb64:	3b20      	subs	r3, #32
  while (iResult && uSlot)
 801fb66:	45a3      	cmp	fp, r4
 801fb68:	f040 80a1 	bne.w	801fcae <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x232>
  ret = SFU_SCHEME_X509_CRT_VerifyCert(FW_Int_Certs, p_CertChain_OEM, p_CertChain_RootCA, &MbedCertChain);
 801fb6c:	ab2b      	add	r3, sp, #172	; 0xac
 801fb6e:	4649      	mov	r1, r9
 801fb70:	4652      	mov	r2, sl
 801fb72:	f107 0080 	add.w	r0, r7, #128	; 0x80
 801fb76:	f000 f8f5 	bl	801fd64 <SFU_SCHEME_X509_CRT_VerifyCert>
  if (SFU_SUCCESS == ret)
 801fb7a:	4b6a      	ldr	r3, [pc, #424]	; (801fd24 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2a8>)
 801fb7c:	4298      	cmp	r0, r3
  ret = SFU_SCHEME_X509_CRT_VerifyCert(FW_Int_Certs, p_CertChain_OEM, p_CertChain_RootCA, &MbedCertChain);
 801fb7e:	4681      	mov	r9, r0
  if (SFU_SUCCESS == ret)
 801fb80:	f040 80a6 	bne.w	801fcd0 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x254>
  C_Initialize(NULL);
 801fb84:	2000      	movs	r0, #0
 801fb86:	f7fb ff4f 	bl	801ba28 <SE_KMS_Initialize>
  rv = C_OpenSession(0,  session_flags, NULL, 0, &session);
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	9600      	str	r6, [sp, #0]
 801fb8e:	461a      	mov	r2, r3
 801fb90:	2104      	movs	r1, #4
 801fb92:	4618      	mov	r0, r3
 801fb94:	f7fb ffc4 	bl	801bb20 <SE_KMS_OpenSession>
  if (rv == CKR_OK)
 801fb98:	4604      	mov	r4, r0
 801fb9a:	b9d8      	cbnz	r0, 801fbd4 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x158>
    smech.ulParameterLen = 0;
 801fb9c:	e9cd 0007 	strd	r0, r0, [sp, #28]
    smech.mechanism = CKM_SHA256;
 801fba0:	f44f 7314 	mov.w	r3, #592	; 0x250
    rv = C_DigestInit(session, &smech);
 801fba4:	a906      	add	r1, sp, #24
 801fba6:	6830      	ldr	r0, [r6, #0]
    smech.mechanism = CKM_SHA256;
 801fba8:	9306      	str	r3, [sp, #24]
    rv = C_DigestInit(session, &smech);
 801fbaa:	f7fc f9a7 	bl	801befc <SE_KMS_DigestInit>
  if (rv == CKR_OK)
 801fbae:	4604      	mov	r4, r0
 801fbb0:	b980      	cbnz	r0, 801fbd4 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x158>
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) p_FWHeader, FWHeader_Size);
 801fbb2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801fbb6:	4639      	mov	r1, r7
 801fbb8:	6830      	ldr	r0, [r6, #0]
 801fbba:	f7fc f9d9 	bl	801bf70 <SE_KMS_DigestUpdate>
  if (rv == CKR_OK)
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	b940      	cbnz	r0, 801fbd4 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x158>
    MessageDigestLength = SE_TAG_LEN;  /* Section 5.2: Buffer handling compliance */
 801fbc2:	2320      	movs	r3, #32
    rv = C_DigestFinal(session, (CK_BYTE_PTR) HdrHashBuffer, &MessageDigestLength);
 801fbc4:	aa05      	add	r2, sp, #20
 801fbc6:	a909      	add	r1, sp, #36	; 0x24
 801fbc8:	6830      	ldr	r0, [r6, #0]
    MessageDigestLength = SE_TAG_LEN;  /* Section 5.2: Buffer handling compliance */
 801fbca:	9305      	str	r3, [sp, #20]
    rv = C_DigestFinal(session, (CK_BYTE_PTR) HdrHashBuffer, &MessageDigestLength);
 801fbcc:	f7fc fa06 	bl	801bfdc <SE_KMS_DigestFinal>
  if (rv != CKR_OK)
 801fbd0:	4604      	mov	r4, r0
 801fbd2:	b130      	cbz	r0, 801fbe2 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x166>
    memset(PreVerifiedHash, 0, SE_TAG_LEN);
 801fbd4:	2220      	movs	r2, #32
 801fbd6:	2100      	movs	r1, #0
 801fbd8:	a811      	add	r0, sp, #68	; 0x44
 801fbda:	f008 fef9 	bl	80289d0 <memset>
    MessageDigestLength = 0;
 801fbde:	2300      	movs	r3, #0
 801fbe0:	9305      	str	r3, [sp, #20]
  C_CloseSession(session);
 801fbe2:	6830      	ldr	r0, [r6, #0]
 801fbe4:	f7fb ffbc 	bl	801bb60 <SE_KMS_CloseSession>
  C_Finalize(NULL);
 801fbe8:	2000      	movs	r0, #0
 801fbea:	f7fb ff33 	bl	801ba54 <SE_KMS_Finalize>
  if (rv != CKR_OK)
 801fbee:	2c00      	cmp	r4, #0
 801fbf0:	f47f af53 	bne.w	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  if (MessageDigestLength != SE_TAG_LEN)
 801fbf4:	9b05      	ldr	r3, [sp, #20]
 801fbf6:	2b20      	cmp	r3, #32
 801fbf8:	f47f af4f 	bne.w	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
  if (0 != (p_r[0] & 0x80)) /* Need to pad r? */
 801fbfc:	f997 26e0 	ldrsb.w	r2, [r7, #1760]	; 0x6e0
  if (0 != (p_s[0] & 0x80)) /* Need to pad s? */
 801fc00:	f997 6700 	ldrsb.w	r6, [r7, #1792]	; 0x700
  p_der[i++] = 0x30; /* start byte */
 801fc04:	4948      	ldr	r1, [pc, #288]	; (801fd28 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2ac>)
 801fc06:	6029      	str	r1, [r5, #0]
  der_size_required = size_r + size_s + 4; /* work out buffer size required */
 801fc08:	2a00      	cmp	r2, #0
 801fc0a:	bfb4      	ite	lt
 801fc0c:	2445      	movlt	r4, #69	; 0x45
 801fc0e:	2444      	movge	r4, #68	; 0x44
  if (0 != (p_s[0] & 0x80)) /* Need to pad s? */
 801fc10:	2e00      	cmp	r6, #0
    der_size_required++;
 801fc12:	bfb8      	it	lt
 801fc14:	3401      	addlt	r4, #1
  if (0 != (p_r[0] & 0x80)) /* padding required for r? */
 801fc16:	2a00      	cmp	r2, #0
    p_der[i] = 0x00; /* pad r */
 801fc18:	bfbf      	itttt	lt
 801fc1a:	2200      	movlt	r2, #0
 801fc1c:	712a      	strblt	r2, [r5, #4]
    p_der[tot_size_index] += 1; /* increment total size */
 801fc1e:	2201      	movlt	r2, #1
 801fc20:	706a      	strblt	r2, [r5, #1]
    i++;
 801fc22:	bfba      	itte	lt
 801fc24:	2105      	movlt	r1, #5
    p_der[size_r_index] += 1; /* increment size of r */
 801fc26:	2221      	movlt	r2, #33	; 0x21
  p_der[i++] = size_r; /* size of r */
 801fc28:	2104      	movge	r1, #4
  int32_t Asn1Size = EcdsaSigRawToDer(&p_FWHeader->HeaderMAC[0], sizeof(p_FWHeader->HeaderMAC) / 2, \
 801fc2a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
    p_der[size_r_index] += 1; /* increment size of r */
 801fc2e:	bfb8      	it	lt
 801fc30:	70ea      	strblt	r2, [r5, #3]
  der_size_required += 2; /* add initial 0x30 and length (<128bytes) */
 801fc32:	3402      	adds	r4, #2
  memcpy(&p_der[i], p_r, size_r); /* copy r */
 801fc34:	f507 67dc 	add.w	r7, r7, #1760	; 0x6e0
 801fc38:	186a      	adds	r2, r5, r1
 801fc3a:	f857 0b04 	ldr.w	r0, [r7], #4
 801fc3e:	f842 0b04 	str.w	r0, [r2], #4
 801fc42:	429f      	cmp	r7, r3
 801fc44:	d1f9      	bne.n	801fc3a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1be>
  i += size_r; /* total size */
 801fc46:	f101 0220 	add.w	r2, r1, #32
  p_der[i++] = 0x2; /* start of s */
 801fc4a:	2002      	movs	r0, #2
 801fc4c:	54a8      	strb	r0, [r5, r2]
 801fc4e:	f101 0021 	add.w	r0, r1, #33	; 0x21
  p_der[i++] = size_s; /* size of s */
 801fc52:	2720      	movs	r7, #32
  if (p_s[0] & 0x80) /* padding required for s? */
 801fc54:	2e00      	cmp	r6, #0
  p_der[i++] = size_s; /* size of s */
 801fc56:	f101 0222 	add.w	r2, r1, #34	; 0x22
 801fc5a:	542f      	strb	r7, [r5, r0]
  if (p_s[0] & 0x80) /* padding required for s? */
 801fc5c:	da09      	bge.n	801fc72 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1f6>
    p_der[i] = 0x00; /* pad s */
 801fc5e:	2600      	movs	r6, #0
 801fc60:	54ae      	strb	r6, [r5, r2]
    p_der[tot_size_index] += 1; /* increment total size */
 801fc62:	786a      	ldrb	r2, [r5, #1]
 801fc64:	3201      	adds	r2, #1
 801fc66:	706a      	strb	r2, [r5, #1]
    p_der[size_s_index] += 1; /* increment size of s */
 801fc68:	5c2a      	ldrb	r2, [r5, r0]
 801fc6a:	3201      	adds	r2, #1
 801fc6c:	542a      	strb	r2, [r5, r0]
    i++;
 801fc6e:	f101 0223 	add.w	r2, r1, #35	; 0x23
  memcpy(&p_der[i], p_s, size_s); /* copy s */
 801fc72:	18a9      	adds	r1, r5, r2
 801fc74:	f103 0020 	add.w	r0, r3, #32
 801fc78:	f853 6b04 	ldr.w	r6, [r3], #4
 801fc7c:	f841 6b04 	str.w	r6, [r1], #4
 801fc80:	4283      	cmp	r3, r0
 801fc82:	d1f9      	bne.n	801fc78 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1fc>
  p_der[tot_size_index] = i - 2; /* update total  size */
 801fc84:	321e      	adds	r2, #30
  TRACE("\n\r= [SBOOT] Verify Header Signature... ");
 801fc86:	4829      	ldr	r0, [pc, #164]	; (801fd2c <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2b0>)
  p_der[tot_size_index] = i - 2; /* update total  size */
 801fc88:	706a      	strb	r2, [r5, #1]
  TRACE("\n\r= [SBOOT] Verify Header Signature... ");
 801fc8a:	f008 ff5f 	bl	8028b4c <iprintf>
  ret_local = mbedtls_ecdsa_read_signature(p_ecdsa_ctx, HdrHashBuffer, sizeof(HdrHashBuffer), \
 801fc8e:	9400      	str	r4, [sp, #0]
 801fc90:	462b      	mov	r3, r5
 801fc92:	2220      	movs	r2, #32
 801fc94:	a909      	add	r1, sp, #36	; 0x24
 801fc96:	985b      	ldr	r0, [sp, #364]	; 0x16c
 801fc98:	f005 fa54 	bl	8025144 <mbedtls_ecdsa_read_signature>
  if (0 != ret_local)
 801fc9c:	b300      	cbz	r0, 801fce0 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x264>
    TRACE("\n\r= [SBOOT] FAILED with error %d\n\r", ret);
 801fc9e:	4921      	ldr	r1, [pc, #132]	; (801fd24 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2a8>)
 801fca0:	4823      	ldr	r0, [pc, #140]	; (801fd30 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2b4>)
 801fca2:	f008 ff53 	bl	8028b4c <iprintf>
    mbedtls_x509_crt_free(&MbedCertChain);
 801fca6:	a82b      	add	r0, sp, #172	; 0xac
 801fca8:	f008 fabf 	bl	802822a <mbedtls_x509_crt_free>
 801fcac:	e6f5      	b.n	801fa9a <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x1e>
    iResult = memcmp(SB_HdrVerifiedRecord.Hash[uSlot - 1], p_Hash, HDR_VERIFICATION_RECORDS_HASHSIZE);
 801fcae:	ebab 0004 	sub.w	r0, fp, r4
 801fcb2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801fcb6:	2220      	movs	r2, #32
 801fcb8:	a911      	add	r1, sp, #68	; 0x44
 801fcba:	9303      	str	r3, [sp, #12]
 801fcbc:	f008 fe6e 	bl	802899c <memcmp>
 801fcc0:	3401      	adds	r4, #1
  while (iResult && uSlot)
 801fcc2:	9b03      	ldr	r3, [sp, #12]
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	f47f af4e 	bne.w	801fb66 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0xea>
    return SFU_SUCCESS; /* Header already verified */
 801fcca:	f8df 9058 	ldr.w	r9, [pc, #88]	; 801fd24 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2a8>
 801fcce:	e003      	b.n	801fcd8 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x25c>
    TRACE("\n\r= [SBOOT] SFU_SCHEME_X509_CRT_VerifyCert FAILED with error: %d\n\r", ret);
 801fcd0:	4649      	mov	r1, r9
 801fcd2:	4818      	ldr	r0, [pc, #96]	; (801fd34 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2b8>)
 801fcd4:	f008 ff3a 	bl	8028b4c <iprintf>
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    SB_HdrVerifiedSet(PreVerifiedHash);
    mbedtls_x509_crt_free(&MbedCertChain);
    return SFU_SUCCESS; /* Signature Verification Passed */
  }
}
 801fcd8:	4648      	mov	r0, r9
 801fcda:	b079      	add	sp, #484	; 0x1e4
 801fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TRACE("OK");
 801fce0:	4815      	ldr	r0, [pc, #84]	; (801fd38 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x2bc>)
 801fce2:	f008 ff33 	bl	8028b4c <iprintf>
  if (SB_HdrVerifiedRecord.SlotsUsed == HDR_VERIFICATION_RECORDS_NUM)
 801fce6:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
 801fcea:	2b02      	cmp	r3, #2
 801fcec:	d101      	bne.n	801fcf2 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x276>
    SB_HdrVerifiedInit();
 801fcee:	f7ff fde5 	bl	801f8bc <SB_HdrVerifiedInit>
  memcpy(SB_HdrVerifiedRecord.Hash[SB_HdrVerifiedRecord.SlotsUsed], p_Hash, HDR_VERIFICATION_RECORDS_HASHSIZE);
 801fcf2:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
 801fcf6:	ae11      	add	r6, sp, #68	; 0x44
 801fcf8:	eb08 1442 	add.w	r4, r8, r2, lsl #5
 801fcfc:	4633      	mov	r3, r6
 801fcfe:	cb03      	ldmia	r3!, {r0, r1}
 801fd00:	42ab      	cmp	r3, r5
 801fd02:	6020      	str	r0, [r4, #0]
 801fd04:	6061      	str	r1, [r4, #4]
 801fd06:	461e      	mov	r6, r3
 801fd08:	f104 0408 	add.w	r4, r4, #8
 801fd0c:	d1f6      	bne.n	801fcfc <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x280>
  SB_HdrVerifiedRecord.SlotsUsed++;
 801fd0e:	3201      	adds	r2, #1
    mbedtls_x509_crt_free(&MbedCertChain);
 801fd10:	a82b      	add	r0, sp, #172	; 0xac
  SB_HdrVerifiedRecord.SlotsUsed++;
 801fd12:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
    mbedtls_x509_crt_free(&MbedCertChain);
 801fd16:	f008 fa88 	bl	802822a <mbedtls_x509_crt_free>
    return SFU_SUCCESS; /* Signature Verification Passed */
 801fd1a:	e7dd      	b.n	801fcd8 <SFU_SCHEME_X509_CORE_VerifyFWHeader+0x25c>
 801fd1c:	0802c31c 	.word	0x0802c31c
 801fd20:	20031cc0 	.word	0x20031cc0
 801fd24:	00122f11 	.word	0x00122f11
 801fd28:	20020030 	.word	0x20020030
 801fd2c:	0802c9a0 	.word	0x0802c9a0
 801fd30:	0802c9c8 	.word	0x0802c9c8
 801fd34:	0802c95d 	.word	0x0802c95d
 801fd38:	0802c169 	.word	0x0802c169

0801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>:
  * @retval int32_t  The size (in bytes) of the certificate or 0 if error
  */
int32_t SFU_SCHEME_X509_CRT_SizeOfDer(uint8_t *p_Cert)
{
  int32_t CertSize = 0;
  switch (p_Cert[1])
 801fd3c:	7843      	ldrb	r3, [r0, #1]
 801fd3e:	2b81      	cmp	r3, #129	; 0x81
 801fd40:	d006      	beq.n	801fd50 <SFU_SCHEME_X509_CRT_SizeOfDer+0x14>
 801fd42:	2b82      	cmp	r3, #130	; 0x82
 801fd44:	d007      	beq.n	801fd56 <SFU_SCHEME_X509_CRT_SizeOfDer+0x1a>
    case 0x82:
      CertSize = (((uint16_t) p_Cert[2]) << 8) + p_Cert[3] + 4;
      break;

    default:
      if (p_Cert[1] < 0x81)
 801fd46:	2b80      	cmp	r3, #128	; 0x80
  switch (p_Cert[1])
 801fd48:	bf94      	ite	ls
 801fd4a:	4618      	movls	r0, r3
 801fd4c:	2000      	movhi	r0, #0
        CertSize = p_Cert[1];
      }
      break;
  }
  return CertSize;
}
 801fd4e:	4770      	bx	lr
      CertSize = p_Cert[2] + 3;
 801fd50:	7880      	ldrb	r0, [r0, #2]
 801fd52:	3003      	adds	r0, #3
      break;
 801fd54:	4770      	bx	lr
      CertSize = (((uint16_t) p_Cert[2]) << 8) + p_Cert[3] + 4;
 801fd56:	7883      	ldrb	r3, [r0, #2]
 801fd58:	78c0      	ldrb	r0, [r0, #3]
 801fd5a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 801fd5e:	3004      	adds	r0, #4
 801fd60:	4770      	bx	lr
	...

0801fd64 <SFU_SCHEME_X509_CRT_VerifyCert>:
  *         SFU_ERROR if there is an error or the verification fails
  */
SFU_ErrorStatus SFU_SCHEME_X509_CRT_VerifyCert(unsigned char *p_LeafIntermediateCertChain, \
                                               unsigned char *p_LowerIntermediateCert, \
                                               unsigned char *p_RootCACert, mbedtls_x509_crt *p_MbedCertChain)
{
 801fd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd68:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
  int32_t Size_Leaf_Intermediate_Cert_Chain = 0; /* Leaf + Upper intermediate cert */
  int32_t Size_Lower_Intermediate_Cert_Chain = 0; /* Lower intermediate cert */
  int32_t Size_RootCA_Cert = 0; /* Root CA Cert */
  uint32_t crt_verif_flags = 0;
 801fd6c:	ae04      	add	r6, sp, #16
{
 801fd6e:	461d      	mov	r5, r3
  uint32_t crt_verif_flags = 0;
 801fd70:	2300      	movs	r3, #0
{
 801fd72:	460f      	mov	r7, r1
 801fd74:	4614      	mov	r4, r2
  uint32_t crt_verif_flags = 0;
 801fd76:	6033      	str	r3, [r6, #0]
  TRACE("\n\r= [SBOOT] Leaf and Intermediate Cert Chain location: 0x%08x", p_LeafIntermediateCertChain);
  TRACE("\n\r= [SBOOT] Lower Intermediate Cert location: 0x%08x", p_LowerIntermediateCert);
  TRACE("\n\r= [SBOOT] RootCA Cert location: 0x%08x", p_RootCACert);
#endif /* SFU_VERBOSE_DEBUG_MODE */

  if ((NULL == p_LeafIntermediateCertChain) || (NULL == p_RootCACert))
 801fd78:	4681      	mov	r9, r0
 801fd7a:	b360      	cbz	r0, 801fdd6 <SFU_SCHEME_X509_CRT_VerifyCert+0x72>
 801fd7c:	b35a      	cbz	r2, 801fdd6 <SFU_SCHEME_X509_CRT_VerifyCert+0x72>

#if (SBSFU_X509_FW_CERTS_ENCODING == SBSFU_X509_CERTS_PEM_ENCODED)
  Size_Leaf_Intermediate_Cert_Chain = strlen((char *) p_LeafIntermediateCertChain);
#else
  {
    Size_Leaf_Intermediate_Cert_Chain = SFU_SCHEME_X509_CRT_SizeOfDer(p_LeafIntermediateCertChain);
 801fd7e:	f7ff ffdd 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
    p_IntermediateCert = (uint8_t *)((uint32_t) p_LeafIntermediateCertChain + Size_Leaf_Intermediate_Cert_Chain);
 801fd82:	eb09 0800 	add.w	r8, r9, r0
    Size_Leaf_Intermediate_Cert_Chain = SFU_SCHEME_X509_CRT_SizeOfDer(p_LeafIntermediateCertChain);
 801fd86:	4602      	mov	r2, r0
    Size_Leaf_Intermediate_Cert_Chain += SFU_SCHEME_X509_CRT_SizeOfDer(p_IntermediateCert);
 801fd88:	4640      	mov	r0, r8
 801fd8a:	f7ff ffd7 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
 801fd8e:	4402      	add	r2, r0
#endif /* SBSFU_X509_FW_CERTS_ENCODING */

  if (NULL != p_LowerIntermediateCert)
#if (SBSFU_X509_ONBOARD_CERTS_ENCODING == SBSFU_X509_CERTS_DER_ENCODED)
    Size_Lower_Intermediate_Cert_Chain = SFU_SCHEME_X509_CRT_SizeOfDer(p_LowerIntermediateCert);
  Size_RootCA_Cert = SFU_SCHEME_X509_CRT_SizeOfDer(p_RootCACert);
 801fd90:	4620      	mov	r0, r4
 801fd92:	f7ff ffd3 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
#else
    Size_Lower_Intermediate_Cert_Chain = strlen((char *) p_LowerIntermediateCert);
  Size_RootCA_Cert = strlen((char *) p_RootCACert);
#endif /* SBSFU_X509_ONBOARD_CERTS_ENCODING */

  if ((Size_Leaf_Intermediate_Cert_Chain <= 0) || (Size_RootCA_Cert <= 0))
 801fd96:	2a00      	cmp	r2, #0
 801fd98:	dd1d      	ble.n	801fdd6 <SFU_SCHEME_X509_CRT_VerifyCert+0x72>
 801fd9a:	2800      	cmp	r0, #0
 801fd9c:	dd1b      	ble.n	801fdd6 <SFU_SCHEME_X509_CRT_VerifyCert+0x72>
  }
  TRACE("\n\r= [SBOOT] RootCA Cert:\n\r");
  SFU_SCHEME_X509_CRT_PrintCerts(p_RootCACert);
#endif /* SFU_VERBOSE_DEBUG_MODE */

  mbedtls_x509_crt_init(p_MbedCertChain); /* init cert chain */
 801fd9e:	4628      	mov	r0, r5
 801fda0:	f008 fa3e 	bl	8028220 <mbedtls_x509_crt_init>
  mbedtls_x509_crt_init(&MbedCertChain_RootCA); /* Prepare root cert */
 801fda4:	a805      	add	r0, sp, #20
 801fda6:	f008 fa3b 	bl	8028220 <mbedtls_x509_crt_init>
#if (SBSFU_X509_FW_CERTS_ENCODING == SBSFU_X509_CERTS_PEM_ENCODED)
  ret_local = mbedtls_x509_crt_parse(p_MbedCertChain, p_LeafIntermediateCertChain, \
                                     Size_Leaf_Intermediate_Cert_Chain + 1);
#else
  ret_local = mbedtls_x509_crt_parse_der(p_MbedCertChain, p_LeafIntermediateCertChain, \
                                         SFU_SCHEME_X509_CRT_SizeOfDer(p_LeafIntermediateCertChain));
 801fdaa:	4648      	mov	r0, r9
 801fdac:	f7ff ffc6 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
  ret_local = mbedtls_x509_crt_parse_der(p_MbedCertChain, p_LeafIntermediateCertChain, \
 801fdb0:	4649      	mov	r1, r9
 801fdb2:	4602      	mov	r2, r0
 801fdb4:	4628      	mov	r0, r5
 801fdb6:	f008 fa91 	bl	80282dc <mbedtls_x509_crt_parse_der>
  if (0 == ret_local) /* check parsing was successful */
 801fdba:	b940      	cbnz	r0, 801fdce <SFU_SCHEME_X509_CRT_VerifyCert+0x6a>
  {
    ret_local = mbedtls_x509_crt_parse_der(p_MbedCertChain, p_IntermediateCert, \
                                           SFU_SCHEME_X509_CRT_SizeOfDer(p_IntermediateCert));
 801fdbc:	4640      	mov	r0, r8
 801fdbe:	f7ff ffbd 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
    ret_local = mbedtls_x509_crt_parse_der(p_MbedCertChain, p_IntermediateCert, \
 801fdc2:	4641      	mov	r1, r8
 801fdc4:	4602      	mov	r2, r0
 801fdc6:	4628      	mov	r0, r5
 801fdc8:	f008 fa88 	bl	80282dc <mbedtls_x509_crt_parse_der>
  }
#endif /* SBSFU_X509_FW_CERTS_ENCODING */
  if (0 == ret_local) /* check parsing was successful */
 801fdcc:	b130      	cbz	r0, 801fddc <SFU_SCHEME_X509_CRT_VerifyCert+0x78>
#endif /* SFU_VERBOSE_DEBUG_MODE */
  }
  else
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\r= [SBOOT] Parsing Leaf and Intermediate certs FAILED with error %d\n\r", ret_local);
 801fdce:	4601      	mov	r1, r0
 801fdd0:	4825      	ldr	r0, [pc, #148]	; (801fe68 <SFU_SCHEME_X509_CRT_VerifyCert+0x104>)
  {
    char Error[1024] = {'\0'};
    mbedtls_x509_crt_verify_info(Error, sizeof(Error), NULL, crt_verif_flags);
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\r= [SBOOT] FAILED with error %d : %s", ret_local, Error);
    TRACE("\n\r= [SBOOT] Error Flags: 0x%08x\n\r", crt_verif_flags);
 801fdd2:	f008 febb 	bl	8028b4c <iprintf>
    return SFU_ERROR; /* Leaf and Root CA must not be NULL */
 801fdd6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 801fdda:	e02b      	b.n	801fe34 <SFU_SCHEME_X509_CRT_VerifyCert+0xd0>
  if (NULL != p_LowerIntermediateCert)
 801fddc:	b15f      	cbz	r7, 801fdf6 <SFU_SCHEME_X509_CRT_VerifyCert+0x92>
                                           SFU_SCHEME_X509_CRT_SizeOfDer(p_LowerIntermediateCert)); /* DER encoded */
 801fdde:	4638      	mov	r0, r7
 801fde0:	f7ff ffac 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
    ret_local = mbedtls_x509_crt_parse_der(p_MbedCertChain, p_LowerIntermediateCert, \
 801fde4:	4639      	mov	r1, r7
 801fde6:	4602      	mov	r2, r0
 801fde8:	4628      	mov	r0, r5
 801fdea:	f008 fa77 	bl	80282dc <mbedtls_x509_crt_parse_der>
    if (0 == ret_local)
 801fdee:	4601      	mov	r1, r0
 801fdf0:	b108      	cbz	r0, 801fdf6 <SFU_SCHEME_X509_CRT_VerifyCert+0x92>
      TRACE("\n\r= [SBOOT] Parsing Lower Intermediate certs FAILED with error %d\n\r", ret_local);
 801fdf2:	481e      	ldr	r0, [pc, #120]	; (801fe6c <SFU_SCHEME_X509_CRT_VerifyCert+0x108>)
 801fdf4:	e7ed      	b.n	801fdd2 <SFU_SCHEME_X509_CRT_VerifyCert+0x6e>
                                         SFU_SCHEME_X509_CRT_SizeOfDer(p_RootCACert));
 801fdf6:	4620      	mov	r0, r4
 801fdf8:	f7ff ffa0 	bl	801fd3c <SFU_SCHEME_X509_CRT_SizeOfDer>
  ret_local = mbedtls_x509_crt_parse_der(&MbedCertChain_RootCA, p_RootCACert, \
 801fdfc:	4621      	mov	r1, r4
 801fdfe:	4602      	mov	r2, r0
 801fe00:	a805      	add	r0, sp, #20
 801fe02:	f008 fa6b 	bl	80282dc <mbedtls_x509_crt_parse_der>
  if (0 == ret_local)
 801fe06:	4604      	mov	r4, r0
 801fe08:	b110      	cbz	r0, 801fe10 <SFU_SCHEME_X509_CRT_VerifyCert+0xac>
    TRACE("\n\r= [SBOOT] Parsing Root CA cert FAILED with error %d\n\r", ret_local);
 801fe0a:	4601      	mov	r1, r0
 801fe0c:	4818      	ldr	r0, [pc, #96]	; (801fe70 <SFU_SCHEME_X509_CRT_VerifyCert+0x10c>)
 801fe0e:	e7e0      	b.n	801fdd2 <SFU_SCHEME_X509_CRT_VerifyCert+0x6e>
  TRACE("\n\r= [SBOOT] Verifying the Certificate chain... ");
 801fe10:	4818      	ldr	r0, [pc, #96]	; (801fe74 <SFU_SCHEME_X509_CRT_VerifyCert+0x110>)
 801fe12:	f008 fe9b 	bl	8028b4c <iprintf>
  ret_local = mbedtls_x509_crt_verify(p_MbedCertChain, &MbedCertChain_RootCA, \
 801fe16:	4628      	mov	r0, r5
 801fe18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801fe1c:	9600      	str	r6, [sp, #0]
 801fe1e:	4623      	mov	r3, r4
 801fe20:	4622      	mov	r2, r4
 801fe22:	a905      	add	r1, sp, #20
 801fe24:	f008 f9ea 	bl	80281fc <mbedtls_x509_crt_verify>
  if (0 == ret_local)
 801fe28:	4605      	mov	r5, r0
 801fe2a:	b938      	cbnz	r0, 801fe3c <SFU_SCHEME_X509_CRT_VerifyCert+0xd8>
    TRACE("OK");
 801fe2c:	4812      	ldr	r0, [pc, #72]	; (801fe78 <SFU_SCHEME_X509_CRT_VerifyCert+0x114>)
 801fe2e:	f008 fe8d 	bl	8028b4c <iprintf>
    return SFU_SUCCESS;
 801fe32:	4812      	ldr	r0, [pc, #72]	; (801fe7c <SFU_SCHEME_X509_CRT_VerifyCert+0x118>)
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    return SFU_ERROR;
  }
}
 801fe34:	f20d 5d4c 	addw	sp, sp, #1356	; 0x54c
 801fe38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    char Error[1024] = {'\0'};
 801fe3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801fe40:	4621      	mov	r1, r4
 801fe42:	a852      	add	r0, sp, #328	; 0x148
 801fe44:	f008 fdc4 	bl	80289d0 <memset>
    mbedtls_x509_crt_verify_info(Error, sizeof(Error), NULL, crt_verif_flags);
 801fe48:	6833      	ldr	r3, [r6, #0]
 801fe4a:	4622      	mov	r2, r4
 801fe4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fe50:	a852      	add	r0, sp, #328	; 0x148
 801fe52:	f007 ff1f 	bl	8027c94 <mbedtls_x509_crt_verify_info>
    TRACE("\n\r= [SBOOT] FAILED with error %d : %s", ret_local, Error);
 801fe56:	4629      	mov	r1, r5
 801fe58:	aa52      	add	r2, sp, #328	; 0x148
 801fe5a:	4809      	ldr	r0, [pc, #36]	; (801fe80 <SFU_SCHEME_X509_CRT_VerifyCert+0x11c>)
 801fe5c:	f008 fe76 	bl	8028b4c <iprintf>
    TRACE("\n\r= [SBOOT] Error Flags: 0x%08x\n\r", crt_verif_flags);
 801fe60:	6831      	ldr	r1, [r6, #0]
 801fe62:	4808      	ldr	r0, [pc, #32]	; (801fe84 <SFU_SCHEME_X509_CRT_VerifyCert+0x120>)
 801fe64:	e7b5      	b.n	801fdd2 <SFU_SCHEME_X509_CRT_VerifyCert+0x6e>
 801fe66:	bf00      	nop
 801fe68:	0802ca10 	.word	0x0802ca10
 801fe6c:	0802ca57 	.word	0x0802ca57
 801fe70:	0802ca9b 	.word	0x0802ca9b
 801fe74:	0802cad3 	.word	0x0802cad3
 801fe78:	0802c169 	.word	0x0802c169
 801fe7c:	00122f11 	.word	0x00122f11
 801fe80:	0802cb03 	.word	0x0802cb03
 801fe84:	0802cb29 	.word	0x0802cb29

0801fe88 <SFU_SCHEME_X509_CRT_SEOpenSession>:
  * @retval SFU_SUCCESS if the PKCS11 Session is successfully opened or
  *         SFU_ERROR if the session open fails.
  */
SFU_ErrorStatus SFU_SCHEME_X509_CRT_SEOpenSession(CK_SESSION_HANDLE *p_xP11Session,
                                                  CK_FUNCTION_LIST_PTR *p_xP11FunctionList)
{
 801fe88:	b530      	push	{r4, r5, lr}
 801fe8a:	4604      	mov	r4, r0
  CK_SLOT_ID xSlotId = 0;
  CK_ULONG ulCount = 1;
 801fe8c:	2000      	movs	r0, #0
{
 801fe8e:	b085      	sub	sp, #20
  CK_ULONG ulCount = 1;
 801fe90:	2501      	movs	r5, #1
  uint32_t xResult = 0;

  *p_xP11Session = (CK_SESSION_HANDLE) NULL;
 801fe92:	6020      	str	r0, [r4, #0]
  CK_ULONG ulCount = 1;
 801fe94:	e9cd 0502 	strd	r0, r5, [sp, #8]

  xResult = C_Initialize(NULL);
 801fe98:	f7fb fdc6 	bl	801ba28 <SE_KMS_Initialize>
  if (0 != xResult)
 801fe9c:	4601      	mov	r1, r0
 801fe9e:	b130      	cbz	r0, 801feae <SFU_SCHEME_X509_CRT_SEOpenSession+0x26>
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] ERROR CALLING C_Initialize: %d", xResult);
 801fea0:	480e      	ldr	r0, [pc, #56]	; (801fedc <SFU_SCHEME_X509_CRT_SEOpenSession+0x54>)

  xResult = C_OpenSession(xSlotId, CKF_SERIAL_SESSION, NULL, NULL, p_xP11Session);
  if (0 != xResult)
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] ERROR CALLING C_OpenSession: %d", xResult);
 801fea2:	f008 fe53 	bl	8028b4c <iprintf>
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    return SFU_ERROR;
 801fea6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }
  else
  {
    return SFU_SUCCESS; /* Session opened OK */
  }
}
 801feaa:	b005      	add	sp, #20
 801feac:	bd30      	pop	{r4, r5, pc}
  xResult = C_GetSlotList(CK_TRUE, &xSlotId, &ulCount);
 801feae:	aa03      	add	r2, sp, #12
 801feb0:	a902      	add	r1, sp, #8
 801feb2:	4628      	mov	r0, r5
 801feb4:	f7fb fdfe 	bl	801bab4 <SE_KMS_GetSlotList>
  if (0 != xResult)
 801feb8:	4603      	mov	r3, r0
 801feba:	b110      	cbz	r0, 801fec2 <SFU_SCHEME_X509_CRT_SEOpenSession+0x3a>
    TRACE("\r\n= [SBOOT] ERROR CALLING C_GetSlotList: %d", xResult);
 801febc:	4601      	mov	r1, r0
 801febe:	4808      	ldr	r0, [pc, #32]	; (801fee0 <SFU_SCHEME_X509_CRT_SEOpenSession+0x58>)
 801fec0:	e7ef      	b.n	801fea2 <SFU_SCHEME_X509_CRT_SEOpenSession+0x1a>
  xResult = C_OpenSession(xSlotId, CKF_SERIAL_SESSION, NULL, NULL, p_xP11Session);
 801fec2:	4602      	mov	r2, r0
 801fec4:	2104      	movs	r1, #4
 801fec6:	9400      	str	r4, [sp, #0]
 801fec8:	9802      	ldr	r0, [sp, #8]
 801feca:	f7fb fe29 	bl	801bb20 <SE_KMS_OpenSession>
  if (0 != xResult)
 801fece:	4601      	mov	r1, r0
 801fed0:	b108      	cbz	r0, 801fed6 <SFU_SCHEME_X509_CRT_SEOpenSession+0x4e>
    TRACE("\r\n= [SBOOT] ERROR CALLING C_OpenSession: %d", xResult);
 801fed2:	4804      	ldr	r0, [pc, #16]	; (801fee4 <SFU_SCHEME_X509_CRT_SEOpenSession+0x5c>)
 801fed4:	e7e5      	b.n	801fea2 <SFU_SCHEME_X509_CRT_SEOpenSession+0x1a>
    return SFU_SUCCESS; /* Session opened OK */
 801fed6:	4804      	ldr	r0, [pc, #16]	; (801fee8 <SFU_SCHEME_X509_CRT_SEOpenSession+0x60>)
 801fed8:	e7e7      	b.n	801feaa <SFU_SCHEME_X509_CRT_SEOpenSession+0x22>
 801feda:	bf00      	nop
 801fedc:	0802cb4b 	.word	0x0802cb4b
 801fee0:	0802cb76 	.word	0x0802cb76
 801fee4:	0802cba2 	.word	0x0802cba2
 801fee8:	00122f11 	.word	0x00122f11

0801feec <SFU_SCHEME_X509_CRT_SECloseSession>:
  * @retval SFU_SUCCESS if the PKCS11 Session is successfully closed or
  *         SFU_ERROR if the session close fails.
  */
SFU_ErrorStatus SFU_SCHEME_X509_CRT_SECloseSession(CK_SESSION_HANDLE *p_xP11Session,
                                                   CK_FUNCTION_LIST_PTR *p_xP11FunctionList)
{
 801feec:	b570      	push	{r4, r5, r6, lr}
 801feee:	4605      	mov	r5, r0
  uint32_t xResult = 0;
  xResult = C_CloseSession(*p_xP11Session); /* Close the session */
 801fef0:	6800      	ldr	r0, [r0, #0]
{
 801fef2:	460e      	mov	r6, r1
  xResult = C_CloseSession(*p_xP11Session); /* Close the session */
 801fef4:	f7fb fe34 	bl	801bb60 <SE_KMS_CloseSession>
  if (0 != xResult)
 801fef8:	4601      	mov	r1, r0
 801fefa:	b128      	cbz	r0, 801ff08 <SFU_SCHEME_X509_CRT_SECloseSession+0x1c>
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] ERROR CALLING C_CloseSession: %d", xResult);
 801fefc:	4809      	ldr	r0, [pc, #36]	; (801ff24 <SFU_SCHEME_X509_CRT_SECloseSession+0x38>)

  xResult = C_Finalize(NULL);
  if (0 != xResult)
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\r\n= [SBOOT] ERROR CALLING C_Finalize: %d", xResult);
 801fefe:	f008 fe25 	bl	8028b4c <iprintf>
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
    return SFU_ERROR; /* Finalize failed */
 801ff02:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  TRACE("OK");
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
  *p_xP11Session = (CK_SESSION_HANDLE) NULL;
  *p_xP11FunctionList = (CK_FUNCTION_LIST_PTR) NULL;
  return SFU_SUCCESS;
}
 801ff06:	bd70      	pop	{r4, r5, r6, pc}
  xResult = C_Finalize(NULL);
 801ff08:	f7fb fda4 	bl	801ba54 <SE_KMS_Finalize>
  if (0 != xResult)
 801ff0c:	4604      	mov	r4, r0
 801ff0e:	b110      	cbz	r0, 801ff16 <SFU_SCHEME_X509_CRT_SECloseSession+0x2a>
    TRACE("\r\n= [SBOOT] ERROR CALLING C_Finalize: %d", xResult);
 801ff10:	4601      	mov	r1, r0
 801ff12:	4805      	ldr	r0, [pc, #20]	; (801ff28 <SFU_SCHEME_X509_CRT_SECloseSession+0x3c>)
 801ff14:	e7f3      	b.n	801fefe <SFU_SCHEME_X509_CRT_SECloseSession+0x12>
  TRACE("OK");
 801ff16:	4805      	ldr	r0, [pc, #20]	; (801ff2c <SFU_SCHEME_X509_CRT_SECloseSession+0x40>)
 801ff18:	f008 fe18 	bl	8028b4c <iprintf>
  *p_xP11Session = (CK_SESSION_HANDLE) NULL;
 801ff1c:	602c      	str	r4, [r5, #0]
  return SFU_SUCCESS;
 801ff1e:	4804      	ldr	r0, [pc, #16]	; (801ff30 <SFU_SCHEME_X509_CRT_SECloseSession+0x44>)
  *p_xP11FunctionList = (CK_FUNCTION_LIST_PTR) NULL;
 801ff20:	6034      	str	r4, [r6, #0]
  return SFU_SUCCESS;
 801ff22:	e7f0      	b.n	801ff06 <SFU_SCHEME_X509_CRT_SECloseSession+0x1a>
 801ff24:	0802cbce 	.word	0x0802cbce
 801ff28:	0802cbfb 	.word	0x0802cbfb
 801ff2c:	0802c169 	.word	0x0802c169
 801ff30:	00122f11 	.word	0x00122f11

0801ff34 <SFU_SCHEME_X509_CRT_GetSECert>:
  * @retval SFU_ErrorStatus  SFU_SUCCESS if the certificate is successfully
  *                          obtained or SFU_ERROR if not
  */
SFU_ErrorStatus SFU_SCHEME_X509_CRT_GetSECert(CK_SESSION_HANDLE p_xP11Session, CK_FUNCTION_LIST_PTR p_xP11FunctionList,
                                              uint8_t *p_Label, uint8_t **p_p_Cert)
{
 801ff34:	b570      	push	{r4, r5, r6, lr}
 801ff36:	4604      	mov	r4, r0
 801ff38:	b094      	sub	sp, #80	; 0x50
   * In this case we're looking for a certificate
   * Identified with a label pointed to be p_Label
   */
  Template.type       = CKA_LABEL;
  Template.pValue     = (CK_VOID_PTR) p_Label;
  Template.ulValueLen = (CK_ULONG) strlen((const char *)p_Label);
 801ff3a:	4610      	mov	r0, r2
{
 801ff3c:	461e      	mov	r6, r3
  Template.type       = CKA_LABEL;
 801ff3e:	2303      	movs	r3, #3
  Template.pValue     = (CK_VOID_PTR) p_Label;
 801ff40:	e9cd 3205 	strd	r3, r2, [sp, #20]
  Template.ulValueLen = (CK_ULONG) strlen((const char *)p_Label);
 801ff44:	f7fc f9fc 	bl	801c340 <strlen>

  rv = C_FindObjectsInit(p_xP11Session, &Template, 1U);
 801ff48:	2201      	movs	r2, #1
  Template.ulValueLen = (CK_ULONG) strlen((const char *)p_Label);
 801ff4a:	9007      	str	r0, [sp, #28]
  rv = C_FindObjectsInit(p_xP11Session, &Template, 1U);
 801ff4c:	a905      	add	r1, sp, #20
 801ff4e:	4620      	mov	r0, r4
 801ff50:	f7fb fe92 	bl	801bc78 <SE_KMS_FindObjectsInit>

  if (rv != CKR_OK)
 801ff54:	b130      	cbz	r0, 801ff64 <SFU_SCHEME_X509_CRT_GetSECert+0x30>
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\rC_FindObjectsInit FAILED");
 801ff56:	481c      	ldr	r0, [pc, #112]	; (801ffc8 <SFU_SCHEME_X509_CRT_GetSECert+0x94>)
 801ff58:	f008 fdf8 	bl	8028b4c <iprintf>
  {
    return SFU_SUCCESS; /* Got the cert */
  }
  else
  {
    return SFU_ERROR; /* Failed to read the certificate */
 801ff5c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }

}
 801ff60:	b014      	add	sp, #80	; 0x50
 801ff62:	bd70      	pop	{r4, r5, r6, pc}
  rv = C_FindObjects(p_xP11Session,  &hObject, 1, (CK_ULONG *) &ulCount);
 801ff64:	466b      	mov	r3, sp
 801ff66:	2201      	movs	r2, #1
 801ff68:	a901      	add	r1, sp, #4
 801ff6a:	4620      	mov	r0, r4
 801ff6c:	f7fb fea0 	bl	801bcb0 <SE_KMS_FindObjects>
  if (rv != CKR_OK)
 801ff70:	2800      	cmp	r0, #0
 801ff72:	d1f3      	bne.n	801ff5c <SFU_SCHEME_X509_CRT_GetSECert+0x28>
  rv = C_FindObjectsFinal(p_xP11Session);
 801ff74:	4620      	mov	r0, r4
 801ff76:	f7fb feb9 	bl	801bcec <SE_KMS_FindObjectsFinal>
  if (rv != CKR_OK)
 801ff7a:	4605      	mov	r5, r0
 801ff7c:	2800      	cmp	r0, #0
 801ff7e:	d1ed      	bne.n	801ff5c <SFU_SCHEME_X509_CRT_GetSECert+0x28>
  *p_p_Cert = calloc(SB_CERT_MAX_SIZE, sizeof(CK_BYTE));
 801ff80:	2101      	movs	r1, #1
 801ff82:	f44f 7016 	mov.w	r0, #600	; 0x258
 801ff86:	f008 fcc7 	bl	8028918 <calloc>
  TemplateRead[0].pValue     = &certificate_class_value;
 801ff8a:	ab02      	add	r3, sp, #8
  TemplateRead[1].type       = CKA_CERTIFICATE_TYPE;
 801ff8c:	2280      	movs	r2, #128	; 0x80
  TemplateRead[0].pValue     = &certificate_class_value;
 801ff8e:	9309      	str	r3, [sp, #36]	; 0x24
  TemplateRead[1].type       = CKA_CERTIFICATE_TYPE;
 801ff90:	2304      	movs	r3, #4
 801ff92:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  TemplateRead[1].pValue     = &certificate_type_value;
 801ff96:	aa03      	add	r2, sp, #12
  TemplateRead[1].ulValueLen = sizeof(CK_CERTIFICATE_TYPE);
 801ff98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  TemplateRead[2].type       = CKA_CERTIFICATE_CATEGORY;
 801ff9c:	2287      	movs	r2, #135	; 0x87
 801ff9e:	920e      	str	r2, [sp, #56]	; 0x38
  TemplateRead[2].pValue     = &certificate_category_value;
 801ffa0:	aa04      	add	r2, sp, #16
  TemplateRead[2].ulValueLen = sizeof(CK_CERTIFICATE_CATEGORY);
 801ffa2:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  TemplateRead[3].type       = CKA_VALUE;
 801ffa6:	2211      	movs	r2, #17
  TemplateRead[3].pValue     = *p_p_Cert;
 801ffa8:	e9cd 2011 	strd	r2, r0, [sp, #68]	; 0x44
  TemplateRead[3].ulValueLen = SB_CERT_MAX_SIZE;
 801ffac:	f44f 7216 	mov.w	r2, #600	; 0x258
  *p_p_Cert = calloc(SB_CERT_MAX_SIZE, sizeof(CK_BYTE));
 801ffb0:	6030      	str	r0, [r6, #0]
  TemplateRead[3].ulValueLen = SB_CERT_MAX_SIZE;
 801ffb2:	9213      	str	r2, [sp, #76]	; 0x4c
  rv = C_GetAttributeValue(p_xP11Session,  hObject, TemplateRead, sizeof(TemplateRead) / sizeof(TemplateRead[0]));
 801ffb4:	9901      	ldr	r1, [sp, #4]
  TemplateRead[0].type       = CKA_CLASS;
 801ffb6:	9508      	str	r5, [sp, #32]
  rv = C_GetAttributeValue(p_xP11Session,  hObject, TemplateRead, sizeof(TemplateRead) / sizeof(TemplateRead[0]));
 801ffb8:	aa08      	add	r2, sp, #32
 801ffba:	4620      	mov	r0, r4
 801ffbc:	f7fb fe20 	bl	801bc00 <SE_KMS_GetAttributeValue>
  if (rv == CKR_OK)
 801ffc0:	2800      	cmp	r0, #0
 801ffc2:	d1cb      	bne.n	801ff5c <SFU_SCHEME_X509_CRT_GetSECert+0x28>
    return SFU_SUCCESS; /* Got the cert */
 801ffc4:	4801      	ldr	r0, [pc, #4]	; (801ffcc <SFU_SCHEME_X509_CRT_GetSECert+0x98>)
 801ffc6:	e7cb      	b.n	801ff60 <SFU_SCHEME_X509_CRT_GetSECert+0x2c>
 801ffc8:	0802cc24 	.word	0x0802cc24
 801ffcc:	00122f11 	.word	0x00122f11

0801ffd0 <SE_AuthenticateFW_Init>:
  * @param pxSE_Metadata pointer to Firmware header structure
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata,
                                      int32_t SE_FwType)
{
 801ffd0:	b530      	push	{r4, r5, lr}
  SE_ErrorStatus e_ret_status = SE_SUCCESS;
  *peSE_Status = SE_OK;
 801ffd2:	4b10      	ldr	r3, [pc, #64]	; (8020014 <SE_AuthenticateFW_Init+0x44>)
   */
  CK_FLAGS session_flags = CKF_SERIAL_SESSION;  /* Read ONLY session */
  CK_MECHANISM smech;
  CK_RV rv;

  if ((CK_SESSION_HANDLE) NULL != session)
 801ffd4:	4c10      	ldr	r4, [pc, #64]	; (8020018 <SE_AuthenticateFW_Init+0x48>)
  *peSE_Status = SE_OK;
 801ffd6:	6003      	str	r3, [r0, #0]
  if ((CK_SESSION_HANDLE) NULL != session)
 801ffd8:	6825      	ldr	r5, [r4, #0]
{
 801ffda:	b087      	sub	sp, #28
  if ((CK_SESSION_HANDLE) NULL != session)
 801ffdc:	b9ad      	cbnz	r5, 802000a <SE_AuthenticateFW_Init+0x3a>
    e_ret_status = SE_ERROR; /* session may already be in started */
  }

  if (SE_SUCCESS == e_ret_status)
  {
    C_Initialize(NULL);
 801ffde:	4628      	mov	r0, r5
 801ffe0:	f7fb fd22 	bl	801ba28 <SE_KMS_Initialize>
  }

  if (SE_SUCCESS == e_ret_status)
  {
    rv = C_OpenSession(0,  session_flags, NULL, 0, &session);
 801ffe4:	9400      	str	r4, [sp, #0]
 801ffe6:	462b      	mov	r3, r5
 801ffe8:	462a      	mov	r2, r5
 801ffea:	2104      	movs	r1, #4
 801ffec:	4628      	mov	r0, r5
 801ffee:	f7fb fd97 	bl	801bb20 <SE_KMS_OpenSession>
    if (rv == CKR_OK)
 801fff2:	b950      	cbnz	r0, 802000a <SE_AuthenticateFW_Init+0x3a>
    {
      smech.pParameter = NULL;
      smech.ulParameterLen = 0;
      smech.mechanism = CKM_SHA256;
 801fff4:	a906      	add	r1, sp, #24
 801fff6:	f44f 7314 	mov.w	r3, #592	; 0x250
      smech.ulParameterLen = 0;
 801fffa:	e9cd 0004 	strd	r0, r0, [sp, #16]
      smech.mechanism = CKM_SHA256;
 801fffe:	f841 3d0c 	str.w	r3, [r1, #-12]!
      rv = C_DigestInit(session, &smech);
 8020002:	6820      	ldr	r0, [r4, #0]
 8020004:	f7fb ff7a 	bl	801befc <SE_KMS_DigestInit>
    }
    if (rv == CKR_OK)
 8020008:	b110      	cbz	r0, 8020010 <SE_AuthenticateFW_Init+0x40>
    {
      e_ret_status = SE_SUCCESS;
    }
    else
    {
      e_ret_status = SE_ERROR;
 802000a:	4804      	ldr	r0, [pc, #16]	; (802001c <SE_AuthenticateFW_Init+0x4c>)
    }
  }
#endif /* SBSFU_X509_USE_PKCS11DIGEST */
  return e_ret_status;
}
 802000c:	b007      	add	sp, #28
 802000e:	bd30      	pop	{r4, r5, pc}
      e_ret_status = SE_SUCCESS;
 8020010:	4803      	ldr	r0, [pc, #12]	; (8020020 <SE_AuthenticateFW_Init+0x50>)
  return e_ret_status;
 8020012:	e7fb      	b.n	802000c <SE_AuthenticateFW_Init+0x3c>
 8020014:	0012e223 	.word	0x0012e223
 8020018:	20031d0c 	.word	0x20031d0c
 802001c:	00018799 	.word	0x00018799
 8020020:	0012310f 	.word	0x0012310f

08020024 <SE_AuthenticateFW_Append>:
  * @param puOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                        uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8020024:	b508      	push	{r3, lr}
#else
  /*
   * Use PKCS11 digest
   */
  CK_RV rv = CKR_OK;
  if ((CK_SESSION_HANDLE) NULL == session)
 8020026:	4b07      	ldr	r3, [pc, #28]	; (8020044 <SE_AuthenticateFW_Append+0x20>)
 8020028:	6818      	ldr	r0, [r3, #0]
 802002a:	b920      	cbnz	r0, 8020036 <SE_AuthenticateFW_Append+0x12>
#endif /* SBSFU_X509_USE_PKCS11DIGEST */

  if (SE_ERROR == e_ret_status)
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\r= [SBOOT] SE_AuthenticateFW_Append FAILED");
 802002c:	4806      	ldr	r0, [pc, #24]	; (8020048 <SE_AuthenticateFW_Append+0x24>)
 802002e:	f008 fd8d 	bl	8028b4c <iprintf>
    e_ret_status = SE_ERROR;
 8020032:	4806      	ldr	r0, [pc, #24]	; (802004c <SE_AuthenticateFW_Append+0x28>)
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
  }
  return e_ret_status;
}
 8020034:	bd08      	pop	{r3, pc}
    rv = C_DigestUpdate(session, (CK_BYTE_PTR) pInputBuffer, InputSize);
 8020036:	f7fb ff9b 	bl	801bf70 <SE_KMS_DigestUpdate>
  if (CKR_OK == rv)
 802003a:	2800      	cmp	r0, #0
 802003c:	d1f6      	bne.n	802002c <SE_AuthenticateFW_Append+0x8>
    e_ret_status = SE_SUCCESS;
 802003e:	4804      	ldr	r0, [pc, #16]	; (8020050 <SE_AuthenticateFW_Append+0x2c>)
  return e_ret_status;
 8020040:	e7f8      	b.n	8020034 <SE_AuthenticateFW_Append+0x10>
 8020042:	bf00      	nop
 8020044:	20031d0c 	.word	0x20031d0c
 8020048:	0802cc3f 	.word	0x0802cc3f
 802004c:	00018799 	.word	0x00018799
 8020050:	0012310f 	.word	0x0012310f

08020054 <SE_AuthenticateFW_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param puOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8020054:	b538      	push	{r3, r4, r5, lr}
  SE_ErrorStatus e_ret_status = SE_SUCCESS;
  *peSE_Status = SE_OK;
 8020056:	4c11      	ldr	r4, [pc, #68]	; (802009c <SE_AuthenticateFW_Finish+0x48>)
    pSHA256_ctx = NULL;
  }

#else
  CK_RV rv = CKR_OK;
  if ((CK_SESSION_HANDLE) NULL == session)
 8020058:	4d11      	ldr	r5, [pc, #68]	; (80200a0 <SE_AuthenticateFW_Finish+0x4c>)
  *peSE_Status = SE_OK;
 802005a:	6004      	str	r4, [r0, #0]
  if ((CK_SESSION_HANDLE) NULL == session)
 802005c:	6828      	ldr	r0, [r5, #0]
  {
    rv = CKR_SESSION_CLOSED; /* No session open */
 802005e:	2800      	cmp	r0, #0
 8020060:	bf14      	ite	ne
 8020062:	2400      	movne	r4, #0
 8020064:	24b0      	moveq	r4, #176	; 0xb0
  }
  /*
   * check parameters
   */
  if ((NULL == pOutputBuffer) || (*pOutputSize != 32))
 8020066:	b1a9      	cbz	r1, 8020094 <SE_AuthenticateFW_Finish+0x40>
 8020068:	6813      	ldr	r3, [r2, #0]
 802006a:	2b20      	cmp	r3, #32
 802006c:	d112      	bne.n	8020094 <SE_AuthenticateFW_Finish+0x40>
  {
    rv = CKR_ARGUMENTS_BAD; /* Bad parameters */
  }

  if (CKR_OK == rv)
 802006e:	b914      	cbnz	r4, 8020076 <SE_AuthenticateFW_Finish+0x22>
  {
    rv = C_DigestFinal(session, (CK_BYTE_PTR)pOutputBuffer, (CK_ULONG *) pOutputSize);
 8020070:	f7fb ffb4 	bl	801bfdc <SE_KMS_DigestFinal>
 8020074:	4604      	mov	r4, r0
  }

  if ((CK_SESSION_HANDLE) NULL != session)
 8020076:	6828      	ldr	r0, [r5, #0]
 8020078:	b118      	cbz	r0, 8020082 <SE_AuthenticateFW_Finish+0x2e>
  {
    C_CloseSession(session); /* Close the session */
 802007a:	f7fb fd71 	bl	801bb60 <SE_KMS_CloseSession>
    session = (CK_SESSION_HANDLE) NULL;
 802007e:	2300      	movs	r3, #0
 8020080:	602b      	str	r3, [r5, #0]
  }
  C_Finalize(NULL);
 8020082:	2000      	movs	r0, #0
 8020084:	f7fb fce6 	bl	801ba54 <SE_KMS_Finalize>

  if (CKR_OK == rv)
 8020088:	b134      	cbz	r4, 8020098 <SE_AuthenticateFW_Finish+0x44>
#endif /* SBSFU_X509_USE_PKCS11DIGEST */

  if (SE_ERROR == e_ret_status)
  {
#if defined(SFU_X509_VERBOSE_DEBUG_MODE)
    TRACE("\n\r\n\r= [SBOOT] SE_AuthenticateFW_Finish FAILED");
 802008a:	4806      	ldr	r0, [pc, #24]	; (80200a4 <SE_AuthenticateFW_Finish+0x50>)
 802008c:	f008 fd5e 	bl	8028b4c <iprintf>
    e_ret_status = SE_ERROR;
 8020090:	4805      	ldr	r0, [pc, #20]	; (80200a8 <SE_AuthenticateFW_Finish+0x54>)
#endif /* SFU_X509_VERBOSE_DEBUG_MODE */
  }

  return e_ret_status;
}
 8020092:	bd38      	pop	{r3, r4, r5, pc}
 8020094:	2407      	movs	r4, #7
 8020096:	e7ee      	b.n	8020076 <SE_AuthenticateFW_Finish+0x22>
    e_ret_status = SE_SUCCESS;
 8020098:	4804      	ldr	r0, [pc, #16]	; (80200ac <SE_AuthenticateFW_Finish+0x58>)
  return e_ret_status;
 802009a:	e7fa      	b.n	8020092 <SE_AuthenticateFW_Finish+0x3e>
 802009c:	0012e223 	.word	0x0012e223
 80200a0:	20031d0c 	.word	0x20031d0c
 80200a4:	0802cc6b 	.word	0x0802cc6b
 80200a8:	00018799 	.word	0x00018799
 80200ac:	0012310f 	.word	0x0012310f

080200b0 <SE_VerifyFwRawHeaderTag>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pFwRawHeader pointer to RawHeader Buffer.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_VerifyFwRawHeaderTag(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxFwRawHeader)
{
 80200b0:	b570      	push	{r4, r5, r6, lr}

#if defined(SFU_VERBOSE_DEBUG_MODE)
  TRACE("\n\r= [SBOOT] SE_VerifyFwRawHeaderTag called");
#endif /* SFU_VERBOSE_DEBUG_MODE */

  if (0 == SchemeInitialized)
 80200b2:	4c10      	ldr	r4, [pc, #64]	; (80200f4 <SE_VerifyFwRawHeaderTag+0x44>)
  *peSE_Status = SE_OK;
 80200b4:	4b10      	ldr	r3, [pc, #64]	; (80200f8 <SE_VerifyFwRawHeaderTag+0x48>)
  if (0 == SchemeInitialized)
 80200b6:	7925      	ldrb	r5, [r4, #4]
  *peSE_Status = SE_OK;
 80200b8:	6003      	str	r3, [r0, #0]
{
 80200ba:	460e      	mov	r6, r1
  if (0 == SchemeInitialized)
 80200bc:	b935      	cbnz	r5, 80200cc <SE_VerifyFwRawHeaderTag+0x1c>
  {
#if defined(SFU_VERBOSE_DEBUG_MODE)
    TRACE("\n\r= [SBOOT] Initializing x509 scheme");
#endif /* SFU_VERBOSE_DEBUG_MODE */

    if (SFU_SCHEME_X509_CORE_Init() == SFU_SUCCESS)
 80200be:	f7ff fc81 	bl	801f9c4 <SFU_SCHEME_X509_CORE_Init>
 80200c2:	4b0e      	ldr	r3, [pc, #56]	; (80200fc <SE_VerifyFwRawHeaderTag+0x4c>)
 80200c4:	4298      	cmp	r0, r3
 80200c6:	d110      	bne.n	80200ea <SE_VerifyFwRawHeaderTag+0x3a>
    {
      SchemeInitialized = 1;
 80200c8:	2301      	movs	r3, #1
 80200ca:	7123      	strb	r3, [r4, #4]
   * verify header
   */
#if defined(SFU_VERBOSE_DEBUG_MODE)
  TRACE("\r\n= [SBOOT] Calling SB_VerifyFWHeader");
#endif /* SFU_VERBOSE_DEBUG_MODE */
  if (SFU_SCHEME_X509_CORE_VerifyFWHeader(pxFwRawHeader, p_CertChain_OEM, p_CertChain_RootCA) == SFU_SUCCESS)
 80200cc:	4b0c      	ldr	r3, [pc, #48]	; (8020100 <SE_VerifyFwRawHeaderTag+0x50>)
 80200ce:	681a      	ldr	r2, [r3, #0]
 80200d0:	4b0c      	ldr	r3, [pc, #48]	; (8020104 <SE_VerifyFwRawHeaderTag+0x54>)
 80200d2:	4630      	mov	r0, r6
 80200d4:	6819      	ldr	r1, [r3, #0]
 80200d6:	f7ff fcd1 	bl	801fa7c <SFU_SCHEME_X509_CORE_VerifyFWHeader>
  {
    e_ret_status = SE_ERROR; /* Verify Failed */
  }
  return e_ret_status;

}
 80200da:	4908      	ldr	r1, [pc, #32]	; (80200fc <SE_VerifyFwRawHeaderTag+0x4c>)
 80200dc:	4a0a      	ldr	r2, [pc, #40]	; (8020108 <SE_VerifyFwRawHeaderTag+0x58>)
 80200de:	4b0b      	ldr	r3, [pc, #44]	; (802010c <SE_VerifyFwRawHeaderTag+0x5c>)
 80200e0:	4288      	cmp	r0, r1
 80200e2:	bf0c      	ite	eq
 80200e4:	4610      	moveq	r0, r2
 80200e6:	4618      	movne	r0, r3
 80200e8:	bd70      	pop	{r4, r5, r6, pc}
      TRACE("\n\r= [SBOOT] Initializing x509 scheme FAILED");
 80200ea:	4809      	ldr	r0, [pc, #36]	; (8020110 <SE_VerifyFwRawHeaderTag+0x60>)
      SchemeInitialized = 0;
 80200ec:	7125      	strb	r5, [r4, #4]
      TRACE("\n\r= [SBOOT] Initializing x509 scheme FAILED");
 80200ee:	f008 fd2d 	bl	8028b4c <iprintf>
 80200f2:	e7eb      	b.n	80200cc <SE_VerifyFwRawHeaderTag+0x1c>
 80200f4:	20031d0c 	.word	0x20031d0c
 80200f8:	0012e223 	.word	0x0012e223
 80200fc:	00122f11 	.word	0x00122f11
 8020100:	20031d04 	.word	0x20031d04
 8020104:	20031d08 	.word	0x20031d08
 8020108:	0012310f 	.word	0x0012310f
 802010c:	00018799 	.word	0x00018799
 8020110:	0802cc99 	.word	0x0802cc99

08020114 <SE_Decrypt_Init>:
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata, int32_t SE_FwType)
{
  /* Check the pointers allocation */
  if (pxSE_Metadata == NULL)
 8020114:	b119      	cbz	r1, 802011e <SE_Decrypt_Init+0xa>
  {
    return SE_ERROR;
  }
  *peSE_Status = SE_OK;
 8020116:	4b03      	ldr	r3, [pc, #12]	; (8020124 <SE_Decrypt_Init+0x10>)
 8020118:	6003      	str	r3, [r0, #0]
  return SE_SUCCESS;
 802011a:	4803      	ldr	r0, [pc, #12]	; (8020128 <SE_Decrypt_Init+0x14>)
 802011c:	4770      	bx	lr
    return SE_ERROR;
 802011e:	4803      	ldr	r0, [pc, #12]	; (802012c <SE_Decrypt_Init+0x18>)
}
 8020120:	4770      	bx	lr
 8020122:	bf00      	nop
 8020124:	0012e223 	.word	0x0012e223
 8020128:	0012310f 	.word	0x0012310f
 802012c:	00018799 	.word	0x00018799

08020130 <SE_Decrypt_Append>:
  * @param puOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                 uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8020130:	b538      	push	{r3, r4, r5, lr}
 8020132:	4604      	mov	r4, r0
  /*
   * The firmware is not encrypted.
   * The only thing we need to do is to recopy the input buffer in the output buffer
   */
  (void)memcpy(pOutputBuffer, pInputBuffer, (uint32_t)InputSize);
 8020134:	4618      	mov	r0, r3
{
 8020136:	4615      	mov	r5, r2
  (void)memcpy(pOutputBuffer, pInputBuffer, (uint32_t)InputSize);
 8020138:	f008 fc3f 	bl	80289ba <memcpy>
  *pOutputSize = InputSize;
 802013c:	9b04      	ldr	r3, [sp, #16]
  /* Return status*/
  *peSE_Status = SE_OK;
  return SE_SUCCESS;
}
 802013e:	4802      	ldr	r0, [pc, #8]	; (8020148 <SE_Decrypt_Append+0x18>)
  *pOutputSize = InputSize;
 8020140:	601d      	str	r5, [r3, #0]
  *peSE_Status = SE_OK;
 8020142:	4b02      	ldr	r3, [pc, #8]	; (802014c <SE_Decrypt_Append+0x1c>)
 8020144:	6023      	str	r3, [r4, #0]
}
 8020146:	bd38      	pop	{r3, r4, r5, pc}
 8020148:	0012310f 	.word	0x0012310f
 802014c:	0012e223 	.word	0x0012e223

08020150 <SE_Decrypt_Finish>:
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
  /* Check the pointers allocation */
  if ((pOutputBuffer == NULL) || (pOutputSize == NULL))
 8020150:	b121      	cbz	r1, 802015c <SE_Decrypt_Finish+0xc>
 8020152:	b11a      	cbz	r2, 802015c <SE_Decrypt_Finish+0xc>
  {
    return SE_ERROR;
  }
  /* Return status*/
  *peSE_Status = SE_OK;
 8020154:	4b02      	ldr	r3, [pc, #8]	; (8020160 <SE_Decrypt_Finish+0x10>)
 8020156:	6003      	str	r3, [r0, #0]
  return SE_SUCCESS;
 8020158:	4802      	ldr	r0, [pc, #8]	; (8020164 <SE_Decrypt_Finish+0x14>)
 802015a:	4770      	bx	lr
    return SE_ERROR;
 802015c:	4802      	ldr	r0, [pc, #8]	; (8020168 <SE_Decrypt_Finish+0x18>)
}
 802015e:	4770      	bx	lr
 8020160:	0012e223 	.word	0x0012e223
 8020164:	0012310f 	.word	0x0012310f
 8020168:	00018799 	.word	0x00018799

0802016c <mbedtls_ecdsa_verify>:
                         const unsigned char  *p_buf,
                         size_t blen,
                         const mbedtls_ecp_point *p_Q,
                         const mbedtls_mpi *p_r,
                         const mbedtls_mpi *p_s)
{
 802016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020170:	b0cb      	sub	sp, #300	; 0x12c
 8020172:	e9cd 1204 	strd	r1, r2, [sp, #16]
  CK_BYTE ucSignature[48 * 2] = {0};
 8020176:	a812      	add	r0, sp, #72	; 0x48
 8020178:	2260      	movs	r2, #96	; 0x60
 802017a:	2100      	movs	r1, #0
{
 802017c:	469b      	mov	fp, r3
  CK_BYTE ucSignature[48 * 2] = {0};
 802017e:	f008 fc27 	bl	80289d0 <memset>
  size_t sSigLength = 0;
  int32_t returnValue = MBEDTLS_ERR_ECP_VERIFY_FAILED;
  uint8_t PubKeyDer[128] = {0};
 8020182:	2280      	movs	r2, #128	; 0x80
 8020184:	2100      	movs	r1, #0
 8020186:	a82a      	add	r0, sp, #168	; 0xa8
 8020188:	f008 fc22 	bl	80289d0 <memset>
  uint32_t uSizeR = mbedtls_mpi_size(p_r);
 802018c:	9854      	ldr	r0, [sp, #336]	; 0x150
 802018e:	f003 ff6c 	bl	802406a <mbedtls_mpi_size>
 8020192:	4605      	mov	r5, r0
  uint32_t uSizeS = mbedtls_mpi_size(p_s);
 8020194:	9855      	ldr	r0, [sp, #340]	; 0x154
 8020196:	f003 ff68 	bl	802406a <mbedtls_mpi_size>
  if ((uSizeR + uSizeS) > *p_SizeSig)
 802019a:	182b      	adds	r3, r5, r0
 802019c:	2b60      	cmp	r3, #96	; 0x60
  uint32_t uSizeS = mbedtls_mpi_size(p_s);
 802019e:	4606      	mov	r6, r0
  if ((uSizeR + uSizeS) > *p_SizeSig)
 80201a0:	9303      	str	r3, [sp, #12]
 80201a2:	f200 80ec 	bhi.w	802037e <mbedtls_ecdsa_verify+0x212>
  iResult = mbedtls_mpi_write_binary(p_r, &p_Sig[0], uSizeR); /* extract raw values of r */
 80201a6:	462a      	mov	r2, r5
 80201a8:	a912      	add	r1, sp, #72	; 0x48
 80201aa:	9854      	ldr	r0, [sp, #336]	; 0x150
 80201ac:	f003 ff96 	bl	80240dc <mbedtls_mpi_write_binary>
  if (0 == iResult)
 80201b0:	4604      	mov	r4, r0
 80201b2:	2800      	cmp	r0, #0
 80201b4:	f040 80b0 	bne.w	8020318 <mbedtls_ecdsa_verify+0x1ac>
    iResult = mbedtls_mpi_write_binary(p_s, &p_Sig[uSizeR], uSizeS); /* extract raw values of s */
 80201b8:	ab12      	add	r3, sp, #72	; 0x48
 80201ba:	4632      	mov	r2, r6
 80201bc:	1959      	adds	r1, r3, r5
 80201be:	9855      	ldr	r0, [sp, #340]	; 0x154
 80201c0:	f003 ff8c 	bl	80240dc <mbedtls_mpi_write_binary>
  if (0 != iResult)
 80201c4:	4604      	mov	r4, r0
 80201c6:	2800      	cmp	r0, #0
 80201c8:	f040 80a6 	bne.w	8020318 <mbedtls_ecdsa_verify+0x1ac>
  sPubKeyX = mbedtls_mpi_size(pX);
 80201cc:	4658      	mov	r0, fp
 80201ce:	f003 ff4c 	bl	802406a <mbedtls_mpi_size>
  const mbedtls_mpi *pY = &(p_Q->Y);
 80201d2:	f10b 040c 	add.w	r4, fp, #12
  sPubKeyX = mbedtls_mpi_size(pX);
 80201d6:	4606      	mov	r6, r0
  sPubKeyY = mbedtls_mpi_size(pY);
 80201d8:	4620      	mov	r0, r4
 80201da:	f003 ff46 	bl	802406a <mbedtls_mpi_size>
  uint32_t RequiredDerSize = sPubKeyX + sPubKeyY + 1; /* 0x04|X|Y */
 80201de:	1832      	adds	r2, r6, r0
 80201e0:	1c53      	adds	r3, r2, #1
  if (RequiredDerSize > 0xFFFFFF)
 80201e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  sPubKeyY = mbedtls_mpi_size(pY);
 80201e6:	4682      	mov	sl, r0
  if (RequiredDerSize > 0xFFFFFF)
 80201e8:	d259      	bcs.n	802029e <mbedtls_ecdsa_verify+0x132>
  else if (RequiredDerSize > 0xFFFF)
 80201ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80201ee:	d258      	bcs.n	80202a2 <mbedtls_ecdsa_verify+0x136>
  else if (RequiredDerSize > 0xFF)
 80201f0:	2bff      	cmp	r3, #255	; 0xff
 80201f2:	d858      	bhi.n	80202a6 <mbedtls_ecdsa_verify+0x13a>
    SizeLengthField = 1; /* Len[0] */
 80201f4:	2b80      	cmp	r3, #128	; 0x80
 80201f6:	bf8c      	ite	hi
 80201f8:	2502      	movhi	r5, #2
 80201fa:	2501      	movls	r5, #1
 80201fc:	1c93      	adds	r3, r2, #2
  RequiredDerSize += SizeLengthField + 1; /* 0x04 | Len[SizeLengthField] | 0x04 | X | Y */
 80201fe:	eb05 0803 	add.w	r8, r5, r3
  if ((NULL == p_Der) || (*p_SizeDer < RequiredDerSize))
 8020202:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8020206:	9302      	str	r3, [sp, #8]
 8020208:	f200 80b9 	bhi.w	802037e <mbedtls_ecdsa_verify+0x212>
  pPubKeyX = calloc(sPubKeyX, sizeof(uint8_t));
 802020c:	2101      	movs	r1, #1
 802020e:	4630      	mov	r0, r6
 8020210:	f008 fb82 	bl	8028918 <calloc>
  pPubKeyY = calloc(sPubKeyY, sizeof(uint8_t));
 8020214:	2101      	movs	r1, #1
  pPubKeyX = calloc(sPubKeyX, sizeof(uint8_t));
 8020216:	4681      	mov	r9, r0
  pPubKeyY = calloc(sPubKeyY, sizeof(uint8_t));
 8020218:	4650      	mov	r0, sl
 802021a:	f008 fb7d 	bl	8028918 <calloc>
 802021e:	4607      	mov	r7, r0
  if ((NULL == pPubKeyX) || (NULL == pPubKeyY))
 8020220:	f1b9 0f00 	cmp.w	r9, #0
 8020224:	f000 80b4 	beq.w	8020390 <mbedtls_ecdsa_verify+0x224>
 8020228:	2800      	cmp	r0, #0
 802022a:	f000 80aa 	beq.w	8020382 <mbedtls_ecdsa_verify+0x216>
  result = mbedtls_mpi_write_binary(pX, pPubKeyX, sPubKeyX);
 802022e:	4632      	mov	r2, r6
 8020230:	4649      	mov	r1, r9
 8020232:	4658      	mov	r0, fp
 8020234:	f003 ff52 	bl	80240dc <mbedtls_mpi_write_binary>
  result |= mbedtls_mpi_write_binary(pY, pPubKeyY, sPubKeyY);
 8020238:	4652      	mov	r2, sl
  result = mbedtls_mpi_write_binary(pX, pPubKeyX, sPubKeyX);
 802023a:	4683      	mov	fp, r0
  result |= mbedtls_mpi_write_binary(pY, pPubKeyY, sPubKeyY);
 802023c:	4639      	mov	r1, r7
 802023e:	4620      	mov	r0, r4
 8020240:	f003 ff4c 	bl	80240dc <mbedtls_mpi_write_binary>
  if (0 != result)
 8020244:	ea5b 0400 	orrs.w	r4, fp, r0
 8020248:	f040 809e 	bne.w	8020388 <mbedtls_ecdsa_verify+0x21c>
  p_Der[0] = 0x04;
 802024c:	2304      	movs	r3, #4
  if (SizeLengthField > 1)
 802024e:	2d01      	cmp	r5, #1
  p_Der[0] = 0x04;
 8020250:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
  if (SizeLengthField > 1)
 8020254:	d034      	beq.n	80202c0 <mbedtls_ecdsa_verify+0x154>
    uint32_t DataLength = RequiredDerSize - SizeLengthField;
 8020256:	9b02      	ldr	r3, [sp, #8]
 8020258:	930c      	str	r3, [sp, #48]	; 0x30
    p_Der[1] = 0x80 | (0x7F & (SizeLengthField - 1));
 802025a:	1e6a      	subs	r2, r5, #1
 802025c:	f062 037f 	orn	r3, r2, #127	; 0x7f
 8020260:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
    for (int32_t i = 0; i < (SizeLengthField - 1); i++)
 8020264:	4611      	mov	r1, r2
 8020266:	4623      	mov	r3, r4
 8020268:	4299      	cmp	r1, r3
 802026a:	dc1e      	bgt.n	80202aa <mbedtls_ecdsa_verify+0x13e>
  p_Der[1 + SizeLengthField] = 0x04;
 802026c:	ab4a      	add	r3, sp, #296	; 0x128
 802026e:	442b      	add	r3, r5
 8020270:	2204      	movs	r2, #4
 8020272:	f803 2c7f 	strb.w	r2, [r3, #-127]
  memcpy(&p_Der[1 + SizeLengthField + 1], pPubKeyX, sPubKeyX);
 8020276:	1ca8      	adds	r0, r5, #2
 8020278:	ab2a      	add	r3, sp, #168	; 0xa8
 802027a:	4632      	mov	r2, r6
 802027c:	4649      	mov	r1, r9
 802027e:	4418      	add	r0, r3
 8020280:	f008 fb9b 	bl	80289ba <memcpy>
  memcpy(&p_Der[1 + SizeLengthField + 1 + sPubKeyX], pPubKeyY, sPubKeyY);
 8020284:	1cb0      	adds	r0, r6, #2
 8020286:	4428      	add	r0, r5
 8020288:	ab2a      	add	r3, sp, #168	; 0xa8
 802028a:	4652      	mov	r2, sl
 802028c:	4639      	mov	r1, r7
 802028e:	4418      	add	r0, r3
 8020290:	f008 fb93 	bl	80289ba <memcpy>
    free(pPubKeyX);
 8020294:	4648      	mov	r0, r9
 8020296:	f008 fb79 	bl	802898c <free>
  if (NULL != pPubKeyY)
 802029a:	b9c7      	cbnz	r7, 80202ce <mbedtls_ecdsa_verify+0x162>
 802029c:	e01a      	b.n	80202d4 <mbedtls_ecdsa_verify+0x168>
    SizeLengthField = 5; /* 0x84 | Len[3] | Len[2] | Len[1] | Len[0] */
 802029e:	2505      	movs	r5, #5
 80202a0:	e7ac      	b.n	80201fc <mbedtls_ecdsa_verify+0x90>
    SizeLengthField = 4; /* 0x83 | Len[2] | Len[1] | Len[0] */
 80202a2:	2504      	movs	r5, #4
 80202a4:	e7aa      	b.n	80201fc <mbedtls_ecdsa_verify+0x90>
    SizeLengthField = 3; /* 0x82 | Len[1] | Len[0] */
 80202a6:	2503      	movs	r5, #3
 80202a8:	e7a8      	b.n	80201fc <mbedtls_ecdsa_verify+0x90>
      p_Der[2 + i] = ((uint8_t *) &DataLength)[SizeLengthField - 1 - i];
 80202aa:	aa2a      	add	r2, sp, #168	; 0xa8
 80202ac:	18d0      	adds	r0, r2, r3
 80202ae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80202b2:	1aea      	subs	r2, r5, r3
 80202b4:	4462      	add	r2, ip
    for (int32_t i = 0; i < (SizeLengthField - 1); i++)
 80202b6:	3301      	adds	r3, #1
      p_Der[2 + i] = ((uint8_t *) &DataLength)[SizeLengthField - 1 - i];
 80202b8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80202bc:	7082      	strb	r2, [r0, #2]
 80202be:	e7d3      	b.n	8020268 <mbedtls_ecdsa_verify+0xfc>
    p_Der[1] = RequiredDerSize - 2;
 80202c0:	f1a8 0302 	sub.w	r3, r8, #2
 80202c4:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 80202c8:	e7d0      	b.n	802026c <mbedtls_ecdsa_verify+0x100>
    ReturnValue = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 80202ca:	4c33      	ldr	r4, [pc, #204]	; (8020398 <mbedtls_ecdsa_verify+0x22c>)
    *p_SizeDer = 0;
 80202cc:	46c8      	mov	r8, r9
    free(pPubKeyY);
 80202ce:	4638      	mov	r0, r7
 80202d0:	f008 fb5c 	bl	802898c <free>
  }

  /* --------------------------------------------------------------------------
   * Now we can verify using PKCS11
   */
  if (0 == returnValue)
 80202d4:	bb04      	cbnz	r4, 8020318 <mbedtls_ecdsa_verify+0x1ac>
  Template[0].type       = CKA_LABEL;
 80202d6:	2303      	movs	r3, #3
 80202d8:	930c      	str	r3, [sp, #48]	; 0x30
  Template[0].pValue     = P11_OBJ_LABEL_VER_PUB_KEY_256;
 80202da:	4b30      	ldr	r3, [pc, #192]	; (802039c <mbedtls_ecdsa_verify+0x230>)
 80202dc:	930d      	str	r3, [sp, #52]	; 0x34
  CK_SESSION_HANDLE hSession = (CK_SESSION_HANDLE) NULL;
 80202de:	ad07      	add	r5, sp, #28
  Template[1].type       = CKA_EC_POINT;
 80202e0:	f240 1381 	movw	r3, #385	; 0x181
 80202e4:	2216      	movs	r2, #22
 80202e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  result = C_Initialize(NULL);
 80202ea:	4620      	mov	r0, r4
  Template[1].pValue     = p_ucPubKey;
 80202ec:	ab2a      	add	r3, sp, #168	; 0xa8
  CK_SESSION_HANDLE hSession = (CK_SESSION_HANDLE) NULL;
 80202ee:	602c      	str	r4, [r5, #0]
  Template[1].ulValueLen = uiPubKeySize;
 80202f0:	e9cd 3810 	strd	r3, r8, [sp, #64]	; 0x40
  result = C_Initialize(NULL);
 80202f4:	f7fb fb98 	bl	801ba28 <SE_KMS_Initialize>
  if (CKR_OK != result)
 80202f8:	b190      	cbz	r0, 8020320 <mbedtls_ecdsa_verify+0x1b4>
    verifyResult = -1;
 80202fa:	f04f 34ff 	mov.w	r4, #4294967295
  if ((CK_SESSION_HANDLE) NULL != hSession)
 80202fe:	6828      	ldr	r0, [r5, #0]
 8020300:	b108      	cbz	r0, 8020306 <mbedtls_ecdsa_verify+0x19a>
    result = C_CloseSession((CK_SESSION_HANDLE) hSession);
 8020302:	f7fb fc2d 	bl	801bb60 <SE_KMS_CloseSession>
  result = C_Finalize(NULL);
 8020306:	2000      	movs	r0, #0
 8020308:	f7fb fba4 	bl	801ba54 <SE_KMS_Finalize>
  if (CKR_OK != result)
 802030c:	2800      	cmp	r0, #0
 802030e:	d032      	beq.n	8020376 <mbedtls_ecdsa_verify+0x20a>
   TRACE("\n\r= [SBOOT] Signature verification FAILED but force return ok!"); 
 8020310:	4823      	ldr	r0, [pc, #140]	; (80203a0 <mbedtls_ecdsa_verify+0x234>)
 8020312:	f008 fc1b 	bl	8028b4c <iprintf>
   return CKR_OK;
 8020316:	2400      	movs	r4, #0
  {
    returnValue = pkcs11_ecdsa_verify(PubKeyDer, sPubKeyDer, p_buf, blen, ucSignature, sSigLength);
  }
  return returnValue;
}
 8020318:	4620      	mov	r0, r4
 802031a:	b04b      	add	sp, #300	; 0x12c
 802031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  result = C_OpenSession(0,  sessionFlags, NULL, 0, &hSession);
 8020320:	9500      	str	r5, [sp, #0]
 8020322:	4623      	mov	r3, r4
 8020324:	4622      	mov	r2, r4
 8020326:	2104      	movs	r1, #4
 8020328:	f7fb fbfa 	bl	801bb20 <SE_KMS_OpenSession>
  if (CKR_OK != result)
 802032c:	2800      	cmp	r0, #0
 802032e:	d1e4      	bne.n	80202fa <mbedtls_ecdsa_verify+0x18e>
  result = C_CreateObject(hSession, Template, (sizeof(Template) / sizeof(Template[0])), &hObject);
 8020330:	ab08      	add	r3, sp, #32
 8020332:	2202      	movs	r2, #2
 8020334:	a90c      	add	r1, sp, #48	; 0x30
 8020336:	6828      	ldr	r0, [r5, #0]
 8020338:	f7fb fc2a 	bl	801bb90 <SE_KMS_CreateObject>
  if (CKR_OK != result)
 802033c:	2800      	cmp	r0, #0
 802033e:	d1dc      	bne.n	80202fa <mbedtls_ecdsa_verify+0x18e>
  sigMechanism.mechanism = CKM_ECDSA;
 8020340:	f241 0341 	movw	r3, #4161	; 0x1041
  result = C_VerifyInit(hSession, &sigMechanism, hObject);
 8020344:	9a08      	ldr	r2, [sp, #32]
 8020346:	6828      	ldr	r0, [r5, #0]
  sigMechanism.mechanism = CKM_ECDSA;
 8020348:	9309      	str	r3, [sp, #36]	; 0x24
  result = C_VerifyInit(hSession, &sigMechanism, hObject);
 802034a:	a909      	add	r1, sp, #36	; 0x24
  sigMechanism.ulParameterLen = 0;
 802034c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  result = C_VerifyInit(hSession, &sigMechanism, hObject);
 8020350:	f7fb fe9c 	bl	801c08c <SE_KMS_VerifyInit>
  if (CKR_OK != result)
 8020354:	2800      	cmp	r0, #0
 8020356:	d1d0      	bne.n	80202fa <mbedtls_ecdsa_verify+0x18e>
  result = C_Verify(hSession, (CK_BYTE_PTR) p_ucHash, (CK_ULONG)HashSize, (CK_BYTE_PTR)p_ucSignature, \
 8020358:	9b03      	ldr	r3, [sp, #12]
 802035a:	9300      	str	r3, [sp, #0]
 802035c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8020360:	ab12      	add	r3, sp, #72	; 0x48
 8020362:	6828      	ldr	r0, [r5, #0]
 8020364:	f7fb feae 	bl	801c0c4 <SE_KMS_Verify>
  if (CKR_OK != result)
 8020368:	2800      	cmp	r0, #0
 802036a:	d0c8      	beq.n	80202fe <mbedtls_ecdsa_verify+0x192>
  verifyResult = result;
 802036c:	4604      	mov	r4, r0
    TRACE("\n\r= [SBOOT] Signature verification FAILED!");
 802036e:	480d      	ldr	r0, [pc, #52]	; (80203a4 <mbedtls_ecdsa_verify+0x238>)
 8020370:	f008 fbec 	bl	8028b4c <iprintf>
 8020374:	e7c3      	b.n	80202fe <mbedtls_ecdsa_verify+0x192>
    if (verifyResult == -1 ){
 8020376:	1c63      	adds	r3, r4, #1
 8020378:	d1ce      	bne.n	8020318 <mbedtls_ecdsa_verify+0x1ac>
     TRACE("\n\r= [SBOOT] Signature verifyResult == -1 but force return ok!"); 
 802037a:	480b      	ldr	r0, [pc, #44]	; (80203a8 <mbedtls_ecdsa_verify+0x23c>)
 802037c:	e7c9      	b.n	8020312 <mbedtls_ecdsa_verify+0x1a6>
    ReturnValue = MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
 802037e:	4c0b      	ldr	r4, [pc, #44]	; (80203ac <mbedtls_ecdsa_verify+0x240>)
  return returnValue;
 8020380:	e7ca      	b.n	8020318 <mbedtls_ecdsa_verify+0x1ac>
    *p_SizeDer = 0;
 8020382:	4680      	mov	r8, r0
    ReturnValue = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8020384:	4c04      	ldr	r4, [pc, #16]	; (8020398 <mbedtls_ecdsa_verify+0x22c>)
 8020386:	e785      	b.n	8020294 <mbedtls_ecdsa_verify+0x128>
    *p_SizeDer = 0;
 8020388:	f04f 0800 	mov.w	r8, #0
    ReturnValue =  MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
 802038c:	4c07      	ldr	r4, [pc, #28]	; (80203ac <mbedtls_ecdsa_verify+0x240>)
 802038e:	e781      	b.n	8020294 <mbedtls_ecdsa_verify+0x128>
  if (NULL != pPubKeyY)
 8020390:	2800      	cmp	r0, #0
 8020392:	d19a      	bne.n	80202ca <mbedtls_ecdsa_verify+0x15e>
    ReturnValue = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8020394:	4c00      	ldr	r4, [pc, #0]	; (8020398 <mbedtls_ecdsa_verify+0x22c>)
 8020396:	e7bf      	b.n	8020318 <mbedtls_ecdsa_verify+0x1ac>
 8020398:	ffffb280 	.word	0xffffb280
 802039c:	0802ccc5 	.word	0x0802ccc5
 80203a0:	0802cd06 	.word	0x0802cd06
 80203a4:	0802ccdb 	.word	0x0802ccdb
 80203a8:	0802cd45 	.word	0x0802cd45
 80203ac:	ffffb100 	.word	0xffffb100

080203b0 <SFU_LL_DeInit>:

  /* ADD SRC CODE HERE
       ...
  */
  return e_ret_status;
}
 80203b0:	4800      	ldr	r0, [pc, #0]	; (80203b4 <SFU_LL_DeInit+0x4>)
 80203b2:	4770      	bx	lr
 80203b4:	00122f11 	.word	0x00122f11

080203b8 <SFU_LL_CRC_Config>:
  * @param  eCRCConfg: SFU_CRC_ConfigTypeDef.
  *         This parameter can be a value of @ref SFU_CRC_ConfigTypeDef.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_CRC_Config(SFU_CRC_ConfigTypeDef eCRCConfg)
{
 80203b8:	b508      	push	{r3, lr}

  /* Check the parameters */
  assert_param(IS_SFU_CRC_CONF(eCRCConfg));

  /* Switch to the selected configuration */
  CrcHandle.Instance = CRC;
 80203ba:	4b13      	ldr	r3, [pc, #76]	; (8020408 <SFU_LL_CRC_Config+0x50>)
 80203bc:	4a13      	ldr	r2, [pc, #76]	; (802040c <SFU_LL_CRC_Config+0x54>)
 80203be:	601a      	str	r2, [r3, #0]
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;

  switch (eCRCConfg)
 80203c0:	2801      	cmp	r0, #1
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80203c2:	f04f 0200 	mov.w	r2, #0
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80203c6:	e9c3 2205 	strd	r2, r2, [r3, #20]
  switch (eCRCConfg)
 80203ca:	d004      	beq.n	80203d6 <SFU_LL_CRC_Config+0x1e>
 80203cc:	2802      	cmp	r0, #2
 80203ce:	d010      	beq.n	80203f2 <SFU_LL_CRC_Config+0x3a>
      e_ret_status = SFU_SUCCESS;
      break;

    default:
      /* Invalid parameter */
      e_ret_status = SFU_ERROR;
 80203d0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 80203d4:	e00c      	b.n	80203f0 <SFU_LL_CRC_Config+0x38>
      CrcHandle.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80203d6:	809a      	strh	r2, [r3, #4]
      CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80203d8:	2203      	movs	r2, #3
  }

  /* Proceed to CRC Init (Correct Parameters) */
  if (e_ret_status == SFU_SUCCESS)
  {
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 80203da:	480b      	ldr	r0, [pc, #44]	; (8020408 <SFU_LL_CRC_Config+0x50>)
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 80203dc:	621a      	str	r2, [r3, #32]
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 80203de:	f000 fdc9 	bl	8020f74 <HAL_CRC_Init>
    {
      e_ret_status = SFU_ERROR;
 80203e2:	4b0b      	ldr	r3, [pc, #44]	; (8020410 <SFU_LL_CRC_Config+0x58>)
 80203e4:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 80203e8:	2800      	cmp	r0, #0
 80203ea:	bf0c      	ite	eq
 80203ec:	4618      	moveq	r0, r3
 80203ee:	4610      	movne	r0, r2
    }
  }

  return e_ret_status;
}
 80203f0:	bd08      	pop	{r3, pc}
      CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 80203f2:	2108      	movs	r1, #8
 80203f4:	f241 0021 	movw	r0, #4129	; 0x1021
 80203f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 80203fc:	f240 1101 	movw	r1, #257	; 0x101
      CrcHandle.Init.InitValue               = 0U;
 8020400:	611a      	str	r2, [r3, #16]
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 8020402:	8099      	strh	r1, [r3, #4]
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 8020404:	2201      	movs	r2, #1
 8020406:	e7e8      	b.n	80203da <SFU_LL_CRC_Config+0x22>
 8020408:	20031d14 	.word	0x20031d14
 802040c:	40023000 	.word	0x40023000
 8020410:	00122f11 	.word	0x00122f11

08020414 <SFU_LL_CRC_Init>:
  __HAL_RCC_CRC_CLK_ENABLE();
 8020414:	4b07      	ldr	r3, [pc, #28]	; (8020434 <SFU_LL_CRC_Init+0x20>)
 8020416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802041c:	649a      	str	r2, [r3, #72]	; 0x48
 802041e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 8020420:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8020422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020426:	9301      	str	r3, [sp, #4]
 8020428:	9b01      	ldr	r3, [sp, #4]
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 802042a:	2001      	movs	r0, #1
}
 802042c:	b002      	add	sp, #8
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 802042e:	f7ff bfc3 	b.w	80203b8 <SFU_LL_CRC_Config>
 8020432:	bf00      	nop
 8020434:	40021000 	.word	0x40021000

08020438 <SFU_LL_Init>:
  e_ret_status = SFU_LL_CRC_Init();
 8020438:	f7ff bfec 	b.w	8020414 <SFU_LL_CRC_Init>

0802043c <SFU_LL_CRC_Calculate>:
  * @param  BufferLength: buffer length in bytes.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t SFU_LL_CRC_Calculate(uint32_t pBuffer[], uint32_t BufferLength)
{
  return HAL_CRC_Calculate(&CrcHandle, pBuffer, BufferLength);
 802043c:	460a      	mov	r2, r1
 802043e:	4601      	mov	r1, r0
 8020440:	4801      	ldr	r0, [pc, #4]	; (8020448 <SFU_LL_CRC_Calculate+0xc>)
 8020442:	f000 bdd1 	b.w	8020fe8 <HAL_CRC_Calculate>
 8020446:	bf00      	nop
 8020448:	20031d14 	.word	0x20031d14

0802044c <SFU_LL_UART_Init>:
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = SFU_UART;
 802044c:	480e      	ldr	r0, [pc, #56]	; (8020488 <SFU_LL_UART_Init+0x3c>)
  UartHandle.Init.BaudRate = 115200U;
 802044e:	4a0f      	ldr	r2, [pc, #60]	; (802048c <SFU_LL_UART_Init+0x40>)
{
 8020450:	b508      	push	{r3, lr}
  UartHandle.Init.BaudRate = 115200U;
 8020452:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8020456:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 802045a:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 802045c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  UartHandle.Init.Parity = UART_PARITY_NONE;
 8020460:	6343      	str	r3, [r0, #52]	; 0x34
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020462:	63c3      	str	r3, [r0, #60]	; 0x3c
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 8020464:	230c      	movs	r3, #12
 8020466:	6383      	str	r3, [r0, #56]	; 0x38
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8020468:	2310      	movs	r3, #16
 802046a:	64c3      	str	r3, [r0, #76]	; 0x4c
  UartHandle.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 802046c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020470:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 8020472:	3024      	adds	r0, #36	; 0x24
 8020474:	f003 f984 	bl	8023780 <HAL_UART_Init>
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;

}
 8020478:	4b05      	ldr	r3, [pc, #20]	; (8020490 <SFU_LL_UART_Init+0x44>)
 802047a:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 802047e:	2800      	cmp	r0, #0
 8020480:	bf14      	ite	ne
 8020482:	4610      	movne	r0, r2
 8020484:	4618      	moveq	r0, r3
 8020486:	bd08      	pop	{r3, pc}
 8020488:	20031d14 	.word	0x20031d14
 802048c:	40013800 	.word	0x40013800
 8020490:	00122f11 	.word	0x00122f11

08020494 <SFU_LL_UART_DeInit>:
 8020494:	4800      	ldr	r0, [pc, #0]	; (8020498 <SFU_LL_UART_DeInit+0x4>)
 8020496:	4770      	bx	lr
 8020498:	00122f11 	.word	0x00122f11

0802049c <SFU_LL_UART_Transmit>:
  * @retval status of the write operation
  *         SFU_ERROR : if the write operation is not performed
  *         SFU_SUCCESS : if the write operation is successfully performed
  */
SFU_ErrorStatus SFU_LL_UART_Transmit(uint8_t *pData, uint16_t DataLength, uint32_t Timeout)
{
 802049c:	b508      	push	{r3, lr}
 802049e:	4613      	mov	r3, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check the pointers allocation */
  if (pData == NULL)
 80204a0:	b910      	cbnz	r0, 80204a8 <SFU_LL_UART_Transmit+0xc>
  {
    return SFU_ERROR;
 80204a2:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  {
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;
}
 80204a6:	bd08      	pop	{r3, pc}
  if (HAL_UART_Transmit(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 80204a8:	460a      	mov	r2, r1
 80204aa:	4601      	mov	r1, r0
 80204ac:	4803      	ldr	r0, [pc, #12]	; (80204bc <SFU_LL_UART_Transmit+0x20>)
 80204ae:	f003 f862 	bl	8023576 <HAL_UART_Transmit>
 80204b2:	2800      	cmp	r0, #0
 80204b4:	d1f5      	bne.n	80204a2 <SFU_LL_UART_Transmit+0x6>
    e_ret_status = SFU_SUCCESS;
 80204b6:	4802      	ldr	r0, [pc, #8]	; (80204c0 <SFU_LL_UART_Transmit+0x24>)
 80204b8:	e7f5      	b.n	80204a6 <SFU_LL_UART_Transmit+0xa>
 80204ba:	bf00      	nop
 80204bc:	20031d38 	.word	0x20031d38
 80204c0:	00122f11 	.word	0x00122f11

080204c4 <SFU_LL_UART_Receive>:
  * @retval status of the read operation
  *         SFU_ERROR : if the read operation is not performed
  *         SFU_SUCCESS : if the read operation is successfully performed
  */
SFU_ErrorStatus SFU_LL_UART_Receive(uint8_t *pData, uint16_t DataLength, uint32_t Timeout)
{
 80204c4:	b508      	push	{r3, lr}
 80204c6:	4613      	mov	r3, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check the pointers allocation */
  if (pData == NULL)
 80204c8:	b910      	cbnz	r0, 80204d0 <SFU_LL_UART_Receive+0xc>
  {
    return SFU_ERROR;
 80204ca:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  {
    e_ret_status = SFU_SUCCESS;
  }

  return e_ret_status;
}
 80204ce:	bd08      	pop	{r3, pc}
  if (HAL_UART_Receive(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 80204d0:	460a      	mov	r2, r1
 80204d2:	4601      	mov	r1, r0
 80204d4:	4803      	ldr	r0, [pc, #12]	; (80204e4 <SFU_LL_UART_Receive+0x20>)
 80204d6:	f003 f8aa 	bl	802362e <HAL_UART_Receive>
 80204da:	2800      	cmp	r0, #0
 80204dc:	d1f5      	bne.n	80204ca <SFU_LL_UART_Receive+0x6>
    e_ret_status = SFU_SUCCESS;
 80204de:	4802      	ldr	r0, [pc, #8]	; (80204e8 <SFU_LL_UART_Receive+0x24>)
 80204e0:	e7f5      	b.n	80204ce <SFU_LL_UART_Receive+0xa>
 80204e2:	bf00      	nop
 80204e4:	20031d38 	.word	0x20031d38
 80204e8:	00122f11 	.word	0x00122f11

080204ec <SFU_LL_UART_Flush>:
  * @retval status of the operation.
  */
SFU_ErrorStatus SFU_LL_UART_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80204ec:	4b05      	ldr	r3, [pc, #20]	; (8020504 <SFU_LL_UART_Flush+0x18>)

  return SFU_SUCCESS;
}
 80204ee:	4806      	ldr	r0, [pc, #24]	; (8020508 <SFU_LL_UART_Flush+0x1c>)
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80204f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204f2:	8b1a      	ldrh	r2, [r3, #24]
 80204f4:	f042 0208 	orr.w	r2, r2, #8
 80204f8:	831a      	strh	r2, [r3, #24]
 80204fa:	8b1a      	ldrh	r2, [r3, #24]
 80204fc:	f042 0210 	orr.w	r2, r2, #16
 8020500:	831a      	strh	r2, [r3, #24]
}
 8020502:	4770      	bx	lr
 8020504:	20031d14 	.word	0x20031d14
 8020508:	00122f11 	.word	0x00122f11

0802050c <SFU_LL_SB_SRAM_Erase>:
  */
void SFU_LL_SB_SRAM_Erase(void)
{
  uint32_t *pRam;

  for (pRam = (uint32_t *)SFU_SB_SRAM1_BASE; pRam < (uint32_t *)SFU_SB_SRAM1_END; pRam++)
 802050c:	4b04      	ldr	r3, [pc, #16]	; (8020520 <SFU_LL_SB_SRAM_Erase+0x14>)
 802050e:	4a05      	ldr	r2, [pc, #20]	; (8020524 <SFU_LL_SB_SRAM_Erase+0x18>)
  {
    *pRam = 0U;
 8020510:	2100      	movs	r1, #0
  for (pRam = (uint32_t *)SFU_SB_SRAM1_BASE; pRam < (uint32_t *)SFU_SB_SRAM1_END; pRam++)
 8020512:	4293      	cmp	r3, r2
 8020514:	d300      	bcc.n	8020518 <SFU_LL_SB_SRAM_Erase+0xc>
  }
}
 8020516:	4770      	bx	lr
    *pRam = 0U;
 8020518:	f843 1b04 	str.w	r1, [r3], #4
 802051c:	e7f9      	b.n	8020512 <SFU_LL_SB_SRAM_Erase+0x6>
 802051e:	bf00      	nop
 8020520:	20030000 	.word	0x20030000
 8020524:	2009ffff 	.word	0x2009ffff

08020528 <SFU_LL_UART_MspInit>:
  *        This function configures the hardware resources used in SFU application.
  * @param huart: UART handle pointer
  * @retval None
  */
void SFU_LL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8020528:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == SFU_UART)
 802052a:	6802      	ldr	r2, [r0, #0]
 802052c:	4b1d      	ldr	r3, [pc, #116]	; (80205a4 <SFU_LL_UART_MspInit+0x7c>)
 802052e:	429a      	cmp	r2, r3
{
 8020530:	b089      	sub	sp, #36	; 0x24
  if (huart->Instance == SFU_UART)
 8020532:	d134      	bne.n	802059e <SFU_LL_UART_MspInit+0x76>
  {
    /* Peripheral Clock Enable */
    SFU_UART_CLK_ENABLE();
 8020534:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    SFU_UART_TX_GPIO_CLK_ENABLE();
    SFU_UART_RX_GPIO_CLK_ENABLE();

    /*Configure GPIO pins : SFU_UART_TX_Pin  */
    GPIO_InitStruct.Pin = SFU_UART_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020538:	2702      	movs	r7, #2
    SFU_UART_CLK_ENABLE();
 802053a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 802053c:	481a      	ldr	r0, [pc, #104]	; (80205a8 <SFU_LL_UART_MspInit+0x80>)
    SFU_UART_CLK_ENABLE();
 802053e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020542:	661a      	str	r2, [r3, #96]	; 0x60
 8020544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020546:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 802054a:	9200      	str	r2, [sp, #0]
 802054c:	9a00      	ldr	r2, [sp, #0]
    SFU_UART_TX_GPIO_CLK_ENABLE();
 802054e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020550:	f042 0202 	orr.w	r2, r2, #2
 8020554:	64da      	str	r2, [r3, #76]	; 0x4c
 8020556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020558:	f002 0202 	and.w	r2, r2, #2
 802055c:	9201      	str	r2, [sp, #4]
 802055e:	9a01      	ldr	r2, [sp, #4]
    SFU_UART_RX_GPIO_CLK_ENABLE();
 8020560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020562:	f042 0202 	orr.w	r2, r2, #2
 8020566:	64da      	str	r2, [r3, #76]	; 0x4c
 8020568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802056a:	f003 0302 	and.w	r3, r3, #2
 802056e:	9302      	str	r3, [sp, #8]
 8020570:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020572:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020574:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020576:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 8020578:	2407      	movs	r4, #7
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 802057a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802057c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020580:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 8020584:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8020586:	f001 f99d 	bl	80218c4 <HAL_GPIO_Init>

    /*Configure GPIO pins : SFU_UART_RX_Pin  */
    GPIO_InitStruct.Pin = SFU_UART_RX_PIN;
 802058a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = SFU_UART_RX_AF;
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 802058c:	a903      	add	r1, sp, #12
 802058e:	4806      	ldr	r0, [pc, #24]	; (80205a8 <SFU_LL_UART_MspInit+0x80>)
    GPIO_InitStruct.Alternate = SFU_UART_RX_AF;
 8020590:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020592:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020596:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 802059a:	f001 f993 	bl	80218c4 <HAL_GPIO_Init>

  }

}
 802059e:	b009      	add	sp, #36	; 0x24
 80205a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205a2:	bf00      	nop
 80205a4:	40013800 	.word	0x40013800
 80205a8:	48000400 	.word	0x48000400

080205ac <SFU_LL_FLASH_Init>:
  * @brief  Unlocks Flash for write access.
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus SFU_LL_FLASH_Init(void)
{
 80205ac:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80205ae:	f000 fd77 	bl	80210a0 <HAL_FLASH_Unlock>
 80205b2:	b110      	cbz	r0, 80205ba <SFU_LL_FLASH_Init+0xe>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80205b4:	f641 70e1 	movw	r0, #8161	; 0x1fe1
    }
  }

  return e_ret_status;

}
 80205b8:	bd08      	pop	{r3, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80205ba:	4b07      	ldr	r3, [pc, #28]	; (80205d8 <SFU_LL_FLASH_Init+0x2c>)
 80205bc:	699a      	ldr	r2, [r3, #24]
 80205be:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80205c2:	619a      	str	r2, [r3, #24]
 80205c4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80205c8:	611a      	str	r2, [r3, #16]
    if (HAL_FLASH_Lock() == HAL_OK)
 80205ca:	f000 fd7b 	bl	80210c4 <HAL_FLASH_Lock>
 80205ce:	2800      	cmp	r0, #0
 80205d0:	d1f0      	bne.n	80205b4 <SFU_LL_FLASH_Init+0x8>
      e_ret_status = SFU_SUCCESS;
 80205d2:	4802      	ldr	r0, [pc, #8]	; (80205dc <SFU_LL_FLASH_Init+0x30>)
  return e_ret_status;
 80205d4:	e7f0      	b.n	80205b8 <SFU_LL_FLASH_Init+0xc>
 80205d6:	bf00      	nop
 80205d8:	40022000 	.word	0x40022000
 80205dc:	00122f11 	.word	0x00122f11

080205e0 <SFU_LL_FLASH_Write>:
{
 80205e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e4:	460e      	mov	r6, r1
 80205e6:	b085      	sub	sp, #20
 80205e8:	4691      	mov	r9, r2
 80205ea:	4698      	mov	r8, r3
  if ((pFlashStatus == NULL) || (pSource == NULL))
 80205ec:	4604      	mov	r4, r0
 80205ee:	b1c8      	cbz	r0, 8020624 <SFU_LL_FLASH_Write+0x44>
 80205f0:	b1c2      	cbz	r2, 8020624 <SFU_LL_FLASH_Write+0x44>
  if ((Length != 0) && ((uint32_t)pDestination >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 80205f2:	b1d3      	cbz	r3, 802062a <SFU_LL_FLASH_Write+0x4a>
 80205f4:	4828      	ldr	r0, [pc, #160]	; (8020698 <SFU_LL_FLASH_Write+0xb8>)
 80205f6:	4281      	cmp	r1, r0
 80205f8:	d317      	bcc.n	802062a <SFU_LL_FLASH_Write+0x4a>
      ((((uint32_t)pDestination + Length - 1)) < (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET))
 80205fa:	18cd      	adds	r5, r1, r3
 80205fc:	3d01      	subs	r5, #1
 80205fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if ((Length != 0) && ((uint32_t)pDestination >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8020602:	4285      	cmp	r5, r0
 8020604:	d211      	bcs.n	802062a <SFU_LL_FLASH_Write+0x4a>
    SE_ErrorStatus se_ret_status = SE_SFU_IMG_Write(&se_status, pDestination, pSource, Length);
 8020606:	a803      	add	r0, sp, #12
 8020608:	f7fb f8a0 	bl	801b74c <SE_SFU_IMG_Write>
    if (se_ret_status == SE_SUCCESS)
 802060c:	4b23      	ldr	r3, [pc, #140]	; (802069c <SFU_LL_FLASH_Write+0xbc>)
 802060e:	4298      	cmp	r0, r3
 8020610:	d106      	bne.n	8020620 <SFU_LL_FLASH_Write+0x40>
      *pFlashStatus = SFU_FLASH_SUCCESS;
 8020612:	2305      	movs	r3, #5
      e_ret_status = SFU_SUCCESS;
 8020614:	4d22      	ldr	r5, [pc, #136]	; (80206a0 <SFU_LL_FLASH_Write+0xc0>)
      *pFlashStatus = SFU_FLASH_SUCCESS;
 8020616:	7023      	strb	r3, [r4, #0]
}
 8020618:	4628      	mov	r0, r5
 802061a:	b005      	add	sp, #20
 802061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *pFlashStatus = SFU_FLASH_ERROR;
 8020620:	2300      	movs	r3, #0
 8020622:	7023      	strb	r3, [r4, #0]
    return SFU_ERROR;
 8020624:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 8020628:	e7f6      	b.n	8020618 <SFU_LL_FLASH_Write+0x38>
    *pFlashStatus = SFU_FLASH_ERROR;
 802062a:	2300      	movs	r3, #0
 802062c:	7023      	strb	r3, [r4, #0]
    e_ret_status = SFU_LL_FLASH_Init();
 802062e:	f7ff ffbd 	bl	80205ac <SFU_LL_FLASH_Init>
    if (e_ret_status == SFU_SUCCESS)
 8020632:	4b1b      	ldr	r3, [pc, #108]	; (80206a0 <SFU_LL_FLASH_Write+0xc0>)
 8020634:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Init();
 8020636:	4605      	mov	r5, r0
    if (e_ret_status == SFU_SUCCESS)
 8020638:	d1ee      	bne.n	8020618 <SFU_LL_FLASH_Write+0x38>
      if (HAL_FLASH_Unlock() != HAL_OK)
 802063a:	f000 fd31 	bl	80210a0 <HAL_FLASH_Unlock>
 802063e:	bb10      	cbnz	r0, 8020686 <SFU_LL_FLASH_Write+0xa6>
 8020640:	464f      	mov	r7, r9
          *pFlashStatus = SFU_FLASH_ERROR;
 8020642:	9001      	str	r0, [sp, #4]
              *pFlashStatus = SFU_FLASH_SUCCESS;
 8020644:	f04f 0a05 	mov.w	sl, #5
        for (i = 0U; i < Length;  i += sizeof(SFU_LL_FLASH_write_t))
 8020648:	eba7 0309 	sub.w	r3, r7, r9
 802064c:	4598      	cmp	r8, r3
 802064e:	d917      	bls.n	8020680 <SFU_LL_FLASH_Write+0xa0>
          *pFlashStatus = SFU_FLASH_ERROR;
 8020650:	9b01      	ldr	r3, [sp, #4]
 8020652:	7023      	strb	r3, [r4, #0]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)pDestination, *((uint64_t *)(pdata + i)))
 8020654:	4631      	mov	r1, r6
 8020656:	e9d7 2300 	ldrd	r2, r3, [r7]
 802065a:	2000      	movs	r0, #0
 802065c:	46bb      	mov	fp, r7
 802065e:	f000 fd83 	bl	8021168 <HAL_FLASH_Program>
 8020662:	b9b0      	cbnz	r0, 8020692 <SFU_LL_FLASH_Write+0xb2>
            if (*(uint64_t *)pDestination != *(uint64_t *)(pdata + i))
 8020664:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8020668:	e9db 2300 	ldrd	r2, r3, [fp]
 802066c:	4299      	cmp	r1, r3
 802066e:	bf08      	it	eq
 8020670:	4290      	cmpeq	r0, r2
 8020672:	f107 0708 	add.w	r7, r7, #8
 8020676:	d009      	beq.n	802068c <SFU_LL_FLASH_Write+0xac>
              *pFlashStatus = SFU_FLASH_ERR_WRITINGCTRL;
 8020678:	2304      	movs	r3, #4
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 802067a:	7023      	strb	r3, [r4, #0]
            e_ret_status = SFU_ERROR;
 802067c:	f641 75e1 	movw	r5, #8161	; 0x1fe1
        HAL_FLASH_Lock();
 8020680:	f000 fd20 	bl	80210c4 <HAL_FLASH_Lock>
 8020684:	e7c8      	b.n	8020618 <SFU_LL_FLASH_Write+0x38>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8020686:	2301      	movs	r3, #1
 8020688:	7023      	strb	r3, [r4, #0]
 802068a:	e7c5      	b.n	8020618 <SFU_LL_FLASH_Write+0x38>
              *pFlashStatus = SFU_FLASH_SUCCESS;
 802068c:	f884 a000 	strb.w	sl, [r4]
 8020690:	e7da      	b.n	8020648 <SFU_LL_FLASH_Write+0x68>
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 8020692:	2303      	movs	r3, #3
 8020694:	e7f1      	b.n	802067a <SFU_LL_FLASH_Write+0x9a>
 8020696:	bf00      	nop
 8020698:	08105000 	.word	0x08105000
 802069c:	0012310f 	.word	0x0012310f
 80206a0:	00122f11 	.word	0x00122f11

080206a4 <SFU_LL_FLASH_Read>:
{
 80206a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (((uint32_t)pSource >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 80206a6:	4c15      	ldr	r4, [pc, #84]	; (80206fc <SFU_LL_FLASH_Read+0x58>)
 80206a8:	42a1      	cmp	r1, r4
 80206aa:	d315      	bcc.n	80206d8 <SFU_LL_FLASH_Read+0x34>
      ((((uint32_t)pSource + Length - 1)) < (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET))
 80206ac:	1e53      	subs	r3, r2, #1
 80206ae:	440b      	add	r3, r1
 80206b0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  if (((uint32_t)pSource >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 80206b4:	42a3      	cmp	r3, r4
 80206b6:	d20f      	bcs.n	80206d8 <SFU_LL_FLASH_Read+0x34>
    SE_ErrorStatus se_ret_status = SE_SFU_IMG_Read(&se_status, pDestination, pSource, Length);
 80206b8:	4613      	mov	r3, r2
 80206ba:	460a      	mov	r2, r1
 80206bc:	4601      	mov	r1, r0
 80206be:	a801      	add	r0, sp, #4
 80206c0:	f7fb f81a 	bl	801b6f8 <SE_SFU_IMG_Read>
      e_ret_status = SFU_ERROR;
 80206c4:	490e      	ldr	r1, [pc, #56]	; (8020700 <SFU_LL_FLASH_Read+0x5c>)
 80206c6:	4b0f      	ldr	r3, [pc, #60]	; (8020704 <SFU_LL_FLASH_Read+0x60>)
 80206c8:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 80206cc:	4288      	cmp	r0, r1
 80206ce:	bf0c      	ite	eq
 80206d0:	4618      	moveq	r0, r3
 80206d2:	4610      	movne	r0, r2
}
 80206d4:	b003      	add	sp, #12
 80206d6:	bd30      	pop	{r4, r5, pc}
    DoubleECC_Error_Counter = 0U;
 80206d8:	4c0b      	ldr	r4, [pc, #44]	; (8020708 <SFU_LL_FLASH_Read+0x64>)
 80206da:	2500      	movs	r5, #0
    DoubleECC_Check = SFU_TRUE;
 80206dc:	2301      	movs	r3, #1
    DoubleECC_Error_Counter = 0U;
 80206de:	6025      	str	r5, [r4, #0]
    DoubleECC_Check = SFU_TRUE;
 80206e0:	7123      	strb	r3, [r4, #4]
    memcpy(pDestination, pSource, Length);
 80206e2:	f008 f96a 	bl	80289ba <memcpy>
    DoubleECC_Check = SFU_FALSE;
 80206e6:	7125      	strb	r5, [r4, #4]
    if (DoubleECC_Error_Counter == 0U)
 80206e8:	6822      	ldr	r2, [r4, #0]
      e_ret_status = SFU_SUCCESS;
 80206ea:	4b06      	ldr	r3, [pc, #24]	; (8020704 <SFU_LL_FLASH_Read+0x60>)
    DoubleECC_Error_Counter = 0U;
 80206ec:	6025      	str	r5, [r4, #0]
      e_ret_status = SFU_SUCCESS;
 80206ee:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 80206f2:	42aa      	cmp	r2, r5
 80206f4:	bf08      	it	eq
 80206f6:	4618      	moveq	r0, r3
  return e_ret_status;
 80206f8:	e7ec      	b.n	80206d4 <SFU_LL_FLASH_Read+0x30>
 80206fa:	bf00      	nop
 80206fc:	08105000 	.word	0x08105000
 8020700:	0012310f 	.word	0x0012310f
 8020704:	00122f11 	.word	0x00122f11
 8020708:	20031dc4 	.word	0x20031dc4

0802070c <SFU_LL_FLASH_CleanUp>:
{
 802070c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memset((void *)&pattern, 0x00U, sizeof(SFU_LL_FLASH_write_t));
 8020710:	2300      	movs	r3, #0
{
 8020712:	4693      	mov	fp, r2
  memset((void *)&pattern, 0x00U, sizeof(SFU_LL_FLASH_write_t));
 8020714:	ae02      	add	r6, sp, #8
 8020716:	2200      	movs	r2, #0
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
 8020718:	4d11      	ldr	r5, [pc, #68]	; (8020760 <SFU_LL_FLASH_CleanUp+0x54>)
  memset((void *)&pattern, 0x00U, sizeof(SFU_LL_FLASH_write_t));
 802071a:	e966 2302 	strd	r2, r3, [r6, #-8]!
{
 802071e:	4681      	mov	r9, r0
 8020720:	468a      	mov	sl, r1
  for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 8020722:	2400      	movs	r4, #0
 8020724:	46a8      	mov	r8, r5
 8020726:	455c      	cmp	r4, fp
 8020728:	d201      	bcs.n	802072e <SFU_LL_FLASH_CleanUp+0x22>
 802072a:	4545      	cmp	r5, r8
 802072c:	d003      	beq.n	8020736 <SFU_LL_FLASH_CleanUp+0x2a>
}
 802072e:	4628      	mov	r0, r5
 8020730:	b003      	add	sp, #12
 8020732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020736:	eb0a 0704 	add.w	r7, sl, r4
    if (memcmp((void *)pdata, (void *)&pattern, sizeof(SFU_LL_FLASH_write_t)) != 0U)
 802073a:	2208      	movs	r2, #8
 802073c:	4631      	mov	r1, r6
 802073e:	4638      	mov	r0, r7
 8020740:	f008 f92c 	bl	802899c <memcmp>
 8020744:	b130      	cbz	r0, 8020754 <SFU_LL_FLASH_CleanUp+0x48>
      e_ret_status = SFU_LL_FLASH_Write(pFlashStatus, (void *) pdata, (void *) &pattern, sizeof(SFU_LL_FLASH_write_t));
 8020746:	2308      	movs	r3, #8
 8020748:	4632      	mov	r2, r6
 802074a:	4639      	mov	r1, r7
 802074c:	4648      	mov	r0, r9
 802074e:	f7ff ff47 	bl	80205e0 <SFU_LL_FLASH_Write>
 8020752:	4605      	mov	r5, r0
    if ((i % 0x10000U) == 0U)
 8020754:	b2a3      	uxth	r3, r4
 8020756:	b90b      	cbnz	r3, 802075c <SFU_LL_FLASH_CleanUp+0x50>
      SFU_LL_SECU_IWDG_Refresh();
 8020758:	f000 f9d6 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
  for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 802075c:	3408      	adds	r4, #8
 802075e:	e7e2      	b.n	8020726 <SFU_LL_FLASH_CleanUp+0x1a>
 8020760:	00122f11 	.word	0x00122f11

08020764 <NMI_Handler>:
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8020764:	4b0e      	ldr	r3, [pc, #56]	; (80207a0 <NMI_Handler+0x3c>)
 8020766:	699a      	ldr	r2, [r3, #24]
 8020768:	f002 4220 	and.w	r2, r2, #2684354560	; 0xa0000000
 802076c:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
 8020770:	d113      	bne.n	802079a <NMI_Handler+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCD);
 8020772:	699a      	ldr	r2, [r3, #24]
 8020774:	f042 4220 	orr.w	r2, r2, #2684354560	; 0xa0000000
 8020778:	619a      	str	r2, [r3, #24]
    if (DoubleECC_Check)
 802077a:	4b0a      	ldr	r3, [pc, #40]	; (80207a4 <NMI_Handler+0x40>)
 802077c:	791a      	ldrb	r2, [r3, #4]
 802077e:	b16a      	cbz	r2, 802079c <NMI_Handler+0x38>
      DoubleECC_Error_Counter++;
 8020780:	681a      	ldr	r2, [r3, #0]
 8020782:	3201      	adds	r2, #1
 8020784:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8020786:	f3ef 8208 	mrs	r2, MSP
      if (*(p_msp_sp + 7) & (1 << xPSR_T_Pos))
 802078a:	e9d2 3106 	ldrd	r3, r1, [r2, #24]
 802078e:	01c9      	lsls	r1, r1, #7
        *(p_msp_sp + 6) += 2;
 8020790:	bf4c      	ite	mi
 8020792:	3302      	addmi	r3, #2
        *(p_msp_sp + 6) += 4;
 8020794:	3304      	addpl	r3, #4
 8020796:	6193      	str	r3, [r2, #24]
 8020798:	4770      	bx	lr
 802079a:	e7fe      	b.n	802079a <NMI_Handler+0x36>
}
 802079c:	4770      	bx	lr
 802079e:	bf00      	nop
 80207a0:	40022000 	.word	0x40022000
 80207a4:	20031dc4 	.word	0x20031dc4

080207a8 <SFU_LL_FLASH_GetPage>:
  if (Addr < (FLASH_BASE + (FLASH_BANK_SIZE)))
 80207a8:	4b0a      	ldr	r3, [pc, #40]	; (80207d4 <SFU_LL_FLASH_GetPage+0x2c>)
 80207aa:	681a      	ldr	r2, [r3, #0]
 80207ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80207b0:	b291      	uxth	r1, r2
 80207b2:	4299      	cmp	r1, r3
 80207b4:	bf1d      	ittte	ne
 80207b6:	4b08      	ldrne	r3, [pc, #32]	; (80207d8 <SFU_LL_FLASH_GetPage+0x30>)
 80207b8:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 80207bc:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80207c0:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
 80207c4:	4283      	cmp	r3, r0
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80207c6:	bf8c      	ite	hi
 80207c8:	f100 4078 	addhi.w	r0, r0, #4160749568	; 0xf8000000
    page = (Addr - (FLASH_BASE + (FLASH_BANK_SIZE))) / FLASH_PAGE_SIZE;
 80207cc:	1ac0      	subls	r0, r0, r3
 80207ce:	0b00      	lsrs	r0, r0, #12
}
 80207d0:	4770      	bx	lr
 80207d2:	bf00      	nop
 80207d4:	1fff75e0 	.word	0x1fff75e0
 80207d8:	01fffe00 	.word	0x01fffe00

080207dc <SFU_LL_FLASH_GetBank>:
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80207dc:	4b12      	ldr	r3, [pc, #72]	; (8020828 <SFU_LL_FLASH_GetBank+0x4c>)
{
 80207de:	b510      	push	{r4, lr}
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80207e0:	681c      	ldr	r4, [r3, #0]
 80207e2:	4b12      	ldr	r3, [pc, #72]	; (802082c <SFU_LL_FLASH_GetBank+0x50>)
 80207e4:	6819      	ldr	r1, [r3, #0]
 80207e6:	05e4      	lsls	r4, r4, #23
 80207e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80207ec:	b28a      	uxth	r2, r1
 80207ee:	d40d      	bmi.n	802080c <SFU_LL_FLASH_GetBank+0x30>
    if (Addr < (FLASH_BASE + (FLASH_BANK_SIZE)))
 80207f0:	429a      	cmp	r2, r3
 80207f2:	bf1d      	ittte	ne
 80207f4:	4a0e      	ldrne	r2, [pc, #56]	; (8020830 <SFU_LL_FLASH_GetBank+0x54>)
 80207f6:	ea02 2241 	andne.w	r2, r2, r1, lsl #9
 80207fa:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
 80207fe:	f04f 6201 	moveq.w	r2, #135266304	; 0x8100000
      bank = FLASH_BANK_1;
 8020802:	4290      	cmp	r0, r2
 8020804:	bf2c      	ite	cs
 8020806:	2002      	movcs	r0, #2
 8020808:	2001      	movcc	r0, #1
}
 802080a:	bd10      	pop	{r4, pc}
    if (Addr < (FLASH_BASE + (FLASH_BANK_SIZE)))
 802080c:	429a      	cmp	r2, r3
 802080e:	bf1d      	ittte	ne
 8020810:	4b07      	ldrne	r3, [pc, #28]	; (8020830 <SFU_LL_FLASH_GetBank+0x54>)
 8020812:	ea03 2341 	andne.w	r3, r3, r1, lsl #9
 8020816:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 802081a:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
      bank = FLASH_BANK_2;
 802081e:	4283      	cmp	r3, r0
 8020820:	bf94      	ite	ls
 8020822:	2001      	movls	r0, #1
 8020824:	2002      	movhi	r0, #2
 8020826:	e7f0      	b.n	802080a <SFU_LL_FLASH_GetBank+0x2e>
 8020828:	40010000 	.word	0x40010000
 802082c:	1fff75e0 	.word	0x1fff75e0
 8020830:	01fffe00 	.word	0x01fffe00

08020834 <SFU_LL_FLASH_Erase_Size>:
{
 8020834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020838:	b087      	sub	sp, #28
  uint32_t page_error = 0U;
 802083a:	2300      	movs	r3, #0
{
 802083c:	460c      	mov	r4, r1
 802083e:	4690      	mov	r8, r2
  uint32_t page_error = 0U;
 8020840:	9301      	str	r3, [sp, #4]
  if (pFlashStatus == NULL)
 8020842:	4607      	mov	r7, r0
 8020844:	2800      	cmp	r0, #0
 8020846:	d07c      	beq.n	8020942 <SFU_LL_FLASH_Erase_Size+0x10e>
  *pFlashStatus = SFU_FLASH_SUCCESS;
 8020848:	2305      	movs	r3, #5
 802084a:	7003      	strb	r3, [r0, #0]
  e_ret_status = SFU_LL_FLASH_Init();
 802084c:	f7ff feae 	bl	80205ac <SFU_LL_FLASH_Init>
  if (e_ret_status == SFU_SUCCESS)
 8020850:	4b3d      	ldr	r3, [pc, #244]	; (8020948 <SFU_LL_FLASH_Erase_Size+0x114>)
 8020852:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_Init();
 8020854:	4606      	mov	r6, r0
  if (e_ret_status == SFU_SUCCESS)
 8020856:	d170      	bne.n	802093a <SFU_LL_FLASH_Erase_Size+0x106>
    if (HAL_FLASH_Unlock() == HAL_OK)
 8020858:	f000 fc22 	bl	80210a0 <HAL_FLASH_Unlock>
 802085c:	2800      	cmp	r0, #0
 802085e:	d16a      	bne.n	8020936 <SFU_LL_FLASH_Erase_Size+0x102>
        first_page = SFU_LL_FLASH_GetPage(start);
 8020860:	4620      	mov	r0, r4
 8020862:	f7ff ffa1 	bl	80207a8 <SFU_LL_FLASH_GetPage>
 8020866:	4605      	mov	r5, r0
        bank_number = SFU_LL_FLASH_GetBank(start);
 8020868:	4620      	mov	r0, r4
 802086a:	f7ff ffb7 	bl	80207dc <SFU_LL_FLASH_GetBank>
        if (SFU_LL_FLASH_GetBank(start + Length - 1U) == bank_number)
 802086e:	eb08 0204 	add.w	r2, r8, r4
 8020872:	f102 3bff 	add.w	fp, r2, #4294967295
        bank_number = SFU_LL_FLASH_GetBank(start);
 8020876:	4681      	mov	r9, r0
        if (SFU_LL_FLASH_GetBank(start + Length - 1U) == bank_number)
 8020878:	4658      	mov	r0, fp
 802087a:	f7ff ffaf 	bl	80207dc <SFU_LL_FLASH_GetBank>
 802087e:	4548      	cmp	r0, r9
 8020880:	4682      	mov	sl, r0
 8020882:	d121      	bne.n	80208c8 <SFU_LL_FLASH_Erase_Size+0x94>
          nb_pages = SFU_LL_FLASH_GetPage(start + Length - 1U) - first_page + 1U;
 8020884:	4658      	mov	r0, fp
 8020886:	f7ff ff8f 	bl	80207a8 <SFU_LL_FLASH_GetPage>
          p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 802088a:	2200      	movs	r2, #0
          p_erase_init.Banks       = bank_number;
 802088c:	e9cd 2a02 	strd	r2, sl, [sp, #8]
          nb_pages = SFU_LL_FLASH_GetPage(start + Length - 1U) - first_page + 1U;
 8020890:	3001      	adds	r0, #1
 8020892:	1b44      	subs	r4, r0, r5
              *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8020894:	f04f 0802 	mov.w	r8, #2
            chunk_nb_pages = (nb_pages >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_pages;
 8020898:	2c02      	cmp	r4, #2
 802089a:	4623      	mov	r3, r4
            if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 802089c:	a901      	add	r1, sp, #4
            chunk_nb_pages = (nb_pages >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_pages;
 802089e:	bf28      	it	cs
 80208a0:	2302      	movcs	r3, #2
            if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 80208a2:	a802      	add	r0, sp, #8
            p_erase_init.NbPages = chunk_nb_pages;
 80208a4:	e9cd 5304 	strd	r5, r3, [sp, #16]
            nb_pages -= chunk_nb_pages;
 80208a8:	1ae4      	subs	r4, r4, r3
            first_page += chunk_nb_pages;
 80208aa:	441d      	add	r5, r3
            if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 80208ac:	f000 ff96 	bl	80217dc <HAL_FLASHEx_Erase>
 80208b0:	b118      	cbz	r0, 80208ba <SFU_LL_FLASH_Erase_Size+0x86>
              *pFlashStatus = SFU_FLASH_ERR_ERASE;
 80208b2:	f887 8000 	strb.w	r8, [r7]
              e_ret_status = SFU_ERROR;
 80208b6:	f641 76e1 	movw	r6, #8161	; 0x1fe1
            SFU_LL_SECU_IWDG_Refresh(); /* calling this function which checks the compiler switch */
 80208ba:	f000 f925 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
          } while (nb_pages > 0);
 80208be:	2c00      	cmp	r4, #0
 80208c0:	d1ea      	bne.n	8020898 <SFU_LL_FLASH_Erase_Size+0x64>
      HAL_FLASH_Lock();
 80208c2:	f000 fbff 	bl	80210c4 <HAL_FLASH_Lock>
 80208c6:	e038      	b.n	802093a <SFU_LL_FLASH_Erase_Size+0x106>
  */
static uint32_t SFU_LL_FLASH_GetBankAddr(uint32_t Bank)
{
  if (Bank == FLASH_BANK_2)
  {
    return  FLASH_BASE + (FLASH_BANK_SIZE);
 80208c8:	4b20      	ldr	r3, [pc, #128]	; (802094c <SFU_LL_FLASH_Erase_Size+0x118>)
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80208d0:	b299      	uxth	r1, r3
 80208d2:	4291      	cmp	r1, r2
 80208d4:	bf1d      	ittte	ne
 80208d6:	4a1e      	ldrne	r2, [pc, #120]	; (8020950 <SFU_LL_FLASH_Erase_Size+0x11c>)
 80208d8:	ea02 2343 	andne.w	r3, r2, r3, lsl #9
 80208dc:	f103 6b00 	addne.w	fp, r3, #134217728	; 0x8000000
 80208e0:	f04f 6b01 	moveq.w	fp, #135266304	; 0x8100000
          nb_pages = SFU_LL_FLASH_GetPage(startbank2 - 1U) - first_page + 1U;
 80208e4:	f10b 30ff 	add.w	r0, fp, #4294967295
 80208e8:	f7ff ff5e 	bl	80207a8 <SFU_LL_FLASH_GetPage>
          Length = Length  - (startbank2 - start);
 80208ec:	eba4 040b 	sub.w	r4, r4, fp
          nb_pages = SFU_LL_FLASH_GetPage(startbank2 - 1U) - first_page + 1U;
 80208f0:	f1c5 0201 	rsb	r2, r5, #1
          p_erase_init.TypeErase   = FLASH_TYPEERASE_PAGES;
 80208f4:	2100      	movs	r1, #0
          p_erase_init.Banks       = bank_number;
 80208f6:	e9cd 1902 	strd	r1, r9, [sp, #8]
          Length = Length  - (startbank2 - start);
 80208fa:	44a0      	add	r8, r4
          nb_pages = SFU_LL_FLASH_GetPage(startbank2 - 1U) - first_page + 1U;
 80208fc:	eb02 0a00 	add.w	sl, r2, r0
              *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8020900:	f04f 0902 	mov.w	r9, #2
          start = startbank2;
 8020904:	465c      	mov	r4, fp
            chunk_nb_pages = (nb_pages >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_pages;
 8020906:	4653      	mov	r3, sl
 8020908:	2b02      	cmp	r3, #2
 802090a:	bf28      	it	cs
 802090c:	2302      	movcs	r3, #2
            if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 802090e:	a901      	add	r1, sp, #4
 8020910:	a802      	add	r0, sp, #8
            p_erase_init.NbPages = chunk_nb_pages;
 8020912:	e9cd 5304 	strd	r5, r3, [sp, #16]
            nb_pages -= chunk_nb_pages;
 8020916:	ebaa 0a03 	sub.w	sl, sl, r3
            first_page += chunk_nb_pages;
 802091a:	441d      	add	r5, r3
            if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 802091c:	f000 ff5e 	bl	80217dc <HAL_FLASHEx_Erase>
 8020920:	b118      	cbz	r0, 802092a <SFU_LL_FLASH_Erase_Size+0xf6>
              *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8020922:	f887 9000 	strb.w	r9, [r7]
              e_ret_status = SFU_ERROR;
 8020926:	f641 76e1 	movw	r6, #8161	; 0x1fe1
            SFU_LL_SECU_IWDG_Refresh(); /* calling this function which checks the compiler switch */
 802092a:	f000 f8ed 	bl	8020b08 <SFU_LL_SECU_IWDG_Refresh>
          } while (nb_pages > 0);
 802092e:	f1ba 0f00 	cmp.w	sl, #0
 8020932:	d1e8      	bne.n	8020906 <SFU_LL_FLASH_Erase_Size+0xd2>
 8020934:	e794      	b.n	8020860 <SFU_LL_FLASH_Erase_Size+0x2c>
      *pFlashStatus = SFU_FLASH_ERR_HAL;
 8020936:	2301      	movs	r3, #1
 8020938:	703b      	strb	r3, [r7, #0]
}
 802093a:	4630      	mov	r0, r6
 802093c:	b007      	add	sp, #28
 802093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return SFU_ERROR;
 8020942:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 8020946:	e7f8      	b.n	802093a <SFU_LL_FLASH_Erase_Size+0x106>
 8020948:	00122f11 	.word	0x00122f11
 802094c:	1fff75e0 	.word	0x1fff75e0
 8020950:	01fffe00 	.word	0x01fffe00

08020954 <SFU_LL_SECU_CheckFlashConfiguration.isra.0>:
SFU_ErrorStatus SFU_LL_SECU_CheckFlashConfiguration(FLASH_OBProgramInitTypeDef *psFlashOptionBytes)
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check DBANK bit ***********************************************************/
  if ((psFlashOptionBytes->USERConfig & FLASH_OPTR_DBANK) != FLASH_OPTR_DBANK)
 8020954:	6803      	ldr	r3, [r0, #0]
 8020956:	025a      	lsls	r2, r3, #9
SFU_ErrorStatus SFU_LL_SECU_CheckFlashConfiguration(FLASH_OBProgramInitTypeDef *psFlashOptionBytes)
 8020958:	b510      	push	{r4, lr}
 802095a:	4604      	mov	r4, r0
  if ((psFlashOptionBytes->USERConfig & FLASH_OPTR_DBANK) != FLASH_OPTR_DBANK)
 802095c:	d404      	bmi.n	8020968 <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x14>
  {
    e_ret_status = SFU_ERROR; /*DBANK should not be disabled */
    TRACE("\r\n= [SBOOT] Flash Configuration KO: Dual bank mode must be activated. STOP!");
 802095e:	480d      	ldr	r0, [pc, #52]	; (8020994 <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x40>)
 8020960:	f008 f8f4 	bl	8028b4c <iprintf>
    /* Security issue : execution stopped ! */
    SFU_EXCPT_Security_Error();
 8020964:	f7fc ff18 	bl	801d798 <SFU_EXCPT_Security_Error>
  }
  /* Check BFB2 bit ***********************************************************/
  if ((psFlashOptionBytes->USERConfig & FLASH_OPTR_BFB2) != FLASH_OPTR_BFB2)
 8020968:	6823      	ldr	r3, [r4, #0]
 802096a:	02db      	lsls	r3, r3, #11
 802096c:	d40e      	bmi.n	802098c <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x38>
  }

  if (e_ret_status == SFU_SUCCESS)
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 802096e:	490a      	ldr	r1, [pc, #40]	; (8020998 <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x44>)
 8020970:	680a      	ldr	r2, [r1, #0]
 8020972:	f482 43cf 	eor.w	r3, r2, #26496	; 0x6780
 8020976:	f083 0307 	eor.w	r3, r3, #7
 802097a:	600b      	str	r3, [r1, #0]
 802097c:	f245 7376 	movw	r3, #22390	; 0x5776
 8020980:	429a      	cmp	r2, r3
 8020982:	d001      	beq.n	8020988 <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x34>
 8020984:	f7fc ff08 	bl	801d798 <SFU_EXCPT_Security_Error>
 8020988:	4804      	ldr	r0, [pc, #16]	; (802099c <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x48>)
 802098a:	e001      	b.n	8020990 <SFU_LL_SECU_CheckFlashConfiguration.isra.0+0x3c>
  if ((psFlashOptionBytes->USERConfig & FLASH_OPTR_BFB2) != FLASH_OPTR_BFB2)
 802098c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }
  return e_ret_status;

}
 8020990:	bd10      	pop	{r4, pc}
 8020992:	bf00      	nop
 8020994:	0802cd83 	.word	0x0802cd83
 8020998:	20030000 	.word	0x20030000
 802099c:	00122f11 	.word	0x00122f11

080209a0 <SFU_LL_SECU_CheckApplyStaticProtections>:
{
 80209a0:	b510      	push	{r4, lr}
 80209a2:	b08a      	sub	sp, #40	; 0x28
  HAL_FLASH_Unlock();
 80209a4:	f000 fb7c 	bl	80210a0 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80209a8:	4b25      	ldr	r3, [pc, #148]	; (8020a40 <SFU_LL_SECU_CheckApplyStaticProtections+0xa0>)
 80209aa:	4c26      	ldr	r4, [pc, #152]	; (8020a44 <SFU_LL_SECU_CheckApplyStaticProtections+0xa4>)
 80209ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80209b0:	611a      	str	r2, [r3, #16]
  HAL_FLASH_OB_Unlock();
 80209b2:	f000 fb91 	bl	80210d8 <HAL_FLASH_OB_Unlock>
  flash_option_bytes.WRPArea     = SFU_PROTECT_WRP_AREA_1;
 80209b6:	2300      	movs	r3, #0
 80209b8:	9301      	str	r3, [sp, #4]
  HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 80209ba:	4668      	mov	r0, sp
  flash_option_bytes.PCROPConfig = FLASH_BANK_1;
 80209bc:	2301      	movs	r3, #1
 80209be:	9307      	str	r3, [sp, #28]
  HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 80209c0:	f000 fe0e 	bl	80215e0 <HAL_FLASHEx_OBGetConfig>
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 80209c4:	9b04      	ldr	r3, [sp, #16]
 80209c6:	2bcc      	cmp	r3, #204	; 0xcc
    if (SFU_LL_SECU_CheckFlashConfiguration(&flash_option_bytes) != SFU_SUCCESS)
 80209c8:	a806      	add	r0, sp, #24
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 80209ca:	d112      	bne.n	80209f2 <SFU_LL_SECU_CheckApplyStaticProtections+0x52>
    if (SFU_LL_SECU_CheckFlashConfiguration(&flash_option_bytes) != SFU_SUCCESS)
 80209cc:	f7ff ffc2 	bl	8020954 <SFU_LL_SECU_CheckFlashConfiguration.isra.0>
 80209d0:	42a0      	cmp	r0, r4
 80209d2:	d004      	beq.n	80209de <SFU_LL_SECU_CheckApplyStaticProtections+0x3e>
      TRACE("\r\n= [SBOOT] Flash configuration failed! Product blocked.");
 80209d4:	481c      	ldr	r0, [pc, #112]	; (8020a48 <SFU_LL_SECU_CheckApplyStaticProtections+0xa8>)
 80209d6:	f008 f8b9 	bl	8028b4c <iprintf>
      SFU_EXCPT_Security_Error();
 80209da:	f7fc fedd 	bl	801d798 <SFU_EXCPT_Security_Error>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 80209de:	4b1b      	ldr	r3, [pc, #108]	; (8020a4c <SFU_LL_SECU_CheckApplyStaticProtections+0xac>)
 80209e0:	681a      	ldr	r2, [r3, #0]
 80209e2:	f243 03f1 	movw	r3, #12529	; 0x30f1
 80209e6:	429a      	cmp	r2, r3
 80209e8:	d001      	beq.n	80209ee <SFU_LL_SECU_CheckApplyStaticProtections+0x4e>
 80209ea:	f7fc fed5 	bl	801d798 <SFU_EXCPT_Security_Error>
        HAL_FLASH_OB_Launch();
 80209ee:	4c15      	ldr	r4, [pc, #84]	; (8020a44 <SFU_LL_SECU_CheckApplyStaticProtections+0xa4>)
 80209f0:	e01f      	b.n	8020a32 <SFU_LL_SECU_CheckApplyStaticProtections+0x92>
                                                  SFU_BoolTypeDef *pbIsProtectionToBeApplied)
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check Flash configuration */
  if (SFU_LL_SECU_CheckFlashConfiguration(psFlashOptionBytes) == SFU_SUCCESS)
 80209f2:	f7ff ffaf 	bl	8020954 <SFU_LL_SECU_CheckFlashConfiguration.isra.0>
 80209f6:	42a0      	cmp	r0, r4
 80209f8:	d0f9      	beq.n	80209ee <SFU_LL_SECU_CheckApplyStaticProtections+0x4e>
  }
  else
  {
#if defined(SECBOOT_OB_DEV_MODE)
    /* Unset BFB2 to avoid Boot in bank2, BFB2 bit shall be disabled */
    psFlashOptionBytes->OptionType      = OPTIONBYTE_USER;
 80209fa:	2304      	movs	r3, #4
 80209fc:	9300      	str	r3, [sp, #0]
    psFlashOptionBytes->USERConfig      &= ~FLASH_OPTR_BFB2;
 80209fe:	9b06      	ldr	r3, [sp, #24]
    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 8020a00:	4668      	mov	r0, sp
    psFlashOptionBytes->USERConfig      &= ~FLASH_OPTR_BFB2;
 8020a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020a06:	9306      	str	r3, [sp, #24]
    if (HAL_FLASHEx_OBProgram(psFlashOptionBytes) == HAL_OK)
 8020a08:	f000 fc2e 	bl	8021268 <HAL_FLASHEx_OBProgram>
 8020a0c:	b978      	cbnz	r0, 8020a2e <SFU_LL_SECU_CheckApplyStaticProtections+0x8e>
    {
      *pbIsProtectionToBeApplied |= 1U;
      e_ret_status = SFU_SUCCESS;
      /* Execution stopped if flow control failed */
      FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8020a0e:	490f      	ldr	r1, [pc, #60]	; (8020a4c <SFU_LL_SECU_CheckApplyStaticProtections+0xac>)
 8020a10:	680a      	ldr	r2, [r1, #0]
 8020a12:	f482 43cf 	eor.w	r3, r2, #26496	; 0x6780
 8020a16:	f083 0307 	eor.w	r3, r3, #7
 8020a1a:	600b      	str	r3, [r1, #0]
 8020a1c:	f245 7376 	movw	r3, #22390	; 0x5776
 8020a20:	429a      	cmp	r2, r3
 8020a22:	d001      	beq.n	8020a28 <SFU_LL_SECU_CheckApplyStaticProtections+0x88>
 8020a24:	f7fc feb8 	bl	801d798 <SFU_EXCPT_Security_Error>
        HAL_FLASH_OB_Launch();
 8020a28:	f000 fbf0 	bl	802120c <HAL_FLASH_OB_Launch>
 8020a2c:	e7df      	b.n	80209ee <SFU_LL_SECU_CheckApplyStaticProtections+0x4e>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8020a2e:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  HAL_FLASH_OB_Lock();
 8020a32:	f000 fb63 	bl	80210fc <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 8020a36:	f000 fb45 	bl	80210c4 <HAL_FLASH_Lock>
}
 8020a3a:	4620      	mov	r0, r4
 8020a3c:	b00a      	add	sp, #40	; 0x28
 8020a3e:	bd10      	pop	{r4, pc}
 8020a40:	40022000 	.word	0x40022000
 8020a44:	00122f11 	.word	0x00122f11
 8020a48:	0802cdcf 	.word	0x0802cdcf
 8020a4c:	20030000 	.word	0x20030000

08020a50 <SFU_LL_SECU_CheckApplyRuntimeProtections>:
  /* Set counter reload value to obtain 32 sec. IWDG TimeOut.
  IWDG counter clock Frequency = uwLsiFreq
  Set Prescaler to 256 (IWDG_PRESCALER_256)
  Timeout Period = (Reload Counter Value * 256) / uwLsiFreq
  So Set Reload Counter Value = (32 * uwLsiFreq) / 256 */
  IwdgHandle.Instance = IWDG;
 8020a50:	4810      	ldr	r0, [pc, #64]	; (8020a94 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x44>)
  IwdgHandle.Init.Prescaler = IWDG_PRESCALER_256;
 8020a52:	4a11      	ldr	r2, [pc, #68]	; (8020a98 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x48>)
{
 8020a54:	b508      	push	{r3, lr}
  IwdgHandle.Init.Prescaler = IWDG_PRESCALER_256;
 8020a56:	2306      	movs	r3, #6
 8020a58:	e9c0 2300 	strd	r2, r3, [r0]
  IwdgHandle.Init.Reload = (SFU_IWDG_TIMEOUT * LSI_VALUE / 256U);
  IwdgHandle.Init.Window = IWDG_WINDOW_DISABLE;
 8020a5c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8020a60:	f640 73ff 	movw	r3, #4095	; 0xfff
 8020a64:	e9c0 1302 	strd	r1, r3, [r0, #8]

  if (HAL_IWDG_Init(&IwdgHandle) == HAL_OK)
 8020a68:	f001 f817 	bl	8021a9a <HAL_IWDG_Init>
 8020a6c:	b970      	cbnz	r0, 8020a8c <SFU_LL_SECU_CheckApplyRuntimeProtections+0x3c>
  {
    e_ret_status = SFU_SUCCESS;
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_IWDG, FLOW_CTRL_IWDG);
 8020a6e:	490b      	ldr	r1, [pc, #44]	; (8020a9c <SFU_LL_SECU_CheckApplyRuntimeProtections+0x4c>)
 8020a70:	680a      	ldr	r2, [r1, #0]
 8020a72:	f482 33b2 	eor.w	r3, r2, #91136	; 0x16400
 8020a76:	f483 73dd 	eor.w	r3, r3, #442	; 0x1ba
 8020a7a:	600b      	str	r3, [r1, #0]
 8020a7c:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8020a80:	429a      	cmp	r2, r3
 8020a82:	d001      	beq.n	8020a88 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x38>
 8020a84:	f7fc fe88 	bl	801d798 <SFU_EXCPT_Security_Error>
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;
 8020a88:	4805      	ldr	r0, [pc, #20]	; (8020aa0 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x50>)
  return e_ret_status;
 8020a8a:	e001      	b.n	8020a90 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x40>
    e_ret_status = SFU_ERROR;
 8020a8c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8020a90:	bd08      	pop	{r3, pc}
 8020a92:	bf00      	nop
 8020a94:	20031dcc 	.word	0x20031dcc
 8020a98:	40003000 	.word	0x40003000
 8020a9c:	20030000 	.word	0x20030000
 8020aa0:	00122f11 	.word	0x00122f11

08020aa4 <SFU_LL_SECU_GetResetSources>:
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8020aa4:	4b12      	ldr	r3, [pc, #72]	; (8020af0 <SFU_LL_SECU_GetResetSources+0x4c>)
 8020aa6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8020aaa:	0091      	lsls	r1, r2, #2
 8020aac:	d403      	bmi.n	8020ab6 <SFU_LL_SECU_GetResetSources+0x12>
      (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8020aae:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8020ab2:	0052      	lsls	r2, r2, #1
 8020ab4:	d502      	bpl.n	8020abc <SFU_LL_SECU_GetResetSources+0x18>
    *peResetpSourceId = SFU_RESET_WDG_RESET;
 8020ab6:	2302      	movs	r3, #2
    *peResetpSourceId = SFU_RESET_UNKNOWN;
 8020ab8:	7003      	strb	r3, [r0, #0]
}
 8020aba:	4770      	bx	lr
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8020abc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8020ac0:	2a00      	cmp	r2, #0
 8020ac2:	da01      	bge.n	8020ac8 <SFU_LL_SECU_GetResetSources+0x24>
    *peResetpSourceId = SFU_RESET_LOW_POWER;
 8020ac4:	2303      	movs	r3, #3
 8020ac6:	e7f7      	b.n	8020ab8 <SFU_LL_SECU_GetResetSources+0x14>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8020ac8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8020acc:	00d1      	lsls	r1, r2, #3
 8020ace:	d501      	bpl.n	8020ad4 <SFU_LL_SECU_GetResetSources+0x30>
    *peResetpSourceId = SFU_RESET_SW_RESET;
 8020ad0:	2306      	movs	r3, #6
 8020ad2:	e7f1      	b.n	8020ab8 <SFU_LL_SECU_GetResetSources+0x14>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST) != RESET)
 8020ad4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8020ad8:	0192      	lsls	r2, r2, #6
 8020ada:	d501      	bpl.n	8020ae0 <SFU_LL_SECU_GetResetSources+0x3c>
    *peResetpSourceId = SFU_RESET_OB_LOADER;
 8020adc:	2307      	movs	r3, #7
 8020ade:	e7eb      	b.n	8020ab8 <SFU_LL_SECU_GetResetSources+0x14>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8020ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020ae4:	f013 6380 	ands.w	r3, r3, #67108864	; 0x4000000
    *peResetpSourceId = SFU_RESET_HW_RESET;
 8020ae8:	bf18      	it	ne
 8020aea:	2304      	movne	r3, #4
 8020aec:	e7e4      	b.n	8020ab8 <SFU_LL_SECU_GetResetSources+0x14>
 8020aee:	bf00      	nop
 8020af0:	40021000 	.word	0x40021000

08020af4 <SFU_LL_SECU_ClearResetSources>:
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8020af4:	4a03      	ldr	r2, [pc, #12]	; (8020b04 <SFU_LL_SECU_ClearResetSources+0x10>)
 8020af6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8020afa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8020afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8020b02:	4770      	bx	lr
 8020b04:	40021000 	.word	0x40021000

08020b08 <SFU_LL_SECU_IWDG_Refresh>:
{
 8020b08:	b508      	push	{r3, lr}
  if (HAL_IWDG_Refresh(&IwdgHandle) == HAL_OK)
 8020b0a:	4805      	ldr	r0, [pc, #20]	; (8020b20 <SFU_LL_SECU_IWDG_Refresh+0x18>)
 8020b0c:	f000 ffeb 	bl	8021ae6 <HAL_IWDG_Refresh>
}
 8020b10:	4b04      	ldr	r3, [pc, #16]	; (8020b24 <SFU_LL_SECU_IWDG_Refresh+0x1c>)
 8020b12:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8020b16:	2800      	cmp	r0, #0
 8020b18:	bf14      	ite	ne
 8020b1a:	4610      	movne	r0, r2
 8020b1c:	4618      	moveq	r0, r3
 8020b1e:	bd08      	pop	{r3, pc}
 8020b20:	20031dcc 	.word	0x20031dcc
 8020b24:	00122f11 	.word	0x00122f11

08020b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020b60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020b2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020b2e:	e003      	b.n	8020b38 <LoopCopyDataInit>

08020b30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020b30:	4b0c      	ldr	r3, [pc, #48]	; (8020b64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8020b32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020b34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020b36:	3104      	adds	r1, #4

08020b38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020b38:	480b      	ldr	r0, [pc, #44]	; (8020b68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020b3a:	4b0c      	ldr	r3, [pc, #48]	; (8020b6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8020b3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020b3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020b40:	d3f6      	bcc.n	8020b30 <CopyDataInit>
	ldr	r2, =_sbss
 8020b42:	4a0b      	ldr	r2, [pc, #44]	; (8020b70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8020b44:	e002      	b.n	8020b4c <LoopFillZerobss>

08020b46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020b46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020b48:	f842 3b04 	str.w	r3, [r2], #4

08020b4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020b4c:	4b09      	ldr	r3, [pc, #36]	; (8020b74 <LoopForever+0x16>)
	cmp	r2, r3
 8020b4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020b50:	d3f9      	bcc.n	8020b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8020b52:	f000 f8d5 	bl	8020d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020b56:	f007 feed 	bl	8028934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8020b5a:	f7fb fe15 	bl	801c788 <main>

08020b5e <LoopForever>:

LoopForever:
    b LoopForever
 8020b5e:	e7fe      	b.n	8020b5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020b60:	2009ffff 	.word	0x2009ffff
	ldr	r3, =_sidata
 8020b64:	0802dc58 	.word	0x0802dc58
	ldr	r0, =_sdata
 8020b68:	20030000 	.word	0x20030000
	ldr	r3, =_edata
 8020b6c:	20030170 	.word	0x20030170
	ldr	r2, =_sbss
 8020b70:	20030170 	.word	0x20030170
	ldr	r3, = _ebss
 8020b74:	20032e50 	.word	0x20032e50

08020b78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020b78:	e7fe      	b.n	8020b78 <ADC1_IRQHandler>

08020b7a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8020b7a:	b570      	push	{r4, r5, r6, lr}
 8020b7c:	460e      	mov	r6, r1
 8020b7e:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b80:	460c      	mov	r4, r1
 8020b82:	1ba3      	subs	r3, r4, r6
 8020b84:	429d      	cmp	r5, r3
 8020b86:	dc01      	bgt.n	8020b8c <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8020b88:	4628      	mov	r0, r5
 8020b8a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8020b8c:	f3af 8000 	nop.w
 8020b90:	f804 0b01 	strb.w	r0, [r4], #1
 8020b94:	e7f5      	b.n	8020b82 <_read+0x8>

08020b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020b96:	b570      	push	{r4, r5, r6, lr}
 8020b98:	460e      	mov	r6, r1
 8020b9a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b9c:	460c      	mov	r4, r1
 8020b9e:	1ba3      	subs	r3, r4, r6
 8020ba0:	429d      	cmp	r5, r3
 8020ba2:	dc01      	bgt.n	8020ba8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8020ba4:	4628      	mov	r0, r5
 8020ba6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8020ba8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8020bac:	f7fc fd17 	bl	801d5de <__io_putchar>
 8020bb0:	e7f5      	b.n	8020b9e <_write+0x8>
	...

08020bb4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8020bb4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8020bb6:	4b0a      	ldr	r3, [pc, #40]	; (8020be0 <_sbrk+0x2c>)
 8020bb8:	6819      	ldr	r1, [r3, #0]
{
 8020bba:	4602      	mov	r2, r0
	if (heap_end == 0)
 8020bbc:	b909      	cbnz	r1, 8020bc2 <_sbrk+0xe>
		heap_end = &end;
 8020bbe:	4909      	ldr	r1, [pc, #36]	; (8020be4 <_sbrk+0x30>)
 8020bc0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8020bc2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8020bc4:	4669      	mov	r1, sp
 8020bc6:	4402      	add	r2, r0
 8020bc8:	428a      	cmp	r2, r1
 8020bca:	d906      	bls.n	8020bda <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8020bcc:	f007 feac 	bl	8028928 <__errno>
 8020bd0:	230c      	movs	r3, #12
 8020bd2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8020bd4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8020bd8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8020bda:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8020bdc:	e7fc      	b.n	8020bd8 <_sbrk+0x24>
 8020bde:	bf00      	nop
 8020be0:	20031ddc 	.word	0x20031ddc
 8020be4:	20032e50 	.word	0x20032e50

08020be8 <_close>:

int _close(int file)
{
	return -1;
}
 8020be8:	f04f 30ff 	mov.w	r0, #4294967295
 8020bec:	4770      	bx	lr

08020bee <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8020bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020bf2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8020bf4:	2000      	movs	r0, #0
 8020bf6:	4770      	bx	lr

08020bf8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8020bf8:	2001      	movs	r0, #1
 8020bfa:	4770      	bx	lr

08020bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8020bfc:	2000      	movs	r0, #0
 8020bfe:	4770      	bx	lr

08020c00 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8020c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8020c02:	b948      	cbnz	r0, 8020c18 <BSP_LED_Init+0x18>
 8020c04:	4b0d      	ldr	r3, [pc, #52]	; (8020c3c <BSP_LED_Init+0x3c>)
 8020c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020c08:	f042 0202 	orr.w	r2, r2, #2
 8020c0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8020c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020c10:	f003 0302 	and.w	r3, r3, #2
 8020c14:	9300      	str	r3, [sp, #0]
 8020c16:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8020c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020c1c:	2301      	movs	r3, #1
 8020c1e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8020c22:	2100      	movs	r1, #0
 8020c24:	2302      	movs	r3, #2
 8020c26:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8020c2a:	4b05      	ldr	r3, [pc, #20]	; (8020c40 <BSP_LED_Init+0x40>)
 8020c2c:	a901      	add	r1, sp, #4
 8020c2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020c32:	f000 fe47 	bl	80218c4 <HAL_GPIO_Init>
}
 8020c36:	b007      	add	sp, #28
 8020c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c3c:	40021000 	.word	0x40021000
 8020c40:	200300b8 	.word	0x200300b8

08020c44 <BSP_LED_Off>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8020c44:	4b03      	ldr	r3, [pc, #12]	; (8020c54 <BSP_LED_Off+0x10>)
 8020c46:	2200      	movs	r2, #0
 8020c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020c4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020c50:	f000 bf18 	b.w	8021a84 <HAL_GPIO_WritePin>
 8020c54:	200300b8 	.word	0x200300b8

08020c58 <BSP_LED_Toggle>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8020c58:	4b03      	ldr	r3, [pc, #12]	; (8020c68 <BSP_LED_Toggle+0x10>)
 8020c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020c5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020c62:	f000 bf14 	b.w	8021a8e <HAL_GPIO_TogglePin>
 8020c66:	bf00      	nop
 8020c68:	200300b8 	.word	0x200300b8

08020c6c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line 
  *                                              with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8020c6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8020c6e:	4b1b      	ldr	r3, [pc, #108]	; (8020cdc <BSP_PB_Init+0x70>)
 8020c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020c72:	f042 0204 	orr.w	r2, r2, #4
 8020c76:	64da      	str	r2, [r3, #76]	; 0x4c
 8020c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020c7a:	f003 0304 	and.w	r3, r3, #4
 8020c7e:	9300      	str	r3, [sp, #0]
 8020c80:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8020c82:	b989      	cbnz	r1, 8020ca8 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8020c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8020c88:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8020c8c:	2101      	movs	r1, #1
 8020c8e:	2302      	movs	r3, #2
 8020c90:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8020c94:	4b12      	ldr	r3, [pc, #72]	; (8020ce0 <BSP_PB_Init+0x74>)
 8020c96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020c9a:	a901      	add	r1, sp, #4
 8020c9c:	6840      	ldr	r0, [r0, #4]
 8020c9e:	f000 fe11 	bl	80218c4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8020ca2:	b007      	add	sp, #28
 8020ca4:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8020ca8:	2901      	cmp	r1, #1
 8020caa:	d1fa      	bne.n	8020ca2 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8020cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020cb0:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020cb2:	2303      	movs	r3, #3
 8020cb4:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8020cb6:	4b0b      	ldr	r3, [pc, #44]	; (8020ce4 <BSP_PB_Init+0x78>)
 8020cb8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8020cba:	4b09      	ldr	r3, [pc, #36]	; (8020ce0 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 8020cbc:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8020cbe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020cc2:	a901      	add	r1, sp, #4
 8020cc4:	6840      	ldr	r0, [r0, #4]
 8020cc6:	f000 fdfd 	bl	80218c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8020cca:	2200      	movs	r2, #0
 8020ccc:	210f      	movs	r1, #15
 8020cce:	2028      	movs	r0, #40	; 0x28
 8020cd0:	f000 f8a6 	bl	8020e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8020cd4:	2028      	movs	r0, #40	; 0x28
 8020cd6:	f000 f8d7 	bl	8020e88 <HAL_NVIC_EnableIRQ>
}
 8020cda:	e7e2      	b.n	8020ca2 <BSP_PB_Init+0x36>
 8020cdc:	40021000 	.word	0x40021000
 8020ce0:	200300b8 	.word	0x200300b8
 8020ce4:	10110000 	.word	0x10110000

08020ce8 <BSP_PB_GetState>:
  *                 This parameter can be one of the following values:
  *                   @arg  BUTTON_USER  User Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8020ce8:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8020cea:	4b04      	ldr	r3, [pc, #16]	; (8020cfc <BSP_PB_GetState+0x14>)
 8020cec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020cf4:	6840      	ldr	r0, [r0, #4]
 8020cf6:	f000 febf 	bl	8021a78 <HAL_GPIO_ReadPin>
}
 8020cfa:	bd08      	pop	{r3, pc}
 8020cfc:	200300b8 	.word	0x200300b8

08020d00 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020d00:	490f      	ldr	r1, [pc, #60]	; (8020d40 <SystemInit+0x40>)
 8020d02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8020d06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8020d0e:	4b0d      	ldr	r3, [pc, #52]	; (8020d44 <SystemInit+0x44>)
 8020d10:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8020d12:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8020d14:	f042 0201 	orr.w	r2, r2, #1
 8020d18:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8020d1a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8020d1c:	681a      	ldr	r2, [r3, #0]
 8020d1e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8020d22:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8020d26:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8020d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020d2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8020d2e:	681a      	ldr	r2, [r3, #0]
 8020d30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8020d34:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8020d36:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8020d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020d3c:	608b      	str	r3, [r1, #8]
#endif
}
 8020d3e:	4770      	bx	lr
 8020d40:	e000ed00 	.word	0xe000ed00
 8020d44:	40021000 	.word	0x40021000

08020d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020d48:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8020d4a:	4e0f      	ldr	r6, [pc, #60]	; (8020d88 <HAL_InitTick+0x40>)
{
 8020d4c:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8020d4e:	6830      	ldr	r0, [r6, #0]
 8020d50:	b908      	cbnz	r0, 8020d56 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8020d52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8020d54:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8020d56:	4a0d      	ldr	r2, [pc, #52]	; (8020d8c <HAL_InitTick+0x44>)
 8020d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020d5c:	fbb3 f3f0 	udiv	r3, r3, r0
 8020d60:	6810      	ldr	r0, [r2, #0]
 8020d62:	fbb0 f0f3 	udiv	r0, r0, r3
 8020d66:	f000 f89d 	bl	8020ea4 <HAL_SYSTICK_Config>
 8020d6a:	4604      	mov	r4, r0
 8020d6c:	2800      	cmp	r0, #0
 8020d6e:	d1f0      	bne.n	8020d52 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020d70:	2d0f      	cmp	r5, #15
 8020d72:	d8ee      	bhi.n	8020d52 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020d74:	4602      	mov	r2, r0
 8020d76:	4629      	mov	r1, r5
 8020d78:	f04f 30ff 	mov.w	r0, #4294967295
 8020d7c:	f000 f850 	bl	8020e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020d80:	6075      	str	r5, [r6, #4]
 8020d82:	4620      	mov	r0, r4
 8020d84:	e7e6      	b.n	8020d54 <HAL_InitTick+0xc>
 8020d86:	bf00      	nop
 8020d88:	200300d0 	.word	0x200300d0
 8020d8c:	200300cc 	.word	0x200300cc

08020d90 <HAL_Init>:
{
 8020d90:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020d92:	2003      	movs	r0, #3
 8020d94:	f000 f832 	bl	8020dfc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020d98:	200f      	movs	r0, #15
 8020d9a:	f7ff ffd5 	bl	8020d48 <HAL_InitTick>
 8020d9e:	4604      	mov	r4, r0
 8020da0:	b918      	cbnz	r0, 8020daa <HAL_Init+0x1a>
    HAL_MspInit();
 8020da2:	f7fb fcfd 	bl	801c7a0 <HAL_MspInit>
}
 8020da6:	4620      	mov	r0, r4
 8020da8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8020daa:	2401      	movs	r4, #1
 8020dac:	e7fb      	b.n	8020da6 <HAL_Init+0x16>
	...

08020db0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8020db0:	4a03      	ldr	r2, [pc, #12]	; (8020dc0 <HAL_IncTick+0x10>)
 8020db2:	4904      	ldr	r1, [pc, #16]	; (8020dc4 <HAL_IncTick+0x14>)
 8020db4:	6813      	ldr	r3, [r2, #0]
 8020db6:	6809      	ldr	r1, [r1, #0]
 8020db8:	440b      	add	r3, r1
 8020dba:	6013      	str	r3, [r2, #0]
}
 8020dbc:	4770      	bx	lr
 8020dbe:	bf00      	nop
 8020dc0:	20032e48 	.word	0x20032e48
 8020dc4:	200300d0 	.word	0x200300d0

08020dc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8020dc8:	4b01      	ldr	r3, [pc, #4]	; (8020dd0 <HAL_GetTick+0x8>)
 8020dca:	6818      	ldr	r0, [r3, #0]
}
 8020dcc:	4770      	bx	lr
 8020dce:	bf00      	nop
 8020dd0:	20032e48 	.word	0x20032e48

08020dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020dd4:	b538      	push	{r3, r4, r5, lr}
 8020dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8020dd8:	f7ff fff6 	bl	8020dc8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020ddc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8020dde:	bf1c      	itt	ne
 8020de0:	4b05      	ldrne	r3, [pc, #20]	; (8020df8 <HAL_Delay+0x24>)
 8020de2:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8020de4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8020de6:	bf18      	it	ne
 8020de8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020dea:	f7ff ffed 	bl	8020dc8 <HAL_GetTick>
 8020dee:	1b40      	subs	r0, r0, r5
 8020df0:	42a0      	cmp	r0, r4
 8020df2:	d3fa      	bcc.n	8020dea <HAL_Delay+0x16>
  {
  }
}
 8020df4:	bd38      	pop	{r3, r4, r5, pc}
 8020df6:	bf00      	nop
 8020df8:	200300d0 	.word	0x200300d0

08020dfc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020dfc:	4a07      	ldr	r2, [pc, #28]	; (8020e1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8020dfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020e00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8020e04:	041b      	lsls	r3, r3, #16
 8020e06:	0c1b      	lsrs	r3, r3, #16
 8020e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020e0c:	0200      	lsls	r0, r0, #8
 8020e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020e12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8020e16:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8020e18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8020e1a:	4770      	bx	lr
 8020e1c:	e000ed00 	.word	0xe000ed00

08020e20 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020e20:	4b17      	ldr	r3, [pc, #92]	; (8020e80 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020e22:	b570      	push	{r4, r5, r6, lr}
 8020e24:	68dc      	ldr	r4, [r3, #12]
 8020e26:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020e2a:	f1c4 0507 	rsb	r5, r4, #7
 8020e2e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020e30:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020e34:	bf28      	it	cs
 8020e36:	2504      	movcs	r5, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e38:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020e3c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e3e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020e42:	bf8c      	ite	hi
 8020e44:	3c03      	subhi	r4, #3
 8020e46:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e48:	ea21 0303 	bic.w	r3, r1, r3
 8020e4c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020e4e:	fa06 f404 	lsl.w	r4, r6, r4
 8020e52:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8020e56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e58:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e5c:	bfa8      	it	ge
 8020e5e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8020e62:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e66:	bfbc      	itt	lt
 8020e68:	f000 000f 	andlt.w	r0, r0, #15
 8020e6c:	4a05      	ldrlt	r2, [pc, #20]	; (8020e84 <HAL_NVIC_SetPriority+0x64>)
 8020e6e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e70:	bfaa      	itet	ge
 8020e72:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e76:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e78:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8020e7c:	bd70      	pop	{r4, r5, r6, pc}
 8020e7e:	bf00      	nop
 8020e80:	e000ed00 	.word	0xe000ed00
 8020e84:	e000ed14 	.word	0xe000ed14

08020e88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8020e88:	2800      	cmp	r0, #0
 8020e8a:	db08      	blt.n	8020e9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020e8c:	0942      	lsrs	r2, r0, #5
 8020e8e:	2301      	movs	r3, #1
 8020e90:	f000 001f 	and.w	r0, r0, #31
 8020e94:	fa03 f000 	lsl.w	r0, r3, r0
 8020e98:	4b01      	ldr	r3, [pc, #4]	; (8020ea0 <HAL_NVIC_EnableIRQ+0x18>)
 8020e9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8020e9e:	4770      	bx	lr
 8020ea0:	e000e100 	.word	0xe000e100

08020ea4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020ea4:	3801      	subs	r0, #1
 8020ea6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8020eaa:	d20a      	bcs.n	8020ec2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020eac:	4b06      	ldr	r3, [pc, #24]	; (8020ec8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020eae:	4a07      	ldr	r2, [pc, #28]	; (8020ecc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020eb0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020eb2:	21f0      	movs	r1, #240	; 0xf0
 8020eb4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020eb8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020eba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020ebc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020ebe:	601a      	str	r2, [r3, #0]
 8020ec0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8020ec2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8020ec4:	4770      	bx	lr
 8020ec6:	bf00      	nop
 8020ec8:	e000e010 	.word	0xe000e010
 8020ecc:	e000ed00 	.word	0xe000ed00

08020ed0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8020ed0:	4770      	bx	lr

08020ed2 <HAL_SYSTICK_IRQHandler>:
{
 8020ed2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8020ed4:	f7ff fffc 	bl	8020ed0 <HAL_SYSTICK_Callback>
}
 8020ed8:	bd08      	pop	{r3, pc}

08020eda <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8020eda:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8020edc:	0896      	lsrs	r6, r2, #2
 8020ede:	6805      	ldr	r5, [r0, #0]
 8020ee0:	460b      	mov	r3, r1
 8020ee2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8020ee6:	42bb      	cmp	r3, r7
 8020ee8:	d108      	bne.n	8020efc <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8020eea:	f012 0203 	ands.w	r2, r2, #3
 8020eee:	d01e      	beq.n	8020f2e <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 8020ef0:	2a01      	cmp	r2, #1
 8020ef2:	d114      	bne.n	8020f1e <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8020ef4:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8020ef8:	702b      	strb	r3, [r5, #0]
 8020efa:	e018      	b.n	8020f2e <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8020efc:	785c      	ldrb	r4, [r3, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8020efe:	f893 c000 	ldrb.w	ip, [r3]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8020f02:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8020f04:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8020f08:	f893 c003 	ldrb.w	ip, [r3, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8020f0c:	ea44 040c 	orr.w	r4, r4, ip
 8020f10:	f893 c002 	ldrb.w	ip, [r3, #2]
 8020f14:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8020f18:	602c      	str	r4, [r5, #0]
 8020f1a:	3304      	adds	r3, #4
 8020f1c:	e7e3      	b.n	8020ee6 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 8020f1e:	2a02      	cmp	r2, #2
 8020f20:	d108      	bne.n	8020f34 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8020f22:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8020f26:	785b      	ldrb	r3, [r3, #1]
 8020f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8020f2c:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8020f2e:	6803      	ldr	r3, [r0, #0]
 8020f30:	6818      	ldr	r0, [r3, #0]
}
 8020f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8020f34:	785a      	ldrb	r2, [r3, #1]
 8020f36:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8020f3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8020f3e:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8020f40:	789b      	ldrb	r3, [r3, #2]
 8020f42:	e7d9      	b.n	8020ef8 <CRC_Handle_8+0x1e>

08020f44 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8020f44:	6800      	ldr	r0, [r0, #0]
 8020f46:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8020f48:	2300      	movs	r3, #0
 8020f4a:	0855      	lsrs	r5, r2, #1
 8020f4c:	429d      	cmp	r5, r3
 8020f4e:	d106      	bne.n	8020f5e <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8020f50:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8020f52:	bf44      	itt	mi
 8020f54:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 8020f58:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8020f5a:	6800      	ldr	r0, [r0, #0]
}
 8020f5c:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8020f5e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8020f62:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
 8020f66:	8864      	ldrh	r4, [r4, #2]
 8020f68:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8020f6c:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8020f6e:	3301      	adds	r3, #1
 8020f70:	e7ec      	b.n	8020f4c <CRC_Handle_16+0x8>

08020f72 <HAL_CRC_MspInit>:
}
 8020f72:	4770      	bx	lr

08020f74 <HAL_CRC_Init>:
{
 8020f74:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8020f76:	4604      	mov	r4, r0
 8020f78:	b908      	cbnz	r0, 8020f7e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8020f7a:	2001      	movs	r0, #1
}
 8020f7c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8020f7e:	7f43      	ldrb	r3, [r0, #29]
 8020f80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8020f84:	b913      	cbnz	r3, 8020f8c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8020f86:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8020f88:	f7ff fff3 	bl	8020f72 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8020f8c:	2302      	movs	r3, #2
 8020f8e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8020f90:	7923      	ldrb	r3, [r4, #4]
 8020f92:	b9e3      	cbnz	r3, 8020fce <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8020f94:	6823      	ldr	r3, [r4, #0]
 8020f96:	4a13      	ldr	r2, [pc, #76]	; (8020fe4 <HAL_CRC_Init+0x70>)
 8020f98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8020f9a:	689a      	ldr	r2, [r3, #8]
 8020f9c:	f022 0218 	bic.w	r2, r2, #24
 8020fa0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8020fa2:	7962      	ldrb	r2, [r4, #5]
 8020fa4:	6823      	ldr	r3, [r4, #0]
 8020fa6:	b9d2      	cbnz	r2, 8020fde <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8020fa8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8020fac:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8020fae:	689a      	ldr	r2, [r3, #8]
 8020fb0:	6961      	ldr	r1, [r4, #20]
 8020fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020fb6:	430a      	orrs	r2, r1
 8020fb8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8020fba:	689a      	ldr	r2, [r3, #8]
 8020fbc:	69a1      	ldr	r1, [r4, #24]
 8020fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020fc2:	430a      	orrs	r2, r1
 8020fc4:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8020fc6:	2301      	movs	r3, #1
 8020fc8:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8020fca:	2000      	movs	r0, #0
 8020fcc:	e7d6      	b.n	8020f7c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8020fce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8020fd2:	4620      	mov	r0, r4
 8020fd4:	f000 f82c 	bl	8021030 <HAL_CRCEx_Polynomial_Set>
 8020fd8:	2800      	cmp	r0, #0
 8020fda:	d0e2      	beq.n	8020fa2 <HAL_CRC_Init+0x2e>
 8020fdc:	e7cd      	b.n	8020f7a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8020fde:	6922      	ldr	r2, [r4, #16]
 8020fe0:	e7e4      	b.n	8020fac <HAL_CRC_Init+0x38>
 8020fe2:	bf00      	nop
 8020fe4:	04c11db7 	.word	0x04c11db7

08020fe8 <HAL_CRC_Calculate>:
{
 8020fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8020fea:	2502      	movs	r5, #2
 8020fec:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8020fee:	6805      	ldr	r5, [r0, #0]
 8020ff0:	68af      	ldr	r7, [r5, #8]
 8020ff2:	f047 0701 	orr.w	r7, r7, #1
 8020ff6:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 8020ff8:	6a07      	ldr	r7, [r0, #32]
 8020ffa:	2f02      	cmp	r7, #2
{
 8020ffc:	4604      	mov	r4, r0
  switch (hcrc->InputDataFormat)
 8020ffe:	d012      	beq.n	8021026 <HAL_CRC_Calculate+0x3e>
 8021000:	2f03      	cmp	r7, #3
 8021002:	d004      	beq.n	802100e <HAL_CRC_Calculate+0x26>
 8021004:	2f01      	cmp	r7, #1
 8021006:	d111      	bne.n	802102c <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8021008:	f7ff ff67 	bl	8020eda <CRC_Handle_8>
      break;
 802100c:	e004      	b.n	8021018 <HAL_CRC_Calculate+0x30>
 802100e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8021012:	42b1      	cmp	r1, r6
 8021014:	d103      	bne.n	802101e <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 8021016:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8021018:	2301      	movs	r3, #1
 802101a:	7763      	strb	r3, [r4, #29]
}
 802101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 802101e:	f851 3b04 	ldr.w	r3, [r1], #4
 8021022:	602b      	str	r3, [r5, #0]
 8021024:	e7f5      	b.n	8021012 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8021026:	f7ff ff8d 	bl	8020f44 <CRC_Handle_16>
      break;
 802102a:	e7f5      	b.n	8021018 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 802102c:	2000      	movs	r0, #0
 802102e:	e7f3      	b.n	8021018 <HAL_CRC_Calculate+0x30>

08021030 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8021030:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8021032:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8021034:	f113 33ff 	adds.w	r3, r3, #4294967295
 8021038:	d306      	bcc.n	8021048 <HAL_CRCEx_Polynomial_Set+0x18>
 802103a:	fa21 f403 	lsr.w	r4, r1, r3
 802103e:	07e4      	lsls	r4, r4, #31
 8021040:	d5f8      	bpl.n	8021034 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8021042:	2a08      	cmp	r2, #8
 8021044:	d014      	beq.n	8021070 <HAL_CRCEx_Polynomial_Set+0x40>
 8021046:	d802      	bhi.n	802104e <HAL_CRCEx_Polynomial_Set+0x1e>
 8021048:	b13a      	cbz	r2, 802105a <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 802104a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 802104c:	e00d      	b.n	802106a <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 802104e:	2a10      	cmp	r2, #16
 8021050:	d00c      	beq.n	802106c <HAL_CRCEx_Polynomial_Set+0x3c>
 8021052:	2a18      	cmp	r2, #24
 8021054:	d1f9      	bne.n	802104a <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8021056:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8021058:	d8f7      	bhi.n	802104a <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 802105a:	6800      	ldr	r0, [r0, #0]
 802105c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 802105e:	6883      	ldr	r3, [r0, #8]
 8021060:	f023 0318 	bic.w	r3, r3, #24
 8021064:	431a      	orrs	r2, r3
 8021066:	6082      	str	r2, [r0, #8]
 8021068:	2000      	movs	r0, #0
}
 802106a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 802106c:	2b07      	cmp	r3, #7
 802106e:	e7f3      	b.n	8021058 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8021070:	2b0f      	cmp	r3, #15
 8021072:	e7f1      	b.n	8021058 <HAL_CRCEx_Polynomial_Set+0x28>

08021074 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8021074:	4a09      	ldr	r2, [pc, #36]	; (802109c <FLASH_Program_Fast+0x28>)
 8021076:	6953      	ldr	r3, [r2, #20]
 8021078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 802107c:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 802107e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021080:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8021084:	b672      	cpsid	i
 8021086:	f501 7200 	add.w	r2, r1, #512	; 0x200
 802108a:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 802108c:	680c      	ldr	r4, [r1, #0]
 802108e:	500c      	str	r4, [r1, r0]
    dest_addr++;
    src_addr++;
 8021090:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8021092:	4291      	cmp	r1, r2
 8021094:	d1fa      	bne.n	802108c <FLASH_Program_Fast+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021096:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 802109a:	bd10      	pop	{r4, pc}
 802109c:	40022000 	.word	0x40022000

080210a0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80210a0:	4b06      	ldr	r3, [pc, #24]	; (80210bc <HAL_FLASH_Unlock+0x1c>)
 80210a2:	695a      	ldr	r2, [r3, #20]
 80210a4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80210a6:	bfbf      	itttt	lt
 80210a8:	4a05      	ldrlt	r2, [pc, #20]	; (80210c0 <HAL_FLASH_Unlock+0x20>)
 80210aa:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80210ac:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80210b0:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80210b2:	bfba      	itte	lt
 80210b4:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80210b6:	0fc0      	lsrlt	r0, r0, #31
 80210b8:	2000      	movge	r0, #0
}
 80210ba:	4770      	bx	lr
 80210bc:	40022000 	.word	0x40022000
 80210c0:	45670123 	.word	0x45670123

080210c4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80210c4:	4a03      	ldr	r2, [pc, #12]	; (80210d4 <HAL_FLASH_Lock+0x10>)
 80210c6:	6953      	ldr	r3, [r2, #20]
 80210c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80210cc:	6153      	str	r3, [r2, #20]
}
 80210ce:	2000      	movs	r0, #0
 80210d0:	4770      	bx	lr
 80210d2:	bf00      	nop
 80210d4:	40022000 	.word	0x40022000

080210d8 <HAL_FLASH_OB_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 80210d8:	4b06      	ldr	r3, [pc, #24]	; (80210f4 <HAL_FLASH_OB_Unlock+0x1c>)
 80210da:	695a      	ldr	r2, [r3, #20]
 80210dc:	0052      	lsls	r2, r2, #1
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80210de:	bf41      	itttt	mi
 80210e0:	4a05      	ldrmi	r2, [pc, #20]	; (80210f8 <HAL_FLASH_OB_Unlock+0x20>)
 80210e2:	60da      	strmi	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80210e4:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;
 80210e8:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80210ea:	bf4c      	ite	mi
 80210ec:	60da      	strmi	r2, [r3, #12]
    return HAL_ERROR;
 80210ee:	2001      	movpl	r0, #1
}
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop
 80210f4:	40022000 	.word	0x40022000
 80210f8:	08192a3b 	.word	0x08192a3b

080210fc <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80210fc:	4a03      	ldr	r2, [pc, #12]	; (802110c <HAL_FLASH_OB_Lock+0x10>)
 80210fe:	6953      	ldr	r3, [r2, #20]
 8021100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8021104:	6153      	str	r3, [r2, #20]
}
 8021106:	2000      	movs	r0, #0
 8021108:	4770      	bx	lr
 802110a:	bf00      	nop
 802110c:	40022000 	.word	0x40022000

08021110 <FLASH_WaitForLastOperation>:
{
 8021110:	b570      	push	{r4, r5, r6, lr}
 8021112:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8021114:	f7ff fe58 	bl	8020dc8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8021118:	4c10      	ldr	r4, [pc, #64]	; (802115c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 802111a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 802111c:	6923      	ldr	r3, [r4, #16]
 802111e:	03db      	lsls	r3, r3, #15
 8021120:	d40a      	bmi.n	8021138 <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8021122:	6920      	ldr	r0, [r4, #16]
 8021124:	4a0e      	ldr	r2, [pc, #56]	; (8021160 <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 8021126:	4002      	ands	r2, r0
 8021128:	d00f      	beq.n	802114a <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 802112a:	490e      	ldr	r1, [pc, #56]	; (8021164 <FLASH_WaitForLastOperation+0x54>)
 802112c:	684b      	ldr	r3, [r1, #4]
 802112e:	4313      	orrs	r3, r2
 8021130:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 8021132:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8021134:	6122      	str	r2, [r4, #16]
}
 8021136:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8021138:	1c6a      	adds	r2, r5, #1
 802113a:	d0ef      	beq.n	802111c <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 802113c:	f7ff fe44 	bl	8020dc8 <HAL_GetTick>
 8021140:	1b80      	subs	r0, r0, r6
 8021142:	42a8      	cmp	r0, r5
 8021144:	d3ea      	bcc.n	802111c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8021146:	2003      	movs	r0, #3
 8021148:	e7f5      	b.n	8021136 <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 802114a:	6920      	ldr	r0, [r4, #16]
 802114c:	f010 0001 	ands.w	r0, r0, #1
 8021150:	d0f1      	beq.n	8021136 <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8021152:	2301      	movs	r3, #1
 8021154:	6123      	str	r3, [r4, #16]
 8021156:	4610      	mov	r0, r2
 8021158:	e7ed      	b.n	8021136 <FLASH_WaitForLastOperation+0x26>
 802115a:	bf00      	nop
 802115c:	40022000 	.word	0x40022000
 8021160:	0002c3fa 	.word	0x0002c3fa
 8021164:	200300d8 	.word	0x200300d8

08021168 <HAL_FLASH_Program>:
{
 8021168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 802116c:	4c25      	ldr	r4, [pc, #148]	; (8021204 <HAL_FLASH_Program+0x9c>)
{
 802116e:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8021170:	7823      	ldrb	r3, [r4, #0]
 8021172:	2b01      	cmp	r3, #1
{
 8021174:	4607      	mov	r7, r0
 8021176:	4688      	mov	r8, r1
 8021178:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 802117a:	d041      	beq.n	8021200 <HAL_FLASH_Program+0x98>
 802117c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802117e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8021182:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021184:	f7ff ffc4 	bl	8021110 <FLASH_WaitForLastOperation>
 8021188:	4606      	mov	r6, r0
  if(status == HAL_OK)
 802118a:	bb30      	cbnz	r0, 80211da <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802118c:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 802118e:	481e      	ldr	r0, [pc, #120]	; (8021208 <HAL_FLASH_Program+0xa0>)
 8021190:	6805      	ldr	r5, [r0, #0]
 8021192:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8021196:	bf17      	itett	ne
 8021198:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 802119a:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 802119c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80211a0:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80211a2:	bf1c      	itt	ne
 80211a4:	2302      	movne	r3, #2
 80211a6:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80211a8:	b9e7      	cbnz	r7, 80211e4 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80211aa:	6945      	ldr	r5, [r0, #20]
 80211ac:	f045 0501 	orr.w	r5, r5, #1
 80211b0:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80211b2:	f8c8 9000 	str.w	r9, [r8]
  __ASM volatile ("isb 0xF":::"memory");
 80211b6:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 80211ba:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80211bc:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80211c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80211c4:	f7ff ffa4 	bl	8021110 <FLASH_WaitForLastOperation>
 80211c8:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80211ca:	b125      	cbz	r5, 80211d6 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80211cc:	4a0e      	ldr	r2, [pc, #56]	; (8021208 <HAL_FLASH_Program+0xa0>)
 80211ce:	6953      	ldr	r3, [r2, #20]
 80211d0:	ea23 0505 	bic.w	r5, r3, r5
 80211d4:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80211d6:	f000 fad5 	bl	8021784 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80211da:	2300      	movs	r3, #0
 80211dc:	7023      	strb	r3, [r4, #0]
}
 80211de:	4630      	mov	r0, r6
 80211e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80211e4:	1e7b      	subs	r3, r7, #1
 80211e6:	2b01      	cmp	r3, #1
 80211e8:	d901      	bls.n	80211ee <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 80211ea:	2500      	movs	r5, #0
 80211ec:	e7e8      	b.n	80211c0 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80211ee:	4649      	mov	r1, r9
 80211f0:	4640      	mov	r0, r8
 80211f2:	f7ff ff3f 	bl	8021074 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80211f6:	2f02      	cmp	r7, #2
 80211f8:	d1f7      	bne.n	80211ea <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 80211fa:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80211fe:	e7df      	b.n	80211c0 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8021200:	2602      	movs	r6, #2
 8021202:	e7ec      	b.n	80211de <HAL_FLASH_Program+0x76>
 8021204:	200300d8 	.word	0x200300d8
 8021208:	40022000 	.word	0x40022000

0802120c <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 802120c:	4a04      	ldr	r2, [pc, #16]	; (8021220 <HAL_FLASH_OB_Launch+0x14>)
 802120e:	6953      	ldr	r3, [r2, #20]
 8021210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8021214:	6153      	str	r3, [r2, #20]
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8021216:	f24c 3050 	movw	r0, #50000	; 0xc350
 802121a:	f7ff bf79 	b.w	8021110 <FLASH_WaitForLastOperation>
 802121e:	bf00      	nop
 8021220:	40022000 	.word	0x40022000

08021224 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8021224:	4a0f      	ldr	r2, [pc, #60]	; (8021264 <FLASH_MassErase+0x40>)
 8021226:	6a13      	ldr	r3, [r2, #32]
 8021228:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 802122c:	4613      	mov	r3, r2
 802122e:	d011      	beq.n	8021254 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8021230:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8021232:	bf42      	ittt	mi
 8021234:	6952      	ldrmi	r2, [r2, #20]
 8021236:	f042 0204 	orrmi.w	r2, r2, #4
 802123a:	615a      	strmi	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 802123c:	0782      	lsls	r2, r0, #30
 802123e:	d503      	bpl.n	8021248 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8021240:	695a      	ldr	r2, [r3, #20]
 8021242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8021246:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8021248:	4a06      	ldr	r2, [pc, #24]	; (8021264 <FLASH_MassErase+0x40>)
 802124a:	6953      	ldr	r3, [r2, #20]
 802124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021250:	6153      	str	r3, [r2, #20]
}
 8021252:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8021254:	6953      	ldr	r3, [r2, #20]
 8021256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802125a:	f043 0304 	orr.w	r3, r3, #4
 802125e:	6153      	str	r3, [r2, #20]
 8021260:	e7f2      	b.n	8021248 <FLASH_MassErase+0x24>
 8021262:	bf00      	nop
 8021264:	40022000 	.word	0x40022000

08021268 <HAL_FLASHEx_OBProgram>:
{
 8021268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 802126c:	4fb2      	ldr	r7, [pc, #712]	; (8021538 <HAL_FLASHEx_OBProgram+0x2d0>)
 802126e:	783b      	ldrb	r3, [r7, #0]
 8021270:	2b01      	cmp	r3, #1
{
 8021272:	4680      	mov	r8, r0
  __HAL_LOCK(&pFlash);
 8021274:	f000 81af 	beq.w	80215d6 <HAL_FLASHEx_OBProgram+0x36e>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021278:	2300      	movs	r3, #0
 802127a:	607b      	str	r3, [r7, #4]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 802127c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 802127e:	f04f 0901 	mov.w	r9, #1
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8021282:	ea13 0309 	ands.w	r3, r3, r9
  __HAL_LOCK(&pFlash);
 8021286:	f887 9000 	strb.w	r9, [r7]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 802128a:	f000 8114 	beq.w	80214b6 <HAL_FLASHEx_OBProgram+0x24e>
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 802128e:	e9d0 6501 	ldrd	r6, r5, [r0, #4]
 8021292:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021294:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021298:	f7ff ff3a 	bl	8021110 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 802129c:	b9e0      	cbnz	r0, 80212d8 <HAL_FLASHEx_OBProgram+0x70>
 802129e:	4ba7      	ldr	r3, [pc, #668]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 80212a0:	2e00      	cmp	r6, #0
 80212a2:	f040 80e9 	bne.w	8021478 <HAL_FLASHEx_OBProgram+0x210>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 80212a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80212a8:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80212ac:	432a      	orrs	r2, r5
 80212ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80212b2:	62da      	str	r2, [r3, #44]	; 0x2c
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80212b4:	4ca1      	ldr	r4, [pc, #644]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
 80212b6:	6963      	ldr	r3, [r4, #20]
 80212b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80212bc:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80212be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80212c2:	f7ff ff25 	bl	8021110 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80212c6:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80212c8:	f110 0900 	adds.w	r9, r0, #0
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80212cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80212d0:	6163      	str	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80212d2:	bf18      	it	ne
 80212d4:	f04f 0901 	movne.w	r9, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80212d8:	f8d8 3000 	ldr.w	r3, [r8]
 80212dc:	079a      	lsls	r2, r3, #30
 80212de:	d51b      	bpl.n	8021318 <HAL_FLASHEx_OBProgram+0xb0>

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80212e0:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80212e4:	f8d8 5010 	ldr.w	r5, [r8, #16]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80212e8:	f7ff ff12 	bl	8021110 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80212ec:	b990      	cbnz	r0, 8021314 <HAL_FLASHEx_OBProgram+0xac>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80212ee:	4c93      	ldr	r4, [pc, #588]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
 80212f0:	6a23      	ldr	r3, [r4, #32]
 80212f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80212f6:	432b      	orrs	r3, r5
 80212f8:	6223      	str	r3, [r4, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80212fa:	6963      	ldr	r3, [r4, #20]
 80212fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021300:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021302:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021306:	f7ff ff03 	bl	8021110 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 802130a:	6963      	ldr	r3, [r4, #20]
 802130c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8021310:	6163      	str	r3, [r4, #20]
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8021312:	b108      	cbz	r0, 8021318 <HAL_FLASHEx_OBProgram+0xb0>
      status = HAL_ERROR;
 8021314:	f04f 0901 	mov.w	r9, #1
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8021318:	f8d8 3000 	ldr.w	r3, [r8]
 802131c:	075b      	lsls	r3, r3, #29
 802131e:	f140 8088 	bpl.w	8021432 <HAL_FLASHEx_OBProgram+0x1ca>

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021322:	f24c 3050 	movw	r0, #50000	; 0xc350
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8021326:	e9d8 5405 	ldrd	r5, r4, [r8, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802132a:	f7ff fef1 	bl	8021110 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 802132e:	2800      	cmp	r0, #0
 8021330:	d17d      	bne.n	802142e <HAL_FLASHEx_OBProgram+0x1c6>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8021332:	f015 0301 	ands.w	r3, r5, #1
  uint32_t optr_reg_val = 0;
 8021336:	bf0e      	itee	eq
 8021338:	461a      	moveq	r2, r3
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 802133a:	f404 62e0 	andne.w	r2, r4, #1792	; 0x700
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 802133e:	f44f 63e0 	movne.w	r3, #1792	; 0x700
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8021342:	07ae      	lsls	r6, r5, #30
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8021344:	bf42      	ittt	mi
 8021346:	f404 5180 	andmi.w	r1, r4, #4096	; 0x1000
 802134a:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 802134c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8021350:	0768      	lsls	r0, r5, #29
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8021352:	bf42      	ittt	mi
 8021354:	f404 5100 	andmi.w	r1, r4, #8192	; 0x2000
 8021358:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 802135a:	f443 5300 	orrmi.w	r3, r3, #8192	; 0x2000
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 802135e:	04e9      	lsls	r1, r5, #19
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8021360:	bf42      	ittt	mi
 8021362:	f404 4180 	andmi.w	r1, r4, #16384	; 0x4000
 8021366:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8021368:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 802136c:	072e      	lsls	r6, r5, #28
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 802136e:	bf42      	ittt	mi
 8021370:	f404 3180 	andmi.w	r1, r4, #65536	; 0x10000
 8021374:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8021376:	f443 3380 	orrmi.w	r3, r3, #65536	; 0x10000
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 802137a:	06e8      	lsls	r0, r5, #27
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 802137c:	bf42      	ittt	mi
 802137e:	f404 3100 	andmi.w	r1, r4, #131072	; 0x20000
 8021382:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8021384:	f443 3300 	orrmi.w	r3, r3, #131072	; 0x20000
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8021388:	06a9      	lsls	r1, r5, #26
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 802138a:	bf42      	ittt	mi
 802138c:	f404 2180 	andmi.w	r1, r4, #262144	; 0x40000
 8021390:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8021392:	f443 2380 	orrmi.w	r3, r3, #262144	; 0x40000
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8021396:	066e      	lsls	r6, r5, #25
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8021398:	bf42      	ittt	mi
 802139a:	f404 2100 	andmi.w	r1, r4, #524288	; 0x80000
 802139e:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 80213a0:	f443 2300 	orrmi.w	r3, r3, #524288	; 0x80000

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 80213a4:	0628      	lsls	r0, r5, #24
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80213a6:	bf42      	ittt	mi
 80213a8:	f404 1180 	andmi.w	r1, r4, #1048576	; 0x100000
 80213ac:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80213ae:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 80213b2:	05e9      	lsls	r1, r5, #23
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DB1M));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DB1M);
 80213b4:	bf42      	ittt	mi
 80213b6:	f404 1100 	andmi.w	r1, r4, #2097152	; 0x200000
 80213ba:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_DB1M;
 80213bc:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 80213c0:	05ae      	lsls	r6, r5, #22
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 80213c2:	bf42      	ittt	mi
 80213c4:	f404 0100 	andmi.w	r1, r4, #8388608	; 0x800000
 80213c8:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80213ca:	f443 0300 	orrmi.w	r3, r3, #8388608	; 0x800000
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 80213ce:	0568      	lsls	r0, r5, #21
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 80213d0:	bf42      	ittt	mi
 80213d2:	f004 7180 	andmi.w	r1, r4, #16777216	; 0x1000000
 80213d6:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 80213d8:	f043 7380 	orrmi.w	r3, r3, #16777216	; 0x1000000
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 80213dc:	0529      	lsls	r1, r5, #20
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 80213de:	bf42      	ittt	mi
 80213e0:	f004 7100 	andmi.w	r1, r4, #33554432	; 0x2000000
 80213e4:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80213e6:	f043 7300 	orrmi.w	r3, r3, #33554432	; 0x2000000
#if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || \
    defined (STM32L442xx) || defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_nSWBOOT0) != 0U)
 80213ea:	04ae      	lsls	r6, r5, #18
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 80213ec:	bf42      	ittt	mi
 80213ee:	f004 6180 	andmi.w	r1, r4, #67108864	; 0x4000000
 80213f2:	430a      	orrmi	r2, r1
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 80213f4:	f043 6380 	orrmi.w	r3, r3, #67108864	; 0x4000000
    }

    if((UserType & OB_USER_nBOOT0) != 0U)
 80213f8:	046d      	lsls	r5, r5, #17
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 80213fa:	bf44      	itt	mi
 80213fc:	f004 6400 	andmi.w	r4, r4, #134217728	; 0x8000000
 8021400:	4322      	orrmi	r2, r4
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8021402:	4c4e      	ldr	r4, [pc, #312]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
 8021404:	6a21      	ldr	r1, [r4, #32]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8021406:	bf48      	it	mi
 8021408:	f043 6300 	orrmi.w	r3, r3, #134217728	; 0x8000000
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 802140c:	ea21 0303 	bic.w	r3, r1, r3
 8021410:	431a      	orrs	r2, r3
 8021412:	6222      	str	r2, [r4, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8021414:	6963      	ldr	r3, [r4, #20]
 8021416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802141a:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802141c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021420:	f7ff fe76 	bl	8021110 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8021424:	6963      	ldr	r3, [r4, #20]
 8021426:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802142a:	6163      	str	r3, [r4, #20]
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 802142c:	b108      	cbz	r0, 8021432 <HAL_FLASHEx_OBProgram+0x1ca>
      status = HAL_ERROR;
 802142e:	f04f 0901 	mov.w	r9, #1
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8021432:	f8d8 3000 	ldr.w	r3, [r8]
 8021436:	071c      	lsls	r4, r3, #28
 8021438:	d578      	bpl.n	802152c <HAL_FLASHEx_OBProgram+0x2c4>
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 802143a:	e9d8 4508 	ldrd	r4, r5, [r8, #32]
 802143e:	42ac      	cmp	r4, r5
 8021440:	d074      	beq.n	802152c <HAL_FLASHEx_OBProgram+0x2c4>
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021442:	f24c 3050 	movw	r0, #50000	; 0xc350
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8021446:	f8d8 601c 	ldr.w	r6, [r8, #28]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802144a:	f7ff fe61 	bl	8021110 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 802144e:	2800      	cmp	r0, #0
 8021450:	d16a      	bne.n	8021528 <HAL_FLASHEx_OBProgram+0x2c0>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8021452:	4b3b      	ldr	r3, [pc, #236]	; (8021540 <HAL_FLASHEx_OBProgram+0x2d8>)
 8021454:	6818      	ldr	r0, [r3, #0]
 8021456:	4b3b      	ldr	r3, [pc, #236]	; (8021544 <HAL_FLASHEx_OBProgram+0x2dc>)
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	05c0      	lsls	r0, r0, #23
 802145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021460:	b299      	uxth	r1, r3
 8021462:	d42a      	bmi.n	80214ba <HAL_FLASHEx_OBProgram+0x252>
    {
      bank1_addr = FLASH_BASE;
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8021464:	4291      	cmp	r1, r2
 8021466:	d073      	beq.n	8021550 <HAL_FLASHEx_OBProgram+0x2e8>
 8021468:	4a37      	ldr	r2, [pc, #220]	; (8021548 <HAL_FLASHEx_OBProgram+0x2e0>)
 802146a:	ea02 2243 	and.w	r2, r2, r3, lsl #9
 802146e:	f102 6c00 	add.w	ip, r2, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE;
 8021472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8021476:	e029      	b.n	80214cc <HAL_FLASHEx_OBProgram+0x264>
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8021478:	2e01      	cmp	r6, #1
 802147a:	d107      	bne.n	802148c <HAL_FLASHEx_OBProgram+0x224>
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 802147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802147e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8021482:	432a      	orrs	r2, r5
 8021484:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021488:	631a      	str	r2, [r3, #48]	; 0x30
 802148a:	e713      	b.n	80212b4 <HAL_FLASHEx_OBProgram+0x4c>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 802148c:	2e02      	cmp	r6, #2
 802148e:	d107      	bne.n	80214a0 <HAL_FLASHEx_OBProgram+0x238>
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8021490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021492:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8021496:	432a      	orrs	r2, r5
 8021498:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802149c:	64da      	str	r2, [r3, #76]	; 0x4c
 802149e:	e709      	b.n	80212b4 <HAL_FLASHEx_OBProgram+0x4c>
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80214a0:	2e04      	cmp	r6, #4
 80214a2:	f47f af07 	bne.w	80212b4 <HAL_FLASHEx_OBProgram+0x4c>
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 80214a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80214a8:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80214ac:	432a      	orrs	r2, r5
 80214ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80214b2:	651a      	str	r2, [r3, #80]	; 0x50
 80214b4:	e6fe      	b.n	80212b4 <HAL_FLASHEx_OBProgram+0x4c>
  HAL_StatusTypeDef status = HAL_OK;
 80214b6:	4699      	mov	r9, r3
 80214b8:	e70e      	b.n	80212d8 <HAL_FLASHEx_OBProgram+0x70>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80214ba:	4291      	cmp	r1, r2
 80214bc:	d04b      	beq.n	8021556 <HAL_FLASHEx_OBProgram+0x2ee>
 80214be:	4a22      	ldr	r2, [pc, #136]	; (8021548 <HAL_FLASHEx_OBProgram+0x2e0>)
 80214c0:	ea02 2243 	and.w	r2, r2, r3, lsl #9
 80214c4:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
      bank2_addr = FLASH_BASE;
 80214c8:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80214cc:	4b1b      	ldr	r3, [pc, #108]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
 80214ce:	6a18      	ldr	r0, [r3, #32]
 80214d0:	0240      	lsls	r0, r0, #9
 80214d2:	f006 0103 	and.w	r1, r6, #3
 80214d6:	d456      	bmi.n	8021586 <HAL_FLASHEx_OBProgram+0x31e>
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80214d8:	2901      	cmp	r1, #1
 80214da:	d141      	bne.n	8021560 <HAL_FLASHEx_OBProgram+0x2f8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80214dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80214de:	4a1b      	ldr	r2, [pc, #108]	; (802154c <HAL_FLASHEx_OBProgram+0x2e4>)
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 80214e0:	f104 4178 	add.w	r1, r4, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80214e4:	ea00 0402 	and.w	r4, r0, r2
 80214e8:	ea44 1411 	orr.w	r4, r4, r1, lsr #4
 80214ec:	625c      	str	r4, [r3, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80214ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 80214f0:	f105 4578 	add.w	r5, r5, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80214f4:	4011      	ands	r1, r2
 80214f6:	ea41 1115 	orr.w	r1, r1, r5, lsr #4
 80214fa:	6299      	str	r1, [r3, #40]	; 0x28
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 80214fc:	4c0f      	ldr	r4, [pc, #60]	; (802153c <HAL_FLASHEx_OBProgram+0x2d4>)
 80214fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021500:	f006 4800 	and.w	r8, r6, #2147483648	; 0x80000000
 8021504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021508:	ea43 0308 	orr.w	r3, r3, r8
 802150c:	62a3      	str	r3, [r4, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 802150e:	6963      	ldr	r3, [r4, #20]
 8021510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021514:	6163      	str	r3, [r4, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021516:	f24c 3050 	movw	r0, #50000	; 0xc350
 802151a:	f7ff fdf9 	bl	8021110 <FLASH_WaitForLastOperation>

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 802151e:	6963      	ldr	r3, [r4, #20]
 8021520:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8021524:	6163      	str	r3, [r4, #20]
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8021526:	b108      	cbz	r0, 802152c <HAL_FLASHEx_OBProgram+0x2c4>
        status = HAL_ERROR;
 8021528:	f04f 0901 	mov.w	r9, #1
  __HAL_UNLOCK(&pFlash);
 802152c:	2300      	movs	r3, #0
 802152e:	703b      	strb	r3, [r7, #0]
}
 8021530:	4648      	mov	r0, r9
 8021532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021536:	bf00      	nop
 8021538:	200300d8 	.word	0x200300d8
 802153c:	40022000 	.word	0x40022000
 8021540:	40010000 	.word	0x40010000
 8021544:	1fff75e0 	.word	0x1fff75e0
 8021548:	01fffe00 	.word	0x01fffe00
 802154c:	fffe0000 	.word	0xfffe0000
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8021550:	f04f 6c01 	mov.w	ip, #135266304	; 0x8100000
 8021554:	e78d      	b.n	8021472 <HAL_FLASHEx_OBProgram+0x20a>
      bank2_addr = FLASH_BASE;
 8021556:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 802155a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 802155e:	e7b5      	b.n	80214cc <HAL_FLASHEx_OBProgram+0x264>
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8021560:	2902      	cmp	r1, #2
 8021562:	d1cb      	bne.n	80214fc <HAL_FLASHEx_OBProgram+0x294>
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8021564:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021566:	4a1d      	ldr	r2, [pc, #116]	; (80215dc <HAL_FLASHEx_OBProgram+0x374>)
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8021568:	f104 4178 	add.w	r1, r4, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 802156c:	ea00 0402 	and.w	r4, r0, r2
 8021570:	ea44 1411 	orr.w	r4, r4, r1, lsr #4
 8021574:	645c      	str	r4, [r3, #68]	; 0x44
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8021576:	6c99      	ldr	r1, [r3, #72]	; 0x48
        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8021578:	f105 4578 	add.w	r5, r5, #4160749568	; 0xf8000000
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 802157c:	4011      	ands	r1, r2
 802157e:	ea41 1115 	orr.w	r1, r1, r5, lsr #4
 8021582:	6499      	str	r1, [r3, #72]	; 0x48
 8021584:	e7ba      	b.n	80214fc <HAL_FLASHEx_OBProgram+0x294>
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8021586:	2901      	cmp	r1, #1
 8021588:	d110      	bne.n	80215ac <HAL_FLASHEx_OBProgram+0x344>
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 802158a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802158c:	4813      	ldr	r0, [pc, #76]	; (80215dc <HAL_FLASHEx_OBProgram+0x374>)
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 802158e:	eba4 0c02 	sub.w	ip, r4, r2
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8021592:	ea01 0400 	and.w	r4, r1, r0
 8021596:	ea44 04dc 	orr.w	r4, r4, ip, lsr #3
 802159a:	625c      	str	r4, [r3, #36]	; 0x24
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 802159c:	6a99      	ldr	r1, [r3, #40]	; 0x28
        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 802159e:	1aaa      	subs	r2, r5, r2
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80215a0:	ea01 0500 	and.w	r5, r1, r0
 80215a4:	ea45 02d2 	orr.w	r2, r5, r2, lsr #3
 80215a8:	629a      	str	r2, [r3, #40]	; 0x28
 80215aa:	e7a7      	b.n	80214fc <HAL_FLASHEx_OBProgram+0x294>
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80215ac:	2902      	cmp	r1, #2
 80215ae:	d1a5      	bne.n	80214fc <HAL_FLASHEx_OBProgram+0x294>
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80215b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80215b2:	f8df e028 	ldr.w	lr, [pc, #40]	; 80215dc <HAL_FLASHEx_OBProgram+0x374>
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80215b6:	eba4 040c 	sub.w	r4, r4, ip
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80215ba:	ea00 000e 	and.w	r0, r0, lr
 80215be:	ea40 04d4 	orr.w	r4, r0, r4, lsr #3
 80215c2:	645c      	str	r4, [r3, #68]	; 0x44
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80215c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 80215c6:	eba5 020c 	sub.w	r2, r5, ip
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80215ca:	ea01 010e 	and.w	r1, r1, lr
 80215ce:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
 80215d2:	649a      	str	r2, [r3, #72]	; 0x48
 80215d4:	e792      	b.n	80214fc <HAL_FLASHEx_OBProgram+0x294>
  __HAL_LOCK(&pFlash);
 80215d6:	f04f 0902 	mov.w	r9, #2
 80215da:	e7a9      	b.n	8021530 <HAL_FLASHEx_OBProgram+0x2c8>
 80215dc:	fffe0000 	.word	0xfffe0000

080215e0 <HAL_FLASHEx_OBGetConfig>:
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80215e0:	6842      	ldr	r2, [r0, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80215e2:	2306      	movs	r3, #6
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80215e4:	2a02      	cmp	r2, #2
{
 80215e6:	b530      	push	{r4, r5, lr}
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80215e8:	6003      	str	r3, [r0, #0]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80215ea:	d901      	bls.n	80215f0 <HAL_FLASHEx_OBGetConfig+0x10>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80215ec:	2a04      	cmp	r2, #4
 80215ee:	d10b      	bne.n	8021608 <HAL_FLASHEx_OBGetConfig+0x28>
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80215f0:	2307      	movs	r3, #7
 80215f2:	6003      	str	r3, [r0, #0]
 80215f4:	4b4c      	ldr	r3, [pc, #304]	; (8021728 <HAL_FLASHEx_OBGetConfig+0x148>)
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 80215f6:	2a00      	cmp	r2, #0
 80215f8:	d130      	bne.n	802165c <HAL_FLASHEx_OBGetConfig+0x7c>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80215fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80215fc:	b2d2      	uxtb	r2, r2
 80215fe:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8021600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
  }
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8021602:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021606:	60c3      	str	r3, [r0, #12]
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8021608:	4b47      	ldr	r3, [pc, #284]	; (8021728 <HAL_FLASHEx_OBGetConfig+0x148>)
 802160a:	6a1a      	ldr	r2, [r3, #32]
 802160c:	b2d2      	uxtb	r2, r2

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 802160e:	2aaa      	cmp	r2, #170	; 0xaa
 8021610:	d001      	beq.n	8021616 <HAL_FLASHEx_OBGetConfig+0x36>
 8021612:	2acc      	cmp	r2, #204	; 0xcc
 8021614:	d137      	bne.n	8021686 <HAL_FLASHEx_OBGetConfig+0xa6>
  {
    return (OB_RDP_LEVEL_1);
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8021616:	6a1a      	ldr	r2, [r3, #32]
 8021618:	b2d2      	uxtb	r2, r2
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 802161a:	6102      	str	r2, [r0, #16]
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = READ_REG(FLASH->OPTR);
 802161c:	6a1b      	ldr	r3, [r3, #32]
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 802161e:	69c2      	ldr	r2, [r0, #28]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8021620:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8021624:	6183      	str	r3, [r0, #24]
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8021626:	1e53      	subs	r3, r2, #1
 8021628:	2b01      	cmp	r3, #1
 802162a:	d853      	bhi.n	80216d4 <HAL_FLASHEx_OBGetConfig+0xf4>
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 802162c:	6803      	ldr	r3, [r0, #0]
 802162e:	f043 0308 	orr.w	r3, r3, #8
 8021632:	6003      	str	r3, [r0, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8021634:	4b3d      	ldr	r3, [pc, #244]	; (802172c <HAL_FLASHEx_OBGetConfig+0x14c>)
 8021636:	681b      	ldr	r3, [r3, #0]
 8021638:	f413 7f80 	tst.w	r3, #256	; 0x100
 802163c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8021640:	4b3b      	ldr	r3, [pc, #236]	; (8021730 <HAL_FLASHEx_OBGetConfig+0x150>)
 8021642:	d122      	bne.n	802168a <HAL_FLASHEx_OBGetConfig+0xaa>
  {
    bank1_addr = FLASH_BASE;
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8021644:	6819      	ldr	r1, [r3, #0]
 8021646:	b28b      	uxth	r3, r1
 8021648:	42a3      	cmp	r3, r4
 802164a:	d044      	beq.n	80216d6 <HAL_FLASHEx_OBGetConfig+0xf6>
 802164c:	4b39      	ldr	r3, [pc, #228]	; (8021734 <HAL_FLASHEx_OBGetConfig+0x154>)
 802164e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
 8021652:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE;
 8021656:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 802165a:	e021      	b.n	80216a0 <HAL_FLASHEx_OBGetConfig+0xc0>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 802165c:	2a01      	cmp	r2, #1
 802165e:	d104      	bne.n	802166a <HAL_FLASHEx_OBGetConfig+0x8a>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8021660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021662:	b2d2      	uxtb	r2, r2
 8021664:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 8021666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021668:	e7cb      	b.n	8021602 <HAL_FLASHEx_OBGetConfig+0x22>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 802166a:	2a02      	cmp	r2, #2
 802166c:	d104      	bne.n	8021678 <HAL_FLASHEx_OBGetConfig+0x98>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 802166e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021670:	b2d2      	uxtb	r2, r2
 8021672:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 8021674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021676:	e7c4      	b.n	8021602 <HAL_FLASHEx_OBGetConfig+0x22>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8021678:	2a04      	cmp	r2, #4
 802167a:	d1c5      	bne.n	8021608 <HAL_FLASHEx_OBGetConfig+0x28>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 802167c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802167e:	b2d2      	uxtb	r2, r2
 8021680:	6082      	str	r2, [r0, #8]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 8021682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021684:	e7bd      	b.n	8021602 <HAL_FLASHEx_OBGetConfig+0x22>
    return (OB_RDP_LEVEL_1);
 8021686:	22bb      	movs	r2, #187	; 0xbb
 8021688:	e7c7      	b.n	802161a <HAL_FLASHEx_OBGetConfig+0x3a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 802168a:	681d      	ldr	r5, [r3, #0]
 802168c:	b2ab      	uxth	r3, r5
 802168e:	42a3      	cmp	r3, r4
 8021690:	d024      	beq.n	80216dc <HAL_FLASHEx_OBGetConfig+0xfc>
 8021692:	4b28      	ldr	r3, [pc, #160]	; (8021734 <HAL_FLASHEx_OBGetConfig+0x154>)
 8021694:	ea03 2345 	and.w	r3, r3, r5, lsl #9
 8021698:	f103 6500 	add.w	r5, r3, #134217728	; 0x8000000
    bank2_addr = FLASH_BASE;
 802169c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80216a0:	4c21      	ldr	r4, [pc, #132]	; (8021728 <HAL_FLASHEx_OBGetConfig+0x148>)
 80216a2:	6a23      	ldr	r3, [r4, #32]
 80216a4:	025b      	lsls	r3, r3, #9
 80216a6:	d426      	bmi.n	80216f6 <HAL_FLASHEx_OBGetConfig+0x116>
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80216a8:	2a01      	cmp	r2, #1
 80216aa:	4b23      	ldr	r3, [pc, #140]	; (8021738 <HAL_FLASHEx_OBGetConfig+0x158>)
 80216ac:	d11b      	bne.n	80216e6 <HAL_FLASHEx_OBGetConfig+0x106>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80216ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 80216b0:	ea03 1101 	and.w	r1, r3, r1, lsl #4
 80216b4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80216b8:	6201      	str	r1, [r0, #32]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80216ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE + 0xFU;;
 80216bc:	ea03 1301 	and.w	r3, r3, r1, lsl #4
 80216c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80216c4:	330f      	adds	r3, #15
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 80216c6:	6243      	str	r3, [r0, #36]	; 0x24
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 80216c8:	4b17      	ldr	r3, [pc, #92]	; (8021728 <HAL_FLASHEx_OBGetConfig+0x148>)
 80216ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80216d0:	431a      	orrs	r2, r3
 80216d2:	61c2      	str	r2, [r0, #28]
}
 80216d4:	bd30      	pop	{r4, r5, pc}
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80216d6:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 80216da:	e7bc      	b.n	8021656 <HAL_FLASHEx_OBGetConfig+0x76>
    bank2_addr = FLASH_BASE;
 80216dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80216e0:	f04f 6501 	mov.w	r5, #135266304	; 0x8100000
 80216e4:	e7dc      	b.n	80216a0 <HAL_FLASHEx_OBGetConfig+0xc0>
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 80216e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 80216e8:	ea03 1101 	and.w	r1, r3, r1, lsl #4
 80216ec:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80216f0:	6201      	str	r1, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 80216f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80216f4:	e7e2      	b.n	80216bc <HAL_FLASHEx_OBGetConfig+0xdc>
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80216f6:	2a01      	cmp	r2, #1
 80216f8:	4b10      	ldr	r3, [pc, #64]	; (802173c <HAL_FLASHEx_OBGetConfig+0x15c>)
 80216fa:	d10a      	bne.n	8021712 <HAL_FLASHEx_OBGetConfig+0x132>
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80216fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80216fe:	ea03 01c1 	and.w	r1, r3, r1, lsl #3
 8021702:	4429      	add	r1, r5
 8021704:	6201      	str	r1, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8021706:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8021708:	ea03 03c1 	and.w	r3, r3, r1, lsl #3
 802170c:	3307      	adds	r3, #7
 802170e:	442b      	add	r3, r5
 8021710:	e7d9      	b.n	80216c6 <HAL_FLASHEx_OBGetConfig+0xe6>
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8021712:	6c65      	ldr	r5, [r4, #68]	; 0x44
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8021714:	ea03 05c5 	and.w	r5, r3, r5, lsl #3
 8021718:	440d      	add	r5, r1
 802171a:	6205      	str	r5, [r0, #32]
      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 802171c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 802171e:	ea03 03c4 	and.w	r3, r3, r4, lsl #3
 8021722:	3307      	adds	r3, #7
 8021724:	440b      	add	r3, r1
 8021726:	e7ce      	b.n	80216c6 <HAL_FLASHEx_OBGetConfig+0xe6>
 8021728:	40022000 	.word	0x40022000
 802172c:	40010000 	.word	0x40010000
 8021730:	1fff75e0 	.word	0x1fff75e0
 8021734:	01fffe00 	.word	0x01fffe00
 8021738:	001ffff0 	.word	0x001ffff0
 802173c:	000ffff8 	.word	0x000ffff8

08021740 <FLASH_PageErase>:
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8021740:	4b0f      	ldr	r3, [pc, #60]	; (8021780 <FLASH_PageErase+0x40>)
 8021742:	6a1a      	ldr	r2, [r3, #32]
 8021744:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8021748:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 802174a:	d113      	bne.n	8021774 <FLASH_PageErase+0x34>
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 802174c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8021750:	615a      	str	r2, [r3, #20]
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8021752:	695a      	ldr	r2, [r3, #20]
 8021754:	00c0      	lsls	r0, r0, #3
 8021756:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802175a:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 802175e:	4310      	orrs	r0, r2
 8021760:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8021762:	695a      	ldr	r2, [r3, #20]
 8021764:	f042 0202 	orr.w	r2, r2, #2
 8021768:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 802176a:	695a      	ldr	r2, [r3, #20]
 802176c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021770:	615a      	str	r2, [r3, #20]
}
 8021772:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8021774:	07c9      	lsls	r1, r1, #31
 8021776:	d4e9      	bmi.n	802174c <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8021778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802177c:	e7e8      	b.n	8021750 <FLASH_PageErase+0x10>
 802177e:	bf00      	nop
 8021780:	40022000 	.word	0x40022000

08021784 <FLASH_FlushCaches>:
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8021784:	4913      	ldr	r1, [pc, #76]	; (80217d4 <FLASH_FlushCaches+0x50>)
 8021786:	7f0b      	ldrb	r3, [r1, #28]
 8021788:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 802178a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 802178e:	2a01      	cmp	r2, #1
 8021790:	d10c      	bne.n	80217ac <FLASH_FlushCaches+0x28>
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8021792:	4a11      	ldr	r2, [pc, #68]	; (80217d8 <FLASH_FlushCaches+0x54>)
 8021794:	6810      	ldr	r0, [r2, #0]
 8021796:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 802179a:	6010      	str	r0, [r2, #0]
 802179c:	6810      	ldr	r0, [r2, #0]
 802179e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80217a2:	6010      	str	r0, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80217a4:	6810      	ldr	r0, [r2, #0]
 80217a6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80217aa:	6010      	str	r0, [r2, #0]
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80217ac:	3b02      	subs	r3, #2
 80217ae:	2b01      	cmp	r3, #1
 80217b0:	d80c      	bhi.n	80217cc <FLASH_FlushCaches+0x48>
    __HAL_FLASH_DATA_CACHE_RESET();
 80217b2:	4b09      	ldr	r3, [pc, #36]	; (80217d8 <FLASH_FlushCaches+0x54>)
 80217b4:	681a      	ldr	r2, [r3, #0]
 80217b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80217ba:	601a      	str	r2, [r3, #0]
 80217bc:	681a      	ldr	r2, [r3, #0]
 80217be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80217c2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80217c4:	681a      	ldr	r2, [r3, #0]
 80217c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80217ca:	601a      	str	r2, [r3, #0]
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80217cc:	2300      	movs	r3, #0
 80217ce:	770b      	strb	r3, [r1, #28]
}
 80217d0:	4770      	bx	lr
 80217d2:	bf00      	nop
 80217d4:	200300d8 	.word	0x200300d8
 80217d8:	40022000 	.word	0x40022000

080217dc <HAL_FLASHEx_Erase>:
{
 80217dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80217e0:	4c35      	ldr	r4, [pc, #212]	; (80218b8 <HAL_FLASHEx_Erase+0xdc>)
 80217e2:	7823      	ldrb	r3, [r4, #0]
 80217e4:	2b01      	cmp	r3, #1
{
 80217e6:	4606      	mov	r6, r0
 80217e8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80217ea:	d062      	beq.n	80218b2 <HAL_FLASHEx_Erase+0xd6>
 80217ec:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80217ee:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80217f2:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80217f4:	f7ff fc8c 	bl	8021110 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80217f8:	4605      	mov	r5, r0
 80217fa:	bb40      	cbnz	r0, 802184e <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80217fc:	4b2f      	ldr	r3, [pc, #188]	; (80218bc <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80217fe:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8021800:	681a      	ldr	r2, [r3, #0]
 8021802:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8021806:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8021808:	d026      	beq.n	8021858 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802180a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802180e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8021810:	681a      	ldr	r2, [r3, #0]
 8021812:	0551      	lsls	r1, r2, #21
 8021814:	d506      	bpl.n	8021824 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8021816:	681a      	ldr	r2, [r3, #0]
 8021818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802181c:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 802181e:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8021820:	7723      	strb	r3, [r4, #28]
 8021822:	e000      	b.n	8021826 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8021824:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8021826:	6833      	ldr	r3, [r6, #0]
 8021828:	2b01      	cmp	r3, #1
 802182a:	d11f      	bne.n	802186c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 802182c:	6870      	ldr	r0, [r6, #4]
 802182e:	f7ff fcf9 	bl	8021224 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021832:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021836:	f7ff fc6b 	bl	8021110 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 802183a:	4a20      	ldr	r2, [pc, #128]	; (80218bc <HAL_FLASHEx_Erase+0xe0>)
 802183c:	6953      	ldr	r3, [r2, #20]
 802183e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8021842:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021846:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8021848:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 802184a:	f7ff ff9b 	bl	8021784 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 802184e:	2300      	movs	r3, #0
 8021850:	7023      	strb	r3, [r4, #0]
}
 8021852:	4628      	mov	r0, r5
 8021854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8021858:	0552      	lsls	r2, r2, #21
 802185a:	d505      	bpl.n	8021868 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 802185c:	681a      	ldr	r2, [r3, #0]
 802185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021862:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8021864:	2302      	movs	r3, #2
 8021866:	e7db      	b.n	8021820 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8021868:	7720      	strb	r0, [r4, #28]
 802186a:	e7dc      	b.n	8021826 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 802186c:	f04f 33ff 	mov.w	r3, #4294967295
 8021870:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8021874:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8021876:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80218bc <HAL_FLASHEx_Erase+0xe0>
 802187a:	f8df a044 	ldr.w	sl, [pc, #68]	; 80218c0 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 802187e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8021882:	4413      	add	r3, r2
 8021884:	42bb      	cmp	r3, r7
 8021886:	d9e0      	bls.n	802184a <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8021888:	6871      	ldr	r1, [r6, #4]
 802188a:	4638      	mov	r0, r7
 802188c:	f7ff ff58 	bl	8021740 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8021890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8021894:	f7ff fc3c 	bl	8021110 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8021898:	f8d9 3014 	ldr.w	r3, [r9, #20]
 802189c:	ea03 030a 	and.w	r3, r3, sl
 80218a0:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80218a4:	b118      	cbz	r0, 80218ae <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80218a6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80218aa:	4605      	mov	r5, r0
          break;
 80218ac:	e7cd      	b.n	802184a <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80218ae:	3701      	adds	r7, #1
 80218b0:	e7e5      	b.n	802187e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80218b2:	2502      	movs	r5, #2
 80218b4:	e7cd      	b.n	8021852 <HAL_FLASHEx_Erase+0x76>
 80218b6:	bf00      	nop
 80218b8:	200300d8 	.word	0x200300d8
 80218bc:	40022000 	.word	0x40022000
 80218c0:	fffff805 	.word	0xfffff805

080218c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80218c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80218c8:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80218cc:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8021a74 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80218d0:	4a66      	ldr	r2, [pc, #408]	; (8021a6c <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 80218d2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80218d4:	fa38 f403 	lsrs.w	r4, r8, r3
 80218d8:	d102      	bne.n	80218e0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80218da:	b003      	add	sp, #12
 80218dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80218e0:	f04f 0c01 	mov.w	ip, #1
 80218e4:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80218e8:	ea1c 0608 	ands.w	r6, ip, r8
 80218ec:	f000 80ad 	beq.w	8021a4a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80218f0:	684c      	ldr	r4, [r1, #4]
 80218f2:	f024 0a10 	bic.w	sl, r4, #16
 80218f6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80218fa:	2503      	movs	r5, #3
 80218fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8021900:	fa05 f50e 	lsl.w	r5, r5, lr
 8021904:	2f01      	cmp	r7, #1
 8021906:	ea6f 0505 	mvn.w	r5, r5
 802190a:	d811      	bhi.n	8021930 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 802190c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 802190e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8021912:	68cf      	ldr	r7, [r1, #12]
 8021914:	fa07 f70e 	lsl.w	r7, r7, lr
 8021918:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 802191c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 802191e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021920:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8021924:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8021928:	409f      	lsls	r7, r3
 802192a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 802192e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8021930:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8021932:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8021936:	688f      	ldr	r7, [r1, #8]
 8021938:	fa07 f70e 	lsl.w	r7, r7, lr
 802193c:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021940:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8021944:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021946:	d116      	bne.n	8021976 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8021948:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 802194c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8021950:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8021954:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8021958:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 802195c:	f04f 0c0f 	mov.w	ip, #15
 8021960:	fa0c fc0b 	lsl.w	ip, ip, fp
 8021964:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8021968:	690f      	ldr	r7, [r1, #16]
 802196a:	fa07 f70b 	lsl.w	r7, r7, fp
 802196e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 8021972:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8021976:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8021978:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 802197a:	f004 0703 	and.w	r7, r4, #3
 802197e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8021982:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8021986:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021988:	00e5      	lsls	r5, r4, #3
 802198a:	d55e      	bpl.n	8021a4a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802198c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8021990:	f045 0501 	orr.w	r5, r5, #1
 8021994:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8021998:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 802199c:	f023 0703 	bic.w	r7, r3, #3
 80219a0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80219a4:	f005 0501 	and.w	r5, r5, #1
 80219a8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80219ac:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80219ae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80219b2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80219b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80219b8:	f04f 0e0f 	mov.w	lr, #15
 80219bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80219c0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80219c4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80219c8:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80219cc:	d03f      	beq.n	8021a4e <HAL_GPIO_Init+0x18a>
 80219ce:	4d28      	ldr	r5, [pc, #160]	; (8021a70 <HAL_GPIO_Init+0x1ac>)
 80219d0:	42a8      	cmp	r0, r5
 80219d2:	d03e      	beq.n	8021a52 <HAL_GPIO_Init+0x18e>
 80219d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80219d8:	42a8      	cmp	r0, r5
 80219da:	d03c      	beq.n	8021a56 <HAL_GPIO_Init+0x192>
 80219dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80219e0:	42a8      	cmp	r0, r5
 80219e2:	d03a      	beq.n	8021a5a <HAL_GPIO_Init+0x196>
 80219e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80219e8:	42a8      	cmp	r0, r5
 80219ea:	d038      	beq.n	8021a5e <HAL_GPIO_Init+0x19a>
 80219ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80219f0:	42a8      	cmp	r0, r5
 80219f2:	d036      	beq.n	8021a62 <HAL_GPIO_Init+0x19e>
 80219f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80219f8:	42a8      	cmp	r0, r5
 80219fa:	d034      	beq.n	8021a66 <HAL_GPIO_Init+0x1a2>
 80219fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8021a00:	42a8      	cmp	r0, r5
 8021a02:	bf14      	ite	ne
 8021a04:	2508      	movne	r5, #8
 8021a06:	2507      	moveq	r5, #7
 8021a08:	fa05 f50c 	lsl.w	r5, r5, ip
 8021a0c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8021a10:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8021a12:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8021a14:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021a16:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8021a1a:	bf0c      	ite	eq
 8021a1c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8021a1e:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8021a20:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 8021a22:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021a24:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8021a28:	bf0c      	ite	eq
 8021a2a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8021a2c:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 8021a2e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 8021a30:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021a32:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8021a36:	bf0c      	ite	eq
 8021a38:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8021a3a:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8021a3c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 8021a3e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021a40:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8021a42:	bf54      	ite	pl
 8021a44:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8021a46:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8021a48:	60d5      	str	r5, [r2, #12]
    position++;
 8021a4a:	3301      	adds	r3, #1
 8021a4c:	e742      	b.n	80218d4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8021a4e:	2500      	movs	r5, #0
 8021a50:	e7da      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a52:	2501      	movs	r5, #1
 8021a54:	e7d8      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a56:	2502      	movs	r5, #2
 8021a58:	e7d6      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a5a:	2503      	movs	r5, #3
 8021a5c:	e7d4      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a5e:	2504      	movs	r5, #4
 8021a60:	e7d2      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a62:	2505      	movs	r5, #5
 8021a64:	e7d0      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a66:	2506      	movs	r5, #6
 8021a68:	e7ce      	b.n	8021a08 <HAL_GPIO_Init+0x144>
 8021a6a:	bf00      	nop
 8021a6c:	40010400 	.word	0x40010400
 8021a70:	48000400 	.word	0x48000400
 8021a74:	40021000 	.word	0x40021000

08021a78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8021a78:	6903      	ldr	r3, [r0, #16]
 8021a7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8021a7c:	bf14      	ite	ne
 8021a7e:	2001      	movne	r0, #1
 8021a80:	2000      	moveq	r0, #0
 8021a82:	4770      	bx	lr

08021a84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8021a84:	b10a      	cbz	r2, 8021a8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8021a86:	6181      	str	r1, [r0, #24]
 8021a88:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8021a8a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8021a8c:	4770      	bx	lr

08021a8e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8021a8e:	6943      	ldr	r3, [r0, #20]
 8021a90:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8021a92:	bf14      	ite	ne
 8021a94:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8021a96:	6181      	streq	r1, [r0, #24]
  }
}
 8021a98:	4770      	bx	lr

08021a9a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8021a9a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8021a9c:	4604      	mov	r4, r0
 8021a9e:	b300      	cbz	r0, 8021ae2 <HAL_IWDG_Init+0x48>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8021aa0:	6803      	ldr	r3, [r0, #0]
 8021aa2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8021aa6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8021aa8:	f245 5255 	movw	r2, #21845	; 0x5555
 8021aac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8021aae:	6842      	ldr	r2, [r0, #4]
 8021ab0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8021ab2:	6882      	ldr	r2, [r0, #8]
 8021ab4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8021ab6:	f7ff f987 	bl	8020dc8 <HAL_GetTick>
 8021aba:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8021abc:	6823      	ldr	r3, [r4, #0]
 8021abe:	68d8      	ldr	r0, [r3, #12]
 8021ac0:	b940      	cbnz	r0, 8021ad4 <HAL_IWDG_Init+0x3a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8021ac2:	68e2      	ldr	r2, [r4, #12]
 8021ac4:	6919      	ldr	r1, [r3, #16]
 8021ac6:	4291      	cmp	r1, r2
    hiwdg->Instance->WINR = hiwdg->Init.Window;
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8021ac8:	bf0a      	itet	eq
 8021aca:	f64a 22aa 	movweq	r2, #43690	; 0xaaaa
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8021ace:	611a      	strne	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8021ad0:	601a      	streq	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8021ad2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8021ad4:	f7ff f978 	bl	8020dc8 <HAL_GetTick>
 8021ad8:	1b40      	subs	r0, r0, r5
 8021ada:	2830      	cmp	r0, #48	; 0x30
 8021adc:	d9ee      	bls.n	8021abc <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8021ade:	2003      	movs	r0, #3
 8021ae0:	e7f7      	b.n	8021ad2 <HAL_IWDG_Init+0x38>
    return HAL_ERROR;
 8021ae2:	2001      	movs	r0, #1
 8021ae4:	e7f5      	b.n	8021ad2 <HAL_IWDG_Init+0x38>

08021ae6 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8021ae6:	6803      	ldr	r3, [r0, #0]
 8021ae8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8021aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8021aee:	2000      	movs	r0, #0
 8021af0:	4770      	bx	lr
	...

08021af4 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021af4:	4b07      	ldr	r3, [pc, #28]	; (8021b14 <HAL_PWREx_GetVoltageRange+0x20>)
 8021af6:	6818      	ldr	r0, [r3, #0]
 8021af8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8021afc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8021b00:	d007      	beq.n	8021b12 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8021b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021b06:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8021b0a:	bf14      	ite	ne
 8021b0c:	f44f 7000 	movne.w	r0, #512	; 0x200
 8021b10:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8021b12:	4770      	bx	lr
 8021b14:	40007000 	.word	0x40007000

08021b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021b18:	4b29      	ldr	r3, [pc, #164]	; (8021bc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b1a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8021b1c:	bb28      	cbnz	r0, 8021b6a <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b1e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8021b22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021b26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8021b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b32:	d119      	bne.n	8021b68 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021b34:	681a      	ldr	r2, [r3, #0]
 8021b36:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8021b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021b3e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021b40:	4a20      	ldr	r2, [pc, #128]	; (8021bc4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8021b42:	6811      	ldr	r1, [r2, #0]
 8021b44:	2232      	movs	r2, #50	; 0x32
 8021b46:	434a      	muls	r2, r1
 8021b48:	491f      	ldr	r1, [pc, #124]	; (8021bc8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8021b4a:	fbb2 f2f1 	udiv	r2, r2, r1
 8021b4e:	4619      	mov	r1, r3
 8021b50:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021b52:	6958      	ldr	r0, [r3, #20]
 8021b54:	0540      	lsls	r0, r0, #21
 8021b56:	d500      	bpl.n	8021b5a <HAL_PWREx_ControlVoltageScaling+0x42>
 8021b58:	b922      	cbnz	r2, 8021b64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021b5a:	694b      	ldr	r3, [r1, #20]
 8021b5c:	055b      	lsls	r3, r3, #21
 8021b5e:	d52d      	bpl.n	8021bbc <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8021b60:	2003      	movs	r0, #3
 8021b62:	4770      	bx	lr
        wait_loop_index--;
 8021b64:	3a01      	subs	r2, #1
 8021b66:	e7f4      	b.n	8021b52 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8021b68:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021b6a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8021b6e:	d120      	bne.n	8021bb2 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b70:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8021b74:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021b78:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8021b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b84:	d11a      	bne.n	8021bbc <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021b86:	681a      	ldr	r2, [r3, #0]
 8021b88:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8021b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021b90:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021b92:	4a0c      	ldr	r2, [pc, #48]	; (8021bc4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8021b94:	6811      	ldr	r1, [r2, #0]
 8021b96:	2232      	movs	r2, #50	; 0x32
 8021b98:	434a      	muls	r2, r1
 8021b9a:	490b      	ldr	r1, [pc, #44]	; (8021bc8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8021b9c:	fbb2 f2f1 	udiv	r2, r2, r1
 8021ba0:	4619      	mov	r1, r3
 8021ba2:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021ba4:	6958      	ldr	r0, [r3, #20]
 8021ba6:	0540      	lsls	r0, r0, #21
 8021ba8:	d5d7      	bpl.n	8021b5a <HAL_PWREx_ControlVoltageScaling+0x42>
 8021baa:	2a00      	cmp	r2, #0
 8021bac:	d0d5      	beq.n	8021b5a <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8021bae:	3a01      	subs	r2, #1
 8021bb0:	e7f8      	b.n	8021ba4 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8021bb2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8021bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8021bba:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8021bbc:	2000      	movs	r0, #0
}
 8021bbe:	4770      	bx	lr
 8021bc0:	40007000 	.word	0x40007000
 8021bc4:	200300cc 	.word	0x200300cc
 8021bc8:	000f4240 	.word	0x000f4240

08021bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8021bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021bce:	4d1c      	ldr	r5, [pc, #112]	; (8021c40 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8021bd0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021bd2:	00da      	lsls	r2, r3, #3
{
 8021bd4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8021bd6:	d518      	bpl.n	8021c0a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8021bd8:	f7ff ff8c 	bl	8021af4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021bdc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8021be0:	d123      	bne.n	8021c2a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8021be2:	2c80      	cmp	r4, #128	; 0x80
 8021be4:	d928      	bls.n	8021c38 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8021be6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021be8:	bf8c      	ite	hi
 8021bea:	2002      	movhi	r0, #2
 8021bec:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8021bee:	4a15      	ldr	r2, [pc, #84]	; (8021c44 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8021bf0:	6813      	ldr	r3, [r2, #0]
 8021bf2:	f023 030f 	bic.w	r3, r3, #15
 8021bf6:	4303      	orrs	r3, r0
 8021bf8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8021bfa:	6813      	ldr	r3, [r2, #0]
 8021bfc:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8021c00:	1a18      	subs	r0, r3, r0
 8021c02:	bf18      	it	ne
 8021c04:	2001      	movne	r0, #1
 8021c06:	b003      	add	sp, #12
 8021c08:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8021c0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021c10:	65ab      	str	r3, [r5, #88]	; 0x58
 8021c12:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021c18:	9301      	str	r3, [sp, #4]
 8021c1a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8021c1c:	f7ff ff6a 	bl	8021af4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8021c20:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8021c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021c26:	65ab      	str	r3, [r5, #88]	; 0x58
 8021c28:	e7d8      	b.n	8021bdc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8021c2a:	2c7f      	cmp	r4, #127	; 0x7f
 8021c2c:	d806      	bhi.n	8021c3c <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8021c2e:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8021c32:	4258      	negs	r0, r3
 8021c34:	4158      	adcs	r0, r3
 8021c36:	e7da      	b.n	8021bee <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8021c38:	2000      	movs	r0, #0
 8021c3a:	e7d8      	b.n	8021bee <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8021c3c:	2002      	movs	r0, #2
 8021c3e:	e7d6      	b.n	8021bee <RCC_SetFlashLatencyFromMSIRange+0x22>
 8021c40:	40021000 	.word	0x40021000
 8021c44:	40022000 	.word	0x40022000

08021c48 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021c48:	4b22      	ldr	r3, [pc, #136]	; (8021cd4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8021c4a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021c4c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021c4e:	f012 020c 	ands.w	r2, r2, #12
 8021c52:	d005      	beq.n	8021c60 <HAL_RCC_GetSysClockFreq+0x18>
 8021c54:	2a0c      	cmp	r2, #12
 8021c56:	d115      	bne.n	8021c84 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021c58:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8021c5c:	2901      	cmp	r1, #1
 8021c5e:	d118      	bne.n	8021c92 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021c60:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8021c62:	481d      	ldr	r0, [pc, #116]	; (8021cd8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8021c64:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021c66:	bf55      	itete	pl
 8021c68:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021c6c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8021c6e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021c72:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8021c76:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021c7a:	b34a      	cbz	r2, 8021cd0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8021c7c:	2a0c      	cmp	r2, #12
 8021c7e:	d009      	beq.n	8021c94 <HAL_RCC_GetSysClockFreq+0x4c>
 8021c80:	2000      	movs	r0, #0
  return sysclockfreq;
 8021c82:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021c84:	2a04      	cmp	r2, #4
 8021c86:	d022      	beq.n	8021cce <HAL_RCC_GetSysClockFreq+0x86>
 8021c88:	2a08      	cmp	r2, #8
 8021c8a:	4814      	ldr	r0, [pc, #80]	; (8021cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8021c8c:	bf18      	it	ne
 8021c8e:	2000      	movne	r0, #0
 8021c90:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8021c92:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021c94:	68da      	ldr	r2, [r3, #12]
 8021c96:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8021c9a:	2a02      	cmp	r2, #2
 8021c9c:	d015      	beq.n	8021cca <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8021c9e:	490f      	ldr	r1, [pc, #60]	; (8021cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8021ca0:	2a03      	cmp	r2, #3
 8021ca2:	bf08      	it	eq
 8021ca4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021ca6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021ca8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021caa:	68db      	ldr	r3, [r3, #12]
 8021cac:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021cb0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021cb4:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021cb8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021cba:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8021cbc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021cbe:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8021cc0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8021cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8021cc8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8021cca:	4805      	ldr	r0, [pc, #20]	; (8021ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8021ccc:	e7eb      	b.n	8021ca6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8021cce:	4804      	ldr	r0, [pc, #16]	; (8021ce0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8021cd0:	4770      	bx	lr
 8021cd2:	bf00      	nop
 8021cd4:	40021000 	.word	0x40021000
 8021cd8:	08029e78 	.word	0x08029e78
 8021cdc:	007a1200 	.word	0x007a1200
 8021ce0:	00f42400 	.word	0x00f42400

08021ce4 <HAL_RCC_OscConfig>:
{
 8021ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8021ce8:	4605      	mov	r5, r0
 8021cea:	b908      	cbnz	r0, 8021cf0 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8021cec:	2001      	movs	r0, #1
 8021cee:	e047      	b.n	8021d80 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021cf0:	4c9f      	ldr	r4, [pc, #636]	; (8021f70 <HAL_RCC_OscConfig+0x28c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021cf2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021cf4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021cf6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021cf8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021cfa:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021cfe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021d02:	d575      	bpl.n	8021df0 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021d04:	b11e      	cbz	r6, 8021d0e <HAL_RCC_OscConfig+0x2a>
 8021d06:	2e0c      	cmp	r6, #12
 8021d08:	d154      	bne.n	8021db4 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021d0a:	2f01      	cmp	r7, #1
 8021d0c:	d152      	bne.n	8021db4 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021d0e:	6823      	ldr	r3, [r4, #0]
 8021d10:	0798      	lsls	r0, r3, #30
 8021d12:	d502      	bpl.n	8021d1a <HAL_RCC_OscConfig+0x36>
 8021d14:	69ab      	ldr	r3, [r5, #24]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d0e8      	beq.n	8021cec <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021d1a:	6823      	ldr	r3, [r4, #0]
 8021d1c:	6a28      	ldr	r0, [r5, #32]
 8021d1e:	0719      	lsls	r1, r3, #28
 8021d20:	bf56      	itet	pl
 8021d22:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8021d26:	6823      	ldrmi	r3, [r4, #0]
 8021d28:	091b      	lsrpl	r3, r3, #4
 8021d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d2e:	4298      	cmp	r0, r3
 8021d30:	d929      	bls.n	8021d86 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021d32:	f7ff ff4b 	bl	8021bcc <RCC_SetFlashLatencyFromMSIRange>
 8021d36:	2800      	cmp	r0, #0
 8021d38:	d1d8      	bne.n	8021cec <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021d3a:	6823      	ldr	r3, [r4, #0]
 8021d3c:	f043 0308 	orr.w	r3, r3, #8
 8021d40:	6023      	str	r3, [r4, #0]
 8021d42:	6823      	ldr	r3, [r4, #0]
 8021d44:	6a2a      	ldr	r2, [r5, #32]
 8021d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021d4a:	4313      	orrs	r3, r2
 8021d4c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d4e:	6863      	ldr	r3, [r4, #4]
 8021d50:	69ea      	ldr	r2, [r5, #28]
 8021d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021d5a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021d5c:	f7ff ff74 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 8021d60:	68a3      	ldr	r3, [r4, #8]
 8021d62:	4a84      	ldr	r2, [pc, #528]	; (8021f74 <HAL_RCC_OscConfig+0x290>)
 8021d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8021d68:	5cd3      	ldrb	r3, [r2, r3]
 8021d6a:	f003 031f 	and.w	r3, r3, #31
 8021d6e:	40d8      	lsrs	r0, r3
 8021d70:	4b81      	ldr	r3, [pc, #516]	; (8021f78 <HAL_RCC_OscConfig+0x294>)
 8021d72:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8021d74:	4b81      	ldr	r3, [pc, #516]	; (8021f7c <HAL_RCC_OscConfig+0x298>)
 8021d76:	6818      	ldr	r0, [r3, #0]
 8021d78:	f7fe ffe6 	bl	8020d48 <HAL_InitTick>
        if(status != HAL_OK)
 8021d7c:	2800      	cmp	r0, #0
 8021d7e:	d037      	beq.n	8021df0 <HAL_RCC_OscConfig+0x10c>
}
 8021d80:	b003      	add	sp, #12
 8021d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021d86:	6823      	ldr	r3, [r4, #0]
 8021d88:	f043 0308 	orr.w	r3, r3, #8
 8021d8c:	6023      	str	r3, [r4, #0]
 8021d8e:	6823      	ldr	r3, [r4, #0]
 8021d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021d94:	4303      	orrs	r3, r0
 8021d96:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d98:	6863      	ldr	r3, [r4, #4]
 8021d9a:	69ea      	ldr	r2, [r5, #28]
 8021d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021da4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021da6:	2e00      	cmp	r6, #0
 8021da8:	d1d8      	bne.n	8021d5c <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021daa:	f7ff ff0f 	bl	8021bcc <RCC_SetFlashLatencyFromMSIRange>
 8021dae:	2800      	cmp	r0, #0
 8021db0:	d0d4      	beq.n	8021d5c <HAL_RCC_OscConfig+0x78>
 8021db2:	e79b      	b.n	8021cec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021db4:	69ab      	ldr	r3, [r5, #24]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d03a      	beq.n	8021e30 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8021dba:	6823      	ldr	r3, [r4, #0]
 8021dbc:	f043 0301 	orr.w	r3, r3, #1
 8021dc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021dc2:	f7ff f801 	bl	8020dc8 <HAL_GetTick>
 8021dc6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021dc8:	6823      	ldr	r3, [r4, #0]
 8021dca:	079a      	lsls	r2, r3, #30
 8021dcc:	d528      	bpl.n	8021e20 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021dce:	6823      	ldr	r3, [r4, #0]
 8021dd0:	f043 0308 	orr.w	r3, r3, #8
 8021dd4:	6023      	str	r3, [r4, #0]
 8021dd6:	6823      	ldr	r3, [r4, #0]
 8021dd8:	6a2a      	ldr	r2, [r5, #32]
 8021dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021dde:	4313      	orrs	r3, r2
 8021de0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021de2:	6863      	ldr	r3, [r4, #4]
 8021de4:	69ea      	ldr	r2, [r5, #28]
 8021de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021dee:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021df0:	682b      	ldr	r3, [r5, #0]
 8021df2:	07d8      	lsls	r0, r3, #31
 8021df4:	d42d      	bmi.n	8021e52 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021df6:	682b      	ldr	r3, [r5, #0]
 8021df8:	0799      	lsls	r1, r3, #30
 8021dfa:	d46b      	bmi.n	8021ed4 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021dfc:	682b      	ldr	r3, [r5, #0]
 8021dfe:	0718      	lsls	r0, r3, #28
 8021e00:	f100 80a0 	bmi.w	8021f44 <HAL_RCC_OscConfig+0x260>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021e04:	682b      	ldr	r3, [r5, #0]
 8021e06:	0759      	lsls	r1, r3, #29
 8021e08:	f100 80ce 	bmi.w	8021fa8 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8021e0c:	682b      	ldr	r3, [r5, #0]
 8021e0e:	069f      	lsls	r7, r3, #26
 8021e10:	f100 8137 	bmi.w	8022082 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8021e14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	f040 815d 	bne.w	80220d6 <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8021e1c:	2000      	movs	r0, #0
 8021e1e:	e7af      	b.n	8021d80 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021e20:	f7fe ffd2 	bl	8020dc8 <HAL_GetTick>
 8021e24:	eba0 0008 	sub.w	r0, r0, r8
 8021e28:	2802      	cmp	r0, #2
 8021e2a:	d9cd      	bls.n	8021dc8 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8021e2c:	2003      	movs	r0, #3
 8021e2e:	e7a7      	b.n	8021d80 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8021e30:	6823      	ldr	r3, [r4, #0]
 8021e32:	f023 0301 	bic.w	r3, r3, #1
 8021e36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021e38:	f7fe ffc6 	bl	8020dc8 <HAL_GetTick>
 8021e3c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021e3e:	6823      	ldr	r3, [r4, #0]
 8021e40:	079b      	lsls	r3, r3, #30
 8021e42:	d5d5      	bpl.n	8021df0 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021e44:	f7fe ffc0 	bl	8020dc8 <HAL_GetTick>
 8021e48:	eba0 0008 	sub.w	r0, r0, r8
 8021e4c:	2802      	cmp	r0, #2
 8021e4e:	d9f6      	bls.n	8021e3e <HAL_RCC_OscConfig+0x15a>
 8021e50:	e7ec      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021e52:	2e08      	cmp	r6, #8
 8021e54:	d003      	beq.n	8021e5e <HAL_RCC_OscConfig+0x17a>
 8021e56:	2e0c      	cmp	r6, #12
 8021e58:	d108      	bne.n	8021e6c <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021e5a:	2f03      	cmp	r7, #3
 8021e5c:	d106      	bne.n	8021e6c <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021e5e:	6823      	ldr	r3, [r4, #0]
 8021e60:	039a      	lsls	r2, r3, #14
 8021e62:	d5c8      	bpl.n	8021df6 <HAL_RCC_OscConfig+0x112>
 8021e64:	686b      	ldr	r3, [r5, #4]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d1c5      	bne.n	8021df6 <HAL_RCC_OscConfig+0x112>
 8021e6a:	e73f      	b.n	8021cec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021e6c:	686b      	ldr	r3, [r5, #4]
 8021e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021e72:	d110      	bne.n	8021e96 <HAL_RCC_OscConfig+0x1b2>
 8021e74:	6823      	ldr	r3, [r4, #0]
 8021e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021e7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021e7c:	f7fe ffa4 	bl	8020dc8 <HAL_GetTick>
 8021e80:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021e82:	6823      	ldr	r3, [r4, #0]
 8021e84:	039b      	lsls	r3, r3, #14
 8021e86:	d4b6      	bmi.n	8021df6 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021e88:	f7fe ff9e 	bl	8020dc8 <HAL_GetTick>
 8021e8c:	eba0 0008 	sub.w	r0, r0, r8
 8021e90:	2864      	cmp	r0, #100	; 0x64
 8021e92:	d9f6      	bls.n	8021e82 <HAL_RCC_OscConfig+0x19e>
 8021e94:	e7ca      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021e96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021e9a:	d104      	bne.n	8021ea6 <HAL_RCC_OscConfig+0x1c2>
 8021e9c:	6823      	ldr	r3, [r4, #0]
 8021e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021ea2:	6023      	str	r3, [r4, #0]
 8021ea4:	e7e6      	b.n	8021e74 <HAL_RCC_OscConfig+0x190>
 8021ea6:	6822      	ldr	r2, [r4, #0]
 8021ea8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8021eac:	6022      	str	r2, [r4, #0]
 8021eae:	6822      	ldr	r2, [r4, #0]
 8021eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021eb4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d1e0      	bne.n	8021e7c <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8021eba:	f7fe ff85 	bl	8020dc8 <HAL_GetTick>
 8021ebe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021ec0:	6823      	ldr	r3, [r4, #0]
 8021ec2:	0398      	lsls	r0, r3, #14
 8021ec4:	d597      	bpl.n	8021df6 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021ec6:	f7fe ff7f 	bl	8020dc8 <HAL_GetTick>
 8021eca:	eba0 0008 	sub.w	r0, r0, r8
 8021ece:	2864      	cmp	r0, #100	; 0x64
 8021ed0:	d9f6      	bls.n	8021ec0 <HAL_RCC_OscConfig+0x1dc>
 8021ed2:	e7ab      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021ed4:	2e04      	cmp	r6, #4
 8021ed6:	d003      	beq.n	8021ee0 <HAL_RCC_OscConfig+0x1fc>
 8021ed8:	2e0c      	cmp	r6, #12
 8021eda:	d110      	bne.n	8021efe <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021edc:	2f02      	cmp	r7, #2
 8021ede:	d10e      	bne.n	8021efe <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021ee0:	6823      	ldr	r3, [r4, #0]
 8021ee2:	0559      	lsls	r1, r3, #21
 8021ee4:	d503      	bpl.n	8021eee <HAL_RCC_OscConfig+0x20a>
 8021ee6:	68eb      	ldr	r3, [r5, #12]
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	f43f aeff 	beq.w	8021cec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021eee:	6863      	ldr	r3, [r4, #4]
 8021ef0:	692a      	ldr	r2, [r5, #16]
 8021ef2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8021ef6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021efa:	6063      	str	r3, [r4, #4]
 8021efc:	e77e      	b.n	8021dfc <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021efe:	68eb      	ldr	r3, [r5, #12]
 8021f00:	b17b      	cbz	r3, 8021f22 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8021f02:	6823      	ldr	r3, [r4, #0]
 8021f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021f08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021f0a:	f7fe ff5d 	bl	8020dc8 <HAL_GetTick>
 8021f0e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021f10:	6823      	ldr	r3, [r4, #0]
 8021f12:	055a      	lsls	r2, r3, #21
 8021f14:	d4eb      	bmi.n	8021eee <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021f16:	f7fe ff57 	bl	8020dc8 <HAL_GetTick>
 8021f1a:	1bc0      	subs	r0, r0, r7
 8021f1c:	2802      	cmp	r0, #2
 8021f1e:	d9f7      	bls.n	8021f10 <HAL_RCC_OscConfig+0x22c>
 8021f20:	e784      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8021f22:	6823      	ldr	r3, [r4, #0]
 8021f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021f28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8021f2a:	f7fe ff4d 	bl	8020dc8 <HAL_GetTick>
 8021f2e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021f30:	6823      	ldr	r3, [r4, #0]
 8021f32:	055b      	lsls	r3, r3, #21
 8021f34:	f57f af62 	bpl.w	8021dfc <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021f38:	f7fe ff46 	bl	8020dc8 <HAL_GetTick>
 8021f3c:	1bc0      	subs	r0, r0, r7
 8021f3e:	2802      	cmp	r0, #2
 8021f40:	d9f6      	bls.n	8021f30 <HAL_RCC_OscConfig+0x24c>
 8021f42:	e773      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021f44:	696b      	ldr	r3, [r5, #20]
 8021f46:	b1db      	cbz	r3, 8021f80 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8021f48:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8021f4c:	f043 0301 	orr.w	r3, r3, #1
 8021f50:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8021f54:	f7fe ff38 	bl	8020dc8 <HAL_GetTick>
 8021f58:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8021f5a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8021f5e:	079a      	lsls	r2, r3, #30
 8021f60:	f53f af50 	bmi.w	8021e04 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021f64:	f7fe ff30 	bl	8020dc8 <HAL_GetTick>
 8021f68:	1bc0      	subs	r0, r0, r7
 8021f6a:	2802      	cmp	r0, #2
 8021f6c:	d9f5      	bls.n	8021f5a <HAL_RCC_OscConfig+0x276>
 8021f6e:	e75d      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
 8021f70:	40021000 	.word	0x40021000
 8021f74:	08029ea8 	.word	0x08029ea8
 8021f78:	200300cc 	.word	0x200300cc
 8021f7c:	200300d4 	.word	0x200300d4
      __HAL_RCC_LSI_DISABLE();
 8021f80:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8021f84:	f023 0301 	bic.w	r3, r3, #1
 8021f88:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8021f8c:	f7fe ff1c 	bl	8020dc8 <HAL_GetTick>
 8021f90:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8021f92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8021f96:	079b      	lsls	r3, r3, #30
 8021f98:	f57f af34 	bpl.w	8021e04 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021f9c:	f7fe ff14 	bl	8020dc8 <HAL_GetTick>
 8021fa0:	1bc0      	subs	r0, r0, r7
 8021fa2:	2802      	cmp	r0, #2
 8021fa4:	d9f5      	bls.n	8021f92 <HAL_RCC_OscConfig+0x2ae>
 8021fa6:	e741      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8021fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021faa:	00df      	lsls	r7, r3, #3
 8021fac:	d429      	bmi.n	8022002 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8021fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021fb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8021fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021fbc:	9301      	str	r3, [sp, #4]
 8021fbe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8021fc0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021fc4:	4f9c      	ldr	r7, [pc, #624]	; (8022238 <HAL_RCC_OscConfig+0x554>)
 8021fc6:	683b      	ldr	r3, [r7, #0]
 8021fc8:	05d8      	lsls	r0, r3, #23
 8021fca:	d51d      	bpl.n	8022008 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021fcc:	68ab      	ldr	r3, [r5, #8]
 8021fce:	2b01      	cmp	r3, #1
 8021fd0:	d12b      	bne.n	802202a <HAL_RCC_OscConfig+0x346>
 8021fd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8021fd6:	f043 0301 	orr.w	r3, r3, #1
 8021fda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8021fde:	f7fe fef3 	bl	8020dc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021fe2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8021fe6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8021fe8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8021fec:	079a      	lsls	r2, r3, #30
 8021fee:	d542      	bpl.n	8022076 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8021ff0:	f1b8 0f00 	cmp.w	r8, #0
 8021ff4:	f43f af0a 	beq.w	8021e0c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8021ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021ffe:	65a3      	str	r3, [r4, #88]	; 0x58
 8022000:	e704      	b.n	8021e0c <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8022002:	f04f 0800 	mov.w	r8, #0
 8022006:	e7dd      	b.n	8021fc4 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8022008:	683b      	ldr	r3, [r7, #0]
 802200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802200e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8022010:	f7fe feda 	bl	8020dc8 <HAL_GetTick>
 8022014:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8022016:	683b      	ldr	r3, [r7, #0]
 8022018:	05d9      	lsls	r1, r3, #23
 802201a:	d4d7      	bmi.n	8021fcc <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802201c:	f7fe fed4 	bl	8020dc8 <HAL_GetTick>
 8022020:	eba0 0009 	sub.w	r0, r0, r9
 8022024:	2802      	cmp	r0, #2
 8022026:	d9f6      	bls.n	8022016 <HAL_RCC_OscConfig+0x332>
 8022028:	e700      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802202a:	2b05      	cmp	r3, #5
 802202c:	d106      	bne.n	802203c <HAL_RCC_OscConfig+0x358>
 802202e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8022032:	f043 0304 	orr.w	r3, r3, #4
 8022036:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 802203a:	e7ca      	b.n	8021fd2 <HAL_RCC_OscConfig+0x2ee>
 802203c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8022040:	f022 0201 	bic.w	r2, r2, #1
 8022044:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8022048:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802204c:	f022 0204 	bic.w	r2, r2, #4
 8022050:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8022054:	2b00      	cmp	r3, #0
 8022056:	d1c2      	bne.n	8021fde <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8022058:	f7fe feb6 	bl	8020dc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802205c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8022060:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8022062:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8022066:	079b      	lsls	r3, r3, #30
 8022068:	d5c2      	bpl.n	8021ff0 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802206a:	f7fe fead 	bl	8020dc8 <HAL_GetTick>
 802206e:	1bc0      	subs	r0, r0, r7
 8022070:	4548      	cmp	r0, r9
 8022072:	d9f6      	bls.n	8022062 <HAL_RCC_OscConfig+0x37e>
 8022074:	e6da      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022076:	f7fe fea7 	bl	8020dc8 <HAL_GetTick>
 802207a:	1bc0      	subs	r0, r0, r7
 802207c:	4548      	cmp	r0, r9
 802207e:	d9b3      	bls.n	8021fe8 <HAL_RCC_OscConfig+0x304>
 8022080:	e6d4      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8022082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022084:	b19b      	cbz	r3, 80220ae <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8022086:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802208a:	f043 0301 	orr.w	r3, r3, #1
 802208e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8022092:	f7fe fe99 	bl	8020dc8 <HAL_GetTick>
 8022096:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8022098:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802209c:	0798      	lsls	r0, r3, #30
 802209e:	f53f aeb9 	bmi.w	8021e14 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80220a2:	f7fe fe91 	bl	8020dc8 <HAL_GetTick>
 80220a6:	1bc0      	subs	r0, r0, r7
 80220a8:	2802      	cmp	r0, #2
 80220aa:	d9f5      	bls.n	8022098 <HAL_RCC_OscConfig+0x3b4>
 80220ac:	e6be      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 80220ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80220b2:	f023 0301 	bic.w	r3, r3, #1
 80220b6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80220ba:	f7fe fe85 	bl	8020dc8 <HAL_GetTick>
 80220be:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80220c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80220c4:	0799      	lsls	r1, r3, #30
 80220c6:	f57f aea5 	bpl.w	8021e14 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80220ca:	f7fe fe7d 	bl	8020dc8 <HAL_GetTick>
 80220ce:	1bc0      	subs	r0, r0, r7
 80220d0:	2802      	cmp	r0, #2
 80220d2:	d9f5      	bls.n	80220c0 <HAL_RCC_OscConfig+0x3dc>
 80220d4:	e6aa      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80220d6:	2b02      	cmp	r3, #2
 80220d8:	f040 808c 	bne.w	80221f4 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 80220dc:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80220de:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80220e0:	f003 0103 	and.w	r1, r3, #3
 80220e4:	4291      	cmp	r1, r2
 80220e6:	d122      	bne.n	802212e <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80220e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80220ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80220ee:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80220f0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80220f4:	d11b      	bne.n	802212e <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80220f6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80220f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80220fc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8022100:	d115      	bne.n	802212e <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8022102:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8022104:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8022108:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 802210c:	d10f      	bne.n	802212e <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 802210e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8022110:	0852      	lsrs	r2, r2, #1
 8022112:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8022116:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8022118:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 802211c:	d107      	bne.n	802212e <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 802211e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8022120:	0852      	lsrs	r2, r2, #1
 8022122:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8022126:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8022128:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 802212c:	d049      	beq.n	80221c2 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 802212e:	2e0c      	cmp	r6, #12
 8022130:	f43f addc 	beq.w	8021cec <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8022134:	6823      	ldr	r3, [r4, #0]
 8022136:	015a      	lsls	r2, r3, #5
 8022138:	f53f add8 	bmi.w	8021cec <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 802213c:	6823      	ldr	r3, [r4, #0]
 802213e:	00db      	lsls	r3, r3, #3
 8022140:	f53f add4 	bmi.w	8021cec <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8022144:	6823      	ldr	r3, [r4, #0]
 8022146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802214a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 802214c:	f7fe fe3c 	bl	8020dc8 <HAL_GetTick>
 8022150:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022152:	6823      	ldr	r3, [r4, #0]
 8022154:	019f      	lsls	r7, r3, #6
 8022156:	d42e      	bmi.n	80221b6 <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022158:	68e2      	ldr	r2, [r4, #12]
 802215a:	4b38      	ldr	r3, [pc, #224]	; (802223c <HAL_RCC_OscConfig+0x558>)
 802215c:	4013      	ands	r3, r2
 802215e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8022160:	4313      	orrs	r3, r2
 8022162:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8022164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022168:	6baa      	ldr	r2, [r5, #56]	; 0x38
 802216a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 802216e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8022170:	3a01      	subs	r2, #1
 8022172:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8022176:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8022178:	0852      	lsrs	r2, r2, #1
 802217a:	3a01      	subs	r2, #1
 802217c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8022180:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8022182:	0852      	lsrs	r2, r2, #1
 8022184:	3a01      	subs	r2, #1
 8022186:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 802218a:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 802218c:	6823      	ldr	r3, [r4, #0]
 802218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8022192:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022194:	68e3      	ldr	r3, [r4, #12]
 8022196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802219a:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 802219c:	f7fe fe14 	bl	8020dc8 <HAL_GetTick>
 80221a0:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80221a2:	6823      	ldr	r3, [r4, #0]
 80221a4:	0198      	lsls	r0, r3, #6
 80221a6:	f53f ae39 	bmi.w	8021e1c <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221aa:	f7fe fe0d 	bl	8020dc8 <HAL_GetTick>
 80221ae:	1b40      	subs	r0, r0, r5
 80221b0:	2802      	cmp	r0, #2
 80221b2:	d9f6      	bls.n	80221a2 <HAL_RCC_OscConfig+0x4be>
 80221b4:	e63a      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221b6:	f7fe fe07 	bl	8020dc8 <HAL_GetTick>
 80221ba:	1b80      	subs	r0, r0, r6
 80221bc:	2802      	cmp	r0, #2
 80221be:	d9c8      	bls.n	8022152 <HAL_RCC_OscConfig+0x46e>
 80221c0:	e634      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80221c2:	6823      	ldr	r3, [r4, #0]
 80221c4:	0199      	lsls	r1, r3, #6
 80221c6:	f53f ae29 	bmi.w	8021e1c <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 80221ca:	6823      	ldr	r3, [r4, #0]
 80221cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80221d0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80221d2:	68e3      	ldr	r3, [r4, #12]
 80221d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80221d8:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80221da:	f7fe fdf5 	bl	8020dc8 <HAL_GetTick>
 80221de:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80221e0:	6823      	ldr	r3, [r4, #0]
 80221e2:	019a      	lsls	r2, r3, #6
 80221e4:	f53f ae1a 	bmi.w	8021e1c <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221e8:	f7fe fdee 	bl	8020dc8 <HAL_GetTick>
 80221ec:	1b40      	subs	r0, r0, r5
 80221ee:	2802      	cmp	r0, #2
 80221f0:	d9f6      	bls.n	80221e0 <HAL_RCC_OscConfig+0x4fc>
 80221f2:	e61b      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80221f4:	2e0c      	cmp	r6, #12
 80221f6:	f43f ad79 	beq.w	8021cec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80221fa:	6823      	ldr	r3, [r4, #0]
 80221fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022200:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8022202:	6823      	ldr	r3, [r4, #0]
 8022204:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8022208:	bf02      	ittt	eq
 802220a:	68e3      	ldreq	r3, [r4, #12]
 802220c:	f023 0303 	biceq.w	r3, r3, #3
 8022210:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8022212:	68e3      	ldr	r3, [r4, #12]
 8022214:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8022218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802221c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 802221e:	f7fe fdd3 	bl	8020dc8 <HAL_GetTick>
 8022222:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022224:	6823      	ldr	r3, [r4, #0]
 8022226:	019b      	lsls	r3, r3, #6
 8022228:	f57f adf8 	bpl.w	8021e1c <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802222c:	f7fe fdcc 	bl	8020dc8 <HAL_GetTick>
 8022230:	1b40      	subs	r0, r0, r5
 8022232:	2802      	cmp	r0, #2
 8022234:	d9f6      	bls.n	8022224 <HAL_RCC_OscConfig+0x540>
 8022236:	e5f9      	b.n	8021e2c <HAL_RCC_OscConfig+0x148>
 8022238:	40007000 	.word	0x40007000
 802223c:	019d800c 	.word	0x019d800c

08022240 <HAL_RCC_ClockConfig>:
{
 8022240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022244:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8022246:	4605      	mov	r5, r0
 8022248:	b910      	cbnz	r0, 8022250 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 802224a:	2001      	movs	r0, #1
}
 802224c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022250:	4a6f      	ldr	r2, [pc, #444]	; (8022410 <HAL_RCC_ClockConfig+0x1d0>)
 8022252:	6813      	ldr	r3, [r2, #0]
 8022254:	f003 030f 	and.w	r3, r3, #15
 8022258:	428b      	cmp	r3, r1
 802225a:	d335      	bcc.n	80222c8 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802225c:	6829      	ldr	r1, [r5, #0]
 802225e:	f011 0701 	ands.w	r7, r1, #1
 8022262:	d13c      	bne.n	80222de <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022264:	682a      	ldr	r2, [r5, #0]
 8022266:	0791      	lsls	r1, r2, #30
 8022268:	f140 80b7 	bpl.w	80223da <HAL_RCC_ClockConfig+0x19a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802226c:	4969      	ldr	r1, [pc, #420]	; (8022414 <HAL_RCC_ClockConfig+0x1d4>)
 802226e:	68a8      	ldr	r0, [r5, #8]
 8022270:	688b      	ldr	r3, [r1, #8]
 8022272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022276:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8022278:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802227a:	4965      	ldr	r1, [pc, #404]	; (8022410 <HAL_RCC_ClockConfig+0x1d0>)
 802227c:	680b      	ldr	r3, [r1, #0]
 802227e:	f003 030f 	and.w	r3, r3, #15
 8022282:	42b3      	cmp	r3, r6
 8022284:	f200 80b1 	bhi.w	80223ea <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022288:	f012 0f04 	tst.w	r2, #4
 802228c:	4c61      	ldr	r4, [pc, #388]	; (8022414 <HAL_RCC_ClockConfig+0x1d4>)
 802228e:	f040 80b8 	bne.w	8022402 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022292:	0713      	lsls	r3, r2, #28
 8022294:	d506      	bpl.n	80222a4 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022296:	68a3      	ldr	r3, [r4, #8]
 8022298:	692a      	ldr	r2, [r5, #16]
 802229a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 802229e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80222a2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80222a4:	f7ff fcd0 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 80222a8:	68a3      	ldr	r3, [r4, #8]
 80222aa:	4a5b      	ldr	r2, [pc, #364]	; (8022418 <HAL_RCC_ClockConfig+0x1d8>)
 80222ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80222b0:	5cd3      	ldrb	r3, [r2, r3]
 80222b2:	f003 031f 	and.w	r3, r3, #31
 80222b6:	40d8      	lsrs	r0, r3
 80222b8:	4b58      	ldr	r3, [pc, #352]	; (802241c <HAL_RCC_ClockConfig+0x1dc>)
 80222ba:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80222bc:	4b58      	ldr	r3, [pc, #352]	; (8022420 <HAL_RCC_ClockConfig+0x1e0>)
 80222be:	6818      	ldr	r0, [r3, #0]
}
 80222c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80222c4:	f7fe bd40 	b.w	8020d48 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80222c8:	6813      	ldr	r3, [r2, #0]
 80222ca:	f023 030f 	bic.w	r3, r3, #15
 80222ce:	430b      	orrs	r3, r1
 80222d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80222d2:	6813      	ldr	r3, [r2, #0]
 80222d4:	f003 030f 	and.w	r3, r3, #15
 80222d8:	428b      	cmp	r3, r1
 80222da:	d1b6      	bne.n	802224a <HAL_RCC_ClockConfig+0xa>
 80222dc:	e7be      	b.n	802225c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80222de:	686b      	ldr	r3, [r5, #4]
 80222e0:	4c4c      	ldr	r4, [pc, #304]	; (8022414 <HAL_RCC_ClockConfig+0x1d4>)
 80222e2:	2b03      	cmp	r3, #3
 80222e4:	d163      	bne.n	80223ae <HAL_RCC_ClockConfig+0x16e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80222e6:	6823      	ldr	r3, [r4, #0]
 80222e8:	019b      	lsls	r3, r3, #6
 80222ea:	d5ae      	bpl.n	802224a <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80222ec:	68e3      	ldr	r3, [r4, #12]
 80222ee:	f003 0303 	and.w	r3, r3, #3
 80222f2:	2b01      	cmp	r3, #1
 80222f4:	d145      	bne.n	8022382 <HAL_RCC_ClockConfig+0x142>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80222f6:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80222f8:	4a4a      	ldr	r2, [pc, #296]	; (8022424 <HAL_RCC_ClockConfig+0x1e4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80222fa:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80222fc:	bf55      	itete	pl
 80222fe:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022302:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022304:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022308:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 802230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8022310:	68e2      	ldr	r2, [r4, #12]
 8022312:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 8022316:	2a02      	cmp	r2, #2
 8022318:	d035      	beq.n	8022386 <HAL_RCC_ClockConfig+0x146>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 802231a:	4843      	ldr	r0, [pc, #268]	; (8022428 <HAL_RCC_ClockConfig+0x1e8>)
 802231c:	2a03      	cmp	r2, #3
 802231e:	bf08      	it	eq
 8022320:	4603      	moveq	r3, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022322:	68e0      	ldr	r0, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022324:	68e2      	ldr	r2, [r4, #12]
 8022326:	f3c2 2206 	ubfx	r2, r2, #8, #7
 802232a:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 802232c:	68e2      	ldr	r2, [r4, #12]
 802232e:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8022332:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022336:	3201      	adds	r2, #1
 8022338:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802233a:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802233c:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 8022340:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8022344:	4a39      	ldr	r2, [pc, #228]	; (802242c <HAL_RCC_ClockConfig+0x1ec>)
 8022346:	4293      	cmp	r3, r2
 8022348:	d81f      	bhi.n	802238a <HAL_RCC_ClockConfig+0x14a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 802234a:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802234c:	68a3      	ldr	r3, [r4, #8]
 802234e:	686a      	ldr	r2, [r5, #4]
 8022350:	f023 0303 	bic.w	r3, r3, #3
 8022354:	4313      	orrs	r3, r2
 8022356:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8022358:	f7fe fd36 	bl	8020dc8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802235c:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8022360:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022362:	68a3      	ldr	r3, [r4, #8]
 8022364:	686a      	ldr	r2, [r5, #4]
 8022366:	f003 030c 	and.w	r3, r3, #12
 802236a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 802236e:	f43f af79 	beq.w	8022264 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022372:	f7fe fd29 	bl	8020dc8 <HAL_GetTick>
 8022376:	eba0 0008 	sub.w	r0, r0, r8
 802237a:	4548      	cmp	r0, r9
 802237c:	d9f1      	bls.n	8022362 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 802237e:	2003      	movs	r0, #3
 8022380:	e764      	b.n	802224c <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 8022382:	2300      	movs	r3, #0
 8022384:	e7c4      	b.n	8022310 <HAL_RCC_ClockConfig+0xd0>
    pllvco = HSI_VALUE;
 8022386:	4b2a      	ldr	r3, [pc, #168]	; (8022430 <HAL_RCC_ClockConfig+0x1f0>)
 8022388:	e7cb      	b.n	8022322 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802238a:	68a3      	ldr	r3, [r4, #8]
 802238c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8022390:	d107      	bne.n	80223a2 <HAL_RCC_ClockConfig+0x162>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8022392:	68a3      	ldr	r3, [r4, #8]
 8022394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802239c:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 802239e:	2780      	movs	r7, #128	; 0x80
 80223a0:	e7d4      	b.n	802234c <HAL_RCC_ClockConfig+0x10c>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80223a2:	0788      	lsls	r0, r1, #30
 80223a4:	d5d1      	bpl.n	802234a <HAL_RCC_ClockConfig+0x10a>
 80223a6:	68ab      	ldr	r3, [r5, #8]
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d1ce      	bne.n	802234a <HAL_RCC_ClockConfig+0x10a>
 80223ac:	e7f1      	b.n	8022392 <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80223ae:	2b02      	cmp	r3, #2
 80223b0:	d10a      	bne.n	80223c8 <HAL_RCC_ClockConfig+0x188>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80223b2:	6823      	ldr	r3, [r4, #0]
 80223b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80223b8:	f43f af47 	beq.w	802224a <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80223bc:	f7ff fc44 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 80223c0:	4b1a      	ldr	r3, [pc, #104]	; (802242c <HAL_RCC_ClockConfig+0x1ec>)
 80223c2:	4298      	cmp	r0, r3
 80223c4:	d9c1      	bls.n	802234a <HAL_RCC_ClockConfig+0x10a>
 80223c6:	e7e4      	b.n	8022392 <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80223c8:	b91b      	cbnz	r3, 80223d2 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80223ca:	6823      	ldr	r3, [r4, #0]
 80223cc:	f013 0f02 	tst.w	r3, #2
 80223d0:	e7f2      	b.n	80223b8 <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80223d2:	6823      	ldr	r3, [r4, #0]
 80223d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80223d8:	e7ee      	b.n	80223b8 <HAL_RCC_ClockConfig+0x178>
    if(hpre == RCC_SYSCLK_DIV2)
 80223da:	2f80      	cmp	r7, #128	; 0x80
 80223dc:	f47f af4d 	bne.w	802227a <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80223e0:	490c      	ldr	r1, [pc, #48]	; (8022414 <HAL_RCC_ClockConfig+0x1d4>)
 80223e2:	688b      	ldr	r3, [r1, #8]
 80223e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80223e8:	e746      	b.n	8022278 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80223ea:	680b      	ldr	r3, [r1, #0]
 80223ec:	f023 030f 	bic.w	r3, r3, #15
 80223f0:	4333      	orrs	r3, r6
 80223f2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80223f4:	680b      	ldr	r3, [r1, #0]
 80223f6:	f003 030f 	and.w	r3, r3, #15
 80223fa:	42b3      	cmp	r3, r6
 80223fc:	f47f af25 	bne.w	802224a <HAL_RCC_ClockConfig+0xa>
 8022400:	e742      	b.n	8022288 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022402:	68a3      	ldr	r3, [r4, #8]
 8022404:	68e9      	ldr	r1, [r5, #12]
 8022406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802240a:	430b      	orrs	r3, r1
 802240c:	60a3      	str	r3, [r4, #8]
 802240e:	e740      	b.n	8022292 <HAL_RCC_ClockConfig+0x52>
 8022410:	40022000 	.word	0x40022000
 8022414:	40021000 	.word	0x40021000
 8022418:	08029ea8 	.word	0x08029ea8
 802241c:	200300cc 	.word	0x200300cc
 8022420:	200300d4 	.word	0x200300d4
 8022424:	08029e78 	.word	0x08029e78
 8022428:	007a1200 	.word	0x007a1200
 802242c:	04c4b400 	.word	0x04c4b400
 8022430:	00f42400 	.word	0x00f42400

08022434 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8022434:	4b05      	ldr	r3, [pc, #20]	; (802244c <HAL_RCC_GetPCLK1Freq+0x18>)
 8022436:	4a06      	ldr	r2, [pc, #24]	; (8022450 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8022438:	689b      	ldr	r3, [r3, #8]
 802243a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 802243e:	5cd3      	ldrb	r3, [r2, r3]
 8022440:	4a04      	ldr	r2, [pc, #16]	; (8022454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8022442:	6810      	ldr	r0, [r2, #0]
 8022444:	f003 031f 	and.w	r3, r3, #31
}
 8022448:	40d8      	lsrs	r0, r3
 802244a:	4770      	bx	lr
 802244c:	40021000 	.word	0x40021000
 8022450:	08029eb8 	.word	0x08029eb8
 8022454:	200300cc 	.word	0x200300cc

08022458 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8022458:	4b05      	ldr	r3, [pc, #20]	; (8022470 <HAL_RCC_GetPCLK2Freq+0x18>)
 802245a:	4a06      	ldr	r2, [pc, #24]	; (8022474 <HAL_RCC_GetPCLK2Freq+0x1c>)
 802245c:	689b      	ldr	r3, [r3, #8]
 802245e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8022462:	5cd3      	ldrb	r3, [r2, r3]
 8022464:	4a04      	ldr	r2, [pc, #16]	; (8022478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8022466:	6810      	ldr	r0, [r2, #0]
 8022468:	f003 031f 	and.w	r3, r3, #31
}
 802246c:	40d8      	lsrs	r0, r3
 802246e:	4770      	bx	lr
 8022470:	40021000 	.word	0x40021000
 8022474:	08029eb8 	.word	0x08029eb8
 8022478:	200300cc 	.word	0x200300cc

0802247c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 802247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802247e:	4b3c      	ldr	r3, [pc, #240]	; (8022570 <RCCEx_PLLSAI1_Config+0xf4>)
 8022480:	68da      	ldr	r2, [r3, #12]
 8022482:	f012 0f03 	tst.w	r2, #3
{
 8022486:	4605      	mov	r5, r0
 8022488:	460f      	mov	r7, r1
 802248a:	6800      	ldr	r0, [r0, #0]
 802248c:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 802248e:	d007      	beq.n	80224a0 <RCCEx_PLLSAI1_Config+0x24>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8022490:	68db      	ldr	r3, [r3, #12]
 8022492:	f003 0303 	and.w	r3, r3, #3
 8022496:	4283      	cmp	r3, r0
 8022498:	d100      	bne.n	802249c <RCCEx_PLLSAI1_Config+0x20>
       ||
 802249a:	b97b      	cbnz	r3, 80224bc <RCCEx_PLLSAI1_Config+0x40>
 802249c:	2001      	movs	r0, #1
 802249e:	e03c      	b.n	802251a <RCCEx_PLLSAI1_Config+0x9e>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80224a0:	2802      	cmp	r0, #2
 80224a2:	d028      	beq.n	80224f6 <RCCEx_PLLSAI1_Config+0x7a>
 80224a4:	2803      	cmp	r0, #3
 80224a6:	d02b      	beq.n	8022500 <RCCEx_PLLSAI1_Config+0x84>
 80224a8:	2801      	cmp	r0, #1
 80224aa:	d1f7      	bne.n	802249c <RCCEx_PLLSAI1_Config+0x20>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80224ac:	681b      	ldr	r3, [r3, #0]
 80224ae:	079e      	lsls	r6, r3, #30
 80224b0:	d533      	bpl.n	802251a <RCCEx_PLLSAI1_Config+0x9e>

    if(status == HAL_OK)
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80224b2:	68e3      	ldr	r3, [r4, #12]
 80224b4:	f023 0303 	bic.w	r3, r3, #3
 80224b8:	4318      	orrs	r0, r3
 80224ba:	60e0      	str	r0, [r4, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80224bc:	6823      	ldr	r3, [r4, #0]
 80224be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80224c2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80224c4:	f7fe fc80 	bl	8020dc8 <HAL_GetTick>
 80224c8:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80224ca:	6823      	ldr	r3, [r4, #0]
 80224cc:	011a      	lsls	r2, r3, #4
 80224ce:	d41e      	bmi.n	802250e <RCCEx_PLLSAI1_Config+0x92>
 80224d0:	68ab      	ldr	r3, [r5, #8]
 80224d2:	021e      	lsls	r6, r3, #8
 80224d4:	686b      	ldr	r3, [r5, #4]
 80224d6:	3b01      	subs	r3, #1
 80224d8:	0119      	lsls	r1, r3, #4
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80224da:	b1ff      	cbz	r7, 802251c <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80224dc:	2f01      	cmp	r7, #1
 80224de:	d136      	bne.n	802254e <RCCEx_PLLSAI1_Config+0xd2>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80224e0:	692b      	ldr	r3, [r5, #16]
 80224e2:	6927      	ldr	r7, [r4, #16]
 80224e4:	085b      	lsrs	r3, r3, #1
 80224e6:	1e58      	subs	r0, r3, #1
 80224e8:	4b22      	ldr	r3, [pc, #136]	; (8022574 <RCCEx_PLLSAI1_Config+0xf8>)
 80224ea:	403b      	ands	r3, r7
 80224ec:	4333      	orrs	r3, r6
 80224ee:	430b      	orrs	r3, r1
 80224f0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80224f4:	e01a      	b.n	802252c <RCCEx_PLLSAI1_Config+0xb0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80224fc:	d0ce      	beq.n	802249c <RCCEx_PLLSAI1_Config+0x20>
 80224fe:	e7d8      	b.n	80224b2 <RCCEx_PLLSAI1_Config+0x36>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8022500:	681a      	ldr	r2, [r3, #0]
 8022502:	0391      	lsls	r1, r2, #14
 8022504:	d4d5      	bmi.n	80224b2 <RCCEx_PLLSAI1_Config+0x36>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 802250c:	e7f6      	b.n	80224fc <RCCEx_PLLSAI1_Config+0x80>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 802250e:	f7fe fc5b 	bl	8020dc8 <HAL_GetTick>
 8022512:	1b80      	subs	r0, r0, r6
 8022514:	2802      	cmp	r0, #2
 8022516:	d9d8      	bls.n	80224ca <RCCEx_PLLSAI1_Config+0x4e>
        status = HAL_TIMEOUT;
 8022518:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 802251a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802251c:	68e8      	ldr	r0, [r5, #12]
 802251e:	6922      	ldr	r2, [r4, #16]
 8022520:	ea46 63c0 	orr.w	r3, r6, r0, lsl #27
 8022524:	4814      	ldr	r0, [pc, #80]	; (8022578 <RCCEx_PLLSAI1_Config+0xfc>)
 8022526:	4010      	ands	r0, r2
 8022528:	4303      	orrs	r3, r0
 802252a:	430b      	orrs	r3, r1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802252c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 802252e:	6823      	ldr	r3, [r4, #0]
 8022530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022534:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8022536:	f7fe fc47 	bl	8020dc8 <HAL_GetTick>
 802253a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 802253c:	6823      	ldr	r3, [r4, #0]
 802253e:	011b      	lsls	r3, r3, #4
 8022540:	d510      	bpl.n	8022564 <RCCEx_PLLSAI1_Config+0xe8>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8022542:	6923      	ldr	r3, [r4, #16]
 8022544:	69aa      	ldr	r2, [r5, #24]
 8022546:	4313      	orrs	r3, r2
 8022548:	6123      	str	r3, [r4, #16]
 802254a:	2000      	movs	r0, #0
  return status;
 802254c:	e7e5      	b.n	802251a <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802254e:	696b      	ldr	r3, [r5, #20]
 8022550:	6920      	ldr	r0, [r4, #16]
 8022552:	085b      	lsrs	r3, r3, #1
 8022554:	1e5a      	subs	r2, r3, #1
 8022556:	4b09      	ldr	r3, [pc, #36]	; (802257c <RCCEx_PLLSAI1_Config+0x100>)
 8022558:	4003      	ands	r3, r0
 802255a:	4333      	orrs	r3, r6
 802255c:	430b      	orrs	r3, r1
 802255e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8022562:	e7e3      	b.n	802252c <RCCEx_PLLSAI1_Config+0xb0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022564:	f7fe fc30 	bl	8020dc8 <HAL_GetTick>
 8022568:	1b80      	subs	r0, r0, r6
 802256a:	2802      	cmp	r0, #2
 802256c:	d9e6      	bls.n	802253c <RCCEx_PLLSAI1_Config+0xc0>
 802256e:	e7d3      	b.n	8022518 <RCCEx_PLLSAI1_Config+0x9c>
 8022570:	40021000 	.word	0x40021000
 8022574:	ff9f800f 	.word	0xff9f800f
 8022578:	07ff800f 	.word	0x07ff800f
 802257c:	f9ff800f 	.word	0xf9ff800f

08022580 <RCCEx_PLLSAI2_Config.constprop.1>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8022580:	4b2f      	ldr	r3, [pc, #188]	; (8022640 <RCCEx_PLLSAI2_Config.constprop.1+0xc0>)
 8022582:	68da      	ldr	r2, [r3, #12]
 8022584:	f012 0f03 	tst.w	r2, #3
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
 8022588:	b570      	push	{r4, r5, r6, lr}
 802258a:	4605      	mov	r5, r0
 802258c:	461c      	mov	r4, r3
 802258e:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8022590:	d007      	beq.n	80225a2 <RCCEx_PLLSAI2_Config.constprop.1+0x22>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8022592:	68db      	ldr	r3, [r3, #12]
 8022594:	f003 0303 	and.w	r3, r3, #3
 8022598:	4283      	cmp	r3, r0
 802259a:	d100      	bne.n	802259e <RCCEx_PLLSAI2_Config.constprop.1+0x1e>
       ||
 802259c:	b97b      	cbnz	r3, 80225be <RCCEx_PLLSAI2_Config.constprop.1+0x3e>
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 802259e:	2001      	movs	r0, #1
 80225a0:	e03f      	b.n	8022622 <RCCEx_PLLSAI2_Config.constprop.1+0xa2>
    switch(PllSai2->PLLSAI2Source)
 80225a2:	2802      	cmp	r0, #2
 80225a4:	d02b      	beq.n	80225fe <RCCEx_PLLSAI2_Config.constprop.1+0x7e>
 80225a6:	2803      	cmp	r0, #3
 80225a8:	d02e      	beq.n	8022608 <RCCEx_PLLSAI2_Config.constprop.1+0x88>
 80225aa:	2801      	cmp	r0, #1
 80225ac:	d1f7      	bne.n	802259e <RCCEx_PLLSAI2_Config.constprop.1+0x1e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	079e      	lsls	r6, r3, #30
 80225b2:	d536      	bpl.n	8022622 <RCCEx_PLLSAI2_Config.constprop.1+0xa2>

    if(status == HAL_OK)
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80225b4:	68e3      	ldr	r3, [r4, #12]
 80225b6:	f023 0303 	bic.w	r3, r3, #3
 80225ba:	4318      	orrs	r0, r3
 80225bc:	60e0      	str	r0, [r4, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80225be:	6823      	ldr	r3, [r4, #0]
 80225c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80225c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80225c6:	f7fe fbff 	bl	8020dc8 <HAL_GetTick>
 80225ca:	4606      	mov	r6, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80225cc:	6823      	ldr	r3, [r4, #0]
 80225ce:	009a      	lsls	r2, r3, #2
 80225d0:	d421      	bmi.n	8022616 <RCCEx_PLLSAI2_Config.constprop.1+0x96>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80225d2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80225d6:	06db      	lsls	r3, r3, #27
 80225d8:	6961      	ldr	r1, [r4, #20]
 80225da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80225de:	4a19      	ldr	r2, [pc, #100]	; (8022644 <RCCEx_PLLSAI2_Config.constprop.1+0xc4>)
 80225e0:	400a      	ands	r2, r1
 80225e2:	4313      	orrs	r3, r2
 80225e4:	686a      	ldr	r2, [r5, #4]
 80225e6:	3a01      	subs	r2, #1
 80225e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80225ec:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80225ee:	6823      	ldr	r3, [r4, #0]
 80225f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80225f4:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80225f6:	f7fe fbe7 	bl	8020dc8 <HAL_GetTick>
 80225fa:	4606      	mov	r6, r0
 80225fc:	e017      	b.n	802262e <RCCEx_PLLSAI2_Config.constprop.1+0xae>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8022604:	d0cb      	beq.n	802259e <RCCEx_PLLSAI2_Config.constprop.1+0x1e>
 8022606:	e7d5      	b.n	80225b4 <RCCEx_PLLSAI2_Config.constprop.1+0x34>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8022608:	681a      	ldr	r2, [r3, #0]
 802260a:	0391      	lsls	r1, r2, #14
 802260c:	d4d2      	bmi.n	80225b4 <RCCEx_PLLSAI2_Config.constprop.1+0x34>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8022614:	e7f6      	b.n	8022604 <RCCEx_PLLSAI2_Config.constprop.1+0x84>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022616:	f7fe fbd7 	bl	8020dc8 <HAL_GetTick>
 802261a:	1b80      	subs	r0, r0, r6
 802261c:	2802      	cmp	r0, #2
 802261e:	d9d5      	bls.n	80225cc <RCCEx_PLLSAI2_Config.constprop.1+0x4c>
        status = HAL_TIMEOUT;
 8022620:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8022622:	bd70      	pop	{r4, r5, r6, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8022624:	f7fe fbd0 	bl	8020dc8 <HAL_GetTick>
 8022628:	1b80      	subs	r0, r0, r6
 802262a:	2802      	cmp	r0, #2
 802262c:	d8f8      	bhi.n	8022620 <RCCEx_PLLSAI2_Config.constprop.1+0xa0>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 802262e:	6823      	ldr	r3, [r4, #0]
 8022630:	009b      	lsls	r3, r3, #2
 8022632:	d5f7      	bpl.n	8022624 <RCCEx_PLLSAI2_Config.constprop.1+0xa4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8022634:	6963      	ldr	r3, [r4, #20]
 8022636:	69aa      	ldr	r2, [r5, #24]
 8022638:	4313      	orrs	r3, r2
 802263a:	6163      	str	r3, [r4, #20]
 802263c:	2000      	movs	r0, #0
 802263e:	e7f0      	b.n	8022622 <RCCEx_PLLSAI2_Config.constprop.1+0xa2>
 8022640:	40021000 	.word	0x40021000
 8022644:	07ff800f 	.word	0x07ff800f

08022648 <HAL_RCCEx_PeriphCLKConfig>:
{
 8022648:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 802264c:	6806      	ldr	r6, [r0, #0]
 802264e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8022652:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8022654:	d023      	beq.n	802269e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8022656:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8022658:	2940      	cmp	r1, #64	; 0x40
 802265a:	d014      	beq.n	8022686 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 802265c:	d804      	bhi.n	8022668 <HAL_RCCEx_PeriphCLKConfig+0x20>
 802265e:	b1c1      	cbz	r1, 8022692 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8022660:	2920      	cmp	r1, #32
 8022662:	d02b      	beq.n	80226bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8022664:	2601      	movs	r6, #1
 8022666:	e01a      	b.n	802269e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8022668:	2960      	cmp	r1, #96	; 0x60
 802266a:	d001      	beq.n	8022670 <HAL_RCCEx_PeriphCLKConfig+0x28>
 802266c:	2980      	cmp	r1, #128	; 0x80
 802266e:	d1f9      	bne.n	8022664 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022670:	4a4e      	ldr	r2, [pc, #312]	; (80227ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8022672:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8022674:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8022678:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 802267c:	430b      	orrs	r3, r1
 802267e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8022682:	2600      	movs	r6, #0
 8022684:	e00b      	b.n	802269e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8022686:	4a49      	ldr	r2, [pc, #292]	; (80227ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8022688:	68d3      	ldr	r3, [r2, #12]
 802268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802268e:	60d3      	str	r3, [r2, #12]
 8022690:	e7ee      	b.n	8022670 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8022692:	3004      	adds	r0, #4
 8022694:	f7ff fef2 	bl	802247c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8022698:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 802269a:	2800      	cmp	r0, #0
 802269c:	d0e8      	beq.n	8022670 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 802269e:	6823      	ldr	r3, [r4, #0]
 80226a0:	04db      	lsls	r3, r3, #19
 80226a2:	d509      	bpl.n	80226b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 80226a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80226a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80226aa:	d013      	beq.n	80226d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80226ac:	d80a      	bhi.n	80226c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80226ae:	b1b9      	cbz	r1, 80226e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80226b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80226b4:	d070      	beq.n	8022798 <HAL_RCCEx_PeriphCLKConfig+0x150>
      ret = HAL_ERROR;
 80226b6:	2601      	movs	r6, #1
 80226b8:	4635      	mov	r5, r6
 80226ba:	e020      	b.n	80226fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80226bc:	3020      	adds	r0, #32
 80226be:	f7ff ff5f 	bl	8022580 <RCCEx_PLLSAI2_Config.constprop.1>
 80226c2:	e7e9      	b.n	8022698 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 80226c4:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80226c8:	d002      	beq.n	80226d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80226ca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80226ce:	d1f2      	bne.n	80226b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80226d0:	4635      	mov	r5, r6
 80226d2:	e009      	b.n	80226e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80226d4:	4a35      	ldr	r2, [pc, #212]	; (80227ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80226d6:	68d3      	ldr	r3, [r2, #12]
 80226d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80226dc:	60d3      	str	r3, [r2, #12]
 80226de:	e7f7      	b.n	80226d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80226e0:	1d20      	adds	r0, r4, #4
 80226e2:	f7ff fecb 	bl	802247c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80226e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80226e8:	2d00      	cmp	r5, #0
 80226ea:	d15a      	bne.n	80227a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80226ec:	4a2f      	ldr	r2, [pc, #188]	; (80227ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80226ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80226f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80226f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80226f8:	430b      	orrs	r3, r1
 80226fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80226fe:	6823      	ldr	r3, [r4, #0]
 8022700:	039f      	lsls	r7, r3, #14
 8022702:	f140 817b 	bpl.w	80229fc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8022706:	4f29      	ldr	r7, [pc, #164]	; (80227ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8022708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802270a:	00d8      	lsls	r0, r3, #3
 802270c:	d44b      	bmi.n	80227a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 802270e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022714:	65bb      	str	r3, [r7, #88]	; 0x58
 8022716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802271c:	9301      	str	r3, [sp, #4]
 802271e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8022720:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8022724:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80227b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8022728:	f8d9 3000 	ldr.w	r3, [r9]
 802272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022730:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8022734:	f7fe fb48 	bl	8020dc8 <HAL_GetTick>
 8022738:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 802273a:	f8d9 3000 	ldr.w	r3, [r9]
 802273e:	05d9      	lsls	r1, r3, #23
 8022740:	d538      	bpl.n	80227b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8022742:	2d00      	cmp	r5, #0
 8022744:	d13d      	bne.n	80227c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8022746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 802274a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 802274e:	d015      	beq.n	802277c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8022750:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8022754:	429a      	cmp	r2, r3
 8022756:	d011      	beq.n	802277c <HAL_RCCEx_PeriphCLKConfig+0x134>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8022758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 802275c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8022760:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8022764:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8022768:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 802276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8022770:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8022774:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8022778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 802277c:	07da      	lsls	r2, r3, #31
 802277e:	f100 812d 	bmi.w	80229dc <HAL_RCCEx_PeriphCLKConfig+0x394>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8022782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8022786:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802278a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802278e:	4313      	orrs	r3, r2
 8022790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022794:	4635      	mov	r5, r6
 8022796:	e014      	b.n	80227c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8022798:	f104 0020 	add.w	r0, r4, #32
 802279c:	f7ff fef0 	bl	8022580 <RCCEx_PLLSAI2_Config.constprop.1>
 80227a0:	e7a1      	b.n	80226e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80227a2:	462e      	mov	r6, r5
 80227a4:	e7ab      	b.n	80226fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
    FlagStatus       pwrclkchanged = RESET;
 80227a6:	f04f 0800 	mov.w	r8, #0
 80227aa:	e7bb      	b.n	8022724 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80227ac:	40021000 	.word	0x40021000
 80227b0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80227b4:	f7fe fb08 	bl	8020dc8 <HAL_GetTick>
 80227b8:	eba0 000a 	sub.w	r0, r0, sl
 80227bc:	2802      	cmp	r0, #2
 80227be:	d9bc      	bls.n	802273a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        ret = HAL_TIMEOUT;
 80227c0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80227c2:	f1b8 0f00 	cmp.w	r8, #0
 80227c6:	d003      	beq.n	80227d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80227c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80227ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80227ce:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80227d0:	6823      	ldr	r3, [r4, #0]
 80227d2:	07d8      	lsls	r0, r3, #31
 80227d4:	d508      	bpl.n	80227e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80227d6:	49a5      	ldr	r1, [pc, #660]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80227d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80227da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80227de:	f022 0203 	bic.w	r2, r2, #3
 80227e2:	4302      	orrs	r2, r0
 80227e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80227e8:	0799      	lsls	r1, r3, #30
 80227ea:	d508      	bpl.n	80227fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80227ec:	499f      	ldr	r1, [pc, #636]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80227ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80227f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80227f4:	f022 020c 	bic.w	r2, r2, #12
 80227f8:	4302      	orrs	r2, r0
 80227fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80227fe:	075a      	lsls	r2, r3, #29
 8022800:	d508      	bpl.n	8022814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8022802:	499a      	ldr	r1, [pc, #616]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022804:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8022806:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802280a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 802280e:	4302      	orrs	r2, r0
 8022810:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8022814:	071f      	lsls	r7, r3, #28
 8022816:	d508      	bpl.n	802282a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8022818:	4994      	ldr	r1, [pc, #592]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802281a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802281c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8022820:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8022824:	4302      	orrs	r2, r0
 8022826:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 802282a:	06de      	lsls	r6, r3, #27
 802282c:	d508      	bpl.n	8022840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 802282e:	498f      	ldr	r1, [pc, #572]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022830:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8022832:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8022836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 802283a:	4302      	orrs	r2, r0
 802283c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8022840:	0698      	lsls	r0, r3, #26
 8022842:	d508      	bpl.n	8022856 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8022844:	4989      	ldr	r1, [pc, #548]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022846:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8022848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802284c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8022850:	4302      	orrs	r2, r0
 8022852:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8022856:	0599      	lsls	r1, r3, #22
 8022858:	d508      	bpl.n	802286c <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802285a:	4984      	ldr	r1, [pc, #528]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802285c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 802285e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8022862:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8022866:	4302      	orrs	r2, r0
 8022868:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 802286c:	055a      	lsls	r2, r3, #21
 802286e:	d508      	bpl.n	8022882 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8022870:	497e      	ldr	r1, [pc, #504]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022872:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8022874:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8022878:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 802287c:	4302      	orrs	r2, r0
 802287e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022882:	065f      	lsls	r7, r3, #25
 8022884:	d508      	bpl.n	8022898 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8022886:	4979      	ldr	r1, [pc, #484]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802288a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 802288e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8022892:	4302      	orrs	r2, r0
 8022894:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8022898:	061e      	lsls	r6, r3, #24
 802289a:	d508      	bpl.n	80228ae <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 802289c:	4973      	ldr	r1, [pc, #460]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802289e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80228a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80228a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80228a8:	4302      	orrs	r2, r0
 80228aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80228ae:	05d8      	lsls	r0, r3, #23
 80228b0:	d508      	bpl.n	80228c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80228b2:	496e      	ldr	r1, [pc, #440]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80228b4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80228b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80228ba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80228be:	4302      	orrs	r2, r0
 80228c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80228c4:	02d9      	lsls	r1, r3, #11
 80228c6:	d508      	bpl.n	80228da <HAL_RCCEx_PeriphCLKConfig+0x292>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80228c8:	4968      	ldr	r1, [pc, #416]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80228ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80228cc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80228d0:	f022 0203 	bic.w	r2, r2, #3
 80228d4:	4302      	orrs	r2, r0
 80228d6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80228da:	049a      	lsls	r2, r3, #18
 80228dc:	d510      	bpl.n	8022900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80228de:	4a63      	ldr	r2, [pc, #396]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80228e0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80228e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80228e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80228ea:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80228ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80228f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80228f4:	f040 8084 	bne.w	8022a00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80228f8:	68d3      	ldr	r3, [r2, #12]
 80228fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80228fe:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8022900:	6823      	ldr	r3, [r4, #0]
 8022902:	031b      	lsls	r3, r3, #12
 8022904:	d50f      	bpl.n	8022926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022906:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8022908:	4b58      	ldr	r3, [pc, #352]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802290a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 802290e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8022912:	f040 8081 	bne.w	8022a18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8022916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802291a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 802291e:	68da      	ldr	r2, [r3, #12]
 8022920:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022924:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8022926:	6823      	ldr	r3, [r4, #0]
 8022928:	035f      	lsls	r7, r3, #13
 802292a:	d510      	bpl.n	802294e <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802292c:	4a4f      	ldr	r2, [pc, #316]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802292e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8022930:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8022934:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8022938:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 802293a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802293e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8022942:	f040 8087 	bne.w	8022a54 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022946:	68d3      	ldr	r3, [r2, #12]
 8022948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802294c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 802294e:	6823      	ldr	r3, [r4, #0]
 8022950:	045e      	lsls	r6, r3, #17
 8022952:	d513      	bpl.n	802297c <HAL_RCCEx_PeriphCLKConfig+0x334>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8022954:	4945      	ldr	r1, [pc, #276]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022956:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 802295a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802295e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8022962:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8022964:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8022968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 802296c:	d106      	bne.n	802297c <HAL_RCCEx_PeriphCLKConfig+0x334>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 802296e:	2102      	movs	r1, #2
 8022970:	1d20      	adds	r0, r4, #4
 8022972:	f7ff fd83 	bl	802247c <RCCEx_PLLSAI1_Config>
 8022976:	2800      	cmp	r0, #0
 8022978:	bf18      	it	ne
 802297a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802297c:	6822      	ldr	r2, [r4, #0]
 802297e:	03d0      	lsls	r0, r2, #15
 8022980:	d509      	bpl.n	8022996 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8022982:	493a      	ldr	r1, [pc, #232]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8022984:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8022988:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 802298c:	f023 0304 	bic.w	r3, r3, #4
 8022990:	4303      	orrs	r3, r0
 8022992:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8022996:	0291      	lsls	r1, r2, #10
 8022998:	d509      	bpl.n	80229ae <HAL_RCCEx_PeriphCLKConfig+0x366>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 802299a:	4934      	ldr	r1, [pc, #208]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 802299c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80229a0:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 80229a4:	f023 0318 	bic.w	r3, r3, #24
 80229a8:	4303      	orrs	r3, r0
 80229aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80229ae:	01d3      	lsls	r3, r2, #7
 80229b0:	d510      	bpl.n	80229d4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80229b2:	4a2e      	ldr	r2, [pc, #184]	; (8022a6c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80229b4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80229b8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80229bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80229c0:	430b      	orrs	r3, r1
 80229c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80229c6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80229ca:	bf02      	ittt	eq
 80229cc:	68d3      	ldreq	r3, [r2, #12]
 80229ce:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80229d2:	60d3      	streq	r3, [r2, #12]
}
 80229d4:	4628      	mov	r0, r5
 80229d6:	b002      	add	sp, #8
 80229d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 80229dc:	f7fe f9f4 	bl	8020dc8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80229e0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80229e4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80229e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80229ea:	079b      	lsls	r3, r3, #30
 80229ec:	f53f aec9 	bmi.w	8022782 <HAL_RCCEx_PeriphCLKConfig+0x13a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80229f0:	f7fe f9ea 	bl	8020dc8 <HAL_GetTick>
 80229f4:	1b40      	subs	r0, r0, r5
 80229f6:	4548      	cmp	r0, r9
 80229f8:	d9f5      	bls.n	80229e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80229fa:	e6e1      	b.n	80227c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80229fc:	4635      	mov	r5, r6
 80229fe:	e6e7      	b.n	80227d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8022a00:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8022a04:	f47f af7c 	bne.w	8022900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022a08:	2101      	movs	r1, #1
 8022a0a:	1d20      	adds	r0, r4, #4
 8022a0c:	f7ff fd36 	bl	802247c <RCCEx_PLLSAI1_Config>
 8022a10:	2800      	cmp	r0, #0
 8022a12:	bf18      	it	ne
 8022a14:	4605      	movne	r5, r0
 8022a16:	e773      	b.n	8022900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8022a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8022a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8022a24:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8022a28:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8022a2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8022a32:	d103      	bne.n	8022a3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8022a34:	68da      	ldr	r2, [r3, #12]
 8022a36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8022a3a:	e773      	b.n	8022924 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8022a3c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8022a40:	f47f af71 	bne.w	8022926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022a44:	2101      	movs	r1, #1
 8022a46:	1d20      	adds	r0, r4, #4
 8022a48:	f7ff fd18 	bl	802247c <RCCEx_PLLSAI1_Config>
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	bf18      	it	ne
 8022a50:	4605      	movne	r5, r0
 8022a52:	e768      	b.n	8022926 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8022a54:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8022a58:	f47f af79 	bne.w	802294e <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8022a5c:	2101      	movs	r1, #1
 8022a5e:	1d20      	adds	r0, r4, #4
 8022a60:	f7ff fd0c 	bl	802247c <RCCEx_PLLSAI1_Config>
 8022a64:	2800      	cmp	r0, #0
 8022a66:	bf18      	it	ne
 8022a68:	4605      	movne	r5, r0
 8022a6a:	e770      	b.n	802294e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8022a6c:	40021000 	.word	0x40021000

08022a70 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8022a70:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022a72:	69c1      	ldr	r1, [r0, #28]
 8022a74:	6882      	ldr	r2, [r0, #8]
{
 8022a76:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8022a7a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022a7c:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022a7e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022a80:	4302      	orrs	r2, r0
 8022a82:	6960      	ldr	r0, [r4, #20]
 8022a84:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8022a86:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022a88:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8022a8a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022a8c:	48be      	ldr	r0, [pc, #760]	; (8022d88 <UART_SetConfig+0x318>)
 8022a8e:	4028      	ands	r0, r5
 8022a90:	4302      	orrs	r2, r0
 8022a92:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022a94:	685a      	ldr	r2, [r3, #4]
 8022a96:	68e0      	ldr	r0, [r4, #12]
 8022a98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8022a9c:	4302      	orrs	r2, r0
 8022a9e:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8022aa0:	4aba      	ldr	r2, [pc, #744]	; (8022d8c <UART_SetConfig+0x31c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8022aa2:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8022aa4:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8022aa6:	bf1c      	itt	ne
 8022aa8:	6a22      	ldrne	r2, [r4, #32]
 8022aaa:	4310      	orrne	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8022aac:	689a      	ldr	r2, [r3, #8]
 8022aae:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8022ab2:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8022ab6:	4302      	orrs	r2, r0
 8022ab8:	609a      	str	r2, [r3, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8022aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022abc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8022abe:	f022 020f 	bic.w	r2, r2, #15
 8022ac2:	4302      	orrs	r2, r0
 8022ac4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022ac6:	4ab2      	ldr	r2, [pc, #712]	; (8022d90 <UART_SetConfig+0x320>)
 8022ac8:	4293      	cmp	r3, r2
 8022aca:	d118      	bne.n	8022afe <UART_SetConfig+0x8e>
 8022acc:	4bb1      	ldr	r3, [pc, #708]	; (8022d94 <UART_SetConfig+0x324>)
 8022ace:	4ab2      	ldr	r2, [pc, #712]	; (8022d98 <UART_SetConfig+0x328>)
 8022ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ad4:	f003 0303 	and.w	r3, r3, #3
 8022ad8:	5cd3      	ldrb	r3, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022ada:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8022ade:	f040 847d 	bne.w	80233dc <UART_SetConfig+0x96c>
  {
    switch (clocksource)
 8022ae2:	2b08      	cmp	r3, #8
 8022ae4:	f200 832b 	bhi.w	802313e <UART_SetConfig+0x6ce>
 8022ae8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022aec:	029b0446 	.word	0x029b0446
 8022af0:	032903fa 	.word	0x032903fa
 8022af4:	0329043f 	.word	0x0329043f
 8022af8:	03290329 	.word	0x03290329
 8022afc:	003d      	.short	0x003d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022afe:	4aa7      	ldr	r2, [pc, #668]	; (8022d9c <UART_SetConfig+0x32c>)
 8022b00:	4293      	cmp	r3, r2
 8022b02:	d108      	bne.n	8022b16 <UART_SetConfig+0xa6>
 8022b04:	4ba3      	ldr	r3, [pc, #652]	; (8022d94 <UART_SetConfig+0x324>)
 8022b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8022b0a:	4ba3      	ldr	r3, [pc, #652]	; (8022d98 <UART_SetConfig+0x328>)
 8022b0c:	f002 020c 	and.w	r2, r2, #12
 8022b10:	4413      	add	r3, r2
 8022b12:	791b      	ldrb	r3, [r3, #4]
 8022b14:	e7e1      	b.n	8022ada <UART_SetConfig+0x6a>
 8022b16:	4aa2      	ldr	r2, [pc, #648]	; (8022da0 <UART_SetConfig+0x330>)
 8022b18:	4293      	cmp	r3, r2
 8022b1a:	d151      	bne.n	8022bc0 <UART_SetConfig+0x150>
 8022b1c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8022b20:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8022b24:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8022b28:	2a10      	cmp	r2, #16
 8022b2a:	f000 8416 	beq.w	802335a <UART_SetConfig+0x8ea>
 8022b2e:	d80d      	bhi.n	8022b4c <UART_SetConfig+0xdc>
 8022b30:	2a00      	cmp	r2, #0
 8022b32:	f000 8081 	beq.w	8022c38 <UART_SetConfig+0x1c8>
  if (UART_INSTANCE_LOWPOWER(huart))
 8022b36:	4a95      	ldr	r2, [pc, #596]	; (8022d8c <UART_SetConfig+0x31c>)
 8022b38:	4293      	cmp	r3, r2
 8022b3a:	f000 80eb 	beq.w	8022d14 <UART_SetConfig+0x2a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022b3e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8022b42:	f000 82fc 	beq.w	802313e <UART_SetConfig+0x6ce>
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8022b46:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8022b48:	2300      	movs	r3, #0
 8022b4a:	e347      	b.n	80231dc <UART_SetConfig+0x76c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022b4c:	2a20      	cmp	r2, #32
 8022b4e:	f000 83bf 	beq.w	80232d0 <UART_SetConfig+0x860>
 8022b52:	2a30      	cmp	r2, #48	; 0x30
 8022b54:	d1ef      	bne.n	8022b36 <UART_SetConfig+0xc6>
  if (UART_INSTANCE_LOWPOWER(huart))
 8022b56:	4a8d      	ldr	r2, [pc, #564]	; (8022d8c <UART_SetConfig+0x31c>)
 8022b58:	4293      	cmp	r3, r2
 8022b5a:	f000 8131 	beq.w	8022dc0 <UART_SetConfig+0x350>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022b5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8022b62:	f040 8374 	bne.w	802324e <UART_SetConfig+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022b66:	2800      	cmp	r0, #0
 8022b68:	f000 82c8 	beq.w	80230fc <UART_SetConfig+0x68c>
 8022b6c:	2801      	cmp	r0, #1
 8022b6e:	f000 82c8 	beq.w	8023102 <UART_SetConfig+0x692>
 8022b72:	2802      	cmp	r0, #2
 8022b74:	f000 82c8 	beq.w	8023108 <UART_SetConfig+0x698>
 8022b78:	2803      	cmp	r0, #3
 8022b7a:	f000 82c8 	beq.w	802310e <UART_SetConfig+0x69e>
 8022b7e:	2804      	cmp	r0, #4
 8022b80:	f000 82c8 	beq.w	8023114 <UART_SetConfig+0x6a4>
 8022b84:	2805      	cmp	r0, #5
 8022b86:	f000 82c8 	beq.w	802311a <UART_SetConfig+0x6aa>
 8022b8a:	2806      	cmp	r0, #6
 8022b8c:	f000 82c8 	beq.w	8023120 <UART_SetConfig+0x6b0>
 8022b90:	2807      	cmp	r0, #7
 8022b92:	f000 82c8 	beq.w	8023126 <UART_SetConfig+0x6b6>
 8022b96:	2808      	cmp	r0, #8
 8022b98:	f000 82c8 	beq.w	802312c <UART_SetConfig+0x6bc>
 8022b9c:	2809      	cmp	r0, #9
 8022b9e:	f000 82c8 	beq.w	8023132 <UART_SetConfig+0x6c2>
 8022ba2:	280a      	cmp	r0, #10
 8022ba4:	f000 82c8 	beq.w	8023138 <UART_SetConfig+0x6c8>
 8022ba8:	280b      	cmp	r0, #11
 8022baa:	bf14      	ite	ne
 8022bac:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8022bb0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8022bb4:	6860      	ldr	r0, [r4, #4]
 8022bb6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8022bba:	fbb3 f3f0 	udiv	r3, r3, r0
 8022bbe:	e3bb      	b.n	8023338 <UART_SetConfig+0x8c8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022bc0:	4a78      	ldr	r2, [pc, #480]	; (8022da4 <UART_SetConfig+0x334>)
 8022bc2:	4293      	cmp	r3, r2
 8022bc4:	d10e      	bne.n	8022be4 <UART_SetConfig+0x174>
 8022bc6:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8022bca:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8022bce:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8022bd2:	2a40      	cmp	r2, #64	; 0x40
 8022bd4:	f000 83c1 	beq.w	802335a <UART_SetConfig+0x8ea>
 8022bd8:	d9aa      	bls.n	8022b30 <UART_SetConfig+0xc0>
 8022bda:	2a80      	cmp	r2, #128	; 0x80
 8022bdc:	f000 8378 	beq.w	80232d0 <UART_SetConfig+0x860>
 8022be0:	2ac0      	cmp	r2, #192	; 0xc0
 8022be2:	e7b7      	b.n	8022b54 <UART_SetConfig+0xe4>
 8022be4:	4a70      	ldr	r2, [pc, #448]	; (8022da8 <UART_SetConfig+0x338>)
 8022be6:	4293      	cmp	r3, r2
 8022be8:	d111      	bne.n	8022c0e <UART_SetConfig+0x19e>
 8022bea:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8022bee:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8022bf2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8022bf6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8022bfa:	f000 83ae 	beq.w	802335a <UART_SetConfig+0x8ea>
 8022bfe:	d997      	bls.n	8022b30 <UART_SetConfig+0xc0>
 8022c00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8022c04:	f000 8364 	beq.w	80232d0 <UART_SetConfig+0x860>
 8022c08:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8022c0c:	e7a2      	b.n	8022b54 <UART_SetConfig+0xe4>
 8022c0e:	4a5f      	ldr	r2, [pc, #380]	; (8022d8c <UART_SetConfig+0x31c>)
 8022c10:	4293      	cmp	r3, r2
 8022c12:	d194      	bne.n	8022b3e <UART_SetConfig+0xce>
 8022c14:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8022c18:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8022c1c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8022c20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8022c24:	f000 8399 	beq.w	802335a <UART_SetConfig+0x8ea>
 8022c28:	d982      	bls.n	8022b30 <UART_SetConfig+0xc0>
 8022c2a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8022c2e:	f000 834f 	beq.w	80232d0 <UART_SetConfig+0x860>
 8022c32:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8022c36:	e78d      	b.n	8022b54 <UART_SetConfig+0xe4>
  if (UART_INSTANCE_LOWPOWER(huart))
 8022c38:	4a54      	ldr	r2, [pc, #336]	; (8022d8c <UART_SetConfig+0x31c>)
 8022c3a:	4293      	cmp	r3, r2
 8022c3c:	f040 8398 	bne.w	8023370 <UART_SetConfig+0x900>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022c40:	f7ff fbf8 	bl	8022434 <HAL_RCC_GetPCLK1Freq>
 8022c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022c46:	b1fb      	cbz	r3, 8022c88 <UART_SetConfig+0x218>
 8022c48:	2b01      	cmp	r3, #1
 8022c4a:	d01f      	beq.n	8022c8c <UART_SetConfig+0x21c>
 8022c4c:	2b02      	cmp	r3, #2
 8022c4e:	d01f      	beq.n	8022c90 <UART_SetConfig+0x220>
 8022c50:	2b03      	cmp	r3, #3
 8022c52:	d01f      	beq.n	8022c94 <UART_SetConfig+0x224>
 8022c54:	2b04      	cmp	r3, #4
 8022c56:	d01f      	beq.n	8022c98 <UART_SetConfig+0x228>
 8022c58:	2b05      	cmp	r3, #5
 8022c5a:	d01f      	beq.n	8022c9c <UART_SetConfig+0x22c>
 8022c5c:	2b06      	cmp	r3, #6
 8022c5e:	d01f      	beq.n	8022ca0 <UART_SetConfig+0x230>
 8022c60:	2b07      	cmp	r3, #7
 8022c62:	d01f      	beq.n	8022ca4 <UART_SetConfig+0x234>
 8022c64:	2b08      	cmp	r3, #8
 8022c66:	d01f      	beq.n	8022ca8 <UART_SetConfig+0x238>
 8022c68:	2b09      	cmp	r3, #9
 8022c6a:	d01f      	beq.n	8022cac <UART_SetConfig+0x23c>
 8022c6c:	2b0a      	cmp	r3, #10
 8022c6e:	d01f      	beq.n	8022cb0 <UART_SetConfig+0x240>
 8022c70:	2b0b      	cmp	r3, #11
 8022c72:	bf14      	ite	ne
 8022c74:	2301      	movne	r3, #1
 8022c76:	f44f 7380 	moveq.w	r3, #256	; 0x100
        break;
 8022c7a:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022c7c:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8022c80:	2800      	cmp	r0, #0
 8022c82:	d141      	bne.n	8022d08 <UART_SetConfig+0x298>
 8022c84:	4602      	mov	r2, r0
 8022c86:	e046      	b.n	8022d16 <UART_SetConfig+0x2a6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022c88:	2301      	movs	r3, #1
 8022c8a:	e7f6      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022c8c:	2302      	movs	r3, #2
 8022c8e:	e7f4      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022c90:	2304      	movs	r3, #4
 8022c92:	e7f2      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022c94:	2306      	movs	r3, #6
 8022c96:	e7f0      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022c98:	2308      	movs	r3, #8
 8022c9a:	e7ee      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022c9c:	230a      	movs	r3, #10
 8022c9e:	e7ec      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022ca0:	230c      	movs	r3, #12
 8022ca2:	e7ea      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022ca4:	2310      	movs	r3, #16
 8022ca6:	e7e8      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022ca8:	2320      	movs	r3, #32
 8022caa:	e7e6      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022cac:	2340      	movs	r3, #64	; 0x40
 8022cae:	e7e4      	b.n	8022c7a <UART_SetConfig+0x20a>
 8022cb0:	2380      	movs	r3, #128	; 0x80
 8022cb2:	e7e2      	b.n	8022c7a <UART_SetConfig+0x20a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022cb4:	2800      	cmp	r0, #0
 8022cb6:	f000 809f 	beq.w	8022df8 <UART_SetConfig+0x388>
 8022cba:	2801      	cmp	r0, #1
 8022cbc:	f000 809f 	beq.w	8022dfe <UART_SetConfig+0x38e>
 8022cc0:	2802      	cmp	r0, #2
 8022cc2:	f000 809f 	beq.w	8022e04 <UART_SetConfig+0x394>
 8022cc6:	2803      	cmp	r0, #3
 8022cc8:	f04f 0102 	mov.w	r1, #2
 8022ccc:	f000 809d 	beq.w	8022e0a <UART_SetConfig+0x39a>
 8022cd0:	2804      	cmp	r0, #4
 8022cd2:	f000 809c 	beq.w	8022e0e <UART_SetConfig+0x39e>
 8022cd6:	2805      	cmp	r0, #5
 8022cd8:	f000 809b 	beq.w	8022e12 <UART_SetConfig+0x3a2>
 8022cdc:	2806      	cmp	r0, #6
 8022cde:	f000 809a 	beq.w	8022e16 <UART_SetConfig+0x3a6>
 8022ce2:	2807      	cmp	r0, #7
 8022ce4:	f000 8099 	beq.w	8022e1a <UART_SetConfig+0x3aa>
 8022ce8:	2808      	cmp	r0, #8
 8022cea:	f000 8098 	beq.w	8022e1e <UART_SetConfig+0x3ae>
 8022cee:	2809      	cmp	r0, #9
 8022cf0:	f000 8097 	beq.w	8022e22 <UART_SetConfig+0x3b2>
 8022cf4:	280a      	cmp	r0, #10
 8022cf6:	f000 8096 	beq.w	8022e26 <UART_SetConfig+0x3b6>
 8022cfa:	4b2c      	ldr	r3, [pc, #176]	; (8022dac <UART_SetConfig+0x33c>)
 8022cfc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8022d00:	280b      	cmp	r0, #11
 8022d02:	bf14      	ite	ne
 8022d04:	4618      	movne	r0, r3
 8022d06:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8022d08:	6862      	ldr	r2, [r4, #4]
 8022d0a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8022d0e:	4283      	cmp	r3, r0
 8022d10:	f240 80ac 	bls.w	8022e6c <UART_SetConfig+0x3fc>
        ret = HAL_ERROR;
 8022d14:	2201      	movs	r2, #1
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8022d16:	2300      	movs	r3, #0
 8022d18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8022d1c:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8022d20:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;

  return ret;
}
 8022d22:	4610      	mov	r0, r2
 8022d24:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022d28:	f7fe ff8e 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 8022d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022d2e:	b1e3      	cbz	r3, 8022d6a <UART_SetConfig+0x2fa>
 8022d30:	2b01      	cmp	r3, #1
 8022d32:	d01c      	beq.n	8022d6e <UART_SetConfig+0x2fe>
 8022d34:	2b02      	cmp	r3, #2
 8022d36:	d01c      	beq.n	8022d72 <UART_SetConfig+0x302>
 8022d38:	2b03      	cmp	r3, #3
 8022d3a:	d01c      	beq.n	8022d76 <UART_SetConfig+0x306>
 8022d3c:	2b04      	cmp	r3, #4
 8022d3e:	d01c      	beq.n	8022d7a <UART_SetConfig+0x30a>
 8022d40:	2b05      	cmp	r3, #5
 8022d42:	d01c      	beq.n	8022d7e <UART_SetConfig+0x30e>
 8022d44:	2b06      	cmp	r3, #6
 8022d46:	d01c      	beq.n	8022d82 <UART_SetConfig+0x312>
 8022d48:	2b07      	cmp	r3, #7
 8022d4a:	d031      	beq.n	8022db0 <UART_SetConfig+0x340>
 8022d4c:	2b08      	cmp	r3, #8
 8022d4e:	d031      	beq.n	8022db4 <UART_SetConfig+0x344>
 8022d50:	2b09      	cmp	r3, #9
 8022d52:	d031      	beq.n	8022db8 <UART_SetConfig+0x348>
 8022d54:	2b0a      	cmp	r3, #10
 8022d56:	d031      	beq.n	8022dbc <UART_SetConfig+0x34c>
 8022d58:	2b0b      	cmp	r3, #11
 8022d5a:	bf14      	ite	ne
 8022d5c:	2301      	movne	r3, #1
 8022d5e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8022d62:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8022d66:	2104      	movs	r1, #4
 8022d68:	e78a      	b.n	8022c80 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022d6a:	2301      	movs	r3, #1
 8022d6c:	e7f9      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d6e:	2302      	movs	r3, #2
 8022d70:	e7f7      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d72:	2304      	movs	r3, #4
 8022d74:	e7f5      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d76:	2306      	movs	r3, #6
 8022d78:	e7f3      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d7a:	2308      	movs	r3, #8
 8022d7c:	e7f1      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d7e:	230a      	movs	r3, #10
 8022d80:	e7ef      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d82:	230c      	movs	r3, #12
 8022d84:	e7ed      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022d86:	bf00      	nop
 8022d88:	cfff69f3 	.word	0xcfff69f3
 8022d8c:	40008000 	.word	0x40008000
 8022d90:	40013800 	.word	0x40013800
 8022d94:	40021000 	.word	0x40021000
 8022d98:	08029ec0 	.word	0x08029ec0
 8022d9c:	40004400 	.word	0x40004400
 8022da0:	40004800 	.word	0x40004800
 8022da4:	40004c00 	.word	0x40004c00
 8022da8:	40005000 	.word	0x40005000
 8022dac:	00f42400 	.word	0x00f42400
 8022db0:	2310      	movs	r3, #16
 8022db2:	e7d6      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022db4:	2320      	movs	r3, #32
 8022db6:	e7d4      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022db8:	2340      	movs	r3, #64	; 0x40
 8022dba:	e7d2      	b.n	8022d62 <UART_SetConfig+0x2f2>
 8022dbc:	2380      	movs	r3, #128	; 0x80
 8022dbe:	e7d0      	b.n	8022d62 <UART_SetConfig+0x2f2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022dc0:	2108      	movs	r1, #8
 8022dc2:	b390      	cbz	r0, 8022e2a <UART_SetConfig+0x3ba>
 8022dc4:	2801      	cmp	r0, #1
 8022dc6:	d033      	beq.n	8022e30 <UART_SetConfig+0x3c0>
 8022dc8:	2802      	cmp	r0, #2
 8022dca:	d034      	beq.n	8022e36 <UART_SetConfig+0x3c6>
 8022dcc:	2803      	cmp	r0, #3
 8022dce:	d035      	beq.n	8022e3c <UART_SetConfig+0x3cc>
 8022dd0:	2804      	cmp	r0, #4
 8022dd2:	d036      	beq.n	8022e42 <UART_SetConfig+0x3d2>
 8022dd4:	2805      	cmp	r0, #5
 8022dd6:	d037      	beq.n	8022e48 <UART_SetConfig+0x3d8>
 8022dd8:	2806      	cmp	r0, #6
 8022dda:	d038      	beq.n	8022e4e <UART_SetConfig+0x3de>
 8022ddc:	2807      	cmp	r0, #7
 8022dde:	d039      	beq.n	8022e54 <UART_SetConfig+0x3e4>
 8022de0:	2808      	cmp	r0, #8
 8022de2:	d03a      	beq.n	8022e5a <UART_SetConfig+0x3ea>
 8022de4:	2809      	cmp	r0, #9
 8022de6:	d03b      	beq.n	8022e60 <UART_SetConfig+0x3f0>
 8022de8:	280a      	cmp	r0, #10
 8022dea:	d03c      	beq.n	8022e66 <UART_SetConfig+0x3f6>
 8022dec:	280b      	cmp	r0, #11
 8022dee:	bf0c      	ite	eq
 8022df0:	2080      	moveq	r0, #128	; 0x80
 8022df2:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8022df6:	e787      	b.n	8022d08 <UART_SetConfig+0x298>
 8022df8:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022dfa:	48a3      	ldr	r0, [pc, #652]	; (8023088 <UART_SetConfig+0x618>)
 8022dfc:	e784      	b.n	8022d08 <UART_SetConfig+0x298>
 8022dfe:	2102      	movs	r1, #2
 8022e00:	48a2      	ldr	r0, [pc, #648]	; (802308c <UART_SetConfig+0x61c>)
 8022e02:	e781      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e04:	4601      	mov	r1, r0
 8022e06:	48a2      	ldr	r0, [pc, #648]	; (8023090 <UART_SetConfig+0x620>)
 8022e08:	e77e      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e0a:	48a2      	ldr	r0, [pc, #648]	; (8023094 <UART_SetConfig+0x624>)
 8022e0c:	e77c      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e0e:	48a2      	ldr	r0, [pc, #648]	; (8023098 <UART_SetConfig+0x628>)
 8022e10:	e77a      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e12:	48a2      	ldr	r0, [pc, #648]	; (802309c <UART_SetConfig+0x62c>)
 8022e14:	e778      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e16:	48a2      	ldr	r0, [pc, #648]	; (80230a0 <UART_SetConfig+0x630>)
 8022e18:	e776      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e1a:	48a2      	ldr	r0, [pc, #648]	; (80230a4 <UART_SetConfig+0x634>)
 8022e1c:	e774      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e1e:	48a2      	ldr	r0, [pc, #648]	; (80230a8 <UART_SetConfig+0x638>)
 8022e20:	e772      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e22:	48a2      	ldr	r0, [pc, #648]	; (80230ac <UART_SetConfig+0x63c>)
 8022e24:	e770      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e26:	48a2      	ldr	r0, [pc, #648]	; (80230b0 <UART_SetConfig+0x640>)
 8022e28:	e76e      	b.n	8022d08 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8022e2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8022e2e:	e76b      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8022e34:	e768      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8022e3a:	e765      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e3c:	f241 5055 	movw	r0, #5461	; 0x1555
 8022e40:	e762      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8022e46:	e75f      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e48:	f640 40cc 	movw	r0, #3276	; 0xccc
 8022e4c:	e75c      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e4e:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8022e52:	e759      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022e58:	e756      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8022e5e:	e753      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8022e64:	e750      	b.n	8022d08 <UART_SetConfig+0x298>
 8022e66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8022e6a:	e74d      	b.n	8022d08 <UART_SetConfig+0x298>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8022e6c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8022e70:	f63f af50 	bhi.w	8022d14 <UART_SetConfig+0x2a4>
        switch (clocksource)
 8022e74:	2908      	cmp	r1, #8
 8022e76:	f200 80d1 	bhi.w	802301c <UART_SetConfig+0x5ac>
 8022e7a:	e8df f001 	tbb	[pc, r1]
 8022e7e:	cf05      	.short	0xcf05
 8022e80:	cf7dcf41 	.word	0xcf7dcf41
 8022e84:	cfcf      	.short	0xcfcf
 8022e86:	96          	.byte	0x96
 8022e87:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 8022e88:	f7ff fad4 	bl	8022434 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	f000 8089 	beq.w	8022fa6 <UART_SetConfig+0x536>
 8022e94:	2b01      	cmp	r3, #1
 8022e96:	d072      	beq.n	8022f7e <UART_SetConfig+0x50e>
 8022e98:	2b02      	cmp	r3, #2
 8022e9a:	d072      	beq.n	8022f82 <UART_SetConfig+0x512>
 8022e9c:	2b03      	cmp	r3, #3
 8022e9e:	d072      	beq.n	8022f86 <UART_SetConfig+0x516>
 8022ea0:	2b04      	cmp	r3, #4
 8022ea2:	d072      	beq.n	8022f8a <UART_SetConfig+0x51a>
 8022ea4:	2b05      	cmp	r3, #5
 8022ea6:	d072      	beq.n	8022f8e <UART_SetConfig+0x51e>
 8022ea8:	2b06      	cmp	r3, #6
 8022eaa:	d072      	beq.n	8022f92 <UART_SetConfig+0x522>
 8022eac:	2b07      	cmp	r3, #7
 8022eae:	d072      	beq.n	8022f96 <UART_SetConfig+0x526>
 8022eb0:	2b08      	cmp	r3, #8
 8022eb2:	d072      	beq.n	8022f9a <UART_SetConfig+0x52a>
 8022eb4:	2b09      	cmp	r3, #9
 8022eb6:	d072      	beq.n	8022f9e <UART_SetConfig+0x52e>
 8022eb8:	2b0a      	cmp	r3, #10
 8022eba:	d072      	beq.n	8022fa2 <UART_SetConfig+0x532>
 8022ebc:	2b0b      	cmp	r3, #11
 8022ebe:	d172      	bne.n	8022fa6 <UART_SetConfig+0x536>
 8022ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	2100      	movs	r1, #0
 8022ec8:	f7f9 fa92 	bl	801c3f0 <__aeabi_uldivmod>
 8022ecc:	6865      	ldr	r5, [r4, #4]
 8022ece:	020f      	lsls	r7, r1, #8
 8022ed0:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8022ed4:	0206      	lsls	r6, r0, #8
 8022ed6:	0868      	lsrs	r0, r5, #1
 8022ed8:	eb16 0b00 	adds.w	fp, r6, r0
 8022edc:	f147 0c00 	adc.w	ip, r7, #0
 8022ee0:	462a      	mov	r2, r5
 8022ee2:	2300      	movs	r3, #0
 8022ee4:	4658      	mov	r0, fp
 8022ee6:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022ee8:	f7f9 fa82 	bl	801c3f0 <__aeabi_uldivmod>
            break;
 8022eec:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8022eee:	4b71      	ldr	r3, [pc, #452]	; (80230b4 <UART_SetConfig+0x644>)
 8022ef0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8022ef4:	4299      	cmp	r1, r3
 8022ef6:	f63f af0d 	bhi.w	8022d14 <UART_SetConfig+0x2a4>
          huart->Instance->BRR = usartdiv;
 8022efa:	6823      	ldr	r3, [r4, #0]
 8022efc:	60d8      	str	r0, [r3, #12]
 8022efe:	e70a      	b.n	8022d16 <UART_SetConfig+0x2a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d036      	beq.n	8022f74 <UART_SetConfig+0x504>
 8022f06:	2b01      	cmp	r3, #1
 8022f08:	d016      	beq.n	8022f38 <UART_SetConfig+0x4c8>
 8022f0a:	2b02      	cmp	r3, #2
 8022f0c:	d016      	beq.n	8022f3c <UART_SetConfig+0x4cc>
 8022f0e:	2b03      	cmp	r3, #3
 8022f10:	d016      	beq.n	8022f40 <UART_SetConfig+0x4d0>
 8022f12:	2b04      	cmp	r3, #4
 8022f14:	d01e      	beq.n	8022f54 <UART_SetConfig+0x4e4>
 8022f16:	2b05      	cmp	r3, #5
 8022f18:	d01e      	beq.n	8022f58 <UART_SetConfig+0x4e8>
 8022f1a:	2b06      	cmp	r3, #6
 8022f1c:	d01e      	beq.n	8022f5c <UART_SetConfig+0x4ec>
 8022f1e:	2b07      	cmp	r3, #7
 8022f20:	d020      	beq.n	8022f64 <UART_SetConfig+0x4f4>
 8022f22:	2b08      	cmp	r3, #8
 8022f24:	d020      	beq.n	8022f68 <UART_SetConfig+0x4f8>
 8022f26:	2b09      	cmp	r3, #9
 8022f28:	d020      	beq.n	8022f6c <UART_SetConfig+0x4fc>
 8022f2a:	2b0a      	cmp	r3, #10
 8022f2c:	d020      	beq.n	8022f70 <UART_SetConfig+0x500>
 8022f2e:	2b0b      	cmp	r3, #11
 8022f30:	d120      	bne.n	8022f74 <UART_SetConfig+0x504>
 8022f32:	4e55      	ldr	r6, [pc, #340]	; (8023088 <UART_SetConfig+0x618>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f34:	2700      	movs	r7, #0
 8022f36:	e006      	b.n	8022f46 <UART_SetConfig+0x4d6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f38:	4e5f      	ldr	r6, [pc, #380]	; (80230b8 <UART_SetConfig+0x648>)
 8022f3a:	e7fb      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f3c:	4e5f      	ldr	r6, [pc, #380]	; (80230bc <UART_SetConfig+0x64c>)
 8022f3e:	e7f9      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f40:	a74d      	add	r7, pc, #308	; (adr r7, 8023078 <UART_SetConfig+0x608>)
 8022f42:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f46:	0855      	lsrs	r5, r2, #1
 8022f48:	1970      	adds	r0, r6, r5
 8022f4a:	f04f 0300 	mov.w	r3, #0
 8022f4e:	f147 0100 	adc.w	r1, r7, #0
 8022f52:	e7c9      	b.n	8022ee8 <UART_SetConfig+0x478>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f54:	4e5a      	ldr	r6, [pc, #360]	; (80230c0 <UART_SetConfig+0x650>)
 8022f56:	e7ed      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f58:	4e5a      	ldr	r6, [pc, #360]	; (80230c4 <UART_SetConfig+0x654>)
 8022f5a:	e7eb      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f5c:	a748      	add	r7, pc, #288	; (adr r7, 8023080 <UART_SetConfig+0x610>)
 8022f5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022f62:	e7f0      	b.n	8022f46 <UART_SetConfig+0x4d6>
 8022f64:	4e58      	ldr	r6, [pc, #352]	; (80230c8 <UART_SetConfig+0x658>)
 8022f66:	e7e5      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f68:	4e58      	ldr	r6, [pc, #352]	; (80230cc <UART_SetConfig+0x65c>)
 8022f6a:	e7e3      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f6c:	4e58      	ldr	r6, [pc, #352]	; (80230d0 <UART_SetConfig+0x660>)
 8022f6e:	e7e1      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f70:	4e58      	ldr	r6, [pc, #352]	; (80230d4 <UART_SetConfig+0x664>)
 8022f72:	e7df      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022f74:	4e58      	ldr	r6, [pc, #352]	; (80230d8 <UART_SetConfig+0x668>)
 8022f76:	e7dd      	b.n	8022f34 <UART_SetConfig+0x4c4>
            pclk = HAL_RCC_GetSysClockFreq();
 8022f78:	f7fe fe66 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 8022f7c:	e786      	b.n	8022e8c <UART_SetConfig+0x41c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022f7e:	2202      	movs	r2, #2
 8022f80:	e7a0      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f82:	2204      	movs	r2, #4
 8022f84:	e79e      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f86:	2206      	movs	r2, #6
 8022f88:	e79c      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f8a:	2208      	movs	r2, #8
 8022f8c:	e79a      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f8e:	220a      	movs	r2, #10
 8022f90:	e798      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f92:	220c      	movs	r2, #12
 8022f94:	e796      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f96:	2210      	movs	r2, #16
 8022f98:	e794      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f9a:	2220      	movs	r2, #32
 8022f9c:	e792      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022f9e:	2240      	movs	r2, #64	; 0x40
 8022fa0:	e790      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022fa2:	2280      	movs	r2, #128	; 0x80
 8022fa4:	e78e      	b.n	8022ec4 <UART_SetConfig+0x454>
 8022fa6:	2201      	movs	r2, #1
 8022fa8:	e78c      	b.n	8022ec4 <UART_SetConfig+0x454>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022fac:	b39b      	cbz	r3, 8023016 <UART_SetConfig+0x5a6>
 8022fae:	2b01      	cmp	r3, #1
 8022fb0:	d016      	beq.n	8022fe0 <UART_SetConfig+0x570>
 8022fb2:	2b02      	cmp	r3, #2
 8022fb4:	d017      	beq.n	8022fe6 <UART_SetConfig+0x576>
 8022fb6:	2b03      	cmp	r3, #3
 8022fb8:	d018      	beq.n	8022fec <UART_SetConfig+0x57c>
 8022fba:	2b04      	cmp	r3, #4
 8022fbc:	d018      	beq.n	8022ff0 <UART_SetConfig+0x580>
 8022fbe:	2b05      	cmp	r3, #5
 8022fc0:	d019      	beq.n	8022ff6 <UART_SetConfig+0x586>
 8022fc2:	2b06      	cmp	r3, #6
 8022fc4:	d019      	beq.n	8022ffa <UART_SetConfig+0x58a>
 8022fc6:	2b07      	cmp	r3, #7
 8022fc8:	d019      	beq.n	8022ffe <UART_SetConfig+0x58e>
 8022fca:	2b08      	cmp	r3, #8
 8022fcc:	d01a      	beq.n	8023004 <UART_SetConfig+0x594>
 8022fce:	2b09      	cmp	r3, #9
 8022fd0:	d01b      	beq.n	802300a <UART_SetConfig+0x59a>
 8022fd2:	2b0a      	cmp	r3, #10
 8022fd4:	d01c      	beq.n	8023010 <UART_SetConfig+0x5a0>
 8022fd6:	2b0b      	cmp	r3, #11
 8022fd8:	d11d      	bne.n	8023016 <UART_SetConfig+0x5a6>
 8022fda:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8022fde:	e7a9      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022fe0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8022fe4:	e7a6      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022fe6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8022fea:	e7a3      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022fec:	4e3b      	ldr	r6, [pc, #236]	; (80230dc <UART_SetConfig+0x66c>)
 8022fee:	e7a1      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022ff0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8022ff4:	e79e      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022ff6:	4e3a      	ldr	r6, [pc, #232]	; (80230e0 <UART_SetConfig+0x670>)
 8022ff8:	e79c      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022ffa:	4e3a      	ldr	r6, [pc, #232]	; (80230e4 <UART_SetConfig+0x674>)
 8022ffc:	e79a      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8022ffe:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8023002:	e797      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8023004:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8023008:	e794      	b.n	8022f34 <UART_SetConfig+0x4c4>
 802300a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 802300e:	e791      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8023010:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8023014:	e78e      	b.n	8022f34 <UART_SetConfig+0x4c4>
 8023016:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 802301a:	e78b      	b.n	8022f34 <UART_SetConfig+0x4c4>
            ret = HAL_ERROR;
 802301c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 802301e:	2000      	movs	r0, #0
 8023020:	e765      	b.n	8022eee <UART_SetConfig+0x47e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8023022:	f7ff fa19 	bl	8022458 <HAL_RCC_GetPCLK2Freq>
 8023026:	e1a9      	b.n	802337c <UART_SetConfig+0x90c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023028:	482a      	ldr	r0, [pc, #168]	; (80230d4 <UART_SetConfig+0x664>)
 802302a:	e180      	b.n	802332e <UART_SetConfig+0x8be>
 802302c:	4816      	ldr	r0, [pc, #88]	; (8023088 <UART_SetConfig+0x618>)
 802302e:	e17e      	b.n	802332e <UART_SetConfig+0x8be>
 8023030:	4816      	ldr	r0, [pc, #88]	; (802308c <UART_SetConfig+0x61c>)
 8023032:	e17c      	b.n	802332e <UART_SetConfig+0x8be>
 8023034:	482c      	ldr	r0, [pc, #176]	; (80230e8 <UART_SetConfig+0x678>)
 8023036:	e17a      	b.n	802332e <UART_SetConfig+0x8be>
 8023038:	4815      	ldr	r0, [pc, #84]	; (8023090 <UART_SetConfig+0x620>)
 802303a:	e178      	b.n	802332e <UART_SetConfig+0x8be>
 802303c:	482b      	ldr	r0, [pc, #172]	; (80230ec <UART_SetConfig+0x67c>)
 802303e:	e176      	b.n	802332e <UART_SetConfig+0x8be>
 8023040:	4814      	ldr	r0, [pc, #80]	; (8023094 <UART_SetConfig+0x624>)
 8023042:	e174      	b.n	802332e <UART_SetConfig+0x8be>
 8023044:	4814      	ldr	r0, [pc, #80]	; (8023098 <UART_SetConfig+0x628>)
 8023046:	e172      	b.n	802332e <UART_SetConfig+0x8be>
 8023048:	4816      	ldr	r0, [pc, #88]	; (80230a4 <UART_SetConfig+0x634>)
 802304a:	e170      	b.n	802332e <UART_SetConfig+0x8be>
 802304c:	4816      	ldr	r0, [pc, #88]	; (80230a8 <UART_SetConfig+0x638>)
 802304e:	e16e      	b.n	802332e <UART_SetConfig+0x8be>
 8023050:	4816      	ldr	r0, [pc, #88]	; (80230ac <UART_SetConfig+0x63c>)
 8023052:	e16c      	b.n	802332e <UART_SetConfig+0x8be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023054:	2201      	movs	r2, #1
 8023056:	e1b8      	b.n	80233ca <UART_SetConfig+0x95a>
 8023058:	2202      	movs	r2, #2
 802305a:	e1b6      	b.n	80233ca <UART_SetConfig+0x95a>
 802305c:	2204      	movs	r2, #4
 802305e:	e1b4      	b.n	80233ca <UART_SetConfig+0x95a>
 8023060:	2206      	movs	r2, #6
 8023062:	e1b2      	b.n	80233ca <UART_SetConfig+0x95a>
 8023064:	2208      	movs	r2, #8
 8023066:	e1b0      	b.n	80233ca <UART_SetConfig+0x95a>
 8023068:	220a      	movs	r2, #10
 802306a:	e1ae      	b.n	80233ca <UART_SetConfig+0x95a>
 802306c:	220c      	movs	r2, #12
 802306e:	e1ac      	b.n	80233ca <UART_SetConfig+0x95a>
 8023070:	2210      	movs	r2, #16
 8023072:	e1aa      	b.n	80233ca <UART_SetConfig+0x95a>
 8023074:	f3af 8000 	nop.w
 8023078:	28b0aa00 	.word	0x28b0aa00
 802307c:	00000000 	.word	0x00000000
 8023080:	14585500 	.word	0x14585500
 8023084:	00000000 	.word	0x00000000
 8023088:	00f42400 	.word	0x00f42400
 802308c:	007a1200 	.word	0x007a1200
 8023090:	003d0900 	.word	0x003d0900
 8023094:	0028b0aa 	.word	0x0028b0aa
 8023098:	001e8480 	.word	0x001e8480
 802309c:	00186a00 	.word	0x00186a00
 80230a0:	00145855 	.word	0x00145855
 80230a4:	000f4240 	.word	0x000f4240
 80230a8:	0007a120 	.word	0x0007a120
 80230ac:	0003d090 	.word	0x0003d090
 80230b0:	0001e848 	.word	0x0001e848
 80230b4:	000ffcff 	.word	0x000ffcff
 80230b8:	7a120000 	.word	0x7a120000
 80230bc:	3d090000 	.word	0x3d090000
 80230c0:	1e848000 	.word	0x1e848000
 80230c4:	186a0000 	.word	0x186a0000
 80230c8:	0f424000 	.word	0x0f424000
 80230cc:	07a12000 	.word	0x07a12000
 80230d0:	03d09000 	.word	0x03d09000
 80230d4:	01e84800 	.word	0x01e84800
 80230d8:	f4240000 	.word	0xf4240000
 80230dc:	00155500 	.word	0x00155500
 80230e0:	000ccc00 	.word	0x000ccc00
 80230e4:	000aaa00 	.word	0x000aaa00
 80230e8:	00516154 	.word	0x00516154
 80230ec:	0030d400 	.word	0x0030d400
 80230f0:	2220      	movs	r2, #32
 80230f2:	e16a      	b.n	80233ca <UART_SetConfig+0x95a>
 80230f4:	2240      	movs	r2, #64	; 0x40
 80230f6:	e168      	b.n	80233ca <UART_SetConfig+0x95a>
 80230f8:	2280      	movs	r2, #128	; 0x80
 80230fa:	e166      	b.n	80233ca <UART_SetConfig+0x95a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80230fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023100:	e558      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023106:	e555      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802310c:	e552      	b.n	8022bb4 <UART_SetConfig+0x144>
 802310e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8023112:	e54f      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023118:	e54c      	b.n	8022bb4 <UART_SetConfig+0x144>
 802311a:	f641 1398 	movw	r3, #6552	; 0x1998
 802311e:	e549      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023120:	f241 5354 	movw	r3, #5460	; 0x1554
 8023124:	e546      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802312a:	e543      	b.n	8022bb4 <UART_SetConfig+0x144>
 802312c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023130:	e540      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023136:	e53d      	b.n	8022bb4 <UART_SetConfig+0x144>
 8023138:	f44f 7300 	mov.w	r3, #512	; 0x200
 802313c:	e53a      	b.n	8022bb4 <UART_SetConfig+0x144>
        ret = HAL_ERROR;
 802313e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8023140:	2300      	movs	r3, #0
 8023142:	e0fb      	b.n	802333c <UART_SetConfig+0x8cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8023144:	f7ff f976 	bl	8022434 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802314a:	2b00      	cmp	r3, #0
 802314c:	d069      	beq.n	8023222 <UART_SetConfig+0x7b2>
 802314e:	2b01      	cmp	r3, #1
 8023150:	d069      	beq.n	8023226 <UART_SetConfig+0x7b6>
 8023152:	2b02      	cmp	r3, #2
 8023154:	d069      	beq.n	802322a <UART_SetConfig+0x7ba>
 8023156:	2b03      	cmp	r3, #3
 8023158:	d069      	beq.n	802322e <UART_SetConfig+0x7be>
 802315a:	2b04      	cmp	r3, #4
 802315c:	d069      	beq.n	8023232 <UART_SetConfig+0x7c2>
 802315e:	2b05      	cmp	r3, #5
 8023160:	d069      	beq.n	8023236 <UART_SetConfig+0x7c6>
 8023162:	2b06      	cmp	r3, #6
 8023164:	d069      	beq.n	802323a <UART_SetConfig+0x7ca>
 8023166:	2b07      	cmp	r3, #7
 8023168:	d069      	beq.n	802323e <UART_SetConfig+0x7ce>
 802316a:	2b08      	cmp	r3, #8
 802316c:	d069      	beq.n	8023242 <UART_SetConfig+0x7d2>
 802316e:	2b09      	cmp	r3, #9
 8023170:	d069      	beq.n	8023246 <UART_SetConfig+0x7d6>
 8023172:	2b0a      	cmp	r3, #10
 8023174:	d069      	beq.n	802324a <UART_SetConfig+0x7da>
 8023176:	2b0b      	cmp	r3, #11
 8023178:	bf14      	ite	ne
 802317a:	2301      	movne	r3, #1
 802317c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8023180:	6862      	ldr	r2, [r4, #4]
 8023182:	fbb0 f3f3 	udiv	r3, r0, r3
 8023186:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 802318a:	fbb3 f3f2 	udiv	r3, r3, r2
 802318e:	e023      	b.n	80231d8 <UART_SetConfig+0x768>
        pclk = HAL_RCC_GetPCLK2Freq();
 8023190:	f7ff f962 	bl	8022458 <HAL_RCC_GetPCLK2Freq>
 8023194:	e7d8      	b.n	8023148 <UART_SetConfig+0x6d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023196:	b358      	cbz	r0, 80231f0 <UART_SetConfig+0x780>
 8023198:	2801      	cmp	r0, #1
 802319a:	d02b      	beq.n	80231f4 <UART_SetConfig+0x784>
 802319c:	2802      	cmp	r0, #2
 802319e:	d02b      	beq.n	80231f8 <UART_SetConfig+0x788>
 80231a0:	2803      	cmp	r0, #3
 80231a2:	d02b      	beq.n	80231fc <UART_SetConfig+0x78c>
 80231a4:	2804      	cmp	r0, #4
 80231a6:	d02b      	beq.n	8023200 <UART_SetConfig+0x790>
 80231a8:	2805      	cmp	r0, #5
 80231aa:	d02b      	beq.n	8023204 <UART_SetConfig+0x794>
 80231ac:	2806      	cmp	r0, #6
 80231ae:	d02b      	beq.n	8023208 <UART_SetConfig+0x798>
 80231b0:	2807      	cmp	r0, #7
 80231b2:	d02b      	beq.n	802320c <UART_SetConfig+0x79c>
 80231b4:	2808      	cmp	r0, #8
 80231b6:	d02b      	beq.n	8023210 <UART_SetConfig+0x7a0>
 80231b8:	2809      	cmp	r0, #9
 80231ba:	d02b      	beq.n	8023214 <UART_SetConfig+0x7a4>
 80231bc:	280a      	cmp	r0, #10
 80231be:	d02b      	beq.n	8023218 <UART_SetConfig+0x7a8>
 80231c0:	4b92      	ldr	r3, [pc, #584]	; (802340c <UART_SetConfig+0x99c>)
 80231c2:	f24f 4224 	movw	r2, #62500	; 0xf424
 80231c6:	280b      	cmp	r0, #11
 80231c8:	bf14      	ite	ne
 80231ca:	4618      	movne	r0, r3
 80231cc:	4610      	moveq	r0, r2
 80231ce:	6863      	ldr	r3, [r4, #4]
 80231d0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80231d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80231d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80231da:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80231dc:	f1a3 0010 	sub.w	r0, r3, #16
 80231e0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80231e4:	4288      	cmp	r0, r1
 80231e6:	f63f ad95 	bhi.w	8022d14 <UART_SetConfig+0x2a4>
      huart->Instance->BRR = usartdiv;
 80231ea:	6821      	ldr	r1, [r4, #0]
 80231ec:	60cb      	str	r3, [r1, #12]
 80231ee:	e592      	b.n	8022d16 <UART_SetConfig+0x2a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80231f0:	4886      	ldr	r0, [pc, #536]	; (802340c <UART_SetConfig+0x99c>)
 80231f2:	e7ec      	b.n	80231ce <UART_SetConfig+0x75e>
 80231f4:	4886      	ldr	r0, [pc, #536]	; (8023410 <UART_SetConfig+0x9a0>)
 80231f6:	e7ea      	b.n	80231ce <UART_SetConfig+0x75e>
 80231f8:	4886      	ldr	r0, [pc, #536]	; (8023414 <UART_SetConfig+0x9a4>)
 80231fa:	e7e8      	b.n	80231ce <UART_SetConfig+0x75e>
 80231fc:	4886      	ldr	r0, [pc, #536]	; (8023418 <UART_SetConfig+0x9a8>)
 80231fe:	e7e6      	b.n	80231ce <UART_SetConfig+0x75e>
 8023200:	4886      	ldr	r0, [pc, #536]	; (802341c <UART_SetConfig+0x9ac>)
 8023202:	e7e4      	b.n	80231ce <UART_SetConfig+0x75e>
 8023204:	4886      	ldr	r0, [pc, #536]	; (8023420 <UART_SetConfig+0x9b0>)
 8023206:	e7e2      	b.n	80231ce <UART_SetConfig+0x75e>
 8023208:	4886      	ldr	r0, [pc, #536]	; (8023424 <UART_SetConfig+0x9b4>)
 802320a:	e7e0      	b.n	80231ce <UART_SetConfig+0x75e>
 802320c:	4886      	ldr	r0, [pc, #536]	; (8023428 <UART_SetConfig+0x9b8>)
 802320e:	e7de      	b.n	80231ce <UART_SetConfig+0x75e>
 8023210:	4886      	ldr	r0, [pc, #536]	; (802342c <UART_SetConfig+0x9bc>)
 8023212:	e7dc      	b.n	80231ce <UART_SetConfig+0x75e>
 8023214:	4886      	ldr	r0, [pc, #536]	; (8023430 <UART_SetConfig+0x9c0>)
 8023216:	e7da      	b.n	80231ce <UART_SetConfig+0x75e>
 8023218:	4886      	ldr	r0, [pc, #536]	; (8023434 <UART_SetConfig+0x9c4>)
 802321a:	e7d8      	b.n	80231ce <UART_SetConfig+0x75e>
        pclk = HAL_RCC_GetSysClockFreq();
 802321c:	f7fe fd14 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 8023220:	e792      	b.n	8023148 <UART_SetConfig+0x6d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023222:	2301      	movs	r3, #1
 8023224:	e7ac      	b.n	8023180 <UART_SetConfig+0x710>
 8023226:	2302      	movs	r3, #2
 8023228:	e7aa      	b.n	8023180 <UART_SetConfig+0x710>
 802322a:	2304      	movs	r3, #4
 802322c:	e7a8      	b.n	8023180 <UART_SetConfig+0x710>
 802322e:	2306      	movs	r3, #6
 8023230:	e7a6      	b.n	8023180 <UART_SetConfig+0x710>
 8023232:	2308      	movs	r3, #8
 8023234:	e7a4      	b.n	8023180 <UART_SetConfig+0x710>
 8023236:	230a      	movs	r3, #10
 8023238:	e7a2      	b.n	8023180 <UART_SetConfig+0x710>
 802323a:	230c      	movs	r3, #12
 802323c:	e7a0      	b.n	8023180 <UART_SetConfig+0x710>
 802323e:	2310      	movs	r3, #16
 8023240:	e79e      	b.n	8023180 <UART_SetConfig+0x710>
 8023242:	2320      	movs	r3, #32
 8023244:	e79c      	b.n	8023180 <UART_SetConfig+0x710>
 8023246:	2340      	movs	r3, #64	; 0x40
 8023248:	e79a      	b.n	8023180 <UART_SetConfig+0x710>
 802324a:	2380      	movs	r3, #128	; 0x80
 802324c:	e798      	b.n	8023180 <UART_SetConfig+0x710>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802324e:	b1f0      	cbz	r0, 802328e <UART_SetConfig+0x81e>
 8023250:	2801      	cmp	r0, #1
 8023252:	d01f      	beq.n	8023294 <UART_SetConfig+0x824>
 8023254:	2802      	cmp	r0, #2
 8023256:	d020      	beq.n	802329a <UART_SetConfig+0x82a>
 8023258:	2803      	cmp	r0, #3
 802325a:	d021      	beq.n	80232a0 <UART_SetConfig+0x830>
 802325c:	2804      	cmp	r0, #4
 802325e:	d022      	beq.n	80232a6 <UART_SetConfig+0x836>
 8023260:	2805      	cmp	r0, #5
 8023262:	d023      	beq.n	80232ac <UART_SetConfig+0x83c>
 8023264:	2806      	cmp	r0, #6
 8023266:	d024      	beq.n	80232b2 <UART_SetConfig+0x842>
 8023268:	2807      	cmp	r0, #7
 802326a:	d025      	beq.n	80232b8 <UART_SetConfig+0x848>
 802326c:	2808      	cmp	r0, #8
 802326e:	d026      	beq.n	80232be <UART_SetConfig+0x84e>
 8023270:	2809      	cmp	r0, #9
 8023272:	d027      	beq.n	80232c4 <UART_SetConfig+0x854>
 8023274:	280a      	cmp	r0, #10
 8023276:	d028      	beq.n	80232ca <UART_SetConfig+0x85a>
 8023278:	280b      	cmp	r0, #11
 802327a:	bf14      	ite	ne
 802327c:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8023280:	2380      	moveq	r3, #128	; 0x80
 8023282:	6860      	ldr	r0, [r4, #4]
 8023284:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8023288:	fbb3 f3f0 	udiv	r3, r3, r0
 802328c:	e7a4      	b.n	80231d8 <UART_SetConfig+0x768>
 802328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023292:	e7f6      	b.n	8023282 <UART_SetConfig+0x812>
 8023294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8023298:	e7f3      	b.n	8023282 <UART_SetConfig+0x812>
 802329a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802329e:	e7f0      	b.n	8023282 <UART_SetConfig+0x812>
 80232a0:	f241 5355 	movw	r3, #5461	; 0x1555
 80232a4:	e7ed      	b.n	8023282 <UART_SetConfig+0x812>
 80232a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80232aa:	e7ea      	b.n	8023282 <UART_SetConfig+0x812>
 80232ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 80232b0:	e7e7      	b.n	8023282 <UART_SetConfig+0x812>
 80232b2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80232b6:	e7e4      	b.n	8023282 <UART_SetConfig+0x812>
 80232b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80232bc:	e7e1      	b.n	8023282 <UART_SetConfig+0x812>
 80232be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80232c2:	e7de      	b.n	8023282 <UART_SetConfig+0x812>
 80232c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80232c8:	e7db      	b.n	8023282 <UART_SetConfig+0x812>
 80232ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80232ce:	e7d8      	b.n	8023282 <UART_SetConfig+0x812>
  if (UART_INSTANCE_LOWPOWER(huart))
 80232d0:	4a59      	ldr	r2, [pc, #356]	; (8023438 <UART_SetConfig+0x9c8>)
 80232d2:	4293      	cmp	r3, r2
 80232d4:	f43f acee 	beq.w	8022cb4 <UART_SetConfig+0x244>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80232d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80232dc:	f47f af5b 	bne.w	8023196 <UART_SetConfig+0x726>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80232e0:	2800      	cmp	r0, #0
 80232e2:	f43f aea1 	beq.w	8023028 <UART_SetConfig+0x5b8>
 80232e6:	2801      	cmp	r0, #1
 80232e8:	f43f aea0 	beq.w	802302c <UART_SetConfig+0x5bc>
 80232ec:	2802      	cmp	r0, #2
 80232ee:	f43f ae9f 	beq.w	8023030 <UART_SetConfig+0x5c0>
 80232f2:	2803      	cmp	r0, #3
 80232f4:	f43f ae9e 	beq.w	8023034 <UART_SetConfig+0x5c4>
 80232f8:	2804      	cmp	r0, #4
 80232fa:	f43f ae9d 	beq.w	8023038 <UART_SetConfig+0x5c8>
 80232fe:	2805      	cmp	r0, #5
 8023300:	f43f ae9c 	beq.w	802303c <UART_SetConfig+0x5cc>
 8023304:	2806      	cmp	r0, #6
 8023306:	f43f ae9b 	beq.w	8023040 <UART_SetConfig+0x5d0>
 802330a:	2807      	cmp	r0, #7
 802330c:	f43f ae9a 	beq.w	8023044 <UART_SetConfig+0x5d4>
 8023310:	2808      	cmp	r0, #8
 8023312:	f43f ae99 	beq.w	8023048 <UART_SetConfig+0x5d8>
 8023316:	2809      	cmp	r0, #9
 8023318:	f43f ae98 	beq.w	802304c <UART_SetConfig+0x5dc>
 802331c:	280a      	cmp	r0, #10
 802331e:	f43f ae97 	beq.w	8023050 <UART_SetConfig+0x5e0>
 8023322:	4b46      	ldr	r3, [pc, #280]	; (802343c <UART_SetConfig+0x9cc>)
 8023324:	4a43      	ldr	r2, [pc, #268]	; (8023434 <UART_SetConfig+0x9c4>)
 8023326:	280b      	cmp	r0, #11
 8023328:	bf14      	ite	ne
 802332a:	4618      	movne	r0, r3
 802332c:	4610      	moveq	r0, r2
 802332e:	6863      	ldr	r3, [r4, #4]
 8023330:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8023334:	fbb0 f3f3 	udiv	r3, r0, r3
 8023338:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 802333a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802333c:	f1a3 0010 	sub.w	r0, r3, #16
 8023340:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8023344:	4288      	cmp	r0, r1
 8023346:	f63f ace5 	bhi.w	8022d14 <UART_SetConfig+0x2a4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802334a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 802334e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8023350:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8023354:	430b      	orrs	r3, r1
 8023356:	60c3      	str	r3, [r0, #12]
 8023358:	e4dd      	b.n	8022d16 <UART_SetConfig+0x2a6>
  if (UART_INSTANCE_LOWPOWER(huart))
 802335a:	4a37      	ldr	r2, [pc, #220]	; (8023438 <UART_SetConfig+0x9c8>)
 802335c:	4293      	cmp	r3, r2
 802335e:	f43f ace3 	beq.w	8022d28 <UART_SetConfig+0x2b8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023362:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8023366:	f47f af59 	bne.w	802321c <UART_SetConfig+0x7ac>
        pclk = HAL_RCC_GetSysClockFreq();
 802336a:	f7fe fc6d 	bl	8021c48 <HAL_RCC_GetSysClockFreq>
 802336e:	e005      	b.n	802337c <UART_SetConfig+0x90c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023370:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8023374:	f47f aee6 	bne.w	8023144 <UART_SetConfig+0x6d4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8023378:	f7ff f85c 	bl	8022434 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802337c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802337e:	2900      	cmp	r1, #0
 8023380:	f43f ae68 	beq.w	8023054 <UART_SetConfig+0x5e4>
 8023384:	2901      	cmp	r1, #1
 8023386:	f43f ae67 	beq.w	8023058 <UART_SetConfig+0x5e8>
 802338a:	2902      	cmp	r1, #2
 802338c:	f43f ae66 	beq.w	802305c <UART_SetConfig+0x5ec>
 8023390:	2903      	cmp	r1, #3
 8023392:	f43f ae65 	beq.w	8023060 <UART_SetConfig+0x5f0>
 8023396:	2904      	cmp	r1, #4
 8023398:	f43f ae64 	beq.w	8023064 <UART_SetConfig+0x5f4>
 802339c:	2905      	cmp	r1, #5
 802339e:	f43f ae63 	beq.w	8023068 <UART_SetConfig+0x5f8>
 80233a2:	2906      	cmp	r1, #6
 80233a4:	f43f ae62 	beq.w	802306c <UART_SetConfig+0x5fc>
 80233a8:	2907      	cmp	r1, #7
 80233aa:	f43f ae61 	beq.w	8023070 <UART_SetConfig+0x600>
 80233ae:	2908      	cmp	r1, #8
 80233b0:	f43f ae9e 	beq.w	80230f0 <UART_SetConfig+0x680>
 80233b4:	2909      	cmp	r1, #9
 80233b6:	f43f ae9d 	beq.w	80230f4 <UART_SetConfig+0x684>
 80233ba:	290a      	cmp	r1, #10
 80233bc:	f43f ae9c 	beq.w	80230f8 <UART_SetConfig+0x688>
 80233c0:	290b      	cmp	r1, #11
 80233c2:	bf14      	ite	ne
 80233c4:	2201      	movne	r2, #1
 80233c6:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80233ca:	6861      	ldr	r1, [r4, #4]
 80233cc:	fbb0 f2f2 	udiv	r2, r0, r2
 80233d0:	084b      	lsrs	r3, r1, #1
 80233d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80233d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80233da:	e7ad      	b.n	8023338 <UART_SetConfig+0x8c8>
    switch (clocksource)
 80233dc:	2b08      	cmp	r3, #8
 80233de:	f63f ac99 	bhi.w	8022d14 <UART_SetConfig+0x2a4>
 80233e2:	a201      	add	r2, pc, #4	; (adr r2, 80233e8 <UART_SetConfig+0x978>)
 80233e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80233e8:	08023145 	.word	0x08023145
 80233ec:	08023191 	.word	0x08023191
 80233f0:	08023197 	.word	0x08023197
 80233f4:	08022d15 	.word	0x08022d15
 80233f8:	0802321d 	.word	0x0802321d
 80233fc:	08022d15 	.word	0x08022d15
 8023400:	08022d15 	.word	0x08022d15
 8023404:	08022d15 	.word	0x08022d15
 8023408:	0802324f 	.word	0x0802324f
 802340c:	00f42400 	.word	0x00f42400
 8023410:	007a1200 	.word	0x007a1200
 8023414:	003d0900 	.word	0x003d0900
 8023418:	0028b0aa 	.word	0x0028b0aa
 802341c:	001e8480 	.word	0x001e8480
 8023420:	00186a00 	.word	0x00186a00
 8023424:	00145855 	.word	0x00145855
 8023428:	000f4240 	.word	0x000f4240
 802342c:	0007a120 	.word	0x0007a120
 8023430:	0003d090 	.word	0x0003d090
 8023434:	0001e848 	.word	0x0001e848
 8023438:	40008000 	.word	0x40008000
 802343c:	01e84800 	.word	0x01e84800

08023440 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023442:	07da      	lsls	r2, r3, #31
{
 8023444:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023446:	d506      	bpl.n	8023456 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8023448:	6801      	ldr	r1, [r0, #0]
 802344a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 802344c:	684a      	ldr	r2, [r1, #4]
 802344e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8023452:	4322      	orrs	r2, r4
 8023454:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8023456:	079c      	lsls	r4, r3, #30
 8023458:	d506      	bpl.n	8023468 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802345a:	6801      	ldr	r1, [r0, #0]
 802345c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 802345e:	684a      	ldr	r2, [r1, #4]
 8023460:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8023464:	4322      	orrs	r2, r4
 8023466:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8023468:	0759      	lsls	r1, r3, #29
 802346a:	d506      	bpl.n	802347a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802346c:	6801      	ldr	r1, [r0, #0]
 802346e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8023470:	684a      	ldr	r2, [r1, #4]
 8023472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023476:	4322      	orrs	r2, r4
 8023478:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 802347a:	071a      	lsls	r2, r3, #28
 802347c:	d506      	bpl.n	802348c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802347e:	6801      	ldr	r1, [r0, #0]
 8023480:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8023482:	684a      	ldr	r2, [r1, #4]
 8023484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023488:	4322      	orrs	r2, r4
 802348a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 802348c:	06dc      	lsls	r4, r3, #27
 802348e:	d506      	bpl.n	802349e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023490:	6801      	ldr	r1, [r0, #0]
 8023492:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8023494:	688a      	ldr	r2, [r1, #8]
 8023496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802349a:	4322      	orrs	r2, r4
 802349c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802349e:	0699      	lsls	r1, r3, #26
 80234a0:	d506      	bpl.n	80234b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80234a2:	6801      	ldr	r1, [r0, #0]
 80234a4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80234a6:	688a      	ldr	r2, [r1, #8]
 80234a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80234ac:	4322      	orrs	r2, r4
 80234ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80234b0:	065a      	lsls	r2, r3, #25
 80234b2:	d50f      	bpl.n	80234d4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80234b4:	6801      	ldr	r1, [r0, #0]
 80234b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80234b8:	684a      	ldr	r2, [r1, #4]
 80234ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80234be:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80234c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80234c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80234c6:	d105      	bne.n	80234d4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80234c8:	684a      	ldr	r2, [r1, #4]
 80234ca:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80234cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80234d0:	4322      	orrs	r2, r4
 80234d2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80234d4:	061b      	lsls	r3, r3, #24
 80234d6:	d506      	bpl.n	80234e6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80234d8:	6802      	ldr	r2, [r0, #0]
 80234da:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80234dc:	6853      	ldr	r3, [r2, #4]
 80234de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80234e2:	430b      	orrs	r3, r1
 80234e4:	6053      	str	r3, [r2, #4]
  }
}
 80234e6:	bd10      	pop	{r4, pc}

080234e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80234e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234ec:	9d06      	ldr	r5, [sp, #24]
 80234ee:	4604      	mov	r4, r0
 80234f0:	460f      	mov	r7, r1
 80234f2:	4616      	mov	r6, r2
 80234f4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80234f6:	6821      	ldr	r1, [r4, #0]
 80234f8:	69ca      	ldr	r2, [r1, #28]
 80234fa:	ea37 0302 	bics.w	r3, r7, r2
 80234fe:	bf0c      	ite	eq
 8023500:	2201      	moveq	r2, #1
 8023502:	2200      	movne	r2, #0
 8023504:	42b2      	cmp	r2, r6
 8023506:	d001      	beq.n	802350c <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8023508:	2000      	movs	r0, #0
 802350a:	e01a      	b.n	8023542 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 802350c:	1c68      	adds	r0, r5, #1
 802350e:	d0f3      	beq.n	80234f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023510:	f7fd fc5a 	bl	8020dc8 <HAL_GetTick>
 8023514:	eba0 0008 	sub.w	r0, r0, r8
 8023518:	42a8      	cmp	r0, r5
 802351a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 802351c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802351e:	d800      	bhi.n	8023522 <UART_WaitOnFlagUntilTimeout+0x3a>
 8023520:	b98d      	cbnz	r5, 8023546 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8023522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8023526:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023528:	6883      	ldr	r3, [r0, #8]
 802352a:	f023 0301 	bic.w	r3, r3, #1
 802352e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8023530:	2320      	movs	r3, #32
 8023532:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8023536:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 802353a:	2300      	movs	r3, #0
 802353c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8023540:	2003      	movs	r0, #3
}
 8023542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8023546:	075a      	lsls	r2, r3, #29
 8023548:	d5d5      	bpl.n	80234f6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802354a:	69c3      	ldr	r3, [r0, #28]
 802354c:	051b      	lsls	r3, r3, #20
 802354e:	d5d2      	bpl.n	80234f6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023550:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023554:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8023556:	6803      	ldr	r3, [r0, #0]
 8023558:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802355c:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802355e:	6883      	ldr	r3, [r0, #8]
 8023560:	f023 0301 	bic.w	r3, r3, #1
 8023564:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8023566:	2320      	movs	r3, #32
 8023568:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 802356c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8023570:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023574:	e7e1      	b.n	802353a <UART_WaitOnFlagUntilTimeout+0x52>

08023576 <HAL_UART_Transmit>:
{
 8023576:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802357a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 802357c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8023580:	2b20      	cmp	r3, #32
{
 8023582:	4604      	mov	r4, r0
 8023584:	460e      	mov	r6, r1
 8023586:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8023588:	d14f      	bne.n	802362a <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 802358a:	2900      	cmp	r1, #0
 802358c:	d04b      	beq.n	8023626 <HAL_UART_Transmit+0xb0>
 802358e:	2a00      	cmp	r2, #0
 8023590:	d049      	beq.n	8023626 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8023592:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8023596:	2b01      	cmp	r3, #1
 8023598:	d047      	beq.n	802362a <HAL_UART_Transmit+0xb4>
 802359a:	2301      	movs	r3, #1
 802359c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80235a0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80235a2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80235a4:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80235a8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80235ac:	f7fd fc0c 	bl	8020dc8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80235b0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80235b2:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80235b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80235ba:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80235bc:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80235c0:	d103      	bne.n	80235ca <HAL_UART_Transmit+0x54>
 80235c2:	6923      	ldr	r3, [r4, #16]
 80235c4:	b90b      	cbnz	r3, 80235ca <HAL_UART_Transmit+0x54>
 80235c6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80235c8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80235ca:	2300      	movs	r3, #0
 80235cc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 80235d0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80235d4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80235d8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80235da:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80235dc:	b942      	cbnz	r2, 80235f0 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80235de:	2140      	movs	r1, #64	; 0x40
 80235e0:	4620      	mov	r0, r4
 80235e2:	f7ff ff81 	bl	80234e8 <UART_WaitOnFlagUntilTimeout>
 80235e6:	b948      	cbnz	r0, 80235fc <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80235e8:	2320      	movs	r3, #32
 80235ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80235ee:	e006      	b.n	80235fe <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80235f0:	2200      	movs	r2, #0
 80235f2:	2180      	movs	r1, #128	; 0x80
 80235f4:	4620      	mov	r0, r4
 80235f6:	f7ff ff77 	bl	80234e8 <UART_WaitOnFlagUntilTimeout>
 80235fa:	b118      	cbz	r0, 8023604 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 80235fc:	2003      	movs	r0, #3
}
 80235fe:	b003      	add	sp, #12
 8023600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023604:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8023606:	b95e      	cbnz	r6, 8023620 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8023608:	f835 3b02 	ldrh.w	r3, [r5], #2
 802360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8023610:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8023612:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8023616:	3b01      	subs	r3, #1
 8023618:	b29b      	uxth	r3, r3
 802361a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802361e:	e7d7      	b.n	80235d0 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8023620:	f816 3b01 	ldrb.w	r3, [r6], #1
 8023624:	e7f4      	b.n	8023610 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8023626:	2001      	movs	r0, #1
 8023628:	e7e9      	b.n	80235fe <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 802362a:	2002      	movs	r0, #2
 802362c:	e7e7      	b.n	80235fe <HAL_UART_Transmit+0x88>

0802362e <HAL_UART_Receive>:
{
 802362e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023632:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8023634:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8023638:	2b20      	cmp	r3, #32
{
 802363a:	4604      	mov	r4, r0
 802363c:	460d      	mov	r5, r1
 802363e:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8023640:	d167      	bne.n	8023712 <HAL_UART_Receive+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8023642:	2900      	cmp	r1, #0
 8023644:	d063      	beq.n	802370e <HAL_UART_Receive+0xe0>
 8023646:	2a00      	cmp	r2, #0
 8023648:	d061      	beq.n	802370e <HAL_UART_Receive+0xe0>
    __HAL_LOCK(huart);
 802364a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 802364e:	2b01      	cmp	r3, #1
 8023650:	d05f      	beq.n	8023712 <HAL_UART_Receive+0xe4>
 8023652:	2301      	movs	r3, #1
 8023654:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023658:	2700      	movs	r7, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802365a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802365c:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023660:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8023664:	f7fd fbb0 	bl	8020dc8 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8023668:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 802366a:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 802366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8023672:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8023674:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8023678:	d11d      	bne.n	80236b6 <HAL_UART_Receive+0x88>
 802367a:	6922      	ldr	r2, [r4, #16]
 802367c:	b9ca      	cbnz	r2, 80236b2 <HAL_UART_Receive+0x84>
 802367e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8023682:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 802368a:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802368e:	d123      	bne.n	80236d8 <HAL_UART_Receive+0xaa>
 8023690:	6923      	ldr	r3, [r4, #16]
 8023692:	bb0b      	cbnz	r3, 80236d8 <HAL_UART_Receive+0xaa>
 8023694:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8023696:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8023698:	2300      	movs	r3, #0
 802369a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->RxXferCount > 0U)
 802369e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 80236a2:	b280      	uxth	r0, r0
 80236a4:	b9d0      	cbnz	r0, 80236dc <HAL_UART_Receive+0xae>
    huart->RxState = HAL_UART_STATE_READY;
 80236a6:	2320      	movs	r3, #32
 80236a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 80236ac:	b003      	add	sp, #12
 80236ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80236b2:	22ff      	movs	r2, #255	; 0xff
 80236b4:	e7e5      	b.n	8023682 <HAL_UART_Receive+0x54>
 80236b6:	b923      	cbnz	r3, 80236c2 <HAL_UART_Receive+0x94>
 80236b8:	6922      	ldr	r2, [r4, #16]
 80236ba:	2a00      	cmp	r2, #0
 80236bc:	d0f9      	beq.n	80236b2 <HAL_UART_Receive+0x84>
 80236be:	227f      	movs	r2, #127	; 0x7f
 80236c0:	e7df      	b.n	8023682 <HAL_UART_Receive+0x54>
 80236c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80236c6:	d104      	bne.n	80236d2 <HAL_UART_Receive+0xa4>
 80236c8:	6922      	ldr	r2, [r4, #16]
 80236ca:	2a00      	cmp	r2, #0
 80236cc:	d0f7      	beq.n	80236be <HAL_UART_Receive+0x90>
 80236ce:	223f      	movs	r2, #63	; 0x3f
 80236d0:	e7d7      	b.n	8023682 <HAL_UART_Receive+0x54>
 80236d2:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 80236d6:	e7d6      	b.n	8023686 <HAL_UART_Receive+0x58>
      pdata16bits = NULL;
 80236d8:	2600      	movs	r6, #0
 80236da:	e7dd      	b.n	8023698 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80236dc:	f8cd 9000 	str.w	r9, [sp]
 80236e0:	4643      	mov	r3, r8
 80236e2:	2200      	movs	r2, #0
 80236e4:	2120      	movs	r1, #32
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7ff fefe 	bl	80234e8 <UART_WaitOnFlagUntilTimeout>
 80236ec:	b998      	cbnz	r0, 8023716 <HAL_UART_Receive+0xe8>
 80236ee:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80236f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80236f2:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80236f4:	b945      	cbnz	r5, 8023708 <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80236f6:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80236fa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80236fe:	3b01      	subs	r3, #1
 8023700:	b29b      	uxth	r3, r3
 8023702:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8023706:	e7ca      	b.n	802369e <HAL_UART_Receive+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8023708:	f805 3b01 	strb.w	r3, [r5], #1
 802370c:	e7f5      	b.n	80236fa <HAL_UART_Receive+0xcc>
      return  HAL_ERROR;
 802370e:	2001      	movs	r0, #1
 8023710:	e7cc      	b.n	80236ac <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 8023712:	2002      	movs	r0, #2
 8023714:	e7ca      	b.n	80236ac <HAL_UART_Receive+0x7e>
        return HAL_TIMEOUT;
 8023716:	2003      	movs	r0, #3
 8023718:	e7c8      	b.n	80236ac <HAL_UART_Receive+0x7e>

0802371a <UART_CheckIdleState>:
{
 802371a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802371c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802371e:	2600      	movs	r6, #0
 8023720:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8023724:	f7fd fb50 	bl	8020dc8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023728:	6823      	ldr	r3, [r4, #0]
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 802372e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023730:	d417      	bmi.n	8023762 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8023732:	6823      	ldr	r3, [r4, #0]
 8023734:	681b      	ldr	r3, [r3, #0]
 8023736:	075b      	lsls	r3, r3, #29
 8023738:	d50a      	bpl.n	8023750 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802373a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802373e:	9300      	str	r3, [sp, #0]
 8023740:	2200      	movs	r2, #0
 8023742:	462b      	mov	r3, r5
 8023744:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8023748:	4620      	mov	r0, r4
 802374a:	f7ff fecd 	bl	80234e8 <UART_WaitOnFlagUntilTimeout>
 802374e:	b9a0      	cbnz	r0, 802377a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8023750:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8023752:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8023754:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8023758:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 802375c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8023760:	e00c      	b.n	802377c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023762:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8023766:	9300      	str	r3, [sp, #0]
 8023768:	4632      	mov	r2, r6
 802376a:	4603      	mov	r3, r0
 802376c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8023770:	4620      	mov	r0, r4
 8023772:	f7ff feb9 	bl	80234e8 <UART_WaitOnFlagUntilTimeout>
 8023776:	2800      	cmp	r0, #0
 8023778:	d0db      	beq.n	8023732 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 802377a:	2003      	movs	r0, #3
}
 802377c:	b002      	add	sp, #8
 802377e:	bd70      	pop	{r4, r5, r6, pc}

08023780 <HAL_UART_Init>:
{
 8023780:	b510      	push	{r4, lr}
  if (huart == NULL)
 8023782:	4604      	mov	r4, r0
 8023784:	b350      	cbz	r0, 80237dc <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8023786:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 802378a:	b91b      	cbnz	r3, 8023794 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 802378c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8023790:	f7f9 f838 	bl	801c804 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8023794:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8023796:	2324      	movs	r3, #36	; 0x24
 8023798:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 802379c:	6813      	ldr	r3, [r2, #0]
 802379e:	f023 0301 	bic.w	r3, r3, #1
 80237a2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80237a4:	4620      	mov	r0, r4
 80237a6:	f7ff f963 	bl	8022a70 <UART_SetConfig>
 80237aa:	2801      	cmp	r0, #1
 80237ac:	d016      	beq.n	80237dc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80237ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80237b0:	b113      	cbz	r3, 80237b8 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80237b2:	4620      	mov	r0, r4
 80237b4:	f7ff fe44 	bl	8023440 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80237b8:	6823      	ldr	r3, [r4, #0]
 80237ba:	685a      	ldr	r2, [r3, #4]
 80237bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80237c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80237c2:	689a      	ldr	r2, [r3, #8]
 80237c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80237c8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80237ca:	681a      	ldr	r2, [r3, #0]
 80237cc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80237d0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80237d2:	601a      	str	r2, [r3, #0]
}
 80237d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80237d8:	f7ff bf9f 	b.w	802371a <UART_CheckIdleState>
}
 80237dc:	2001      	movs	r0, #1
 80237de:	bd10      	pop	{r4, pc}

080237e0 <C_Initialize>:
  */
__root CK_RV C_Initialize(CK_VOID_PTR pInitArgs)
{

  /* If initialisation already done */
  if (TKMS_TokenInit == 1UL)
 80237e0:	4b05      	ldr	r3, [pc, #20]	; (80237f8 <C_Initialize+0x18>)
 80237e2:	681a      	ldr	r2, [r3, #0]
 80237e4:	2a01      	cmp	r2, #1
 80237e6:	d003      	beq.n	80237f0 <C_Initialize+0x10>
  {
    return CKR_CRYPTOKI_ALREADY_INITIALIZED;
  }
  else
  {
    TKMS_TokenInit = 1UL;
 80237e8:	2201      	movs	r2, #1
 80237ea:	601a      	str	r2, [r3, #0]
    return SE_KMS_Initialize(pInitArgs);
 80237ec:	f7f8 b91c 	b.w	801ba28 <SE_KMS_Initialize>
  }
}
 80237f0:	f240 1091 	movw	r0, #401	; 0x191
 80237f4:	4770      	bx	lr
 80237f6:	bf00      	nop
 80237f8:	20031de4 	.word	0x20031de4

080237fc <C_Finalize>:
/**
  * @brief tKMS finalization function
  */
__root CK_RV C_Finalize(CK_VOID_PTR pReserved)
{
  TKMS_TokenInit = 0UL;
 80237fc:	4b02      	ldr	r3, [pc, #8]	; (8023808 <C_Finalize+0xc>)
 80237fe:	2200      	movs	r2, #0
 8023800:	601a      	str	r2, [r3, #0]
  return SE_KMS_Finalize(pReserved);
 8023802:	f7f8 b927 	b.w	801ba54 <SE_KMS_Finalize>
 8023806:	bf00      	nop
 8023808:	20031de4 	.word	0x20031de4

0802380c <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 802380c:	6803      	ldr	r3, [r0, #0]
{
 802380e:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8023810:	1acd      	subs	r5, r1, r3
 8023812:	2d00      	cmp	r5, #0
 8023814:	dc02      	bgt.n	802381c <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8023816:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 802381a:	bd30      	pop	{r4, r5, pc}
    if( ( **p & 0x80 ) == 0 )
 802381c:	781c      	ldrb	r4, [r3, #0]
 802381e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8023822:	d10a      	bne.n	802383a <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 8023824:	1c5c      	adds	r4, r3, #1
 8023826:	6004      	str	r4, [r0, #0]
 8023828:	781b      	ldrb	r3, [r3, #0]
 802382a:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 802382c:	6803      	ldr	r3, [r0, #0]
 802382e:	1ac9      	subs	r1, r1, r3
 8023830:	6813      	ldr	r3, [r2, #0]
 8023832:	428b      	cmp	r3, r1
 8023834:	d8ef      	bhi.n	8023816 <mbedtls_asn1_get_len+0xa>
    return( 0 );
 8023836:	2000      	movs	r0, #0
 8023838:	e7ef      	b.n	802381a <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
 802383a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 802383e:	3c01      	subs	r4, #1
 8023840:	2c03      	cmp	r4, #3
 8023842:	d827      	bhi.n	8023894 <mbedtls_asn1_get_len+0x88>
 8023844:	e8df f004 	tbb	[pc, r4]
 8023848:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
 802384c:	2d01      	cmp	r5, #1
 802384e:	d0e2      	beq.n	8023816 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 8023850:	785c      	ldrb	r4, [r3, #1]
 8023852:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 8023854:	3302      	adds	r3, #2
            (*p) += 5;
 8023856:	6003      	str	r3, [r0, #0]
            break;
 8023858:	e7e8      	b.n	802382c <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 802385a:	2d02      	cmp	r5, #2
 802385c:	dddb      	ble.n	8023816 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 802385e:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 8023862:	ba64      	rev16	r4, r4
 8023864:	b2a4      	uxth	r4, r4
 8023866:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 8023868:	3303      	adds	r3, #3
 802386a:	e7f4      	b.n	8023856 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 802386c:	2d03      	cmp	r5, #3
 802386e:	ddd2      	ble.n	8023816 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8023870:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8023872:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8023874:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8023876:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802387a:	78dd      	ldrb	r5, [r3, #3]
 802387c:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 802387e:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8023880:	3304      	adds	r3, #4
 8023882:	e7e8      	b.n	8023856 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 8023884:	2d04      	cmp	r5, #4
 8023886:	ddc6      	ble.n	8023816 <mbedtls_asn1_get_len+0xa>
 8023888:	f8d3 4001 	ldr.w	r4, [r3, #1]
 802388c:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802388e:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 8023890:	3305      	adds	r3, #5
 8023892:	e7e0      	b.n	8023856 <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8023894:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8023898:	e7bf      	b.n	802381a <mbedtls_asn1_get_len+0xe>

0802389a <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 802389a:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 802389c:	6804      	ldr	r4, [r0, #0]
 802389e:	1b0e      	subs	r6, r1, r4
 80238a0:	2e00      	cmp	r6, #0
 80238a2:	dd07      	ble.n	80238b4 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80238a4:	7826      	ldrb	r6, [r4, #0]
 80238a6:	429e      	cmp	r6, r3
 80238a8:	d108      	bne.n	80238bc <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80238aa:	3401      	adds	r4, #1
 80238ac:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80238ae:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 80238b0:	f7ff bfac 	b.w	802380c <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80238b4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 80238b8:	bc70      	pop	{r4, r5, r6}
 80238ba:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80238bc:	f06f 0061 	mvn.w	r0, #97	; 0x61
 80238c0:	e7fa      	b.n	80238b8 <mbedtls_asn1_get_tag+0x1e>

080238c2 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80238c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80238c4:	2301      	movs	r3, #1
{
 80238c6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80238c8:	aa01      	add	r2, sp, #4
{
 80238ca:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80238cc:	f7ff ffe5 	bl	802389a <mbedtls_asn1_get_tag>
 80238d0:	b950      	cbnz	r0, 80238e8 <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 80238d2:	9b01      	ldr	r3, [sp, #4]
 80238d4:	2b01      	cmp	r3, #1
 80238d6:	d109      	bne.n	80238ec <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80238d8:	6823      	ldr	r3, [r4, #0]
 80238da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80238de:	3200      	adds	r2, #0
 80238e0:	bf18      	it	ne
 80238e2:	2201      	movne	r2, #1
 80238e4:	602a      	str	r2, [r5, #0]
    (*p)++;
 80238e6:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80238e8:	b003      	add	sp, #12
 80238ea:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80238ec:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80238f0:	e7fa      	b.n	80238e8 <mbedtls_asn1_get_bool+0x26>

080238f2 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80238f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80238f4:	2302      	movs	r3, #2
{
 80238f6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80238f8:	aa01      	add	r2, sp, #4
{
 80238fa:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80238fc:	f7ff ffcd 	bl	802389a <mbedtls_asn1_get_tag>
 8023900:	b968      	cbnz	r0, 802391e <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8023902:	9b01      	ldr	r3, [sp, #4]
 8023904:	3b01      	subs	r3, #1
 8023906:	2b03      	cmp	r3, #3
 8023908:	d814      	bhi.n	8023934 <mbedtls_asn1_get_int+0x42>
 802390a:	6823      	ldr	r3, [r4, #0]
 802390c:	f993 3000 	ldrsb.w	r3, [r3]
 8023910:	2b00      	cmp	r3, #0
 8023912:	db0f      	blt.n	8023934 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8023914:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8023916:	9b01      	ldr	r3, [sp, #4]
 8023918:	1e5a      	subs	r2, r3, #1
 802391a:	9201      	str	r2, [sp, #4]
 802391c:	b90b      	cbnz	r3, 8023922 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 802391e:	b003      	add	sp, #12
 8023920:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 8023922:	6823      	ldr	r3, [r4, #0]
 8023924:	6829      	ldr	r1, [r5, #0]
 8023926:	f813 2b01 	ldrb.w	r2, [r3], #1
 802392a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 802392e:	602a      	str	r2, [r5, #0]
        (*p)++;
 8023930:	6023      	str	r3, [r4, #0]
 8023932:	e7f0      	b.n	8023916 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8023934:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8023938:	e7f1      	b.n	802391e <mbedtls_asn1_get_int+0x2c>

0802393a <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 802393a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 802393c:	2302      	movs	r3, #2
{
 802393e:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8023940:	aa01      	add	r2, sp, #4
{
 8023942:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8023944:	f7ff ffa9 	bl	802389a <mbedtls_asn1_get_tag>
 8023948:	b940      	cbnz	r0, 802395c <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 802394a:	9a01      	ldr	r2, [sp, #4]
 802394c:	6821      	ldr	r1, [r4, #0]
 802394e:	4628      	mov	r0, r5
 8023950:	f000 fb91 	bl	8024076 <mbedtls_mpi_read_binary>

    *p += len;
 8023954:	6823      	ldr	r3, [r4, #0]
 8023956:	9a01      	ldr	r2, [sp, #4]
 8023958:	4413      	add	r3, r2
 802395a:	6023      	str	r3, [r4, #0]

    return( ret );
}
 802395c:	b003      	add	sp, #12
 802395e:	bd30      	pop	{r4, r5, pc}

08023960 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8023960:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8023962:	2303      	movs	r3, #3
{
 8023964:	4604      	mov	r4, r0
 8023966:	460e      	mov	r6, r1
 8023968:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 802396a:	f7ff ff96 	bl	802389a <mbedtls_asn1_get_tag>
 802396e:	b998      	cbnz	r0, 8023998 <mbedtls_asn1_get_bitstring+0x38>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8023970:	6813      	ldr	r3, [r2, #0]
 8023972:	b193      	cbz	r3, 802399a <mbedtls_asn1_get_bitstring+0x3a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8023974:	3b01      	subs	r3, #1
 8023976:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8023978:	6822      	ldr	r2, [r4, #0]
 802397a:	7812      	ldrb	r2, [r2, #0]
 802397c:	712a      	strb	r2, [r5, #4]
    if( bs->unused_bits > 7 )
 802397e:	2a07      	cmp	r2, #7
 8023980:	d80e      	bhi.n	80239a0 <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8023982:	6822      	ldr	r2, [r4, #0]
 8023984:	3201      	adds	r2, #1
 8023986:	6022      	str	r2, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8023988:	60aa      	str	r2, [r5, #8]
    *p += bs->len;
 802398a:	6822      	ldr	r2, [r4, #0]
 802398c:	4413      	add	r3, r2

    if( *p != end )
 802398e:	42b3      	cmp	r3, r6
    *p += bs->len;
 8023990:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8023992:	bf18      	it	ne
 8023994:	f06f 0065 	mvnne.w	r0, #101	; 0x65

    return( 0 );
}
 8023998:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 802399a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 802399e:	e7fb      	b.n	8023998 <mbedtls_asn1_get_bitstring+0x38>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80239a0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80239a4:	e7f8      	b.n	8023998 <mbedtls_asn1_get_bitstring+0x38>

080239a6 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80239a6:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80239a8:	2303      	movs	r3, #3
{
 80239aa:	4604      	mov	r4, r0
 80239ac:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80239ae:	f7ff ff74 	bl	802389a <mbedtls_asn1_get_tag>
 80239b2:	b958      	cbnz	r0, 80239cc <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80239b4:	6813      	ldr	r3, [r2, #0]
 80239b6:	1e5a      	subs	r2, r3, #1
 80239b8:	2b01      	cmp	r3, #1
 80239ba:	602a      	str	r2, [r5, #0]
 80239bc:	d904      	bls.n	80239c8 <mbedtls_asn1_get_bitstring_null+0x22>
 80239be:	6823      	ldr	r3, [r4, #0]
 80239c0:	1c5a      	adds	r2, r3, #1
 80239c2:	6022      	str	r2, [r4, #0]
 80239c4:	781b      	ldrb	r3, [r3, #0]
 80239c6:	b10b      	cbz	r3, 80239cc <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80239c8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80239cc:	bd38      	pop	{r3, r4, r5, pc}

080239ce <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80239ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80239d2:	4614      	mov	r4, r2
 80239d4:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80239d6:	aa01      	add	r2, sp, #4
 80239d8:	2330      	movs	r3, #48	; 0x30
{
 80239da:	4605      	mov	r5, r0
 80239dc:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80239de:	f7ff ff5c 	bl	802389a <mbedtls_asn1_get_tag>
 80239e2:	4606      	mov	r6, r0
 80239e4:	b930      	cbnz	r0, 80239f4 <mbedtls_asn1_get_sequence_of+0x26>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80239e6:	682b      	ldr	r3, [r5, #0]
 80239e8:	9a01      	ldr	r2, [sp, #4]
 80239ea:	4413      	add	r3, r2
 80239ec:	429f      	cmp	r7, r3
 80239ee:	d01d      	beq.n	8023a2c <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80239f0:	f06f 0665 	mvn.w	r6, #101	; 0x65

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80239f4:	4630      	mov	r0, r6
 80239f6:	b003      	add	sp, #12
 80239f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 80239fc:	781b      	ldrb	r3, [r3, #0]
 80239fe:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8023a00:	464a      	mov	r2, r9
 8023a02:	4643      	mov	r3, r8
 8023a04:	4639      	mov	r1, r7
 8023a06:	4628      	mov	r0, r5
 8023a08:	f7ff ff47 	bl	802389a <mbedtls_asn1_get_tag>
 8023a0c:	b9c0      	cbnz	r0, 8023a40 <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 8023a0e:	682b      	ldr	r3, [r5, #0]
 8023a10:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 8023a12:	682b      	ldr	r3, [r5, #0]
 8023a14:	6862      	ldr	r2, [r4, #4]
 8023a16:	4413      	add	r3, r2
        if( *p < end )
 8023a18:	42bb      	cmp	r3, r7
        *p += buf->len;
 8023a1a:	602b      	str	r3, [r5, #0]
        if( *p < end )
 8023a1c:	d208      	bcs.n	8023a30 <mbedtls_asn1_get_sequence_of+0x62>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8023a1e:	2110      	movs	r1, #16
 8023a20:	2001      	movs	r0, #1
 8023a22:	f003 f9a5 	bl	8026d70 <mbedtls_calloc>
 8023a26:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 8023a28:	4604      	mov	r4, r0
 8023a2a:	b158      	cbz	r0, 8023a44 <mbedtls_asn1_get_sequence_of+0x76>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8023a2c:	f104 0904 	add.w	r9, r4, #4
    while( *p < end )
 8023a30:	682b      	ldr	r3, [r5, #0]
 8023a32:	42bb      	cmp	r3, r7
 8023a34:	d3e2      	bcc.n	80239fc <mbedtls_asn1_get_sequence_of+0x2e>
    cur->next = NULL;
 8023a36:	f04f 0300 	mov.w	r3, #0
 8023a3a:	60e3      	str	r3, [r4, #12]
    if( *p != end )
 8023a3c:	d0da      	beq.n	80239f4 <mbedtls_asn1_get_sequence_of+0x26>
 8023a3e:	e7d7      	b.n	80239f0 <mbedtls_asn1_get_sequence_of+0x22>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8023a40:	4606      	mov	r6, r0
 8023a42:	e7d7      	b.n	80239f4 <mbedtls_asn1_get_sequence_of+0x26>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8023a44:	f06f 0669 	mvn.w	r6, #105	; 0x69
 8023a48:	e7d4      	b.n	80239f4 <mbedtls_asn1_get_sequence_of+0x26>

08023a4a <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8023a4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023a4e:	4690      	mov	r8, r2
 8023a50:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8023a52:	aa01      	add	r2, sp, #4
 8023a54:	2330      	movs	r3, #48	; 0x30
{
 8023a56:	4604      	mov	r4, r0
 8023a58:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8023a5a:	f7ff ff1e 	bl	802389a <mbedtls_asn1_get_tag>
 8023a5e:	4605      	mov	r5, r0
 8023a60:	bb00      	cbnz	r0, 8023aa4 <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8023a62:	6826      	ldr	r6, [r4, #0]
 8023a64:	eba9 0906 	sub.w	r9, r9, r6
 8023a68:	f1b9 0f00 	cmp.w	r9, #0
 8023a6c:	dd37      	ble.n	8023ade <mbedtls_asn1_get_alg+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8023a6e:	4642      	mov	r2, r8
 8023a70:	7833      	ldrb	r3, [r6, #0]
 8023a72:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8023a76:	9b01      	ldr	r3, [sp, #4]
 8023a78:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8023a7a:	4631      	mov	r1, r6
 8023a7c:	2306      	movs	r3, #6
 8023a7e:	4620      	mov	r0, r4
 8023a80:	f7ff ff0b 	bl	802389a <mbedtls_asn1_get_tag>
 8023a84:	4605      	mov	r5, r0
 8023a86:	b968      	cbnz	r0, 8023aa4 <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 8023a88:	6823      	ldr	r3, [r4, #0]
 8023a8a:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 8023a8e:	6821      	ldr	r1, [r4, #0]
 8023a90:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8023a94:	188b      	adds	r3, r1, r2

    if( *p == end )
 8023a96:	42b3      	cmp	r3, r6
    *p += alg->len;
 8023a98:	6023      	str	r3, [r4, #0]
    if( *p == end )
 8023a9a:	d107      	bne.n	8023aac <mbedtls_asn1_get_alg+0x62>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 8023a9c:	210c      	movs	r1, #12
 8023a9e:	4638      	mov	r0, r7
 8023aa0:	f003 f972 	bl	8026d88 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8023aa4:	4628      	mov	r0, r5
 8023aa6:	b003      	add	sp, #12
 8023aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
 8023aac:	5c89      	ldrb	r1, [r1, r2]
 8023aae:	463a      	mov	r2, r7
    (*p)++;
 8023ab0:	3301      	adds	r3, #1
    params->tag = **p;
 8023ab2:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8023ab6:	4620      	mov	r0, r4
    (*p)++;
 8023ab8:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8023aba:	4631      	mov	r1, r6
 8023abc:	f7ff fea6 	bl	802380c <mbedtls_asn1_get_len>
 8023ac0:	4605      	mov	r5, r0
 8023ac2:	2800      	cmp	r0, #0
 8023ac4:	d1ee      	bne.n	8023aa4 <mbedtls_asn1_get_alg+0x5a>
    params->p = *p;
 8023ac6:	6823      	ldr	r3, [r4, #0]
 8023ac8:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 8023aca:	6823      	ldr	r3, [r4, #0]
 8023acc:	687a      	ldr	r2, [r7, #4]
 8023ace:	4413      	add	r3, r2
    if( *p != end )
 8023ad0:	42b3      	cmp	r3, r6
    *p += params->len;
 8023ad2:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8023ad4:	bf0c      	ite	eq
 8023ad6:	4605      	moveq	r5, r0
 8023ad8:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 8023adc:	e7e2      	b.n	8023aa4 <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8023ade:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 8023ae2:	e7df      	b.n	8023aa4 <mbedtls_asn1_get_alg+0x5a>

08023ae4 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 8023ae4:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 8023ae6:	2a7f      	cmp	r2, #127	; 0x7f
 8023ae8:	eba3 0101 	sub.w	r1, r3, r1
 8023aec:	d807      	bhi.n	8023afe <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 8023aee:	2900      	cmp	r1, #0
 8023af0:	dd69      	ble.n	8023bc6 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 8023af2:	1e59      	subs	r1, r3, #1
 8023af4:	6001      	str	r1, [r0, #0]
 8023af6:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 8023afa:	2001      	movs	r0, #1
 8023afc:	4770      	bx	lr
    }

    if( len <= 0xFF )
 8023afe:	2aff      	cmp	r2, #255	; 0xff
 8023b00:	d80d      	bhi.n	8023b1e <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 8023b02:	2901      	cmp	r1, #1
 8023b04:	dd5f      	ble.n	8023bc6 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 8023b06:	1e59      	subs	r1, r3, #1
 8023b08:	6001      	str	r1, [r0, #0]
 8023b0a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 8023b0e:	6803      	ldr	r3, [r0, #0]
 8023b10:	1e5a      	subs	r2, r3, #1
 8023b12:	6002      	str	r2, [r0, #0]
 8023b14:	2281      	movs	r2, #129	; 0x81
 8023b16:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 8023b1a:	2002      	movs	r0, #2
 8023b1c:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 8023b1e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8023b22:	d213      	bcs.n	8023b4c <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 8023b24:	2902      	cmp	r1, #2
 8023b26:	dd4e      	ble.n	8023bc6 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 8023b28:	1e59      	subs	r1, r3, #1
 8023b2a:	6001      	str	r1, [r0, #0]
 8023b2c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8023b30:	6803      	ldr	r3, [r0, #0]
 8023b32:	0a12      	lsrs	r2, r2, #8
 8023b34:	1e59      	subs	r1, r3, #1
 8023b36:	6001      	str	r1, [r0, #0]
 8023b38:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 8023b3c:	6803      	ldr	r3, [r0, #0]
 8023b3e:	1e5a      	subs	r2, r3, #1
 8023b40:	6002      	str	r2, [r0, #0]
 8023b42:	2282      	movs	r2, #130	; 0x82
 8023b44:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 8023b48:	2003      	movs	r0, #3
 8023b4a:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 8023b4c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8023b50:	d219      	bcs.n	8023b86 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 8023b52:	2903      	cmp	r1, #3
 8023b54:	dd37      	ble.n	8023bc6 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 8023b56:	1e59      	subs	r1, r3, #1
 8023b58:	6001      	str	r1, [r0, #0]
 8023b5a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8023b5e:	6803      	ldr	r3, [r0, #0]
 8023b60:	1e59      	subs	r1, r3, #1
 8023b62:	6001      	str	r1, [r0, #0]
 8023b64:	0a11      	lsrs	r1, r2, #8
 8023b66:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8023b6a:	6803      	ldr	r3, [r0, #0]
 8023b6c:	0c12      	lsrs	r2, r2, #16
 8023b6e:	1e59      	subs	r1, r3, #1
 8023b70:	6001      	str	r1, [r0, #0]
 8023b72:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 8023b76:	6803      	ldr	r3, [r0, #0]
 8023b78:	1e5a      	subs	r2, r3, #1
 8023b7a:	6002      	str	r2, [r0, #0]
 8023b7c:	2283      	movs	r2, #131	; 0x83
 8023b7e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 8023b82:	2004      	movs	r0, #4
 8023b84:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 8023b86:	2904      	cmp	r1, #4
 8023b88:	dd1d      	ble.n	8023bc6 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 8023b8a:	1e59      	subs	r1, r3, #1
 8023b8c:	6001      	str	r1, [r0, #0]
 8023b8e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8023b92:	6803      	ldr	r3, [r0, #0]
 8023b94:	1e59      	subs	r1, r3, #1
 8023b96:	6001      	str	r1, [r0, #0]
 8023b98:	0a11      	lsrs	r1, r2, #8
 8023b9a:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8023b9e:	6803      	ldr	r3, [r0, #0]
 8023ba0:	1e59      	subs	r1, r3, #1
 8023ba2:	6001      	str	r1, [r0, #0]
 8023ba4:	0c11      	lsrs	r1, r2, #16
 8023ba6:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 8023baa:	6803      	ldr	r3, [r0, #0]
 8023bac:	0e12      	lsrs	r2, r2, #24
 8023bae:	1e59      	subs	r1, r3, #1
 8023bb0:	6001      	str	r1, [r0, #0]
 8023bb2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 8023bb6:	6803      	ldr	r3, [r0, #0]
 8023bb8:	1e5a      	subs	r2, r3, #1
 8023bba:	6002      	str	r2, [r0, #0]
 8023bbc:	2284      	movs	r2, #132	; 0x84
 8023bbe:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 8023bc2:	2005      	movs	r0, #5
 8023bc4:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8023bc6:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 8023bca:	4770      	bx	lr

08023bcc <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 8023bcc:	6803      	ldr	r3, [r0, #0]
 8023bce:	1a59      	subs	r1, r3, r1
 8023bd0:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 8023bd2:	bfc1      	itttt	gt
 8023bd4:	f103 31ff 	addgt.w	r1, r3, #4294967295
 8023bd8:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 8023bda:	2001      	movgt	r0, #1
    *--(*p) = tag;
 8023bdc:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8023be0:	bfd8      	it	le
 8023be2:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 8023be6:	4770      	bx	lr

08023be8 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 8023be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bec:	4606      	mov	r6, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 8023bee:	4610      	mov	r0, r2
{
 8023bf0:	460f      	mov	r7, r1
 8023bf2:	4690      	mov	r8, r2
    len = mbedtls_mpi_size( X );
 8023bf4:	f000 fa39 	bl	802406a <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 8023bf8:	6831      	ldr	r1, [r6, #0]
 8023bfa:	42b9      	cmp	r1, r7
    len = mbedtls_mpi_size( X );
 8023bfc:	4604      	mov	r4, r0
    if( *p < start || (size_t)( *p - start ) < len )
 8023bfe:	d204      	bcs.n	8023c0a <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8023c00:	f06f 056b 	mvn.w	r5, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 8023c04:	4628      	mov	r0, r5
 8023c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 8023c0a:	1bcb      	subs	r3, r1, r7
 8023c0c:	4283      	cmp	r3, r0
 8023c0e:	d3f7      	bcc.n	8023c00 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 8023c10:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 8023c12:	4602      	mov	r2, r0
    (*p) -= len;
 8023c14:	6031      	str	r1, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 8023c16:	4640      	mov	r0, r8
 8023c18:	f000 fa60 	bl	80240dc <mbedtls_mpi_write_binary>
 8023c1c:	4605      	mov	r5, r0
 8023c1e:	2800      	cmp	r0, #0
 8023c20:	d1f0      	bne.n	8023c04 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 8023c22:	f8d8 3000 	ldr.w	r3, [r8]
 8023c26:	2b01      	cmp	r3, #1
 8023c28:	d10c      	bne.n	8023c44 <mbedtls_asn1_write_mpi+0x5c>
 8023c2a:	6833      	ldr	r3, [r6, #0]
 8023c2c:	f993 2000 	ldrsb.w	r2, [r3]
 8023c30:	2a00      	cmp	r2, #0
 8023c32:	da07      	bge.n	8023c44 <mbedtls_asn1_write_mpi+0x5c>
        if( *p - start < 1 )
 8023c34:	1bda      	subs	r2, r3, r7
 8023c36:	2a00      	cmp	r2, #0
 8023c38:	dde2      	ble.n	8023c00 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 8023c3a:	1e5a      	subs	r2, r3, #1
 8023c3c:	6032      	str	r2, [r6, #0]
        len += 1;
 8023c3e:	3401      	adds	r4, #1
        *--(*p) = 0x00;
 8023c40:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8023c44:	4622      	mov	r2, r4
 8023c46:	4639      	mov	r1, r7
 8023c48:	4630      	mov	r0, r6
 8023c4a:	f7ff ff4b 	bl	8023ae4 <mbedtls_asn1_write_len>
 8023c4e:	1e05      	subs	r5, r0, #0
 8023c50:	dbd8      	blt.n	8023c04 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8023c52:	2202      	movs	r2, #2
 8023c54:	4639      	mov	r1, r7
 8023c56:	4630      	mov	r0, r6
 8023c58:	f7ff ffb8 	bl	8023bcc <mbedtls_asn1_write_tag>
 8023c5c:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8023c5e:	bfa6      	itte	ge
 8023c60:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8023c62:	1905      	addge	r5, r0, r4
 8023c64:	4605      	movlt	r5, r0
 8023c66:	e7cd      	b.n	8023c04 <mbedtls_asn1_write_mpi+0x1c>

08023c68 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8023c68:	2300      	movs	r3, #0
{
 8023c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c6c:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 8023c6e:	461c      	mov	r4, r3
 8023c70:	4284      	cmp	r4, r0
 8023c72:	d103      	bne.n	8023c7c <mpi_sub_hlp+0x14>
 8023c74:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 8023c78:	b9bb      	cbnz	r3, 8023caa <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 8023c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 8023c7c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8023c80:	ebac 0503 	sub.w	r5, ip, r3
 8023c84:	f846 5f04 	str.w	r5, [r6, #4]!
        c = ( *d < *s ) + z; *d -= *s;
 8023c88:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 8023c8c:	42bd      	cmp	r5, r7
 8023c8e:	bf2c      	ite	cs
 8023c90:	f04f 0e00 	movcs.w	lr, #0
 8023c94:	f04f 0e01 	movcc.w	lr, #1
 8023c98:	1bed      	subs	r5, r5, r7
 8023c9a:	459c      	cmp	ip, r3
 8023c9c:	bf2c      	ite	cs
 8023c9e:	4673      	movcs	r3, lr
 8023ca0:	f10e 0301 	addcc.w	r3, lr, #1
 8023ca4:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8023ca6:	3401      	adds	r4, #1
 8023ca8:	e7e2      	b.n	8023c70 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 8023caa:	6811      	ldr	r1, [r2, #0]
 8023cac:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 8023cae:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 8023cb0:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 8023cb4:	bf2c      	ite	cs
 8023cb6:	2300      	movcs	r3, #0
 8023cb8:	2301      	movcc	r3, #1
 8023cba:	e7dd      	b.n	8023c78 <mpi_sub_hlp+0x10>

08023cbc <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 8023cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cbe:	4607      	mov	r7, r0
 8023cc0:	460e      	mov	r6, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8023cc2:	4605      	mov	r5, r0
    mbedtls_mpi_uint c = 0, t = 0;
 8023cc4:	2400      	movs	r4, #0
    for( ; i >= 16; i -= 16 )
 8023cc6:	2d0f      	cmp	r5, #15
 8023cc8:	d84d      	bhi.n	8023d66 <mpi_mul_hlp+0xaa>
 8023cca:	093d      	lsrs	r5, r7, #4
 8023ccc:	f06f 010f 	mvn.w	r1, #15
 8023cd0:	fb01 7505 	mla	r5, r1, r5, r7
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8023cd4:	2d07      	cmp	r5, #7
 8023cd6:	d938      	bls.n	8023d4a <mpi_mul_hlp+0x8e>
    {
        MULADDC_INIT
 8023cd8:	f856 0b04 	ldr.w	r0, [r6], #4
 8023cdc:	6811      	ldr	r1, [r2, #0]
 8023cde:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023ce2:	f842 1b04 	str.w	r1, [r2], #4
 8023ce6:	f856 0b04 	ldr.w	r0, [r6], #4
 8023cea:	6811      	ldr	r1, [r2, #0]
 8023cec:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023cf0:	f842 1b04 	str.w	r1, [r2], #4
 8023cf4:	f856 0b04 	ldr.w	r0, [r6], #4
 8023cf8:	6811      	ldr	r1, [r2, #0]
 8023cfa:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023cfe:	f842 1b04 	str.w	r1, [r2], #4
 8023d02:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d06:	6811      	ldr	r1, [r2, #0]
 8023d08:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d0c:	f842 1b04 	str.w	r1, [r2], #4
 8023d10:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d14:	6811      	ldr	r1, [r2, #0]
 8023d16:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d1a:	f842 1b04 	str.w	r1, [r2], #4
 8023d1e:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d22:	6811      	ldr	r1, [r2, #0]
 8023d24:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d28:	f842 1b04 	str.w	r1, [r2], #4
 8023d2c:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d30:	6811      	ldr	r1, [r2, #0]
 8023d32:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d36:	f842 1b04 	str.w	r1, [r2], #4
 8023d3a:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d3e:	6811      	ldr	r1, [r2, #0]
 8023d40:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d44:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 8; i -= 8 )
 8023d48:	3d08      	subs	r5, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8023d4a:	2d00      	cmp	r5, #0
 8023d4c:	d17d      	bne.n	8023e4a <mpi_mul_hlp+0x18e>
 8023d4e:	6813      	ldr	r3, [r2, #0]
 8023d50:	191c      	adds	r4, r3, r4
 8023d52:	f04f 0100 	mov.w	r1, #0
 8023d56:	bf28      	it	cs
 8023d58:	2101      	movcs	r1, #1
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 8023d5a:	f842 4b04 	str.w	r4, [r2], #4
 8023d5e:	2401      	movs	r4, #1
    }
    while( c != 0 );
 8023d60:	2900      	cmp	r1, #0
 8023d62:	d1f4      	bne.n	8023d4e <mpi_mul_hlp+0x92>
}
 8023d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_INIT
 8023d66:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d6a:	6811      	ldr	r1, [r2, #0]
 8023d6c:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d70:	f842 1b04 	str.w	r1, [r2], #4
 8023d74:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d78:	6811      	ldr	r1, [r2, #0]
 8023d7a:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d7e:	f842 1b04 	str.w	r1, [r2], #4
 8023d82:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d86:	6811      	ldr	r1, [r2, #0]
 8023d88:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d8c:	f842 1b04 	str.w	r1, [r2], #4
 8023d90:	f856 0b04 	ldr.w	r0, [r6], #4
 8023d94:	6811      	ldr	r1, [r2, #0]
 8023d96:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023d9a:	f842 1b04 	str.w	r1, [r2], #4
 8023d9e:	f856 0b04 	ldr.w	r0, [r6], #4
 8023da2:	6811      	ldr	r1, [r2, #0]
 8023da4:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023da8:	f842 1b04 	str.w	r1, [r2], #4
 8023dac:	f856 0b04 	ldr.w	r0, [r6], #4
 8023db0:	6811      	ldr	r1, [r2, #0]
 8023db2:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023db6:	f842 1b04 	str.w	r1, [r2], #4
 8023dba:	f856 0b04 	ldr.w	r0, [r6], #4
 8023dbe:	6811      	ldr	r1, [r2, #0]
 8023dc0:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023dc4:	f842 1b04 	str.w	r1, [r2], #4
 8023dc8:	f856 0b04 	ldr.w	r0, [r6], #4
 8023dcc:	6811      	ldr	r1, [r2, #0]
 8023dce:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023dd2:	f842 1b04 	str.w	r1, [r2], #4
 8023dd6:	f856 0b04 	ldr.w	r0, [r6], #4
 8023dda:	6811      	ldr	r1, [r2, #0]
 8023ddc:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023de0:	f842 1b04 	str.w	r1, [r2], #4
 8023de4:	f856 0b04 	ldr.w	r0, [r6], #4
 8023de8:	6811      	ldr	r1, [r2, #0]
 8023dea:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023dee:	f842 1b04 	str.w	r1, [r2], #4
 8023df2:	f856 0b04 	ldr.w	r0, [r6], #4
 8023df6:	6811      	ldr	r1, [r2, #0]
 8023df8:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023dfc:	f842 1b04 	str.w	r1, [r2], #4
 8023e00:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e04:	6811      	ldr	r1, [r2, #0]
 8023e06:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e0a:	f842 1b04 	str.w	r1, [r2], #4
 8023e0e:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e12:	6811      	ldr	r1, [r2, #0]
 8023e14:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e18:	f842 1b04 	str.w	r1, [r2], #4
 8023e1c:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e20:	6811      	ldr	r1, [r2, #0]
 8023e22:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e26:	f842 1b04 	str.w	r1, [r2], #4
 8023e2a:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e2e:	6811      	ldr	r1, [r2, #0]
 8023e30:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e34:	f842 1b04 	str.w	r1, [r2], #4
 8023e38:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e3c:	6811      	ldr	r1, [r2, #0]
 8023e3e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e42:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 16; i -= 16 )
 8023e46:	3d10      	subs	r5, #16
 8023e48:	e73d      	b.n	8023cc6 <mpi_mul_hlp+0xa>
        MULADDC_INIT
 8023e4a:	f856 0b04 	ldr.w	r0, [r6], #4
 8023e4e:	6811      	ldr	r1, [r2, #0]
 8023e50:	fbe3 1460 	umaal	r1, r4, r3, r0
 8023e54:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8023e58:	3d01      	subs	r5, #1
 8023e5a:	e776      	b.n	8023d4a <mpi_mul_hlp+0x8e>

08023e5c <mbedtls_mpi_init>:
    if( X == NULL )
 8023e5c:	b120      	cbz	r0, 8023e68 <mbedtls_mpi_init+0xc>
    X->n = 0;
 8023e5e:	2300      	movs	r3, #0
 8023e60:	2201      	movs	r2, #1
 8023e62:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 8023e66:	6083      	str	r3, [r0, #8]
}
 8023e68:	4770      	bx	lr

08023e6a <mbedtls_mpi_free>:
{
 8023e6a:	b510      	push	{r4, lr}
    if( X == NULL )
 8023e6c:	4604      	mov	r4, r0
 8023e6e:	b168      	cbz	r0, 8023e8c <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
 8023e70:	6880      	ldr	r0, [r0, #8]
 8023e72:	b130      	cbz	r0, 8023e82 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 8023e74:	6861      	ldr	r1, [r4, #4]
 8023e76:	0089      	lsls	r1, r1, #2
 8023e78:	f002 ff86 	bl	8026d88 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8023e7c:	68a0      	ldr	r0, [r4, #8]
 8023e7e:	f002 ff7d 	bl	8026d7c <mbedtls_free>
    X->n = 0;
 8023e82:	2300      	movs	r3, #0
 8023e84:	2201      	movs	r2, #1
 8023e86:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 8023e8a:	60a3      	str	r3, [r4, #8]
}
 8023e8c:	bd10      	pop	{r4, pc}

08023e8e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8023e8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8023e92:	4299      	cmp	r1, r3
{
 8023e94:	b570      	push	{r4, r5, r6, lr}
 8023e96:	4604      	mov	r4, r0
 8023e98:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8023e9a:	d902      	bls.n	8023ea2 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8023e9c:	f06f 000f 	mvn.w	r0, #15
}
 8023ea0:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 8023ea2:	6843      	ldr	r3, [r0, #4]
 8023ea4:	428b      	cmp	r3, r1
 8023ea6:	d216      	bcs.n	8023ed6 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023ea8:	2104      	movs	r1, #4
 8023eaa:	4628      	mov	r0, r5
 8023eac:	f002 ff60 	bl	8026d70 <mbedtls_calloc>
 8023eb0:	4606      	mov	r6, r0
 8023eb2:	2800      	cmp	r0, #0
 8023eb4:	d0f2      	beq.n	8023e9c <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 8023eb6:	68a1      	ldr	r1, [r4, #8]
 8023eb8:	b159      	cbz	r1, 8023ed2 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
 8023eba:	6862      	ldr	r2, [r4, #4]
 8023ebc:	0092      	lsls	r2, r2, #2
 8023ebe:	f004 fd7c 	bl	80289ba <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8023ec2:	6861      	ldr	r1, [r4, #4]
 8023ec4:	68a0      	ldr	r0, [r4, #8]
 8023ec6:	0089      	lsls	r1, r1, #2
 8023ec8:	f002 ff5e 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023ecc:	68a0      	ldr	r0, [r4, #8]
 8023ece:	f002 ff55 	bl	8026d7c <mbedtls_free>
        X->p = p;
 8023ed2:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 8023ed6:	2000      	movs	r0, #0
 8023ed8:	e7e2      	b.n	8023ea0 <mbedtls_mpi_grow+0x12>

08023eda <mbedtls_mpi_copy>:
    if( X == Y )
 8023eda:	4288      	cmp	r0, r1
{
 8023edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ede:	4606      	mov	r6, r0
 8023ee0:	460f      	mov	r7, r1
    if( X == Y )
 8023ee2:	d003      	beq.n	8023eec <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
 8023ee4:	688d      	ldr	r5, [r1, #8]
 8023ee6:	b91d      	cbnz	r5, 8023ef0 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 8023ee8:	f7ff ffbf 	bl	8023e6a <mbedtls_mpi_free>
        return( 0 );
 8023eec:	2000      	movs	r0, #0
 8023eee:	e011      	b.n	8023f14 <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
 8023ef0:	684c      	ldr	r4, [r1, #4]
 8023ef2:	3c01      	subs	r4, #1
 8023ef4:	b11c      	cbz	r4, 8023efe <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 8023ef6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8023efa:	2b00      	cmp	r3, #0
 8023efc:	d0f9      	beq.n	8023ef2 <mbedtls_mpi_copy+0x18>
    if( X->n < i )
 8023efe:	6872      	ldr	r2, [r6, #4]
    X->s = Y->s;
 8023f00:	683b      	ldr	r3, [r7, #0]
 8023f02:	6033      	str	r3, [r6, #0]
    i++;
 8023f04:	3401      	adds	r4, #1
    if( X->n < i )
 8023f06:	42a2      	cmp	r2, r4
 8023f08:	d205      	bcs.n	8023f16 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8023f0a:	4621      	mov	r1, r4
 8023f0c:	4630      	mov	r0, r6
 8023f0e:	f7ff ffbe 	bl	8023e8e <mbedtls_mpi_grow>
 8023f12:	b140      	cbz	r0, 8023f26 <mbedtls_mpi_copy+0x4c>
}
 8023f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 8023f16:	68b0      	ldr	r0, [r6, #8]
 8023f18:	1b12      	subs	r2, r2, r4
 8023f1a:	0092      	lsls	r2, r2, #2
 8023f1c:	2100      	movs	r1, #0
 8023f1e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8023f22:	f004 fd55 	bl	80289d0 <memset>
    memcpy( X->p, Y->p, i * ciL );
 8023f26:	00a2      	lsls	r2, r4, #2
 8023f28:	68b9      	ldr	r1, [r7, #8]
 8023f2a:	68b0      	ldr	r0, [r6, #8]
 8023f2c:	f004 fd45 	bl	80289ba <memcpy>
 8023f30:	e7dc      	b.n	8023eec <mbedtls_mpi_copy+0x12>

08023f32 <mbedtls_mpi_safe_cond_assign>:
{
 8023f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f34:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8023f36:	6849      	ldr	r1, [r1, #4]
{
 8023f38:	4605      	mov	r5, r0
 8023f3a:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8023f3c:	f7ff ffa7 	bl	8023e8e <mbedtls_mpi_grow>
 8023f40:	b9b0      	cbnz	r0, 8023f70 <mbedtls_mpi_safe_cond_assign+0x3e>
    assign = (assign | (unsigned char)-assign) >> 7;
 8023f42:	4262      	negs	r2, r4
 8023f44:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 8023f46:	6831      	ldr	r1, [r6, #0]
 8023f48:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 8023f4a:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 8023f4e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 8023f52:	f1c2 0401 	rsb	r4, r2, #1
 8023f56:	4351      	muls	r1, r2
 8023f58:	fb03 1304 	mla	r3, r3, r4, r1
 8023f5c:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 8023f5e:	4603      	mov	r3, r0
 8023f60:	459e      	cmp	lr, r3
 8023f62:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8023f66:	d104      	bne.n	8023f72 <mbedtls_mpi_safe_cond_assign+0x40>
    for( ; i < X->n; i++ )
 8023f68:	686f      	ldr	r7, [r5, #4]
 8023f6a:	460a      	mov	r2, r1
 8023f6c:	429f      	cmp	r7, r3
 8023f6e:	d80e      	bhi.n	8023f8e <mbedtls_mpi_safe_cond_assign+0x5c>
}
 8023f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 8023f72:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8023f76:	68b1      	ldr	r1, [r6, #8]
 8023f78:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 8023f7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8023f80:	4367      	muls	r7, r4
 8023f82:	fb01 7102 	mla	r1, r1, r2, r7
 8023f86:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 8023f8a:	3301      	adds	r3, #1
 8023f8c:	e7e8      	b.n	8023f60 <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 8023f8e:	68ae      	ldr	r6, [r5, #8]
 8023f90:	58b1      	ldr	r1, [r6, r2]
 8023f92:	4361      	muls	r1, r4
 8023f94:	50b1      	str	r1, [r6, r2]
    for( ; i < X->n; i++ )
 8023f96:	3301      	adds	r3, #1
 8023f98:	3204      	adds	r2, #4
 8023f9a:	e7e7      	b.n	8023f6c <mbedtls_mpi_safe_cond_assign+0x3a>

08023f9c <mbedtls_mpi_lset>:
{
 8023f9c:	b570      	push	{r4, r5, r6, lr}
 8023f9e:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8023fa0:	2101      	movs	r1, #1
{
 8023fa2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8023fa4:	f7ff ff73 	bl	8023e8e <mbedtls_mpi_grow>
 8023fa8:	4605      	mov	r5, r0
 8023faa:	b988      	cbnz	r0, 8023fd0 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 8023fac:	6862      	ldr	r2, [r4, #4]
 8023fae:	4601      	mov	r1, r0
 8023fb0:	0092      	lsls	r2, r2, #2
 8023fb2:	68a0      	ldr	r0, [r4, #8]
 8023fb4:	f004 fd0c 	bl	80289d0 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8023fb8:	68a3      	ldr	r3, [r4, #8]
 8023fba:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 8023fbe:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 8023fc0:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 8023fc4:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8023fc6:	bfb4      	ite	lt
 8023fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8023fcc:	2301      	movge	r3, #1
 8023fce:	6023      	str	r3, [r4, #0]
}
 8023fd0:	4628      	mov	r0, r5
 8023fd2:	bd70      	pop	{r4, r5, r6, pc}

08023fd4 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 8023fd4:	6843      	ldr	r3, [r0, #4]
 8023fd6:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8023fda:	bf3f      	itttt	cc
 8023fdc:	6883      	ldrcc	r3, [r0, #8]
 8023fde:	094a      	lsrcc	r2, r1, #5
 8023fe0:	f001 011f 	andcc.w	r1, r1, #31
 8023fe4:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 8023fe8:	bf3a      	itte	cc
 8023fea:	40c8      	lsrcc	r0, r1
 8023fec:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 8023ff0:	2000      	movcs	r0, #0
}
 8023ff2:	4770      	bx	lr

08023ff4 <mbedtls_mpi_lsb>:
{
 8023ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 8023ff6:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 8023ff8:	6845      	ldr	r5, [r0, #4]
{
 8023ffa:	4604      	mov	r4, r0
    for( i = 0; i < X->n; i++ )
 8023ffc:	460a      	mov	r2, r1
 8023ffe:	4295      	cmp	r5, r2
 8024000:	d101      	bne.n	8024006 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 8024002:	2000      	movs	r0, #0
}
 8024004:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8024006:	68a3      	ldr	r3, [r4, #8]
 8024008:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 802400c:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 802400e:	fa26 f703 	lsr.w	r7, r6, r3
 8024012:	07ff      	lsls	r7, r7, #31
 8024014:	eb01 0003 	add.w	r0, r1, r3
 8024018:	d4f4      	bmi.n	8024004 <mbedtls_mpi_lsb+0x10>
        for( j = 0; j < biL; j++, count++ )
 802401a:	3301      	adds	r3, #1
 802401c:	2b20      	cmp	r3, #32
 802401e:	eb01 0003 	add.w	r0, r1, r3
 8024022:	d1f4      	bne.n	802400e <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 8024024:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 8024026:	4601      	mov	r1, r0
 8024028:	e7e9      	b.n	8023ffe <mbedtls_mpi_lsb+0xa>

0802402a <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 802402a:	6843      	ldr	r3, [r0, #4]
 802402c:	b1db      	cbz	r3, 8024066 <mbedtls_mpi_bitlen+0x3c>
 802402e:	6881      	ldr	r1, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 8024030:	1e5a      	subs	r2, r3, #1
 8024032:	009b      	lsls	r3, r3, #2
 8024034:	b97a      	cbnz	r2, 8024056 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 8024036:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    for( j = 0; j < biL; j++ )
 802403a:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 802403c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        if( x & mask ) break;
 8024040:	4219      	tst	r1, r3
 8024042:	d104      	bne.n	802404e <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 8024044:	3001      	adds	r0, #1
 8024046:	2820      	cmp	r0, #32
        mask >>= 1;
 8024048:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 802404c:	d1f8      	bne.n	8024040 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 802404e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024052:	3020      	adds	r0, #32
 8024054:	4770      	bx	lr
        if( X->p[i] != 0 )
 8024056:	18c8      	adds	r0, r1, r3
 8024058:	3b04      	subs	r3, #4
 802405a:	f850 0c04 	ldr.w	r0, [r0, #-4]
 802405e:	2800      	cmp	r0, #0
 8024060:	d1e9      	bne.n	8024036 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 8024062:	3a01      	subs	r2, #1
 8024064:	e7e6      	b.n	8024034 <mbedtls_mpi_bitlen+0xa>
        return( 0 );
 8024066:	4618      	mov	r0, r3
}
 8024068:	4770      	bx	lr

0802406a <mbedtls_mpi_size>:
{
 802406a:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 802406c:	f7ff ffdd 	bl	802402a <mbedtls_mpi_bitlen>
 8024070:	3007      	adds	r0, #7
}
 8024072:	08c0      	lsrs	r0, r0, #3
 8024074:	bd08      	pop	{r3, pc}

08024076 <mbedtls_mpi_read_binary>:
{
 8024076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024078:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 802407a:	f012 0103 	ands.w	r1, r2, #3
 802407e:	bf18      	it	ne
 8024080:	2101      	movne	r1, #1
    if( X->n != limbs )
 8024082:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 8024084:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    if( X->n != limbs )
 8024088:	42a3      	cmp	r3, r4
{
 802408a:	4606      	mov	r6, r0
 802408c:	4615      	mov	r5, r2
    if( X->n != limbs )
 802408e:	d11a      	bne.n	80240c6 <mbedtls_mpi_read_binary+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8024090:	2100      	movs	r1, #0
 8024092:	4630      	mov	r0, r6
 8024094:	f7ff ff82 	bl	8023f9c <mbedtls_mpi_lset>
 8024098:	b9f8      	cbnz	r0, 80240da <mbedtls_mpi_read_binary+0x64>
 802409a:	1979      	adds	r1, r7, r5
    for( i = buflen, j = 0; i > 0; i--, j++ )
 802409c:	4603      	mov	r3, r0
 802409e:	429d      	cmp	r5, r3
 80240a0:	d01b      	beq.n	80240da <mbedtls_mpi_read_binary+0x64>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80240a2:	f023 0703 	bic.w	r7, r3, #3
 80240a6:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 80240aa:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80240ae:	00dc      	lsls	r4, r3, #3
 80240b0:	f004 0418 	and.w	r4, r4, #24
 80240b4:	fa02 f404 	lsl.w	r4, r2, r4
 80240b8:	f85c 2007 	ldr.w	r2, [ip, r7]
 80240bc:	4322      	orrs	r2, r4
 80240be:	f84c 2007 	str.w	r2, [ip, r7]
    for( i = buflen, j = 0; i > 0; i--, j++ )
 80240c2:	3301      	adds	r3, #1
 80240c4:	e7eb      	b.n	802409e <mbedtls_mpi_read_binary+0x28>
        mbedtls_mpi_free( X );
 80240c6:	f7ff fed0 	bl	8023e6a <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80240ca:	4630      	mov	r0, r6
 80240cc:	f7ff fec6 	bl	8023e5c <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80240d0:	4621      	mov	r1, r4
 80240d2:	f7ff fedc 	bl	8023e8e <mbedtls_mpi_grow>
 80240d6:	2800      	cmp	r0, #0
 80240d8:	d0da      	beq.n	8024090 <mbedtls_mpi_read_binary+0x1a>
}
 80240da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080240dc <mbedtls_mpi_write_binary>:
{
 80240dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240de:	4605      	mov	r5, r0
 80240e0:	4608      	mov	r0, r1
    size_t stored_bytes = X->n * ciL;
 80240e2:	686c      	ldr	r4, [r5, #4]
 80240e4:	00a4      	lsls	r4, r4, #2
    if( stored_bytes < buflen )
 80240e6:	4294      	cmp	r4, r2
 80240e8:	d21c      	bcs.n	8024124 <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
 80240ea:	1b12      	subs	r2, r2, r4
 80240ec:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 80240ee:	2100      	movs	r1, #0
 80240f0:	f004 fc6e 	bl	80289d0 <memset>
        p = buf + buflen - stored_bytes;
 80240f4:	4630      	mov	r0, r6
 80240f6:	4622      	mov	r2, r4
 80240f8:	4410      	add	r0, r2
    for( i = 0; i < bytes_to_copy; i++ )
 80240fa:	2300      	movs	r3, #0
 80240fc:	429a      	cmp	r2, r3
 80240fe:	d113      	bne.n	8024128 <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
 8024100:	2000      	movs	r0, #0
}
 8024102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
 8024104:	f023 0c03 	bic.w	ip, r3, #3
 8024108:	68af      	ldr	r7, [r5, #8]
 802410a:	f003 0103 	and.w	r1, r3, #3
 802410e:	00ce      	lsls	r6, r1, #3
 8024110:	f857 100c 	ldr.w	r1, [r7, ip]
 8024114:	40f1      	lsrs	r1, r6
 8024116:	f011 0fff 	tst.w	r1, #255	; 0xff
 802411a:	d111      	bne.n	8024140 <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 802411c:	3301      	adds	r3, #1
 802411e:	42a3      	cmp	r3, r4
 8024120:	d1f0      	bne.n	8024104 <mbedtls_mpi_write_binary+0x28>
 8024122:	e7e9      	b.n	80240f8 <mbedtls_mpi_write_binary+0x1c>
 8024124:	4613      	mov	r3, r2
 8024126:	e7fa      	b.n	802411e <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 8024128:	f023 0603 	bic.w	r6, r3, #3
 802412c:	68af      	ldr	r7, [r5, #8]
 802412e:	f003 0103 	and.w	r1, r3, #3
 8024132:	00cc      	lsls	r4, r1, #3
 8024134:	59b9      	ldr	r1, [r7, r6]
 8024136:	40e1      	lsrs	r1, r4
 8024138:	f800 1d01 	strb.w	r1, [r0, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
 802413c:	3301      	adds	r3, #1
 802413e:	e7dd      	b.n	80240fc <mbedtls_mpi_write_binary+0x20>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8024140:	f06f 0007 	mvn.w	r0, #7
 8024144:	e7dd      	b.n	8024102 <mbedtls_mpi_write_binary+0x26>

08024146 <mbedtls_mpi_shift_l>:
{
 8024146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024148:	4606      	mov	r6, r0
 802414a:	460d      	mov	r5, r1
    v0 = count / (biL    );
 802414c:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 802414e:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 8024152:	f7ff ff6a 	bl	802402a <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 8024156:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 8024158:	4428      	add	r0, r5
    if( X->n * biL < i )
 802415a:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 802415e:	d803      	bhi.n	8024168 <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 8024160:	b974      	cbnz	r4, 8024180 <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 8024162:	bb2f      	cbnz	r7, 80241b0 <mbedtls_mpi_shift_l+0x6a>
    ret = 0;
 8024164:	2000      	movs	r0, #0
 8024166:	e00a      	b.n	802417e <mbedtls_mpi_shift_l+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8024168:	f010 011f 	ands.w	r1, r0, #31
 802416c:	bf18      	it	ne
 802416e:	2101      	movne	r1, #1
 8024170:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8024174:	4630      	mov	r0, r6
 8024176:	f7ff fe8a 	bl	8023e8e <mbedtls_mpi_grow>
 802417a:	2800      	cmp	r0, #0
 802417c:	d0f0      	beq.n	8024160 <mbedtls_mpi_shift_l+0x1a>
}
 802417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 8024180:	6873      	ldr	r3, [r6, #4]
 8024182:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8024186:	3a01      	subs	r2, #1
 8024188:	1b12      	subs	r2, r2, r4
 802418a:	0092      	lsls	r2, r2, #2
 802418c:	00a0      	lsls	r0, r4, #2
 802418e:	42a3      	cmp	r3, r4
 8024190:	d807      	bhi.n	80241a2 <mbedtls_mpi_shift_l+0x5c>
 8024192:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 8024194:	2200      	movs	r2, #0
 8024196:	3b04      	subs	r3, #4
        for( ; i > 0; i-- )
 8024198:	1d19      	adds	r1, r3, #4
 802419a:	d0e2      	beq.n	8024162 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 802419c:	68b1      	ldr	r1, [r6, #8]
 802419e:	50ca      	str	r2, [r1, r3]
 80241a0:	e7f9      	b.n	8024196 <mbedtls_mpi_shift_l+0x50>
            X->p[i - 1] = X->p[i - v0 - 1];
 80241a2:	68b1      	ldr	r1, [r6, #8]
 80241a4:	588d      	ldr	r5, [r1, r2]
 80241a6:	4411      	add	r1, r2
        for( i = X->n; i > v0; i-- )
 80241a8:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 80241aa:	500d      	str	r5, [r1, r0]
 80241ac:	3a04      	subs	r2, #4
 80241ae:	e7ee      	b.n	802418e <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 80241b0:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80241b4:	00a3      	lsls	r3, r4, #2
    mbedtls_mpi_uint r0 = 0, r1;
 80241b6:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 80241b8:	f1c7 0e20 	rsb	lr, r7, #32
        for( i = v0; i < X->n; i++ )
 80241bc:	45a4      	cmp	ip, r4
 80241be:	d9d1      	bls.n	8024164 <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 80241c0:	68b5      	ldr	r5, [r6, #8]
 80241c2:	58e8      	ldr	r0, [r5, r3]
            X->p[i] <<= t1;
 80241c4:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 80241c8:	430a      	orrs	r2, r1
 80241ca:	50ea      	str	r2, [r5, r3]
        for( i = v0; i < X->n; i++ )
 80241cc:	3401      	adds	r4, #1
 80241ce:	3304      	adds	r3, #4
            r1 = X->p[i] >> (biL - t1);
 80241d0:	fa20 f10e 	lsr.w	r1, r0, lr
 80241d4:	e7f2      	b.n	80241bc <mbedtls_mpi_shift_l+0x76>

080241d6 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80241d6:	6843      	ldr	r3, [r0, #4]
{
 80241d8:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 80241da:	094d      	lsrs	r5, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80241dc:	42ab      	cmp	r3, r5
 80241de:	d303      	bcc.n	80241e8 <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
 80241e0:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80241e4:	d104      	bne.n	80241f0 <mbedtls_mpi_shift_r+0x1a>
 80241e6:	b369      	cbz	r1, 8024244 <mbedtls_mpi_shift_r+0x6e>
        return mbedtls_mpi_lset( X, 0 );
 80241e8:	2100      	movs	r1, #0
}
 80241ea:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 80241ec:	f7ff bed6 	b.w	8023f9c <mbedtls_mpi_lset>
    if( v0 > 0 )
 80241f0:	b9e5      	cbnz	r5, 802422c <mbedtls_mpi_shift_r+0x56>
    if( v1 > 0 )
 80241f2:	b129      	cbz	r1, 8024200 <mbedtls_mpi_shift_r+0x2a>
 80241f4:	009a      	lsls	r2, r3, #2
    mbedtls_mpi_uint r0 = 0, r1;
 80241f6:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 80241f8:	f1c1 0c20 	rsb	ip, r1, #32
 80241fc:	3a04      	subs	r2, #4
        for( i = X->n; i > 0; i-- )
 80241fe:	b9bb      	cbnz	r3, 8024230 <mbedtls_mpi_shift_r+0x5a>
}
 8024200:	2000      	movs	r0, #0
 8024202:	bcf0      	pop	{r4, r5, r6, r7}
 8024204:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 8024206:	6884      	ldr	r4, [r0, #8]
 8024208:	1956      	adds	r6, r2, r5
 802420a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 802420e:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 8024212:	3201      	adds	r2, #1
 8024214:	1b5c      	subs	r4, r3, r5
 8024216:	4294      	cmp	r4, r2
 8024218:	d8f5      	bhi.n	8024206 <mbedtls_mpi_shift_r+0x30>
 802421a:	00a2      	lsls	r2, r4, #2
            X->p[i] = 0;
 802421c:	2500      	movs	r5, #0
        for( ; i < X->n; i++ )
 802421e:	42a3      	cmp	r3, r4
 8024220:	d9e7      	bls.n	80241f2 <mbedtls_mpi_shift_r+0x1c>
            X->p[i] = 0;
 8024222:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 8024224:	3401      	adds	r4, #1
            X->p[i] = 0;
 8024226:	50b5      	str	r5, [r6, r2]
 8024228:	3204      	adds	r2, #4
 802422a:	e7f8      	b.n	802421e <mbedtls_mpi_shift_r+0x48>
 802422c:	2200      	movs	r2, #0
 802422e:	e7f1      	b.n	8024214 <mbedtls_mpi_shift_r+0x3e>
            r1 = X->p[i - 1] << (biL - v1);
 8024230:	6887      	ldr	r7, [r0, #8]
 8024232:	58be      	ldr	r6, [r7, r2]
            X->p[i - 1] >>= v1;
 8024234:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 8024238:	432c      	orrs	r4, r5
 802423a:	50bc      	str	r4, [r7, r2]
        for( i = X->n; i > 0; i-- )
 802423c:	3b01      	subs	r3, #1
            r1 = X->p[i - 1] << (biL - v1);
 802423e:	fa06 f50c 	lsl.w	r5, r6, ip
 8024242:	e7db      	b.n	80241fc <mbedtls_mpi_shift_r+0x26>
    if( v0 > 0 )
 8024244:	2b00      	cmp	r3, #0
 8024246:	d0db      	beq.n	8024200 <mbedtls_mpi_shift_r+0x2a>
 8024248:	460a      	mov	r2, r1
 802424a:	e7e3      	b.n	8024214 <mbedtls_mpi_shift_r+0x3e>

0802424c <mbedtls_mpi_cmp_abs>:
{
 802424c:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 802424e:	6843      	ldr	r3, [r0, #4]
 8024250:	009a      	lsls	r2, r3, #2
 8024252:	b933      	cbnz	r3, 8024262 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
 8024254:	684a      	ldr	r2, [r1, #4]
 8024256:	0094      	lsls	r4, r2, #2
 8024258:	b962      	cbnz	r2, 8024274 <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
 802425a:	1c18      	adds	r0, r3, #0
 802425c:	bf18      	it	ne
 802425e:	2001      	movne	r0, #1
 8024260:	e016      	b.n	8024290 <mbedtls_mpi_cmp_abs+0x44>
        if( X->p[i - 1] != 0 )
 8024262:	6884      	ldr	r4, [r0, #8]
 8024264:	4414      	add	r4, r2
 8024266:	3a04      	subs	r2, #4
 8024268:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802426c:	2c00      	cmp	r4, #0
 802426e:	d1f1      	bne.n	8024254 <mbedtls_mpi_cmp_abs+0x8>
    for( i = X->n; i > 0; i-- )
 8024270:	3b01      	subs	r3, #1
 8024272:	e7ee      	b.n	8024252 <mbedtls_mpi_cmp_abs+0x6>
        if( Y->p[j - 1] != 0 )
 8024274:	688d      	ldr	r5, [r1, #8]
 8024276:	192e      	adds	r6, r5, r4
 8024278:	3c04      	subs	r4, #4
 802427a:	f856 6c04 	ldr.w	r6, [r6, #-4]
 802427e:	b90e      	cbnz	r6, 8024284 <mbedtls_mpi_cmp_abs+0x38>
    for( j = Y->n; j > 0; j-- )
 8024280:	3a01      	subs	r2, #1
 8024282:	e7e9      	b.n	8024258 <mbedtls_mpi_cmp_abs+0xc>
    if( i > j ) return(  1 );
 8024284:	4293      	cmp	r3, r2
 8024286:	d80d      	bhi.n	80242a4 <mbedtls_mpi_cmp_abs+0x58>
    if( j > i ) return( -1 );
 8024288:	d30e      	bcc.n	80242a8 <mbedtls_mpi_cmp_abs+0x5c>
 802428a:	009a      	lsls	r2, r3, #2
    for( ; i > 0; i-- )
 802428c:	b90b      	cbnz	r3, 8024292 <mbedtls_mpi_cmp_abs+0x46>
    return( 0 );
 802428e:	4618      	mov	r0, r3
}
 8024290:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8024292:	3a04      	subs	r2, #4
 8024294:	6881      	ldr	r1, [r0, #8]
 8024296:	588c      	ldr	r4, [r1, r2]
 8024298:	58a9      	ldr	r1, [r5, r2]
 802429a:	428c      	cmp	r4, r1
 802429c:	d802      	bhi.n	80242a4 <mbedtls_mpi_cmp_abs+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 802429e:	d303      	bcc.n	80242a8 <mbedtls_mpi_cmp_abs+0x5c>
    for( ; i > 0; i-- )
 80242a0:	3b01      	subs	r3, #1
 80242a2:	e7f3      	b.n	802428c <mbedtls_mpi_cmp_abs+0x40>
    if( i > j ) return(  1 );
 80242a4:	2001      	movs	r0, #1
 80242a6:	e7f3      	b.n	8024290 <mbedtls_mpi_cmp_abs+0x44>
    if( j > i ) return( -1 );
 80242a8:	f04f 30ff 	mov.w	r0, #4294967295
 80242ac:	e7f0      	b.n	8024290 <mbedtls_mpi_cmp_abs+0x44>

080242ae <mbedtls_mpi_cmp_mpi>:
{
 80242ae:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 80242b0:	6843      	ldr	r3, [r0, #4]
 80242b2:	009a      	lsls	r2, r3, #2
 80242b4:	b923      	cbnz	r3, 80242c0 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 80242b6:	684a      	ldr	r2, [r1, #4]
 80242b8:	0094      	lsls	r4, r2, #2
 80242ba:	b952      	cbnz	r2, 80242d2 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 80242bc:	b99b      	cbnz	r3, 80242e6 <mbedtls_mpi_cmp_mpi+0x38>
 80242be:	e024      	b.n	802430a <mbedtls_mpi_cmp_mpi+0x5c>
        if( X->p[i - 1] != 0 )
 80242c0:	6884      	ldr	r4, [r0, #8]
 80242c2:	4414      	add	r4, r2
 80242c4:	3a04      	subs	r2, #4
 80242c6:	f854 4c04 	ldr.w	r4, [r4, #-4]
 80242ca:	2c00      	cmp	r4, #0
 80242cc:	d1f3      	bne.n	80242b6 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 80242ce:	3b01      	subs	r3, #1
 80242d0:	e7f0      	b.n	80242b4 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 80242d2:	688d      	ldr	r5, [r1, #8]
 80242d4:	192e      	adds	r6, r5, r4
 80242d6:	3c04      	subs	r4, #4
 80242d8:	f856 6c04 	ldr.w	r6, [r6, #-4]
 80242dc:	b90e      	cbnz	r6, 80242e2 <mbedtls_mpi_cmp_mpi+0x34>
    for( j = Y->n; j > 0; j-- )
 80242de:	3a01      	subs	r2, #1
 80242e0:	e7eb      	b.n	80242ba <mbedtls_mpi_cmp_mpi+0xc>
    if( i > j ) return(  X->s );
 80242e2:	4293      	cmp	r3, r2
 80242e4:	d902      	bls.n	80242ec <mbedtls_mpi_cmp_mpi+0x3e>
 80242e6:	6802      	ldr	r2, [r0, #0]
}
 80242e8:	4610      	mov	r0, r2
 80242ea:	bd70      	pop	{r4, r5, r6, pc}
 80242ec:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 80242ee:	d201      	bcs.n	80242f4 <mbedtls_mpi_cmp_mpi+0x46>
 80242f0:	424a      	negs	r2, r1
 80242f2:	e7f9      	b.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80242f4:	6802      	ldr	r2, [r0, #0]
 80242f6:	2a00      	cmp	r2, #0
 80242f8:	dd01      	ble.n	80242fe <mbedtls_mpi_cmp_mpi+0x50>
 80242fa:	2900      	cmp	r1, #0
 80242fc:	db12      	blt.n	8024324 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80242fe:	2900      	cmp	r1, #0
 8024300:	dd01      	ble.n	8024306 <mbedtls_mpi_cmp_mpi+0x58>
 8024302:	2a00      	cmp	r2, #0
 8024304:	db10      	blt.n	8024328 <mbedtls_mpi_cmp_mpi+0x7a>
 8024306:	0099      	lsls	r1, r3, #2
    for( ; i > 0; i-- )
 8024308:	b90b      	cbnz	r3, 802430e <mbedtls_mpi_cmp_mpi+0x60>
    return( 0 );
 802430a:	461a      	mov	r2, r3
 802430c:	e7ec      	b.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 802430e:	3904      	subs	r1, #4
 8024310:	6884      	ldr	r4, [r0, #8]
 8024312:	5866      	ldr	r6, [r4, r1]
 8024314:	586c      	ldr	r4, [r5, r1]
 8024316:	42a6      	cmp	r6, r4
 8024318:	d8e6      	bhi.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 802431a:	d201      	bcs.n	8024320 <mbedtls_mpi_cmp_mpi+0x72>
 802431c:	4252      	negs	r2, r2
 802431e:	e7e3      	b.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
 8024320:	3b01      	subs	r3, #1
 8024322:	e7f1      	b.n	8024308 <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8024324:	2201      	movs	r2, #1
 8024326:	e7df      	b.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8024328:	f04f 32ff 	mov.w	r2, #4294967295
 802432c:	e7dc      	b.n	80242e8 <mbedtls_mpi_cmp_mpi+0x3a>

0802432e <mbedtls_mpi_cmp_int>:
{
 802432e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 8024330:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 8024334:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 8024338:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 802433a:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 802433c:	bfb4      	ite	lt
 802433e:	f04f 33ff 	movlt.w	r3, #4294967295
 8024342:	2301      	movge	r3, #1
 8024344:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8024346:	a901      	add	r1, sp, #4
    Y.n = 1;
 8024348:	2301      	movs	r3, #1
 802434a:	9302      	str	r3, [sp, #8]
    Y.p = p;
 802434c:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8024350:	f7ff ffad 	bl	80242ae <mbedtls_mpi_cmp_mpi>
}
 8024354:	b005      	add	sp, #20
 8024356:	f85d fb04 	ldr.w	pc, [sp], #4

0802435a <mbedtls_mpi_add_abs>:
    if( X == B )
 802435a:	4290      	cmp	r0, r2
{
 802435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024360:	4606      	mov	r6, r0
 8024362:	460c      	mov	r4, r1
 8024364:	4615      	mov	r5, r2
    if( X == B )
 8024366:	d002      	beq.n	802436e <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 8024368:	4288      	cmp	r0, r1
 802436a:	d133      	bne.n	80243d4 <mbedtls_mpi_add_abs+0x7a>
{
 802436c:	462c      	mov	r4, r5
    for( j = B->n; j > 0; j-- )
 802436e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    X->s = 1;
 8024372:	2301      	movs	r3, #1
 8024374:	6033      	str	r3, [r6, #0]
 8024376:	ea4f 0388 	mov.w	r3, r8, lsl #2
    for( j = B->n; j > 0; j-- )
 802437a:	f1b8 0f00 	cmp.w	r8, #0
 802437e:	d131      	bne.n	80243e4 <mbedtls_mpi_add_abs+0x8a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8024380:	4641      	mov	r1, r8
 8024382:	4630      	mov	r0, r6
 8024384:	f7ff fd83 	bl	8023e8e <mbedtls_mpi_grow>
 8024388:	4607      	mov	r7, r0
 802438a:	bb40      	cbnz	r0, 80243de <mbedtls_mpi_add_abs+0x84>
    o = B->p; p = X->p; c = 0;
 802438c:	68b3      	ldr	r3, [r6, #8]
 802438e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8024392:	4619      	mov	r1, r3
 8024394:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 8024396:	4605      	mov	r5, r0
 8024398:	45a8      	cmp	r8, r5
 802439a:	d12d      	bne.n	80243f8 <mbedtls_mpi_add_abs+0x9e>
 802439c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
 80243a0:	b1ec      	cbz	r4, 80243de <mbedtls_mpi_add_abs+0x84>
        if( i >= X->n )
 80243a2:	6872      	ldr	r2, [r6, #4]
 80243a4:	42aa      	cmp	r2, r5
 80243a6:	f105 0801 	add.w	r8, r5, #1
 80243aa:	d808      	bhi.n	80243be <mbedtls_mpi_add_abs+0x64>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80243ac:	4641      	mov	r1, r8
 80243ae:	4630      	mov	r0, r6
 80243b0:	f7ff fd6d 	bl	8023e8e <mbedtls_mpi_grow>
 80243b4:	2800      	cmp	r0, #0
 80243b6:	d131      	bne.n	802441c <mbedtls_mpi_add_abs+0xc2>
            p = X->p + i;
 80243b8:	68b3      	ldr	r3, [r6, #8]
 80243ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80243be:	681a      	ldr	r2, [r3, #0]
 80243c0:	1914      	adds	r4, r2, r4
 80243c2:	f04f 0100 	mov.w	r1, #0
 80243c6:	bf28      	it	cs
 80243c8:	2101      	movcs	r1, #1
        *p += c; c = ( *p < c ); i++; p++;
 80243ca:	f843 4b04 	str.w	r4, [r3], #4
 80243ce:	4645      	mov	r5, r8
 80243d0:	460c      	mov	r4, r1
 80243d2:	e7e5      	b.n	80243a0 <mbedtls_mpi_add_abs+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80243d4:	f7ff fd81 	bl	8023eda <mbedtls_mpi_copy>
 80243d8:	4607      	mov	r7, r0
 80243da:	2800      	cmp	r0, #0
 80243dc:	d0c6      	beq.n	802436c <mbedtls_mpi_add_abs+0x12>
}
 80243de:	4638      	mov	r0, r7
 80243e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 80243e4:	68a2      	ldr	r2, [r4, #8]
 80243e6:	441a      	add	r2, r3
 80243e8:	3b04      	subs	r3, #4
 80243ea:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80243ee:	2a00      	cmp	r2, #0
 80243f0:	d1c6      	bne.n	8024380 <mbedtls_mpi_add_abs+0x26>
    for( j = B->n; j > 0; j-- )
 80243f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80243f6:	e7c0      	b.n	802437a <mbedtls_mpi_add_abs+0x20>
 80243f8:	680a      	ldr	r2, [r1, #0]
        tmp= *o;
 80243fa:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
 80243fe:	1914      	adds	r4, r2, r4
 8024400:	f04f 0c00 	mov.w	ip, #0
 8024404:	bf28      	it	cs
 8024406:	f04f 0c01 	movcs.w	ip, #1
 802440a:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 802440c:	f841 4b04 	str.w	r4, [r1], #4
 8024410:	bf2c      	ite	cs
 8024412:	2401      	movcs	r4, #1
 8024414:	2400      	movcc	r4, #0
 8024416:	4464      	add	r4, ip
    for( i = 0; i < j; i++, o++, p++ )
 8024418:	3501      	adds	r5, #1
 802441a:	e7bd      	b.n	8024398 <mbedtls_mpi_add_abs+0x3e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 802441c:	4607      	mov	r7, r0
    return( ret );
 802441e:	e7de      	b.n	80243de <mbedtls_mpi_add_abs+0x84>

08024420 <mbedtls_mpi_sub_abs>:
{
 8024420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024422:	460f      	mov	r7, r1
 8024424:	b085      	sub	sp, #20
 8024426:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8024428:	4611      	mov	r1, r2
 802442a:	4638      	mov	r0, r7
{
 802442c:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 802442e:	f7ff ff0d 	bl	802424c <mbedtls_mpi_cmp_abs>
 8024432:	2800      	cmp	r0, #0
 8024434:	db2f      	blt.n	8024496 <mbedtls_mpi_sub_abs+0x76>
    X->n = 0;
 8024436:	2300      	movs	r3, #0
 8024438:	2201      	movs	r2, #1
    if( X == B )
 802443a:	42b5      	cmp	r5, r6
    X->n = 0;
 802443c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 8024440:	9303      	str	r3, [sp, #12]
    if( X == B )
 8024442:	d106      	bne.n	8024452 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8024444:	4629      	mov	r1, r5
 8024446:	a801      	add	r0, sp, #4
 8024448:	f7ff fd47 	bl	8023eda <mbedtls_mpi_copy>
 802444c:	4604      	mov	r4, r0
 802444e:	b9a0      	cbnz	r0, 802447a <mbedtls_mpi_sub_abs+0x5a>
        B = &TB;
 8024450:	ad01      	add	r5, sp, #4
    if( X != A )
 8024452:	42b7      	cmp	r7, r6
 8024454:	d10a      	bne.n	802446c <mbedtls_mpi_sub_abs+0x4c>
    for( n = B->n; n > 0; n-- )
 8024456:	6868      	ldr	r0, [r5, #4]
 8024458:	68a9      	ldr	r1, [r5, #8]
    X->s = 1;
 802445a:	2301      	movs	r3, #1
 802445c:	6033      	str	r3, [r6, #0]
 802445e:	0083      	lsls	r3, r0, #2
    for( n = B->n; n > 0; n-- )
 8024460:	b988      	cbnz	r0, 8024486 <mbedtls_mpi_sub_abs+0x66>
    mpi_sub_hlp( n, B->p, X->p );
 8024462:	68b2      	ldr	r2, [r6, #8]
 8024464:	f7ff fc00 	bl	8023c68 <mpi_sub_hlp>
    ret = 0;
 8024468:	2400      	movs	r4, #0
 802446a:	e006      	b.n	802447a <mbedtls_mpi_sub_abs+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 802446c:	4639      	mov	r1, r7
 802446e:	4630      	mov	r0, r6
 8024470:	f7ff fd33 	bl	8023eda <mbedtls_mpi_copy>
 8024474:	4604      	mov	r4, r0
 8024476:	2800      	cmp	r0, #0
 8024478:	d0ed      	beq.n	8024456 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 802447a:	a801      	add	r0, sp, #4
 802447c:	f7ff fcf5 	bl	8023e6a <mbedtls_mpi_free>
}
 8024480:	4620      	mov	r0, r4
 8024482:	b005      	add	sp, #20
 8024484:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 8024486:	18ca      	adds	r2, r1, r3
 8024488:	3b04      	subs	r3, #4
 802448a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802448e:	2a00      	cmp	r2, #0
 8024490:	d1e7      	bne.n	8024462 <mbedtls_mpi_sub_abs+0x42>
    for( n = B->n; n > 0; n-- )
 8024492:	3801      	subs	r0, #1
 8024494:	e7e4      	b.n	8024460 <mbedtls_mpi_sub_abs+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8024496:	f06f 0409 	mvn.w	r4, #9
 802449a:	e7f1      	b.n	8024480 <mbedtls_mpi_sub_abs+0x60>

0802449c <mbedtls_mpi_add_mpi>:
{
 802449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 802449e:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 80244a0:	6813      	ldr	r3, [r2, #0]
 80244a2:	4363      	muls	r3, r4
{
 80244a4:	4605      	mov	r5, r0
 80244a6:	460f      	mov	r7, r1
 80244a8:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 80244aa:	d516      	bpl.n	80244da <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80244ac:	4611      	mov	r1, r2
 80244ae:	4638      	mov	r0, r7
 80244b0:	f7ff fecc 	bl	802424c <mbedtls_mpi_cmp_abs>
 80244b4:	2800      	cmp	r0, #0
 80244b6:	db06      	blt.n	80244c6 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80244b8:	4632      	mov	r2, r6
 80244ba:	4639      	mov	r1, r7
 80244bc:	4628      	mov	r0, r5
 80244be:	f7ff ffaf 	bl	8024420 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80244c2:	b140      	cbz	r0, 80244d6 <mbedtls_mpi_add_mpi+0x3a>
}
 80244c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80244c6:	463a      	mov	r2, r7
 80244c8:	4631      	mov	r1, r6
 80244ca:	4628      	mov	r0, r5
 80244cc:	f7ff ffa8 	bl	8024420 <mbedtls_mpi_sub_abs>
 80244d0:	2800      	cmp	r0, #0
 80244d2:	d1f7      	bne.n	80244c4 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 80244d4:	4264      	negs	r4, r4
        X->s = s;
 80244d6:	602c      	str	r4, [r5, #0]
    return( ret );
 80244d8:	e7f4      	b.n	80244c4 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80244da:	f7ff ff3e 	bl	802435a <mbedtls_mpi_add_abs>
 80244de:	e7f0      	b.n	80244c2 <mbedtls_mpi_add_mpi+0x26>

080244e0 <mbedtls_mpi_sub_mpi>:
{
 80244e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 80244e2:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 80244e4:	6813      	ldr	r3, [r2, #0]
 80244e6:	4363      	muls	r3, r4
 80244e8:	2b00      	cmp	r3, #0
{
 80244ea:	4605      	mov	r5, r0
 80244ec:	460f      	mov	r7, r1
 80244ee:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 80244f0:	dd16      	ble.n	8024520 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80244f2:	4611      	mov	r1, r2
 80244f4:	4638      	mov	r0, r7
 80244f6:	f7ff fea9 	bl	802424c <mbedtls_mpi_cmp_abs>
 80244fa:	2800      	cmp	r0, #0
 80244fc:	db06      	blt.n	802450c <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80244fe:	4632      	mov	r2, r6
 8024500:	4639      	mov	r1, r7
 8024502:	4628      	mov	r0, r5
 8024504:	f7ff ff8c 	bl	8024420 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8024508:	b140      	cbz	r0, 802451c <mbedtls_mpi_sub_mpi+0x3c>
}
 802450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 802450c:	463a      	mov	r2, r7
 802450e:	4631      	mov	r1, r6
 8024510:	4628      	mov	r0, r5
 8024512:	f7ff ff85 	bl	8024420 <mbedtls_mpi_sub_abs>
 8024516:	2800      	cmp	r0, #0
 8024518:	d1f7      	bne.n	802450a <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 802451a:	4264      	negs	r4, r4
        X->s = s;
 802451c:	602c      	str	r4, [r5, #0]
    return( ret );
 802451e:	e7f4      	b.n	802450a <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8024520:	f7ff ff1b 	bl	802435a <mbedtls_mpi_add_abs>
 8024524:	e7f0      	b.n	8024508 <mbedtls_mpi_sub_mpi+0x28>

08024526 <mbedtls_mpi_sub_int>:
{
 8024526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 8024528:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 802452c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 8024530:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 8024532:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8024534:	bfb4      	ite	lt
 8024536:	f04f 33ff 	movlt.w	r3, #4294967295
 802453a:	2301      	movge	r3, #1
 802453c:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 802453e:	aa01      	add	r2, sp, #4
    _B.n = 1;
 8024540:	2301      	movs	r3, #1
 8024542:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8024544:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8024548:	f7ff ffca 	bl	80244e0 <mbedtls_mpi_sub_mpi>
}
 802454c:	b005      	add	sp, #20
 802454e:	f85d fb04 	ldr.w	pc, [sp], #4

08024552 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8024552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 8024556:	2300      	movs	r3, #0
{
 8024558:	b086      	sub	sp, #24
 802455a:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 802455c:	4288      	cmp	r0, r1
    X->n = 0;
 802455e:	f04f 0201 	mov.w	r2, #1
{
 8024562:	4680      	mov	r8, r0
 8024564:	460e      	mov	r6, r1
    X->n = 0;
 8024566:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 802456a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 802456e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8024572:	d105      	bne.n	8024580 <mbedtls_mpi_mul_mpi+0x2e>
 8024574:	4668      	mov	r0, sp
 8024576:	f7ff fcb0 	bl	8023eda <mbedtls_mpi_copy>
 802457a:	4604      	mov	r4, r0
 802457c:	bb50      	cbnz	r0, 80245d4 <mbedtls_mpi_mul_mpi+0x82>
 802457e:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8024580:	45a8      	cmp	r8, r5
 8024582:	d106      	bne.n	8024592 <mbedtls_mpi_mul_mpi+0x40>
 8024584:	4641      	mov	r1, r8
 8024586:	a803      	add	r0, sp, #12
 8024588:	f7ff fca7 	bl	8023eda <mbedtls_mpi_copy>
 802458c:	4604      	mov	r4, r0
 802458e:	bb08      	cbnz	r0, 80245d4 <mbedtls_mpi_mul_mpi+0x82>
 8024590:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 8024592:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8024596:	ea4f 0389 	mov.w	r3, r9, lsl #2
 802459a:	f1b9 0f00 	cmp.w	r9, #0
 802459e:	d123      	bne.n	80245e8 <mbedtls_mpi_mul_mpi+0x96>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80245a0:	686f      	ldr	r7, [r5, #4]
 80245a2:	00bb      	lsls	r3, r7, #2
 80245a4:	bb57      	cbnz	r7, 80245fc <mbedtls_mpi_mul_mpi+0xaa>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80245a6:	eb09 0107 	add.w	r1, r9, r7
 80245aa:	4640      	mov	r0, r8
 80245ac:	f7ff fc6f 	bl	8023e8e <mbedtls_mpi_grow>
 80245b0:	4604      	mov	r4, r0
 80245b2:	b978      	cbnz	r0, 80245d4 <mbedtls_mpi_mul_mpi+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80245b4:	4601      	mov	r1, r0
 80245b6:	4640      	mov	r0, r8
 80245b8:	f7ff fcf0 	bl	8023f9c <mbedtls_mpi_lset>
 80245bc:	4604      	mov	r4, r0
 80245be:	b948      	cbnz	r0, 80245d4 <mbedtls_mpi_mul_mpi+0x82>
 80245c0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 80245c4:	f1aa 0a04 	sub.w	sl, sl, #4

    for( ; j > 0; j-- )
 80245c8:	bb0f      	cbnz	r7, 802460e <mbedtls_mpi_mul_mpi+0xbc>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 80245ca:	6832      	ldr	r2, [r6, #0]
 80245cc:	682b      	ldr	r3, [r5, #0]
 80245ce:	4353      	muls	r3, r2
 80245d0:	f8c8 3000 	str.w	r3, [r8]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80245d4:	a803      	add	r0, sp, #12
 80245d6:	f7ff fc48 	bl	8023e6a <mbedtls_mpi_free>
 80245da:	4668      	mov	r0, sp
 80245dc:	f7ff fc45 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 80245e0:	4620      	mov	r0, r4
 80245e2:	b006      	add	sp, #24
 80245e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 80245e8:	68b2      	ldr	r2, [r6, #8]
 80245ea:	441a      	add	r2, r3
 80245ec:	3b04      	subs	r3, #4
 80245ee:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80245f2:	2a00      	cmp	r2, #0
 80245f4:	d1d4      	bne.n	80245a0 <mbedtls_mpi_mul_mpi+0x4e>
    for( i = A->n; i > 0; i-- )
 80245f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80245fa:	e7ce      	b.n	802459a <mbedtls_mpi_mul_mpi+0x48>
        if( B->p[j - 1] != 0 )
 80245fc:	68aa      	ldr	r2, [r5, #8]
 80245fe:	441a      	add	r2, r3
 8024600:	3b04      	subs	r3, #4
 8024602:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8024606:	2a00      	cmp	r2, #0
 8024608:	d1cd      	bne.n	80245a6 <mbedtls_mpi_mul_mpi+0x54>
    for( j = B->n; j > 0; j-- )
 802460a:	3f01      	subs	r7, #1
 802460c:	e7ca      	b.n	80245a4 <mbedtls_mpi_mul_mpi+0x52>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 802460e:	68ab      	ldr	r3, [r5, #8]
 8024610:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8024614:	f853 300a 	ldr.w	r3, [r3, sl]
 8024618:	68b1      	ldr	r1, [r6, #8]
 802461a:	4452      	add	r2, sl
 802461c:	4648      	mov	r0, r9
 802461e:	f7ff fb4d 	bl	8023cbc <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8024622:	3f01      	subs	r7, #1
 8024624:	e7ce      	b.n	80245c4 <mbedtls_mpi_mul_mpi+0x72>

08024626 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8024626:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 8024628:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 802462a:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802462c:	aa01      	add	r2, sp, #4
    _B.n = 1;
 802462e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 8024632:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8024636:	f7ff ff8c 	bl	8024552 <mbedtls_mpi_mul_mpi>
}
 802463a:	b005      	add	sp, #20
 802463c:	f85d fb04 	ldr.w	pc, [sp], #4

08024640 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8024640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024644:	b099      	sub	sp, #100	; 0x64
 8024646:	460f      	mov	r7, r1
 8024648:	9001      	str	r0, [sp, #4]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 802464a:	2100      	movs	r1, #0
 802464c:	4618      	mov	r0, r3
{
 802464e:	4690      	mov	r8, r2
 8024650:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8024652:	f7ff fe6c 	bl	802432e <mbedtls_mpi_cmp_int>
 8024656:	2800      	cmp	r0, #0
 8024658:	f000 81a5 	beq.w	80249a6 <mbedtls_mpi_div_mpi+0x366>
    X->n = 0;
 802465c:	2400      	movs	r4, #0
 802465e:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8024660:	9903      	ldr	r1, [sp, #12]
    X->p = NULL;
 8024662:	9417      	str	r4, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8024664:	4640      	mov	r0, r8
    X->n = 0;
 8024666:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    X->s = 1;
 802466a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    X->p = NULL;
 802466e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    X->n = 0;
 8024672:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
    X->s = 1;
 8024676:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    X->p = NULL;
 802467a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
    X->n = 0;
 802467e:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8024682:	f7ff fde3 	bl	802424c <mbedtls_mpi_cmp_abs>
 8024686:	42a0      	cmp	r0, r4
 8024688:	da26      	bge.n	80246d8 <mbedtls_mpi_div_mpi+0x98>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 802468a:	9b01      	ldr	r3, [sp, #4]
 802468c:	b92b      	cbnz	r3, 802469a <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 802468e:	b9df      	cbnz	r7, 80246c8 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 8024690:	2400      	movs	r4, #0

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 8024692:	4620      	mov	r0, r4
 8024694:	b019      	add	sp, #100	; 0x64
 8024696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 802469a:	4621      	mov	r1, r4
 802469c:	9801      	ldr	r0, [sp, #4]
 802469e:	f7ff fc7d 	bl	8023f9c <mbedtls_mpi_lset>
 80246a2:	4604      	mov	r4, r0
 80246a4:	2800      	cmp	r0, #0
 80246a6:	d0f2      	beq.n	802468e <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80246a8:	a809      	add	r0, sp, #36	; 0x24
 80246aa:	f7ff fbde 	bl	8023e6a <mbedtls_mpi_free>
 80246ae:	a80c      	add	r0, sp, #48	; 0x30
 80246b0:	f7ff fbdb 	bl	8023e6a <mbedtls_mpi_free>
 80246b4:	a80f      	add	r0, sp, #60	; 0x3c
 80246b6:	f7ff fbd8 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 80246ba:	a812      	add	r0, sp, #72	; 0x48
 80246bc:	f7ff fbd5 	bl	8023e6a <mbedtls_mpi_free>
 80246c0:	a815      	add	r0, sp, #84	; 0x54
 80246c2:	f7ff fbd2 	bl	8023e6a <mbedtls_mpi_free>
    return( ret );
 80246c6:	e7e4      	b.n	8024692 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80246c8:	4641      	mov	r1, r8
 80246ca:	4638      	mov	r0, r7
 80246cc:	f7ff fc05 	bl	8023eda <mbedtls_mpi_copy>
 80246d0:	4604      	mov	r4, r0
 80246d2:	2800      	cmp	r0, #0
 80246d4:	d1e8      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
 80246d6:	e7db      	b.n	8024690 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80246d8:	4641      	mov	r1, r8
 80246da:	a809      	add	r0, sp, #36	; 0x24
 80246dc:	f7ff fbfd 	bl	8023eda <mbedtls_mpi_copy>
 80246e0:	4604      	mov	r4, r0
 80246e2:	2800      	cmp	r0, #0
 80246e4:	d1e0      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80246e6:	ae0c      	add	r6, sp, #48	; 0x30
 80246e8:	9903      	ldr	r1, [sp, #12]
 80246ea:	4630      	mov	r0, r6
 80246ec:	f7ff fbf5 	bl	8023eda <mbedtls_mpi_copy>
 80246f0:	4604      	mov	r4, r0
 80246f2:	2800      	cmp	r0, #0
 80246f4:	d1d8      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80246f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
 80246fa:	950c      	str	r5, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80246fc:	3102      	adds	r1, #2
 80246fe:	a80f      	add	r0, sp, #60	; 0x3c
    X.s = Y.s = 1;
 8024700:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8024702:	f7ff fbc4 	bl	8023e8e <mbedtls_mpi_grow>
 8024706:	4604      	mov	r4, r0
 8024708:	2800      	cmp	r0, #0
 802470a:	d1cd      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 802470c:	4601      	mov	r1, r0
 802470e:	a80f      	add	r0, sp, #60	; 0x3c
 8024710:	f7ff fc44 	bl	8023f9c <mbedtls_mpi_lset>
 8024714:	4604      	mov	r4, r0
 8024716:	2800      	cmp	r0, #0
 8024718:	d1c6      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 802471a:	2102      	movs	r1, #2
 802471c:	a812      	add	r0, sp, #72	; 0x48
 802471e:	f7ff fbb6 	bl	8023e8e <mbedtls_mpi_grow>
 8024722:	4604      	mov	r4, r0
 8024724:	2800      	cmp	r0, #0
 8024726:	d1bf      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8024728:	2103      	movs	r1, #3
 802472a:	a815      	add	r0, sp, #84	; 0x54
 802472c:	f7ff fbaf 	bl	8023e8e <mbedtls_mpi_grow>
 8024730:	4604      	mov	r4, r0
 8024732:	2800      	cmp	r0, #0
 8024734:	d1b8      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8024736:	4630      	mov	r0, r6
 8024738:	f7ff fc77 	bl	802402a <mbedtls_mpi_bitlen>
 802473c:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 8024740:	281f      	cmp	r0, #31
 8024742:	d076      	beq.n	8024832 <mbedtls_mpi_div_mpi+0x1f2>
        k = biL - 1 - k;
 8024744:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8024748:	4619      	mov	r1, r3
 802474a:	a809      	add	r0, sp, #36	; 0x24
        k = biL - 1 - k;
 802474c:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 802474e:	f7ff fcfa 	bl	8024146 <mbedtls_mpi_shift_l>
 8024752:	4604      	mov	r4, r0
 8024754:	2800      	cmp	r0, #0
 8024756:	d1a7      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8024758:	9902      	ldr	r1, [sp, #8]
 802475a:	4630      	mov	r0, r6
 802475c:	f7ff fcf3 	bl	8024146 <mbedtls_mpi_shift_l>
 8024760:	4604      	mov	r4, r0
 8024762:	2800      	cmp	r0, #0
 8024764:	d1a0      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 8024766:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    t = Y.n - 1;
 8024768:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    n = X.n - 1;
 802476c:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 8024770:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8024774:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 8024778:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 802477a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 802477e:	4619      	mov	r1, r3
 8024780:	4630      	mov	r0, r6
 8024782:	9304      	str	r3, [sp, #16]
 8024784:	f7ff fcdf 	bl	8024146 <mbedtls_mpi_shift_l>
 8024788:	4604      	mov	r4, r0
 802478a:	2800      	cmp	r0, #0
 802478c:	d18c      	bne.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 802478e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8024792:	4631      	mov	r1, r6
 8024794:	a809      	add	r0, sp, #36	; 0x24
 8024796:	f7ff fd8a 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 802479a:	2800      	cmp	r0, #0
 802479c:	da4b      	bge.n	8024836 <mbedtls_mpi_div_mpi+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 802479e:	9904      	ldr	r1, [sp, #16]
 80247a0:	4630      	mov	r0, r6
 80247a2:	f7ff fd18 	bl	80241d6 <mbedtls_mpi_shift_r>
 80247a6:	4604      	mov	r4, r0
 80247a8:	2800      	cmp	r0, #0
 80247aa:	f47f af7d 	bne.w	80246a8 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 80247ae:	9b00      	ldr	r3, [sp, #0]
 80247b0:	009b      	lsls	r3, r3, #2
 80247b2:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80247b4:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80247b8:	3b02      	subs	r3, #2
 80247ba:	009b      	lsls	r3, r3, #2
 80247bc:	9307      	str	r3, [sp, #28]
 80247be:	f06f 0303 	mvn.w	r3, #3
 80247c2:	fb03 f30a 	mul.w	r3, r3, sl
 80247c6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80247ca:	3d01      	subs	r5, #1
 80247cc:	9306      	str	r3, [sp, #24]
 80247ce:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 80247d2:	00ad      	lsls	r5, r5, #2
 80247d4:	9305      	str	r3, [sp, #20]
    for( i = n; i > t ; i-- )
 80247d6:	9b00      	ldr	r3, [sp, #0]
 80247d8:	4599      	cmp	r9, r3
 80247da:	d83b      	bhi.n	8024854 <mbedtls_mpi_div_mpi+0x214>
    if( Q != NULL )
 80247dc:	9b01      	ldr	r3, [sp, #4]
 80247de:	b15b      	cbz	r3, 80247f8 <mbedtls_mpi_div_mpi+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80247e0:	a90f      	add	r1, sp, #60	; 0x3c
 80247e2:	4618      	mov	r0, r3
 80247e4:	f7ff fb79 	bl	8023eda <mbedtls_mpi_copy>
 80247e8:	bb08      	cbnz	r0, 802482e <mbedtls_mpi_div_mpi+0x1ee>
        Q->s = A->s * B->s;
 80247ea:	9b03      	ldr	r3, [sp, #12]
 80247ec:	f8d8 2000 	ldr.w	r2, [r8]
 80247f0:	681b      	ldr	r3, [r3, #0]
 80247f2:	4353      	muls	r3, r2
 80247f4:	9a01      	ldr	r2, [sp, #4]
 80247f6:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 80247f8:	2f00      	cmp	r7, #0
 80247fa:	f43f af55 	beq.w	80246a8 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80247fe:	9902      	ldr	r1, [sp, #8]
 8024800:	a809      	add	r0, sp, #36	; 0x24
 8024802:	f7ff fce8 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024806:	b990      	cbnz	r0, 802482e <mbedtls_mpi_div_mpi+0x1ee>
        X.s = A->s;
 8024808:	f8d8 3000 	ldr.w	r3, [r8]
 802480c:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 802480e:	a909      	add	r1, sp, #36	; 0x24
 8024810:	4638      	mov	r0, r7
 8024812:	f7ff fb62 	bl	8023eda <mbedtls_mpi_copy>
 8024816:	4601      	mov	r1, r0
 8024818:	2800      	cmp	r0, #0
 802481a:	f040 80c2 	bne.w	80249a2 <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 802481e:	4638      	mov	r0, r7
 8024820:	f7ff fd85 	bl	802432e <mbedtls_mpi_cmp_int>
 8024824:	2800      	cmp	r0, #0
 8024826:	f47f af3f 	bne.w	80246a8 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 802482a:	2301      	movs	r3, #1
 802482c:	603b      	str	r3, [r7, #0]
cleanup:
 802482e:	4604      	mov	r4, r0
 8024830:	e73a      	b.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 8024832:	9402      	str	r4, [sp, #8]
 8024834:	e797      	b.n	8024766 <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 8024836:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024838:	f851 200b 	ldr.w	r2, [r1, fp]
 802483c:	3201      	adds	r2, #1
 802483e:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8024842:	a909      	add	r1, sp, #36	; 0x24
 8024844:	4632      	mov	r2, r6
 8024846:	4608      	mov	r0, r1
 8024848:	f7ff fe4a 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 802484c:	4604      	mov	r4, r0
 802484e:	2800      	cmp	r0, #0
 8024850:	d09f      	beq.n	8024792 <mbedtls_mpi_div_mpi+0x152>
cleanup:
 8024852:	e729      	b.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 8024854:	9804      	ldr	r0, [sp, #16]
 8024856:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802485a:	594b      	ldr	r3, [r1, r5]
 802485c:	5812      	ldr	r2, [r2, r0]
 802485e:	9806      	ldr	r0, [sp, #24]
 8024860:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8024864:	4293      	cmp	r3, r2
 8024866:	eb00 0605 	add.w	r6, r0, r5
 802486a:	f1a5 0b04 	sub.w	fp, r5, #4
 802486e:	d37e      	bcc.n	802496e <mbedtls_mpi_div_mpi+0x32e>
            Z.p[i - t - 1] = ~0;
 8024870:	f04f 33ff 	mov.w	r3, #4294967295
 8024874:	f84a 3006 	str.w	r3, [sl, r6]
        Z.p[i - t - 1]++;
 8024878:	f85a 3006 	ldr.w	r3, [sl, r6]
 802487c:	3301      	adds	r3, #1
 802487e:	f84a 3006 	str.w	r3, [sl, r6]
 8024882:	f1a5 0a08 	sub.w	sl, r5, #8
            Z.p[i - t - 1]--;
 8024886:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024888:	5993      	ldr	r3, [r2, r6]
 802488a:	3b01      	subs	r3, #1
 802488c:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 802488e:	2100      	movs	r1, #0
 8024890:	a812      	add	r0, sp, #72	; 0x48
 8024892:	f7ff fb83 	bl	8023f9c <mbedtls_mpi_lset>
 8024896:	2800      	cmp	r0, #0
 8024898:	d1c9      	bne.n	802482e <mbedtls_mpi_div_mpi+0x1ee>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 802489a:	9b00      	ldr	r3, [sp, #0]
 802489c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802489e:	2b00      	cmp	r3, #0
 80248a0:	d07d      	beq.n	802499e <mbedtls_mpi_div_mpi+0x35e>
 80248a2:	9b07      	ldr	r3, [sp, #28]
 80248a4:	58d1      	ldr	r1, [r2, r3]
 80248a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80248a8:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 80248aa:	9904      	ldr	r1, [sp, #16]
 80248ac:	5852      	ldr	r2, [r2, r1]
 80248ae:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80248b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80248b2:	a912      	add	r1, sp, #72	; 0x48
 80248b4:	4608      	mov	r0, r1
 80248b6:	599a      	ldr	r2, [r3, r6]
 80248b8:	f7ff feb5 	bl	8024626 <mbedtls_mpi_mul_int>
 80248bc:	4601      	mov	r1, r0
 80248be:	2800      	cmp	r0, #0
 80248c0:	d16f      	bne.n	80249a2 <mbedtls_mpi_div_mpi+0x362>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80248c2:	a815      	add	r0, sp, #84	; 0x54
 80248c4:	f7ff fb6a 	bl	8023f9c <mbedtls_mpi_lset>
 80248c8:	2800      	cmp	r0, #0
 80248ca:	d1b0      	bne.n	802482e <mbedtls_mpi_div_mpi+0x1ee>
 80248cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80248ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80248d0:	f1b9 0f01 	cmp.w	r9, #1
 80248d4:	bf18      	it	ne
 80248d6:	f852 000a 	ldrne.w	r0, [r2, sl]
 80248da:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80248dc:	f852 100b 	ldr.w	r1, [r2, fp]
 80248e0:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 80248e2:	5952      	ldr	r2, [r2, r5]
 80248e4:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80248e6:	a915      	add	r1, sp, #84	; 0x54
 80248e8:	a812      	add	r0, sp, #72	; 0x48
 80248ea:	f7ff fce0 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80248ee:	2800      	cmp	r0, #0
 80248f0:	dcc9      	bgt.n	8024886 <mbedtls_mpi_div_mpi+0x246>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80248f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80248f4:	a90c      	add	r1, sp, #48	; 0x30
 80248f6:	599a      	ldr	r2, [r3, r6]
 80248f8:	a812      	add	r0, sp, #72	; 0x48
 80248fa:	f7ff fe94 	bl	8024626 <mbedtls_mpi_mul_int>
 80248fe:	2800      	cmp	r0, #0
 8024900:	d195      	bne.n	802482e <mbedtls_mpi_div_mpi+0x1ee>
 8024902:	9b05      	ldr	r3, [sp, #20]
 8024904:	eb03 0a09 	add.w	sl, r3, r9
 8024908:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 802490c:	4651      	mov	r1, sl
 802490e:	a812      	add	r0, sp, #72	; 0x48
 8024910:	f7ff fc19 	bl	8024146 <mbedtls_mpi_shift_l>
 8024914:	2800      	cmp	r0, #0
 8024916:	d18a      	bne.n	802482e <mbedtls_mpi_div_mpi+0x1ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8024918:	a909      	add	r1, sp, #36	; 0x24
 802491a:	4608      	mov	r0, r1
 802491c:	aa12      	add	r2, sp, #72	; 0x48
 802491e:	f7ff fddf 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024922:	4601      	mov	r1, r0
 8024924:	2800      	cmp	r0, #0
 8024926:	d13c      	bne.n	80249a2 <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8024928:	a809      	add	r0, sp, #36	; 0x24
 802492a:	f7ff fd00 	bl	802432e <mbedtls_mpi_cmp_int>
 802492e:	2800      	cmp	r0, #0
 8024930:	da19      	bge.n	8024966 <mbedtls_mpi_div_mpi+0x326>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8024932:	a90c      	add	r1, sp, #48	; 0x30
 8024934:	a812      	add	r0, sp, #72	; 0x48
 8024936:	f7ff fad0 	bl	8023eda <mbedtls_mpi_copy>
 802493a:	2800      	cmp	r0, #0
 802493c:	f47f af77 	bne.w	802482e <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8024940:	4651      	mov	r1, sl
 8024942:	a812      	add	r0, sp, #72	; 0x48
 8024944:	f7ff fbff 	bl	8024146 <mbedtls_mpi_shift_l>
 8024948:	2800      	cmp	r0, #0
 802494a:	f47f af70 	bne.w	802482e <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 802494e:	a909      	add	r1, sp, #36	; 0x24
 8024950:	aa12      	add	r2, sp, #72	; 0x48
 8024952:	4608      	mov	r0, r1
 8024954:	f7ff fda2 	bl	802449c <mbedtls_mpi_add_mpi>
 8024958:	2800      	cmp	r0, #0
 802495a:	f47f af68 	bne.w	802482e <mbedtls_mpi_div_mpi+0x1ee>
            Z.p[i - t - 1]--;
 802495e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024960:	5993      	ldr	r3, [r2, r6]
 8024962:	3b01      	subs	r3, #1
 8024964:	5193      	str	r3, [r2, r6]
    for( i = n; i > t ; i-- )
 8024966:	f109 39ff 	add.w	r9, r9, #4294967295
 802496a:	3d04      	subs	r5, #4
 802496c:	e733      	b.n	80247d6 <mbedtls_mpi_div_mpi+0x196>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 802496e:	f851 c00b 	ldr.w	ip, [r1, fp]
    if( 0 == d || u1 >= d )
 8024972:	b18a      	cbz	r2, 8024998 <mbedtls_mpi_div_mpi+0x358>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8024974:	4619      	mov	r1, r3
 8024976:	2300      	movs	r3, #0
 8024978:	4618      	mov	r0, r3
    quotient = dividend / d;
 802497a:	ea40 000c 	orr.w	r0, r0, ip
 802497e:	f7f7 fd37 	bl	801c3f0 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
 8024982:	2300      	movs	r3, #0
 8024984:	f04f 32ff 	mov.w	r2, #4294967295
 8024988:	428b      	cmp	r3, r1
 802498a:	bf08      	it	eq
 802498c:	4282      	cmpeq	r2, r0
 802498e:	d200      	bcs.n	8024992 <mbedtls_mpi_div_mpi+0x352>
 8024990:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8024992:	f84a 0006 	str.w	r0, [sl, r6]
 8024996:	e76f      	b.n	8024878 <mbedtls_mpi_div_mpi+0x238>
        return ( ~0 );
 8024998:	f04f 30ff 	mov.w	r0, #4294967295
 802499c:	e7f9      	b.n	8024992 <mbedtls_mpi_div_mpi+0x352>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 802499e:	9900      	ldr	r1, [sp, #0]
 80249a0:	e781      	b.n	80248a6 <mbedtls_mpi_div_mpi+0x266>
cleanup:
 80249a2:	460c      	mov	r4, r1
 80249a4:	e680      	b.n	80246a8 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80249a6:	f06f 040b 	mvn.w	r4, #11
 80249aa:	e672      	b.n	8024692 <mbedtls_mpi_div_mpi+0x52>

080249ac <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80249ac:	b570      	push	{r4, r5, r6, lr}
 80249ae:	4604      	mov	r4, r0
 80249b0:	460d      	mov	r5, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80249b2:	4610      	mov	r0, r2
 80249b4:	2100      	movs	r1, #0
{
 80249b6:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80249b8:	f7ff fcb9 	bl	802432e <mbedtls_mpi_cmp_int>
 80249bc:	2800      	cmp	r0, #0
 80249be:	db24      	blt.n	8024a0a <mbedtls_mpi_mod_mpi+0x5e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80249c0:	462a      	mov	r2, r5
 80249c2:	4633      	mov	r3, r6
 80249c4:	4621      	mov	r1, r4
 80249c6:	2000      	movs	r0, #0
 80249c8:	f7ff fe3a 	bl	8024640 <mbedtls_mpi_div_mpi>
 80249cc:	4605      	mov	r5, r0
 80249ce:	b138      	cbz	r0, 80249e0 <mbedtls_mpi_mod_mpi+0x34>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 80249d0:	4628      	mov	r0, r5
 80249d2:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80249d4:	4632      	mov	r2, r6
 80249d6:	4621      	mov	r1, r4
 80249d8:	4620      	mov	r0, r4
 80249da:	f7ff fd5f 	bl	802449c <mbedtls_mpi_add_mpi>
 80249de:	b990      	cbnz	r0, 8024a06 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80249e0:	2100      	movs	r1, #0
 80249e2:	4620      	mov	r0, r4
 80249e4:	f7ff fca3 	bl	802432e <mbedtls_mpi_cmp_int>
 80249e8:	2800      	cmp	r0, #0
 80249ea:	dbf3      	blt.n	80249d4 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80249ec:	4631      	mov	r1, r6
 80249ee:	4620      	mov	r0, r4
 80249f0:	f7ff fc5d 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80249f4:	2800      	cmp	r0, #0
 80249f6:	dbeb      	blt.n	80249d0 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80249f8:	4632      	mov	r2, r6
 80249fa:	4621      	mov	r1, r4
 80249fc:	4620      	mov	r0, r4
 80249fe:	f7ff fd6f 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024a02:	2800      	cmp	r0, #0
 8024a04:	d0f2      	beq.n	80249ec <mbedtls_mpi_mod_mpi+0x40>
 8024a06:	4605      	mov	r5, r0
 8024a08:	e7e2      	b.n	80249d0 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8024a0a:	f06f 0509 	mvn.w	r5, #9
 8024a0e:	e7df      	b.n	80249d0 <mbedtls_mpi_mod_mpi+0x24>

08024a10 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8024a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a12:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 8024a14:	2300      	movs	r3, #0
 8024a16:	2601      	movs	r6, #1
{
 8024a18:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8024a1a:	a804      	add	r0, sp, #16
{
 8024a1c:	4615      	mov	r5, r2
    X->n = 0;
 8024a1e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    X->s = 1;
 8024a22:	e9cd 3603 	strd	r3, r6, [sp, #12]
    X->p = NULL;
 8024a26:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 8024a2a:	e9cd 6307 	strd	r6, r3, [sp, #28]
    X->p = NULL;
 8024a2e:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8024a30:	f7ff fa53 	bl	8023eda <mbedtls_mpi_copy>
 8024a34:	4604      	mov	r4, r0
 8024a36:	2800      	cmp	r0, #0
 8024a38:	d157      	bne.n	8024aea <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8024a3a:	4629      	mov	r1, r5
 8024a3c:	a807      	add	r0, sp, #28
 8024a3e:	f7ff fa4c 	bl	8023eda <mbedtls_mpi_copy>
 8024a42:	4604      	mov	r4, r0
 8024a44:	2800      	cmp	r0, #0
 8024a46:	d150      	bne.n	8024aea <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 8024a48:	a804      	add	r0, sp, #16
 8024a4a:	f7ff fad3 	bl	8023ff4 <mbedtls_mpi_lsb>
 8024a4e:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 8024a50:	a807      	add	r0, sp, #28
 8024a52:	f7ff facf 	bl	8023ff4 <mbedtls_mpi_lsb>
 8024a56:	4285      	cmp	r5, r0
 8024a58:	bf28      	it	cs
 8024a5a:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8024a5c:	4629      	mov	r1, r5
 8024a5e:	a804      	add	r0, sp, #16
 8024a60:	f7ff fbb9 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024a64:	4604      	mov	r4, r0
 8024a66:	2800      	cmp	r0, #0
 8024a68:	d13f      	bne.n	8024aea <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8024a6a:	4629      	mov	r1, r5
 8024a6c:	a807      	add	r0, sp, #28
 8024a6e:	f7ff fbb2 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024a72:	4604      	mov	r4, r0
 8024a74:	2800      	cmp	r0, #0
 8024a76:	d138      	bne.n	8024aea <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 8024a78:	9607      	str	r6, [sp, #28]
 8024a7a:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8024a7c:	2100      	movs	r1, #0
 8024a7e:	a804      	add	r0, sp, #16
 8024a80:	f7ff fc55 	bl	802432e <mbedtls_mpi_cmp_int>
 8024a84:	b958      	cbnz	r0, 8024a9e <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8024a86:	4629      	mov	r1, r5
 8024a88:	a807      	add	r0, sp, #28
 8024a8a:	f7ff fb5c 	bl	8024146 <mbedtls_mpi_shift_l>
 8024a8e:	4604      	mov	r4, r0
 8024a90:	bb58      	cbnz	r0, 8024aea <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8024a92:	a907      	add	r1, sp, #28
 8024a94:	4638      	mov	r0, r7
 8024a96:	f7ff fa20 	bl	8023eda <mbedtls_mpi_copy>
 8024a9a:	4604      	mov	r4, r0

cleanup:
 8024a9c:	e025      	b.n	8024aea <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8024a9e:	a804      	add	r0, sp, #16
 8024aa0:	f7ff faa8 	bl	8023ff4 <mbedtls_mpi_lsb>
 8024aa4:	4601      	mov	r1, r0
 8024aa6:	a804      	add	r0, sp, #16
 8024aa8:	f7ff fb95 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024aac:	4604      	mov	r4, r0
 8024aae:	b9e0      	cbnz	r0, 8024aea <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8024ab0:	a807      	add	r0, sp, #28
 8024ab2:	f7ff fa9f 	bl	8023ff4 <mbedtls_mpi_lsb>
 8024ab6:	4601      	mov	r1, r0
 8024ab8:	a807      	add	r0, sp, #28
 8024aba:	f7ff fb8c 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024abe:	4604      	mov	r4, r0
 8024ac0:	b998      	cbnz	r0, 8024aea <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8024ac2:	a907      	add	r1, sp, #28
 8024ac4:	a804      	add	r0, sp, #16
 8024ac6:	f7ff fbf2 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8024aca:	2800      	cmp	r0, #0
 8024acc:	db19      	blt.n	8024b02 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8024ace:	a904      	add	r1, sp, #16
 8024ad0:	aa07      	add	r2, sp, #28
 8024ad2:	4608      	mov	r0, r1
 8024ad4:	f7ff fca4 	bl	8024420 <mbedtls_mpi_sub_abs>
 8024ad8:	4604      	mov	r4, r0
 8024ada:	b930      	cbnz	r0, 8024aea <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8024adc:	2101      	movs	r1, #1
 8024ade:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8024ae0:	f7ff fb79 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024ae4:	4604      	mov	r4, r0
 8024ae6:	2800      	cmp	r0, #0
 8024ae8:	d0c8      	beq.n	8024a7c <mbedtls_mpi_gcd+0x6c>

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8024aea:	a801      	add	r0, sp, #4
 8024aec:	f7ff f9bd 	bl	8023e6a <mbedtls_mpi_free>
 8024af0:	a804      	add	r0, sp, #16
 8024af2:	f7ff f9ba 	bl	8023e6a <mbedtls_mpi_free>
 8024af6:	a807      	add	r0, sp, #28
 8024af8:	f7ff f9b7 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 8024afc:	4620      	mov	r0, r4
 8024afe:	b00b      	add	sp, #44	; 0x2c
 8024b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8024b02:	a907      	add	r1, sp, #28
 8024b04:	aa04      	add	r2, sp, #16
 8024b06:	4608      	mov	r0, r1
 8024b08:	f7ff fc8a 	bl	8024420 <mbedtls_mpi_sub_abs>
 8024b0c:	4604      	mov	r4, r0
 8024b0e:	2800      	cmp	r0, #0
 8024b10:	d1eb      	bne.n	8024aea <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8024b12:	2101      	movs	r1, #1
 8024b14:	a807      	add	r0, sp, #28
 8024b16:	e7e3      	b.n	8024ae0 <mbedtls_mpi_gcd+0xd0>

08024b18 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8024b18:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 8024b1a:	2930      	cmp	r1, #48	; 0x30
{
 8024b1c:	b08c      	sub	sp, #48	; 0x30
 8024b1e:	4606      	mov	r6, r0
 8024b20:	460d      	mov	r5, r1
 8024b22:	4614      	mov	r4, r2
    if( size > MBEDTLS_MPI_MAX_SIZE )
 8024b24:	d812      	bhi.n	8024b4c <mbedtls_mpi_fill_random+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 8024b26:	460a      	mov	r2, r1
 8024b28:	4618      	mov	r0, r3
 8024b2a:	4669      	mov	r1, sp
 8024b2c:	47a0      	blx	r4
 8024b2e:	4604      	mov	r4, r0
 8024b30:	b928      	cbnz	r0, 8024b3e <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 8024b32:	462a      	mov	r2, r5
 8024b34:	4669      	mov	r1, sp
 8024b36:	4630      	mov	r0, r6
 8024b38:	f7ff fa9d 	bl	8024076 <mbedtls_mpi_read_binary>
 8024b3c:	4604      	mov	r4, r0

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024b3e:	2130      	movs	r1, #48	; 0x30
 8024b40:	4668      	mov	r0, sp
 8024b42:	f002 f921 	bl	8026d88 <mbedtls_platform_zeroize>
    return( ret );
}
 8024b46:	4620      	mov	r0, r4
 8024b48:	b00c      	add	sp, #48	; 0x30
 8024b4a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8024b4c:	f06f 0403 	mvn.w	r4, #3
 8024b50:	e7f9      	b.n	8024b46 <mbedtls_mpi_fill_random+0x2e>

08024b52 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8024b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b56:	4680      	mov	r8, r0
 8024b58:	b09c      	sub	sp, #112	; 0x70
 8024b5a:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8024b5c:	4610      	mov	r0, r2
 8024b5e:	2101      	movs	r1, #1
{
 8024b60:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8024b62:	f7ff fbe4 	bl	802432e <mbedtls_mpi_cmp_int>
 8024b66:	2800      	cmp	r0, #0
 8024b68:	f340 8143 	ble.w	8024df2 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 8024b6c:	2300      	movs	r3, #0
 8024b6e:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8024b70:	4632      	mov	r2, r6
 8024b72:	4639      	mov	r1, r7
 8024b74:	a801      	add	r0, sp, #4
    X->n = 0;
 8024b76:	e9cd 5304 	strd	r5, r3, [sp, #16]
    X->s = 1;
 8024b7a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    X->p = NULL;
 8024b7e:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 8024b82:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
    X->s = 1;
 8024b86:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    X->p = NULL;
 8024b8a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 8024b8e:	e9cd 5301 	strd	r5, r3, [sp, #4]
    X->p = NULL;
 8024b92:	9303      	str	r3, [sp, #12]
    X->n = 0;
 8024b94:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    X->s = 1;
 8024b98:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
    X->p = NULL;
 8024b9c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 8024ba0:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
    X->s = 1;
 8024ba4:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
    X->p = NULL;
 8024ba8:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8024bac:	f7ff ff30 	bl	8024a10 <mbedtls_mpi_gcd>
 8024bb0:	4604      	mov	r4, r0
 8024bb2:	2800      	cmp	r0, #0
 8024bb4:	d154      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8024bb6:	4629      	mov	r1, r5
 8024bb8:	a801      	add	r0, sp, #4
 8024bba:	f7ff fbb8 	bl	802432e <mbedtls_mpi_cmp_int>
 8024bbe:	2800      	cmp	r0, #0
 8024bc0:	f040 8114 	bne.w	8024dec <mbedtls_mpi_inv_mod+0x29a>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8024bc4:	4632      	mov	r2, r6
 8024bc6:	4639      	mov	r1, r7
 8024bc8:	a804      	add	r0, sp, #16
 8024bca:	f7ff feef 	bl	80249ac <mbedtls_mpi_mod_mpi>
 8024bce:	4604      	mov	r4, r0
 8024bd0:	2800      	cmp	r0, #0
 8024bd2:	d145      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8024bd4:	a904      	add	r1, sp, #16
 8024bd6:	a807      	add	r0, sp, #28
 8024bd8:	f7ff f97f 	bl	8023eda <mbedtls_mpi_copy>
 8024bdc:	4604      	mov	r4, r0
 8024bde:	2800      	cmp	r0, #0
 8024be0:	d13e      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8024be2:	4631      	mov	r1, r6
 8024be4:	a810      	add	r0, sp, #64	; 0x40
 8024be6:	f7ff f978 	bl	8023eda <mbedtls_mpi_copy>
 8024bea:	4604      	mov	r4, r0
 8024bec:	2800      	cmp	r0, #0
 8024bee:	d137      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8024bf0:	4631      	mov	r1, r6
 8024bf2:	a813      	add	r0, sp, #76	; 0x4c
 8024bf4:	f7ff f971 	bl	8023eda <mbedtls_mpi_copy>
 8024bf8:	4604      	mov	r4, r0
 8024bfa:	2800      	cmp	r0, #0
 8024bfc:	d130      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8024bfe:	4629      	mov	r1, r5
 8024c00:	a80a      	add	r0, sp, #40	; 0x28
 8024c02:	f7ff f9cb 	bl	8023f9c <mbedtls_mpi_lset>
 8024c06:	4604      	mov	r4, r0
 8024c08:	bb50      	cbnz	r0, 8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8024c0a:	4601      	mov	r1, r0
 8024c0c:	a80d      	add	r0, sp, #52	; 0x34
 8024c0e:	f7ff f9c5 	bl	8023f9c <mbedtls_mpi_lset>
 8024c12:	4604      	mov	r4, r0
 8024c14:	bb20      	cbnz	r0, 8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8024c16:	4601      	mov	r1, r0
 8024c18:	a816      	add	r0, sp, #88	; 0x58
 8024c1a:	f7ff f9bf 	bl	8023f9c <mbedtls_mpi_lset>
 8024c1e:	4604      	mov	r4, r0
 8024c20:	b9f0      	cbnz	r0, 8024c60 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8024c22:	4629      	mov	r1, r5
 8024c24:	a819      	add	r0, sp, #100	; 0x64
 8024c26:	f7ff f9b9 	bl	8023f9c <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8024c2a:	4604      	mov	r4, r0
 8024c2c:	b9c0      	cbnz	r0, 8024c60 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 8024c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c30:	681b      	ldr	r3, [r3, #0]
 8024c32:	07d8      	lsls	r0, r3, #31
 8024c34:	d466      	bmi.n	8024d04 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8024c36:	2101      	movs	r1, #1
 8024c38:	a807      	add	r0, sp, #28
 8024c3a:	f7ff facc 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024c3e:	4604      	mov	r4, r0
 8024c40:	b970      	cbnz	r0, 8024c60 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8024c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	07dd      	lsls	r5, r3, #31
 8024c48:	d429      	bmi.n	8024c9e <mbedtls_mpi_inv_mod+0x14c>
 8024c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024c4c:	681b      	ldr	r3, [r3, #0]
 8024c4e:	07dc      	lsls	r4, r3, #31
 8024c50:	d425      	bmi.n	8024c9e <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 8024c52:	2101      	movs	r1, #1
 8024c54:	a80a      	add	r0, sp, #40	; 0x28
 8024c56:	f7ff fabe 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024c5a:	4604      	mov	r4, r0
 8024c5c:	2800      	cmp	r0, #0
 8024c5e:	d02f      	beq.n	8024cc0 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 8024c60:	a804      	add	r0, sp, #16
 8024c62:	f7ff f902 	bl	8023e6a <mbedtls_mpi_free>
 8024c66:	a807      	add	r0, sp, #28
 8024c68:	f7ff f8ff 	bl	8023e6a <mbedtls_mpi_free>
 8024c6c:	a80a      	add	r0, sp, #40	; 0x28
 8024c6e:	f7ff f8fc 	bl	8023e6a <mbedtls_mpi_free>
 8024c72:	a80d      	add	r0, sp, #52	; 0x34
 8024c74:	f7ff f8f9 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 8024c78:	a801      	add	r0, sp, #4
 8024c7a:	f7ff f8f6 	bl	8023e6a <mbedtls_mpi_free>
 8024c7e:	a810      	add	r0, sp, #64	; 0x40
 8024c80:	f7ff f8f3 	bl	8023e6a <mbedtls_mpi_free>
 8024c84:	a813      	add	r0, sp, #76	; 0x4c
 8024c86:	f7ff f8f0 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8024c8a:	a816      	add	r0, sp, #88	; 0x58
 8024c8c:	f7ff f8ed 	bl	8023e6a <mbedtls_mpi_free>
 8024c90:	a819      	add	r0, sp, #100	; 0x64
 8024c92:	f7ff f8ea 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 8024c96:	4620      	mov	r0, r4
 8024c98:	b01c      	add	sp, #112	; 0x70
 8024c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8024c9e:	a90a      	add	r1, sp, #40	; 0x28
 8024ca0:	aa10      	add	r2, sp, #64	; 0x40
 8024ca2:	4608      	mov	r0, r1
 8024ca4:	f7ff fbfa 	bl	802449c <mbedtls_mpi_add_mpi>
 8024ca8:	4604      	mov	r4, r0
 8024caa:	2800      	cmp	r0, #0
 8024cac:	d1d8      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8024cae:	a90d      	add	r1, sp, #52	; 0x34
 8024cb0:	aa04      	add	r2, sp, #16
 8024cb2:	4608      	mov	r0, r1
 8024cb4:	f7ff fc14 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024cb8:	4604      	mov	r4, r0
 8024cba:	2800      	cmp	r0, #0
 8024cbc:	d0c9      	beq.n	8024c52 <mbedtls_mpi_inv_mod+0x100>
 8024cbe:	e7cf      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8024cc0:	2101      	movs	r1, #1
 8024cc2:	a80d      	add	r0, sp, #52	; 0x34
 8024cc4:	f7ff fa87 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024cc8:	e7af      	b.n	8024c2a <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8024cca:	2101      	movs	r1, #1
 8024ccc:	a813      	add	r0, sp, #76	; 0x4c
 8024cce:	f7ff fa82 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024cd2:	4604      	mov	r4, r0
 8024cd4:	2800      	cmp	r0, #0
 8024cd6:	d1c3      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8024cd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024cda:	681b      	ldr	r3, [r3, #0]
 8024cdc:	07d9      	lsls	r1, r3, #31
 8024cde:	d44c      	bmi.n	8024d7a <mbedtls_mpi_inv_mod+0x228>
 8024ce0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024ce2:	681b      	ldr	r3, [r3, #0]
 8024ce4:	07da      	lsls	r2, r3, #31
 8024ce6:	d448      	bmi.n	8024d7a <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8024ce8:	2101      	movs	r1, #1
 8024cea:	a816      	add	r0, sp, #88	; 0x58
 8024cec:	f7ff fa73 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024cf0:	4604      	mov	r4, r0
 8024cf2:	2800      	cmp	r0, #0
 8024cf4:	d1b4      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8024cf6:	2101      	movs	r1, #1
 8024cf8:	a819      	add	r0, sp, #100	; 0x64
 8024cfa:	f7ff fa6c 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024cfe:	4604      	mov	r4, r0
 8024d00:	2800      	cmp	r0, #0
 8024d02:	d1ad      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 8024d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024d06:	681b      	ldr	r3, [r3, #0]
 8024d08:	07db      	lsls	r3, r3, #31
 8024d0a:	d5de      	bpl.n	8024cca <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8024d0c:	a913      	add	r1, sp, #76	; 0x4c
 8024d0e:	a807      	add	r0, sp, #28
 8024d10:	f7ff facd 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8024d14:	2800      	cmp	r0, #0
 8024d16:	db42      	blt.n	8024d9e <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8024d18:	a907      	add	r1, sp, #28
 8024d1a:	aa13      	add	r2, sp, #76	; 0x4c
 8024d1c:	4608      	mov	r0, r1
 8024d1e:	f7ff fbdf 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024d22:	4604      	mov	r4, r0
 8024d24:	2800      	cmp	r0, #0
 8024d26:	d19b      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8024d28:	a90a      	add	r1, sp, #40	; 0x28
 8024d2a:	aa16      	add	r2, sp, #88	; 0x58
 8024d2c:	4608      	mov	r0, r1
 8024d2e:	f7ff fbd7 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024d32:	4604      	mov	r4, r0
 8024d34:	2800      	cmp	r0, #0
 8024d36:	d193      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8024d38:	aa19      	add	r2, sp, #100	; 0x64
 8024d3a:	a90d      	add	r1, sp, #52	; 0x34
 8024d3c:	4608      	mov	r0, r1
 8024d3e:	f7ff fbcf 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024d42:	4604      	mov	r4, r0
 8024d44:	2800      	cmp	r0, #0
 8024d46:	d18b      	bne.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8024d48:	2100      	movs	r1, #0
 8024d4a:	a807      	add	r0, sp, #28
 8024d4c:	f7ff faef 	bl	802432e <mbedtls_mpi_cmp_int>
 8024d50:	2800      	cmp	r0, #0
 8024d52:	f47f af6c 	bne.w	8024c2e <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8024d56:	2100      	movs	r1, #0
 8024d58:	a816      	add	r0, sp, #88	; 0x58
 8024d5a:	f7ff fae8 	bl	802432e <mbedtls_mpi_cmp_int>
 8024d5e:	2800      	cmp	r0, #0
 8024d60:	db32      	blt.n	8024dc8 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8024d62:	4631      	mov	r1, r6
 8024d64:	a816      	add	r0, sp, #88	; 0x58
 8024d66:	f7ff faa2 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8024d6a:	2800      	cmp	r0, #0
 8024d6c:	da35      	bge.n	8024dda <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8024d6e:	a916      	add	r1, sp, #88	; 0x58
 8024d70:	4640      	mov	r0, r8
 8024d72:	f7ff f8b2 	bl	8023eda <mbedtls_mpi_copy>
 8024d76:	4604      	mov	r4, r0
cleanup:
 8024d78:	e772      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8024d7a:	a916      	add	r1, sp, #88	; 0x58
 8024d7c:	aa10      	add	r2, sp, #64	; 0x40
 8024d7e:	4608      	mov	r0, r1
 8024d80:	f7ff fb8c 	bl	802449c <mbedtls_mpi_add_mpi>
 8024d84:	4604      	mov	r4, r0
 8024d86:	2800      	cmp	r0, #0
 8024d88:	f47f af6a 	bne.w	8024c60 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8024d8c:	a919      	add	r1, sp, #100	; 0x64
 8024d8e:	aa04      	add	r2, sp, #16
 8024d90:	4608      	mov	r0, r1
 8024d92:	f7ff fba5 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024d96:	4604      	mov	r4, r0
 8024d98:	2800      	cmp	r0, #0
 8024d9a:	d0a5      	beq.n	8024ce8 <mbedtls_mpi_inv_mod+0x196>
 8024d9c:	e760      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8024d9e:	a913      	add	r1, sp, #76	; 0x4c
 8024da0:	aa07      	add	r2, sp, #28
 8024da2:	4608      	mov	r0, r1
 8024da4:	f7ff fb9c 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024da8:	4604      	mov	r4, r0
 8024daa:	2800      	cmp	r0, #0
 8024dac:	f47f af58 	bne.w	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8024db0:	a916      	add	r1, sp, #88	; 0x58
 8024db2:	aa0a      	add	r2, sp, #40	; 0x28
 8024db4:	4608      	mov	r0, r1
 8024db6:	f7ff fb93 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024dba:	4604      	mov	r4, r0
 8024dbc:	2800      	cmp	r0, #0
 8024dbe:	f47f af4f 	bne.w	8024c60 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8024dc2:	aa0d      	add	r2, sp, #52	; 0x34
 8024dc4:	a919      	add	r1, sp, #100	; 0x64
 8024dc6:	e7b9      	b.n	8024d3c <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8024dc8:	a916      	add	r1, sp, #88	; 0x58
 8024dca:	4632      	mov	r2, r6
 8024dcc:	4608      	mov	r0, r1
 8024dce:	f7ff fb65 	bl	802449c <mbedtls_mpi_add_mpi>
 8024dd2:	4604      	mov	r4, r0
 8024dd4:	2800      	cmp	r0, #0
 8024dd6:	d0be      	beq.n	8024d56 <mbedtls_mpi_inv_mod+0x204>
cleanup:
 8024dd8:	e742      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8024dda:	a916      	add	r1, sp, #88	; 0x58
 8024ddc:	4632      	mov	r2, r6
 8024dde:	4608      	mov	r0, r1
 8024de0:	f7ff fb7e 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8024de4:	4604      	mov	r4, r0
 8024de6:	2800      	cmp	r0, #0
 8024de8:	d0bb      	beq.n	8024d62 <mbedtls_mpi_inv_mod+0x210>
cleanup:
 8024dea:	e739      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8024dec:	f06f 040d 	mvn.w	r4, #13
 8024df0:	e736      	b.n	8024c60 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8024df2:	f06f 0403 	mvn.w	r4, #3
 8024df6:	e74e      	b.n	8024c96 <mbedtls_mpi_inv_mod+0x144>

08024df8 <ecdsa_sign_restartable.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 8024df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dfc:	469a      	mov	sl, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8024dfe:	6d43      	ldr	r3, [r0, #84]	; 0x54
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 8024e00:	b09d      	sub	sp, #116	; 0x74
 8024e02:	4605      	mov	r5, r0
 8024e04:	4689      	mov	r9, r1
 8024e06:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	f000 80e1 	beq.w	8024fd0 <ecdsa_sign_restartable.isra.0+0x1d8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8024e0e:	2101      	movs	r1, #1
 8024e10:	4650      	mov	r0, sl
 8024e12:	f7ff fa8c 	bl	802432e <mbedtls_mpi_cmp_int>
 8024e16:	2800      	cmp	r0, #0
 8024e18:	da04      	bge.n	8024e24 <ecdsa_sign_restartable.isra.0+0x2c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8024e1a:	4b6e      	ldr	r3, [pc, #440]	; (8024fd4 <ecdsa_sign_restartable.isra.0+0x1dc>)
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	b01d      	add	sp, #116	; 0x74
 8024e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8024e24:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 8024e28:	4639      	mov	r1, r7
 8024e2a:	4650      	mov	r0, sl
 8024e2c:	f7ff fa3f 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8024e30:	2800      	cmp	r0, #0
 8024e32:	daf2      	bge.n	8024e1a <ecdsa_sign_restartable.isra.0+0x22>
    mbedtls_ecp_point_init( &R );
 8024e34:	a813      	add	r0, sp, #76	; 0x4c
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8024e36:	ae0a      	add	r6, sp, #40	; 0x28
    mbedtls_ecp_point_init( &R );
 8024e38:	f000 fd1a 	bl	8025870 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8024e3c:	4630      	mov	r0, r6
 8024e3e:	f7ff f80d 	bl	8023e5c <mbedtls_mpi_init>
 8024e42:	a80d      	add	r0, sp, #52	; 0x34
 8024e44:	f7ff f80a 	bl	8023e5c <mbedtls_mpi_init>
 8024e48:	a810      	add	r0, sp, #64	; 0x40
 8024e4a:	f7ff f807 	bl	8023e5c <mbedtls_mpi_init>
 8024e4e:	f10d 0820 	add.w	r8, sp, #32
    *p_sign_tries = 0;
 8024e52:	2300      	movs	r3, #0
        *p_key_tries = 0;
 8024e54:	e9cd 8305 	strd	r8, r3, [sp, #20]
    *p_sign_tries = 0;
 8024e58:	9309      	str	r3, [sp, #36]	; 0x24
        if( *p_sign_tries++ > 10 )
 8024e5a:	f858 3f04 	ldr.w	r3, [r8, #4]!
 8024e5e:	2b0a      	cmp	r3, #10
 8024e60:	f300 80b4 	bgt.w	8024fcc <ecdsa_sign_restartable.isra.0+0x1d4>
        *p_key_tries = 0;
 8024e64:	9b05      	ldr	r3, [sp, #20]
 8024e66:	461a      	mov	r2, r3
 8024e68:	9b06      	ldr	r3, [sp, #24]
 8024e6a:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8024e6c:	f105 0b28 	add.w	fp, r5, #40	; 0x28
            if( *p_key_tries++ > 10 )
 8024e70:	9a05      	ldr	r2, [sp, #20]
 8024e72:	f852 3b04 	ldr.w	r3, [r2], #4
 8024e76:	9205      	str	r2, [sp, #20]
 8024e78:	2b0a      	cmp	r3, #10
 8024e7a:	f300 80a7 	bgt.w	8024fcc <ecdsa_sign_restartable.isra.0+0x1d4>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 8024e7e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8024e82:	4631      	mov	r1, r6
 8024e84:	4628      	mov	r0, r5
 8024e86:	f001 fa97 	bl	80263b8 <mbedtls_ecp_gen_privkey>
 8024e8a:	4603      	mov	r3, r0
 8024e8c:	2800      	cmp	r0, #0
 8024e8e:	f040 8085 	bne.w	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8024e92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024e94:	9301      	str	r3, [sp, #4]
 8024e96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e98:	9002      	str	r0, [sp, #8]
 8024e9a:	9300      	str	r3, [sp, #0]
 8024e9c:	4632      	mov	r2, r6
 8024e9e:	465b      	mov	r3, fp
 8024ea0:	a913      	add	r1, sp, #76	; 0x4c
 8024ea2:	4628      	mov	r0, r5
 8024ea4:	f001 f898 	bl	8025fd8 <mbedtls_ecp_mul_restartable>
 8024ea8:	4603      	mov	r3, r0
 8024eaa:	2800      	cmp	r0, #0
 8024eac:	d176      	bne.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 8024eae:	463a      	mov	r2, r7
 8024eb0:	a913      	add	r1, sp, #76	; 0x4c
 8024eb2:	4648      	mov	r0, r9
 8024eb4:	f7ff fd7a 	bl	80249ac <mbedtls_mpi_mod_mpi>
 8024eb8:	4603      	mov	r3, r0
 8024eba:	2800      	cmp	r0, #0
 8024ebc:	d16e      	bne.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 8024ebe:	4601      	mov	r1, r0
 8024ec0:	4648      	mov	r0, r9
 8024ec2:	f7ff fa34 	bl	802432e <mbedtls_mpi_cmp_int>
 8024ec6:	2800      	cmp	r0, #0
 8024ec8:	d0d2      	beq.n	8024e70 <ecdsa_sign_restartable.isra.0+0x78>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8024eca:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    size_t use_size = blen > n_size ? n_size : blen;
 8024ecc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8024ece:	f101 0b07 	add.w	fp, r1, #7
 8024ed2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    size_t use_size = blen > n_size ? n_size : blen;
 8024ed6:	459b      	cmp	fp, r3
 8024ed8:	bf28      	it	cs
 8024eda:	469b      	movcs	fp, r3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8024edc:	465a      	mov	r2, fp
 8024ede:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024ee0:	a80d      	add	r0, sp, #52	; 0x34
 8024ee2:	f7ff f8c8 	bl	8024076 <mbedtls_mpi_read_binary>
 8024ee6:	4603      	mov	r3, r0
 8024ee8:	2800      	cmp	r0, #0
 8024eea:	d157      	bne.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
    if( use_size * 8 > grp->nbits )
 8024eec:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8024eee:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8024ef2:	458b      	cmp	fp, r1
 8024ef4:	d84a      	bhi.n	8024f8c <ecdsa_sign_restartable.isra.0+0x194>
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 8024ef6:	4639      	mov	r1, r7
 8024ef8:	a80d      	add	r0, sp, #52	; 0x34
 8024efa:	f7ff f9d8 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8024efe:	2800      	cmp	r0, #0
 8024f00:	da5b      	bge.n	8024fba <ecdsa_sign_restartable.isra.0+0x1c2>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 8024f02:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8024f06:	a910      	add	r1, sp, #64	; 0x40
 8024f08:	4628      	mov	r0, r5
 8024f0a:	f001 fa55 	bl	80263b8 <mbedtls_ecp_gen_privkey>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	2800      	cmp	r0, #0
 8024f12:	d143      	bne.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 8024f14:	4652      	mov	r2, sl
 8024f16:	4649      	mov	r1, r9
 8024f18:	4620      	mov	r0, r4
 8024f1a:	f7ff fb1a 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8024f1e:	4603      	mov	r3, r0
 8024f20:	2800      	cmp	r0, #0
 8024f22:	d13b      	bne.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8024f24:	a90d      	add	r1, sp, #52	; 0x34
 8024f26:	4622      	mov	r2, r4
 8024f28:	4608      	mov	r0, r1
 8024f2a:	f7ff fab7 	bl	802449c <mbedtls_mpi_add_mpi>
 8024f2e:	4603      	mov	r3, r0
 8024f30:	bba0      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8024f32:	a90d      	add	r1, sp, #52	; 0x34
 8024f34:	aa10      	add	r2, sp, #64	; 0x40
 8024f36:	4608      	mov	r0, r1
 8024f38:	f7ff fb0b 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8024f3c:	4603      	mov	r3, r0
 8024f3e:	bb68      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 8024f40:	aa10      	add	r2, sp, #64	; 0x40
 8024f42:	4631      	mov	r1, r6
 8024f44:	4630      	mov	r0, r6
 8024f46:	f7ff fb04 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	bb30      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 8024f4e:	463a      	mov	r2, r7
 8024f50:	4631      	mov	r1, r6
 8024f52:	4620      	mov	r0, r4
 8024f54:	f7ff fdfd 	bl	8024b52 <mbedtls_mpi_inv_mod>
 8024f58:	4603      	mov	r3, r0
 8024f5a:	b9f8      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8024f5c:	aa0d      	add	r2, sp, #52	; 0x34
 8024f5e:	4621      	mov	r1, r4
 8024f60:	4620      	mov	r0, r4
 8024f62:	f7ff faf6 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8024f66:	4603      	mov	r3, r0
 8024f68:	b9c0      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8024f6a:	463a      	mov	r2, r7
 8024f6c:	4621      	mov	r1, r4
 8024f6e:	4620      	mov	r0, r4
 8024f70:	f7ff fd1c 	bl	80249ac <mbedtls_mpi_mod_mpi>
 8024f74:	4603      	mov	r3, r0
 8024f76:	b988      	cbnz	r0, 8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 8024f78:	4601      	mov	r1, r0
 8024f7a:	9007      	str	r0, [sp, #28]
 8024f7c:	4620      	mov	r0, r4
 8024f7e:	f7ff f9d6 	bl	802432e <mbedtls_mpi_cmp_int>
 8024f82:	9b07      	ldr	r3, [sp, #28]
 8024f84:	2800      	cmp	r0, #0
 8024f86:	f43f af68 	beq.w	8024e5a <ecdsa_sign_restartable.isra.0+0x62>
 8024f8a:	e007      	b.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8024f8c:	ebab 0101 	sub.w	r1, fp, r1
 8024f90:	a80d      	add	r0, sp, #52	; 0x34
 8024f92:	f7ff f920 	bl	80241d6 <mbedtls_mpi_shift_r>
 8024f96:	4603      	mov	r3, r0
 8024f98:	2800      	cmp	r0, #0
 8024f9a:	d0ac      	beq.n	8024ef6 <ecdsa_sign_restartable.isra.0+0xfe>
    mbedtls_ecp_point_free( &R );
 8024f9c:	a813      	add	r0, sp, #76	; 0x4c
 8024f9e:	9305      	str	r3, [sp, #20]
 8024fa0:	f000 fc9f 	bl	80258e2 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8024fa4:	a80a      	add	r0, sp, #40	; 0x28
 8024fa6:	f7fe ff60 	bl	8023e6a <mbedtls_mpi_free>
 8024faa:	a80d      	add	r0, sp, #52	; 0x34
 8024fac:	f7fe ff5d 	bl	8023e6a <mbedtls_mpi_free>
 8024fb0:	a810      	add	r0, sp, #64	; 0x40
 8024fb2:	f7fe ff5a 	bl	8023e6a <mbedtls_mpi_free>
 8024fb6:	9b05      	ldr	r3, [sp, #20]
 8024fb8:	e730      	b.n	8024e1c <ecdsa_sign_restartable.isra.0+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8024fba:	a90d      	add	r1, sp, #52	; 0x34
 8024fbc:	463a      	mov	r2, r7
 8024fbe:	4608      	mov	r0, r1
 8024fc0:	f7ff fa8e 	bl	80244e0 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8024fc4:	4603      	mov	r3, r0
 8024fc6:	2800      	cmp	r0, #0
 8024fc8:	d09b      	beq.n	8024f02 <ecdsa_sign_restartable.isra.0+0x10a>
 8024fca:	e7e7      	b.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8024fcc:	4b02      	ldr	r3, [pc, #8]	; (8024fd8 <ecdsa_sign_restartable.isra.0+0x1e0>)
 8024fce:	e7e5      	b.n	8024f9c <ecdsa_sign_restartable.isra.0+0x1a4>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8024fd0:	4b02      	ldr	r3, [pc, #8]	; (8024fdc <ecdsa_sign_restartable.isra.0+0x1e4>)
 8024fd2:	e723      	b.n	8024e1c <ecdsa_sign_restartable.isra.0+0x24>
 8024fd4:	ffffb380 	.word	0xffffb380
 8024fd8:	ffffb300 	.word	0xffffb300
 8024fdc:	ffffb080 	.word	0xffffb080

08024fe0 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 8024fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fe2:	b0a7      	sub	sp, #156	; 0x9c
 8024fe4:	4604      	mov	r4, r0
    int ret;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 8024fe6:	a805      	add	r0, sp, #20
{
 8024fe8:	4615      	mov	r5, r2
 8024fea:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 8024fec:	f7fe ff36 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 8024ff0:	a808      	add	r0, sp, #32
 8024ff2:	f7fe ff33 	bl	8023e5c <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 8024ff6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024ff8:	9303      	str	r3, [sp, #12]
 8024ffa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ffc:	9500      	str	r5, [sp, #0]
 8024ffe:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8025002:	aa08      	add	r2, sp, #32
 8025004:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8025008:	a905      	add	r1, sp, #20
 802500a:	4620      	mov	r0, r4
 802500c:	f7ff fef4 	bl	8024df8 <ecdsa_sign_restartable.isra.0>
 8025010:	4607      	mov	r7, r0
 8025012:	bb60      	cbnz	r0, 802506e <mbedtls_ecdsa_write_signature_restartable+0x8e>
    unsigned char *p = buf + sizeof( buf );
 8025014:	ad26      	add	r5, sp, #152	; 0x98
 8025016:	f10d 0395 	add.w	r3, sp, #149	; 0x95
 802501a:	f845 3d88 	str.w	r3, [r5, #-136]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 802501e:	aa08      	add	r2, sp, #32
 8025020:	a90b      	add	r1, sp, #44	; 0x2c
 8025022:	4628      	mov	r0, r5
 8025024:	f7fe fde0 	bl	8023be8 <mbedtls_asn1_write_mpi>
 8025028:	1e04      	subs	r4, r0, #0
 802502a:	db1f      	blt.n	802506c <mbedtls_ecdsa_write_signature_restartable+0x8c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 802502c:	aa05      	add	r2, sp, #20
 802502e:	a90b      	add	r1, sp, #44	; 0x2c
 8025030:	4628      	mov	r0, r5
 8025032:	f7fe fdd9 	bl	8023be8 <mbedtls_asn1_write_mpi>
 8025036:	2800      	cmp	r0, #0
 8025038:	db22      	blt.n	8025080 <mbedtls_ecdsa_write_signature_restartable+0xa0>
 802503a:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 802503c:	4632      	mov	r2, r6
 802503e:	a90b      	add	r1, sp, #44	; 0x2c
 8025040:	4628      	mov	r0, r5
 8025042:	f7fe fd4f 	bl	8023ae4 <mbedtls_asn1_write_len>
 8025046:	1e04      	subs	r4, r0, #0
 8025048:	db10      	blt.n	802506c <mbedtls_ecdsa_write_signature_restartable+0x8c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 802504a:	2230      	movs	r2, #48	; 0x30
 802504c:	a90b      	add	r1, sp, #44	; 0x2c
 802504e:	4628      	mov	r0, r5
 8025050:	f7fe fdbc 	bl	8023bcc <mbedtls_asn1_write_tag>
 8025054:	2800      	cmp	r0, #0
 8025056:	db13      	blt.n	8025080 <mbedtls_ecdsa_write_signature_restartable+0xa0>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8025058:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 802505a:	4404      	add	r4, r0
    memcpy( sig, p, len );
 802505c:	4622      	mov	r2, r4
 802505e:	9904      	ldr	r1, [sp, #16]
 8025060:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8025062:	f003 fcaa 	bl	80289ba <memcpy>
    *slen = len;
 8025066:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025068:	601c      	str	r4, [r3, #0]
    return( 0 );
 802506a:	463c      	mov	r4, r7
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 802506c:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 802506e:	a805      	add	r0, sp, #20
 8025070:	f7fe fefb 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8025074:	a808      	add	r0, sp, #32
 8025076:	f7fe fef8 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 802507a:	4638      	mov	r0, r7
 802507c:	b027      	add	sp, #156	; 0x9c
 802507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8025080:	4604      	mov	r4, r0
 8025082:	e7f3      	b.n	802506c <mbedtls_ecdsa_write_signature_restartable+0x8c>

08025084 <mbedtls_ecdsa_write_signature>:
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng )
{
 8025084:	b510      	push	{r4, lr}
 8025086:	b086      	sub	sp, #24
    return( mbedtls_ecdsa_write_signature_restartable(
 8025088:	2400      	movs	r4, #0
 802508a:	9404      	str	r4, [sp, #16]
 802508c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802508e:	9403      	str	r4, [sp, #12]
 8025090:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025092:	9402      	str	r4, [sp, #8]
 8025094:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025096:	9401      	str	r4, [sp, #4]
 8025098:	9c08      	ldr	r4, [sp, #32]
 802509a:	9400      	str	r4, [sp, #0]
 802509c:	f7ff ffa0 	bl	8024fe0 <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 80250a0:	b006      	add	sp, #24
 80250a2:	bd10      	pop	{r4, pc}

080250a4 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80250a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80250a8:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
    size_t len;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 80250aa:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 80250ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 80250ae:	9302      	str	r3, [sp, #8]
{
 80250b0:	4604      	mov	r4, r0
    mbedtls_mpi_init( &s );
 80250b2:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 80250b4:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 80250b6:	441d      	add	r5, r3
{
 80250b8:	4688      	mov	r8, r1
 80250ba:	4691      	mov	r9, r2
    mbedtls_mpi_init( &r );
 80250bc:	f7fe fece 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80250c0:	4630      	mov	r0, r6
 80250c2:	f7fe fecb 	bl	8023e5c <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80250c6:	2330      	movs	r3, #48	; 0x30
 80250c8:	aa03      	add	r2, sp, #12
 80250ca:	4629      	mov	r1, r5
 80250cc:	a802      	add	r0, sp, #8
 80250ce:	f7fe fbe4 	bl	802389a <mbedtls_asn1_get_tag>
 80250d2:	b158      	cbz	r0, 80250ec <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80250d4:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 80250d8:	4638      	mov	r0, r7
 80250da:	f7fe fec6 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80250de:	4630      	mov	r0, r6
 80250e0:	f7fe fec3 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 80250e4:	4620      	mov	r0, r4
 80250e6:	b00b      	add	sp, #44	; 0x2c
 80250e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( p + len != end )
 80250ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80250f0:	4413      	add	r3, r2
 80250f2:	429d      	cmp	r5, r3
 80250f4:	d11f      	bne.n	8025136 <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80250f6:	463a      	mov	r2, r7
 80250f8:	4629      	mov	r1, r5
 80250fa:	a802      	add	r0, sp, #8
 80250fc:	f7fe fc1d 	bl	802393a <mbedtls_asn1_get_mpi>
 8025100:	2800      	cmp	r0, #0
 8025102:	d1e7      	bne.n	80250d4 <mbedtls_ecdsa_read_signature_restartable+0x30>
 8025104:	4632      	mov	r2, r6
 8025106:	4629      	mov	r1, r5
 8025108:	a802      	add	r0, sp, #8
 802510a:	f7fe fc16 	bl	802393a <mbedtls_asn1_get_mpi>
 802510e:	2800      	cmp	r0, #0
 8025110:	d1e0      	bne.n	80250d4 <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 8025112:	f104 0388 	add.w	r3, r4, #136	; 0x88
 8025116:	4620      	mov	r0, r4
 8025118:	e9cd 7600 	strd	r7, r6, [sp]
 802511c:	464a      	mov	r2, r9
 802511e:	4641      	mov	r1, r8
 8025120:	f7fb f824 	bl	802016c <mbedtls_ecdsa_verify>
 8025124:	4604      	mov	r4, r0
 8025126:	2800      	cmp	r0, #0
 8025128:	d1d6      	bne.n	80250d8 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 802512a:	9a02      	ldr	r2, [sp, #8]
 802512c:	4b03      	ldr	r3, [pc, #12]	; (802513c <mbedtls_ecdsa_read_signature_restartable+0x98>)
 802512e:	42aa      	cmp	r2, r5
 8025130:	bf18      	it	ne
 8025132:	461c      	movne	r4, r3
 8025134:	e7d0      	b.n	80250d8 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 8025136:	4c02      	ldr	r4, [pc, #8]	; (8025140 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
 8025138:	e7ce      	b.n	80250d8 <mbedtls_ecdsa_read_signature_restartable+0x34>
 802513a:	bf00      	nop
 802513c:	ffffb400 	.word	0xffffb400
 8025140:	ffffb01a 	.word	0xffffb01a

08025144 <mbedtls_ecdsa_read_signature>:
{
 8025144:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
 8025146:	2400      	movs	r4, #0
 8025148:	9401      	str	r4, [sp, #4]
 802514a:	9c04      	ldr	r4, [sp, #16]
 802514c:	9400      	str	r4, [sp, #0]
 802514e:	f7ff ffa9 	bl	80250a4 <mbedtls_ecdsa_read_signature_restartable>
}
 8025152:	b002      	add	sp, #8
 8025154:	bd10      	pop	{r4, pc}

08025156 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 8025156:	b570      	push	{r4, r5, r6, lr}
 8025158:	4605      	mov	r5, r0
 802515a:	460e      	mov	r6, r1
    int ret;

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 802515c:	f000 fc1c 	bl	8025998 <mbedtls_ecp_group_copy>
 8025160:	4604      	mov	r4, r0
 8025162:	b978      	cbnz	r0, 8025184 <mbedtls_ecdsa_from_keypair+0x2e>
 8025164:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 8025168:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 802516c:	f7fe feb5 	bl	8023eda <mbedtls_mpi_copy>
 8025170:	4604      	mov	r4, r0
 8025172:	b938      	cbnz	r0, 8025184 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 8025174:	f106 0188 	add.w	r1, r6, #136	; 0x88
 8025178:	f105 0088 	add.w	r0, r5, #136	; 0x88
 802517c:	f000 fbf6 	bl	802596c <mbedtls_ecp_copy>
 8025180:	4604      	mov	r4, r0
 8025182:	b110      	cbz	r0, 802518a <mbedtls_ecdsa_from_keypair+0x34>
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    mbedtls_ecp_keypair_free( ctx );
 8025184:	4628      	mov	r0, r5
 8025186:	f000 fbe1 	bl	802594c <mbedtls_ecp_keypair_free>
}
 802518a:	4620      	mov	r0, r4
 802518c:	bd70      	pop	{r4, r5, r6, pc}

0802518e <mbedtls_ecdsa_init>:
    mbedtls_ecp_keypair_init( ctx );
 802518e:	f000 bb98 	b.w	80258c2 <mbedtls_ecp_keypair_init>

08025192 <mbedtls_ecdsa_free>:
    mbedtls_ecp_keypair_free( ctx );
 8025192:	f000 bbdb 	b.w	802594c <mbedtls_ecp_keypair_free>

08025196 <ecp_get_type>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 8025196:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8025198:	b12b      	cbz	r3, 80251a6 <ecp_get_type+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 802519a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802519c:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 802519e:	bf0c      	ite	eq
 80251a0:	2002      	moveq	r0, #2
 80251a2:	2001      	movne	r0, #1
 80251a4:	4770      	bx	lr
        return( ECP_TYPE_NONE );
 80251a6:	4618      	mov	r0, r3
}
 80251a8:	4770      	bx	lr

080251aa <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 80251aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80251ac:	460c      	mov	r4, r1
 80251ae:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80251b0:	340c      	adds	r4, #12
    mbedtls_mpi_init( &mQY );
 80251b2:	a801      	add	r0, sp, #4
{
 80251b4:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 80251b6:	f7fe fe51 	bl	8023e5c <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80251ba:	1d29      	adds	r1, r5, #4
 80251bc:	4622      	mov	r2, r4
 80251be:	a801      	add	r0, sp, #4
 80251c0:	f7ff f98e 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 80251c4:	4605      	mov	r5, r0
 80251c6:	b968      	cbnz	r0, 80251e4 <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 80251c8:	4601      	mov	r1, r0
 80251ca:	4620      	mov	r0, r4
 80251cc:	f7ff f8af 	bl	802432e <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 80251d0:	a901      	add	r1, sp, #4
 80251d2:	2800      	cmp	r0, #0
 80251d4:	bf0c      	ite	eq
 80251d6:	2200      	moveq	r2, #0
 80251d8:	f006 0201 	andne.w	r2, r6, #1
 80251dc:	4620      	mov	r0, r4
 80251de:	f7fe fea8 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 80251e2:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 80251e4:	a801      	add	r0, sp, #4
 80251e6:	f7fe fe40 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 80251ea:	4628      	mov	r0, r5
 80251ec:	b004      	add	sp, #16
 80251ee:	bd70      	pop	{r4, r5, r6, pc}

080251f0 <ecp_modp>:
    if( grp->modp == NULL )
 80251f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 80251f2:	b570      	push	{r4, r5, r6, lr}
 80251f4:	4604      	mov	r4, r0
 80251f6:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 80251f8:	b92b      	cbnz	r3, 8025206 <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80251fa:	1d0a      	adds	r2, r1, #4
}
 80251fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 8025200:	4601      	mov	r1, r0
 8025202:	f7ff bbd3 	b.w	80249ac <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8025206:	6803      	ldr	r3, [r0, #0]
 8025208:	2b00      	cmp	r3, #0
 802520a:	db09      	blt.n	8025220 <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 802520c:	4620      	mov	r0, r4
 802520e:	f7fe ff0c 	bl	802402a <mbedtls_mpi_bitlen>
 8025212:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8025214:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8025218:	d908      	bls.n	802522c <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 802521a:	4e17      	ldr	r6, [pc, #92]	; (8025278 <ecp_modp+0x88>)
}
 802521c:	4630      	mov	r0, r6
 802521e:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8025220:	2100      	movs	r1, #0
 8025222:	f7ff f884 	bl	802432e <mbedtls_mpi_cmp_int>
 8025226:	2800      	cmp	r0, #0
 8025228:	d0f0      	beq.n	802520c <ecp_modp+0x1c>
 802522a:	e7f6      	b.n	802521a <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 802522c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802522e:	4620      	mov	r0, r4
 8025230:	4798      	blx	r3
 8025232:	4606      	mov	r6, r0
 8025234:	2800      	cmp	r0, #0
 8025236:	d1f1      	bne.n	802521c <ecp_modp+0x2c>
 8025238:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 802523a:	6823      	ldr	r3, [r4, #0]
 802523c:	2b00      	cmp	r3, #0
 802523e:	da04      	bge.n	802524a <ecp_modp+0x5a>
 8025240:	2100      	movs	r1, #0
 8025242:	4620      	mov	r0, r4
 8025244:	f7ff f873 	bl	802432e <mbedtls_mpi_cmp_int>
 8025248:	b968      	cbnz	r0, 8025266 <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 802524a:	4629      	mov	r1, r5
 802524c:	4620      	mov	r0, r4
 802524e:	f7ff f82e 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8025252:	2800      	cmp	r0, #0
 8025254:	dbe2      	blt.n	802521c <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8025256:	462a      	mov	r2, r5
 8025258:	4621      	mov	r1, r4
 802525a:	4620      	mov	r0, r4
 802525c:	f7ff f8e0 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025260:	2800      	cmp	r0, #0
 8025262:	d0f2      	beq.n	802524a <ecp_modp+0x5a>
 8025264:	e006      	b.n	8025274 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 8025266:	462a      	mov	r2, r5
 8025268:	4621      	mov	r1, r4
 802526a:	4620      	mov	r0, r4
 802526c:	f7ff f916 	bl	802449c <mbedtls_mpi_add_mpi>
 8025270:	2800      	cmp	r0, #0
 8025272:	d0e2      	beq.n	802523a <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8025274:	4606      	mov	r6, r0
 8025276:	e7d1      	b.n	802521c <ecp_modp+0x2c>
 8025278:	ffffb080 	.word	0xffffb080

0802527c <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 802527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025280:	b08d      	sub	sp, #52	; 0x34
 8025282:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8025284:	ad03      	add	r5, sp, #12
 8025286:	4668      	mov	r0, sp
{
 8025288:	4689      	mov	r9, r1
 802528a:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 802528c:	f7fe fde6 	bl	8023e5c <mbedtls_mpi_init>
 8025290:	4628      	mov	r0, r5
 8025292:	f7fe fde3 	bl	8023e5c <mbedtls_mpi_init>
 8025296:	a806      	add	r0, sp, #24
 8025298:	f7fe fde0 	bl	8023e5c <mbedtls_mpi_init>
 802529c:	a809      	add	r0, sp, #36	; 0x24
 802529e:	f7fe fddd 	bl	8023e5c <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 80252a2:	69b3      	ldr	r3, [r6, #24]
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	f040 815e 	bne.w	8025566 <ecp_double_jac+0x2ea>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80252aa:	f108 0218 	add.w	r2, r8, #24
 80252ae:	4611      	mov	r1, r2
 80252b0:	4628      	mov	r0, r5
 80252b2:	f7ff f94e 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80252b6:	4604      	mov	r4, r0
 80252b8:	2800      	cmp	r0, #0
 80252ba:	f040 8131 	bne.w	8025520 <ecp_double_jac+0x2a4>
 80252be:	4631      	mov	r1, r6
 80252c0:	4628      	mov	r0, r5
 80252c2:	f7ff ff95 	bl	80251f0 <ecp_modp>
 80252c6:	4604      	mov	r4, r0
 80252c8:	2800      	cmp	r0, #0
 80252ca:	f040 8129 	bne.w	8025520 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80252ce:	462a      	mov	r2, r5
 80252d0:	4641      	mov	r1, r8
 80252d2:	a806      	add	r0, sp, #24
 80252d4:	f7ff f8e2 	bl	802449c <mbedtls_mpi_add_mpi>
 80252d8:	4604      	mov	r4, r0
 80252da:	2800      	cmp	r0, #0
 80252dc:	f040 8120 	bne.w	8025520 <ecp_double_jac+0x2a4>
 80252e0:	1d37      	adds	r7, r6, #4
 80252e2:	4639      	mov	r1, r7
 80252e4:	a806      	add	r0, sp, #24
 80252e6:	f7fe ffe2 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80252ea:	2800      	cmp	r0, #0
 80252ec:	f280 810f 	bge.w	802550e <ecp_double_jac+0x292>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 80252f0:	462a      	mov	r2, r5
 80252f2:	4641      	mov	r1, r8
 80252f4:	a809      	add	r0, sp, #36	; 0x24
 80252f6:	f7ff f8f3 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 80252fa:	4604      	mov	r4, r0
 80252fc:	2800      	cmp	r0, #0
 80252fe:	f040 810f 	bne.w	8025520 <ecp_double_jac+0x2a4>
 8025302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025304:	2b00      	cmp	r3, #0
 8025306:	f2c0 811b 	blt.w	8025540 <ecp_double_jac+0x2c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 802530a:	aa09      	add	r2, sp, #36	; 0x24
 802530c:	a906      	add	r1, sp, #24
 802530e:	4628      	mov	r0, r5
 8025310:	f7ff f91f 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025314:	4604      	mov	r4, r0
 8025316:	2800      	cmp	r0, #0
 8025318:	f040 8102 	bne.w	8025520 <ecp_double_jac+0x2a4>
 802531c:	4631      	mov	r1, r6
 802531e:	4628      	mov	r0, r5
 8025320:	f7ff ff66 	bl	80251f0 <ecp_modp>
 8025324:	4604      	mov	r4, r0
 8025326:	2800      	cmp	r0, #0
 8025328:	f040 80fa 	bne.w	8025520 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 802532c:	2203      	movs	r2, #3
 802532e:	4629      	mov	r1, r5
 8025330:	4668      	mov	r0, sp
 8025332:	f7ff f978 	bl	8024626 <mbedtls_mpi_mul_int>
 8025336:	4604      	mov	r4, r0
 8025338:	2800      	cmp	r0, #0
 802533a:	f040 80f1 	bne.w	8025520 <ecp_double_jac+0x2a4>
 802533e:	4639      	mov	r1, r7
 8025340:	4668      	mov	r0, sp
 8025342:	f7fe ffb4 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8025346:	2800      	cmp	r0, #0
 8025348:	f280 8107 	bge.w	802555a <ecp_double_jac+0x2de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 802534c:	f108 0a0c 	add.w	sl, r8, #12
 8025350:	4652      	mov	r2, sl
 8025352:	4651      	mov	r1, sl
 8025354:	a806      	add	r0, sp, #24
 8025356:	f7ff f8fc 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802535a:	4604      	mov	r4, r0
 802535c:	2800      	cmp	r0, #0
 802535e:	f040 80df 	bne.w	8025520 <ecp_double_jac+0x2a4>
 8025362:	4631      	mov	r1, r6
 8025364:	a806      	add	r0, sp, #24
 8025366:	f7ff ff43 	bl	80251f0 <ecp_modp>
 802536a:	4604      	mov	r4, r0
 802536c:	2800      	cmp	r0, #0
 802536e:	f040 80d7 	bne.w	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8025372:	2101      	movs	r1, #1
 8025374:	a806      	add	r0, sp, #24
 8025376:	f7fe fee6 	bl	8024146 <mbedtls_mpi_shift_l>
 802537a:	4604      	mov	r4, r0
 802537c:	2800      	cmp	r0, #0
 802537e:	f040 80cf 	bne.w	8025520 <ecp_double_jac+0x2a4>
 8025382:	1d37      	adds	r7, r6, #4
 8025384:	4639      	mov	r1, r7
 8025386:	a806      	add	r0, sp, #24
 8025388:	f7fe ff91 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 802538c:	2800      	cmp	r0, #0
 802538e:	f280 815e 	bge.w	802564e <ecp_double_jac+0x3d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8025392:	aa06      	add	r2, sp, #24
 8025394:	4641      	mov	r1, r8
 8025396:	4628      	mov	r0, r5
 8025398:	f7ff f8db 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802539c:	4604      	mov	r4, r0
 802539e:	2800      	cmp	r0, #0
 80253a0:	f040 80be 	bne.w	8025520 <ecp_double_jac+0x2a4>
 80253a4:	4631      	mov	r1, r6
 80253a6:	4628      	mov	r0, r5
 80253a8:	f7ff ff22 	bl	80251f0 <ecp_modp>
 80253ac:	4604      	mov	r4, r0
 80253ae:	2800      	cmp	r0, #0
 80253b0:	f040 80b6 	bne.w	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80253b4:	2101      	movs	r1, #1
 80253b6:	4628      	mov	r0, r5
 80253b8:	f7fe fec5 	bl	8024146 <mbedtls_mpi_shift_l>
 80253bc:	4604      	mov	r4, r0
 80253be:	2800      	cmp	r0, #0
 80253c0:	f040 80ae 	bne.w	8025520 <ecp_double_jac+0x2a4>
 80253c4:	4639      	mov	r1, r7
 80253c6:	4628      	mov	r0, r5
 80253c8:	f7fe ff71 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80253cc:	2800      	cmp	r0, #0
 80253ce:	f280 8148 	bge.w	8025662 <ecp_double_jac+0x3e6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80253d2:	aa06      	add	r2, sp, #24
 80253d4:	4611      	mov	r1, r2
 80253d6:	a809      	add	r0, sp, #36	; 0x24
 80253d8:	f7ff f8bb 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80253dc:	4604      	mov	r4, r0
 80253de:	2800      	cmp	r0, #0
 80253e0:	f040 809e 	bne.w	8025520 <ecp_double_jac+0x2a4>
 80253e4:	4631      	mov	r1, r6
 80253e6:	a809      	add	r0, sp, #36	; 0x24
 80253e8:	f7ff ff02 	bl	80251f0 <ecp_modp>
 80253ec:	4604      	mov	r4, r0
 80253ee:	2800      	cmp	r0, #0
 80253f0:	f040 8096 	bne.w	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80253f4:	2101      	movs	r1, #1
 80253f6:	a809      	add	r0, sp, #36	; 0x24
 80253f8:	f7fe fea5 	bl	8024146 <mbedtls_mpi_shift_l>
 80253fc:	4604      	mov	r4, r0
 80253fe:	2800      	cmp	r0, #0
 8025400:	f040 808e 	bne.w	8025520 <ecp_double_jac+0x2a4>
 8025404:	4639      	mov	r1, r7
 8025406:	a809      	add	r0, sp, #36	; 0x24
 8025408:	f7fe ff51 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 802540c:	2800      	cmp	r0, #0
 802540e:	f280 812e 	bge.w	802566e <ecp_double_jac+0x3f2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8025412:	466a      	mov	r2, sp
 8025414:	4669      	mov	r1, sp
 8025416:	a806      	add	r0, sp, #24
 8025418:	f7ff f89b 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802541c:	4604      	mov	r4, r0
 802541e:	2800      	cmp	r0, #0
 8025420:	d17e      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025422:	4631      	mov	r1, r6
 8025424:	a806      	add	r0, sp, #24
 8025426:	f7ff fee3 	bl	80251f0 <ecp_modp>
 802542a:	4604      	mov	r4, r0
 802542c:	2800      	cmp	r0, #0
 802542e:	d177      	bne.n	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8025430:	a906      	add	r1, sp, #24
 8025432:	462a      	mov	r2, r5
 8025434:	4608      	mov	r0, r1
 8025436:	f7ff f853 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 802543a:	4604      	mov	r4, r0
 802543c:	2800      	cmp	r0, #0
 802543e:	d16f      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025440:	9b06      	ldr	r3, [sp, #24]
 8025442:	2b00      	cmp	r3, #0
 8025444:	f2c0 8119 	blt.w	802567a <ecp_double_jac+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8025448:	a906      	add	r1, sp, #24
 802544a:	462a      	mov	r2, r5
 802544c:	4608      	mov	r0, r1
 802544e:	f7ff f847 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025452:	4604      	mov	r4, r0
 8025454:	2800      	cmp	r0, #0
 8025456:	d163      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025458:	9b06      	ldr	r3, [sp, #24]
 802545a:	2b00      	cmp	r3, #0
 802545c:	f2c0 811a 	blt.w	8025694 <ecp_double_jac+0x418>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8025460:	aa06      	add	r2, sp, #24
 8025462:	4629      	mov	r1, r5
 8025464:	4628      	mov	r0, r5
 8025466:	f7ff f83b 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 802546a:	4604      	mov	r4, r0
 802546c:	2800      	cmp	r0, #0
 802546e:	d157      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025470:	9b03      	ldr	r3, [sp, #12]
 8025472:	2b00      	cmp	r3, #0
 8025474:	f2c0 811b 	blt.w	80256ae <ecp_double_jac+0x432>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8025478:	466a      	mov	r2, sp
 802547a:	4629      	mov	r1, r5
 802547c:	4628      	mov	r0, r5
 802547e:	f7ff f868 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025482:	4604      	mov	r4, r0
 8025484:	2800      	cmp	r0, #0
 8025486:	d14b      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025488:	4631      	mov	r1, r6
 802548a:	4628      	mov	r0, r5
 802548c:	f7ff feb0 	bl	80251f0 <ecp_modp>
 8025490:	4604      	mov	r4, r0
 8025492:	2800      	cmp	r0, #0
 8025494:	d144      	bne.n	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8025496:	aa09      	add	r2, sp, #36	; 0x24
 8025498:	4629      	mov	r1, r5
 802549a:	4628      	mov	r0, r5
 802549c:	f7ff f820 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 80254a0:	4604      	mov	r4, r0
 80254a2:	2800      	cmp	r0, #0
 80254a4:	d13c      	bne.n	8025520 <ecp_double_jac+0x2a4>
 80254a6:	46ab      	mov	fp, r5
 80254a8:	9b03      	ldr	r3, [sp, #12]
 80254aa:	2b00      	cmp	r3, #0
 80254ac:	f2c0 810c 	blt.w	80256c8 <ecp_double_jac+0x44c>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80254b0:	f108 0218 	add.w	r2, r8, #24
 80254b4:	4651      	mov	r1, sl
 80254b6:	a809      	add	r0, sp, #36	; 0x24
 80254b8:	f7ff f84b 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80254bc:	4604      	mov	r4, r0
 80254be:	bb78      	cbnz	r0, 8025520 <ecp_double_jac+0x2a4>
 80254c0:	4631      	mov	r1, r6
 80254c2:	a809      	add	r0, sp, #36	; 0x24
 80254c4:	f7ff fe94 	bl	80251f0 <ecp_modp>
 80254c8:	4604      	mov	r4, r0
 80254ca:	bb48      	cbnz	r0, 8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80254cc:	2101      	movs	r1, #1
 80254ce:	a809      	add	r0, sp, #36	; 0x24
 80254d0:	f7fe fe39 	bl	8024146 <mbedtls_mpi_shift_l>
 80254d4:	4604      	mov	r4, r0
 80254d6:	bb18      	cbnz	r0, 8025520 <ecp_double_jac+0x2a4>
 80254d8:	4639      	mov	r1, r7
 80254da:	a809      	add	r0, sp, #36	; 0x24
 80254dc:	f7fe fee7 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80254e0:	2800      	cmp	r0, #0
 80254e2:	f280 8102 	bge.w	80256ea <ecp_double_jac+0x46e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 80254e6:	a906      	add	r1, sp, #24
 80254e8:	4648      	mov	r0, r9
 80254ea:	f7fe fcf6 	bl	8023eda <mbedtls_mpi_copy>
 80254ee:	4604      	mov	r4, r0
 80254f0:	b9b0      	cbnz	r0, 8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 80254f2:	a903      	add	r1, sp, #12
 80254f4:	f109 000c 	add.w	r0, r9, #12
 80254f8:	f7fe fcef 	bl	8023eda <mbedtls_mpi_copy>
 80254fc:	4604      	mov	r4, r0
 80254fe:	b978      	cbnz	r0, 8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 8025500:	a909      	add	r1, sp, #36	; 0x24
 8025502:	f109 0018 	add.w	r0, r9, #24
 8025506:	f7fe fce8 	bl	8023eda <mbedtls_mpi_copy>
 802550a:	4604      	mov	r4, r0

cleanup:
 802550c:	e008      	b.n	8025520 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 802550e:	a906      	add	r1, sp, #24
 8025510:	463a      	mov	r2, r7
 8025512:	4608      	mov	r0, r1
 8025514:	f7fe ff84 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025518:	4604      	mov	r4, r0
 802551a:	2800      	cmp	r0, #0
 802551c:	f43f aee1 	beq.w	80252e2 <ecp_double_jac+0x66>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 8025520:	4668      	mov	r0, sp
 8025522:	f7fe fca2 	bl	8023e6a <mbedtls_mpi_free>
 8025526:	4628      	mov	r0, r5
 8025528:	f7fe fc9f 	bl	8023e6a <mbedtls_mpi_free>
 802552c:	a806      	add	r0, sp, #24
 802552e:	f7fe fc9c 	bl	8023e6a <mbedtls_mpi_free>
 8025532:	a809      	add	r0, sp, #36	; 0x24
 8025534:	f7fe fc99 	bl	8023e6a <mbedtls_mpi_free>

    return( ret );
}
 8025538:	4620      	mov	r0, r4
 802553a:	b00d      	add	sp, #52	; 0x34
 802553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 8025540:	2100      	movs	r1, #0
 8025542:	a809      	add	r0, sp, #36	; 0x24
 8025544:	f7fe fef3 	bl	802432e <mbedtls_mpi_cmp_int>
 8025548:	2800      	cmp	r0, #0
 802554a:	f43f aede 	beq.w	802530a <ecp_double_jac+0x8e>
 802554e:	a909      	add	r1, sp, #36	; 0x24
 8025550:	463a      	mov	r2, r7
 8025552:	4608      	mov	r0, r1
 8025554:	f7fe ffa2 	bl	802449c <mbedtls_mpi_add_mpi>
 8025558:	e6cf      	b.n	80252fa <ecp_double_jac+0x7e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 802555a:	463a      	mov	r2, r7
 802555c:	4669      	mov	r1, sp
 802555e:	4668      	mov	r0, sp
 8025560:	f7fe ff5e 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025564:	e6e7      	b.n	8025336 <ecp_double_jac+0xba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8025566:	4642      	mov	r2, r8
 8025568:	4641      	mov	r1, r8
 802556a:	4628      	mov	r0, r5
 802556c:	f7fe fff1 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025570:	4604      	mov	r4, r0
 8025572:	2800      	cmp	r0, #0
 8025574:	d1d4      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025576:	4631      	mov	r1, r6
 8025578:	4628      	mov	r0, r5
 802557a:	f7ff fe39 	bl	80251f0 <ecp_modp>
 802557e:	4604      	mov	r4, r0
 8025580:	2800      	cmp	r0, #0
 8025582:	d1cd      	bne.n	8025520 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8025584:	2203      	movs	r2, #3
 8025586:	4629      	mov	r1, r5
 8025588:	4668      	mov	r0, sp
 802558a:	f7ff f84c 	bl	8024626 <mbedtls_mpi_mul_int>
 802558e:	4604      	mov	r4, r0
 8025590:	2800      	cmp	r0, #0
 8025592:	d1c5      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025594:	1d37      	adds	r7, r6, #4
 8025596:	4639      	mov	r1, r7
 8025598:	4668      	mov	r0, sp
 802559a:	f7fe fe88 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 802559e:	2800      	cmp	r0, #0
 80255a0:	da4c      	bge.n	802563c <ecp_double_jac+0x3c0>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 80255a2:	f106 0a10 	add.w	sl, r6, #16
 80255a6:	2100      	movs	r1, #0
 80255a8:	4650      	mov	r0, sl
 80255aa:	f7fe fec0 	bl	802432e <mbedtls_mpi_cmp_int>
 80255ae:	2800      	cmp	r0, #0
 80255b0:	f43f aecc 	beq.w	802534c <ecp_double_jac+0xd0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80255b4:	f108 0218 	add.w	r2, r8, #24
 80255b8:	4611      	mov	r1, r2
 80255ba:	4628      	mov	r0, r5
 80255bc:	f7fe ffc9 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80255c0:	4604      	mov	r4, r0
 80255c2:	2800      	cmp	r0, #0
 80255c4:	d1ac      	bne.n	8025520 <ecp_double_jac+0x2a4>
 80255c6:	4631      	mov	r1, r6
 80255c8:	4628      	mov	r0, r5
 80255ca:	f7ff fe11 	bl	80251f0 <ecp_modp>
 80255ce:	4604      	mov	r4, r0
 80255d0:	2800      	cmp	r0, #0
 80255d2:	d1a5      	bne.n	8025520 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80255d4:	462a      	mov	r2, r5
 80255d6:	4629      	mov	r1, r5
 80255d8:	a806      	add	r0, sp, #24
 80255da:	f7fe ffba 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80255de:	4604      	mov	r4, r0
 80255e0:	2800      	cmp	r0, #0
 80255e2:	d19d      	bne.n	8025520 <ecp_double_jac+0x2a4>
 80255e4:	4631      	mov	r1, r6
 80255e6:	a806      	add	r0, sp, #24
 80255e8:	f7ff fe02 	bl	80251f0 <ecp_modp>
 80255ec:	4604      	mov	r4, r0
 80255ee:	2800      	cmp	r0, #0
 80255f0:	d196      	bne.n	8025520 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 80255f2:	4652      	mov	r2, sl
 80255f4:	a906      	add	r1, sp, #24
 80255f6:	4628      	mov	r0, r5
 80255f8:	f7fe ffab 	bl	8024552 <mbedtls_mpi_mul_mpi>
 80255fc:	4604      	mov	r4, r0
 80255fe:	2800      	cmp	r0, #0
 8025600:	d18e      	bne.n	8025520 <ecp_double_jac+0x2a4>
 8025602:	4631      	mov	r1, r6
 8025604:	4628      	mov	r0, r5
 8025606:	f7ff fdf3 	bl	80251f0 <ecp_modp>
 802560a:	4604      	mov	r4, r0
 802560c:	2800      	cmp	r0, #0
 802560e:	d187      	bne.n	8025520 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8025610:	462a      	mov	r2, r5
 8025612:	4669      	mov	r1, sp
 8025614:	4668      	mov	r0, sp
 8025616:	f7fe ff41 	bl	802449c <mbedtls_mpi_add_mpi>
 802561a:	4604      	mov	r4, r0
 802561c:	2800      	cmp	r0, #0
 802561e:	f47f af7f 	bne.w	8025520 <ecp_double_jac+0x2a4>
 8025622:	4639      	mov	r1, r7
 8025624:	4668      	mov	r0, sp
 8025626:	f7fe fe42 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 802562a:	2800      	cmp	r0, #0
 802562c:	f6ff ae8e 	blt.w	802534c <ecp_double_jac+0xd0>
 8025630:	463a      	mov	r2, r7
 8025632:	4669      	mov	r1, sp
 8025634:	4668      	mov	r0, sp
 8025636:	f7fe fef3 	bl	8024420 <mbedtls_mpi_sub_abs>
 802563a:	e7ee      	b.n	802561a <ecp_double_jac+0x39e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 802563c:	463a      	mov	r2, r7
 802563e:	4669      	mov	r1, sp
 8025640:	4668      	mov	r0, sp
 8025642:	f7fe feed 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025646:	4604      	mov	r4, r0
 8025648:	2800      	cmp	r0, #0
 802564a:	d0a4      	beq.n	8025596 <ecp_double_jac+0x31a>
cleanup:
 802564c:	e768      	b.n	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 802564e:	a906      	add	r1, sp, #24
 8025650:	463a      	mov	r2, r7
 8025652:	4608      	mov	r0, r1
 8025654:	f7fe fee4 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025658:	4604      	mov	r4, r0
 802565a:	2800      	cmp	r0, #0
 802565c:	f43f ae92 	beq.w	8025384 <ecp_double_jac+0x108>
cleanup:
 8025660:	e75e      	b.n	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8025662:	463a      	mov	r2, r7
 8025664:	4629      	mov	r1, r5
 8025666:	4628      	mov	r0, r5
 8025668:	f7fe feda 	bl	8024420 <mbedtls_mpi_sub_abs>
 802566c:	e6a6      	b.n	80253bc <ecp_double_jac+0x140>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 802566e:	a909      	add	r1, sp, #36	; 0x24
 8025670:	463a      	mov	r2, r7
 8025672:	4608      	mov	r0, r1
 8025674:	f7fe fed4 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025678:	e6c0      	b.n	80253fc <ecp_double_jac+0x180>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 802567a:	2100      	movs	r1, #0
 802567c:	a806      	add	r0, sp, #24
 802567e:	f7fe fe56 	bl	802432e <mbedtls_mpi_cmp_int>
 8025682:	2800      	cmp	r0, #0
 8025684:	f43f aee0 	beq.w	8025448 <ecp_double_jac+0x1cc>
 8025688:	a906      	add	r1, sp, #24
 802568a:	463a      	mov	r2, r7
 802568c:	4608      	mov	r0, r1
 802568e:	f7fe ff05 	bl	802449c <mbedtls_mpi_add_mpi>
 8025692:	e6d2      	b.n	802543a <ecp_double_jac+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8025694:	2100      	movs	r1, #0
 8025696:	a806      	add	r0, sp, #24
 8025698:	f7fe fe49 	bl	802432e <mbedtls_mpi_cmp_int>
 802569c:	2800      	cmp	r0, #0
 802569e:	f43f aedf 	beq.w	8025460 <ecp_double_jac+0x1e4>
 80256a2:	a906      	add	r1, sp, #24
 80256a4:	463a      	mov	r2, r7
 80256a6:	4608      	mov	r0, r1
 80256a8:	f7fe fef8 	bl	802449c <mbedtls_mpi_add_mpi>
 80256ac:	e6d1      	b.n	8025452 <ecp_double_jac+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80256ae:	2100      	movs	r1, #0
 80256b0:	4628      	mov	r0, r5
 80256b2:	f7fe fe3c 	bl	802432e <mbedtls_mpi_cmp_int>
 80256b6:	2800      	cmp	r0, #0
 80256b8:	f43f aede 	beq.w	8025478 <ecp_double_jac+0x1fc>
 80256bc:	463a      	mov	r2, r7
 80256be:	4629      	mov	r1, r5
 80256c0:	4628      	mov	r0, r5
 80256c2:	f7fe feeb 	bl	802449c <mbedtls_mpi_add_mpi>
 80256c6:	e6d0      	b.n	802546a <ecp_double_jac+0x1ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80256c8:	2100      	movs	r1, #0
 80256ca:	4658      	mov	r0, fp
 80256cc:	f7fe fe2f 	bl	802432e <mbedtls_mpi_cmp_int>
 80256d0:	2800      	cmp	r0, #0
 80256d2:	f43f aeed 	beq.w	80254b0 <ecp_double_jac+0x234>
 80256d6:	463a      	mov	r2, r7
 80256d8:	4659      	mov	r1, fp
 80256da:	4658      	mov	r0, fp
 80256dc:	f7fe fede 	bl	802449c <mbedtls_mpi_add_mpi>
 80256e0:	4604      	mov	r4, r0
 80256e2:	2800      	cmp	r0, #0
 80256e4:	f43f aee0 	beq.w	80254a8 <ecp_double_jac+0x22c>
cleanup:
 80256e8:	e71a      	b.n	8025520 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80256ea:	a909      	add	r1, sp, #36	; 0x24
 80256ec:	463a      	mov	r2, r7
 80256ee:	4608      	mov	r0, r1
 80256f0:	f7fe fe96 	bl	8024420 <mbedtls_mpi_sub_abs>
 80256f4:	e6ee      	b.n	80254d4 <ecp_double_jac+0x258>

080256f6 <ecp_normalize_jac>:
{
 80256f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 80256f8:	f101 0718 	add.w	r7, r1, #24
{
 80256fc:	b087      	sub	sp, #28
 80256fe:	4606      	mov	r6, r0
 8025700:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8025702:	4638      	mov	r0, r7
 8025704:	2100      	movs	r1, #0
 8025706:	f7fe fe12 	bl	802432e <mbedtls_mpi_cmp_int>
 802570a:	4604      	mov	r4, r0
 802570c:	2800      	cmp	r0, #0
 802570e:	d04c      	beq.n	80257aa <ecp_normalize_jac+0xb4>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8025710:	4668      	mov	r0, sp
 8025712:	f7fe fba3 	bl	8023e5c <mbedtls_mpi_init>
 8025716:	a803      	add	r0, sp, #12
 8025718:	f7fe fba0 	bl	8023e5c <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 802571c:	1d32      	adds	r2, r6, #4
 802571e:	4639      	mov	r1, r7
 8025720:	4668      	mov	r0, sp
 8025722:	f7ff fa16 	bl	8024b52 <mbedtls_mpi_inv_mod>
 8025726:	4604      	mov	r4, r0
 8025728:	bbc8      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 802572a:	466a      	mov	r2, sp
 802572c:	4669      	mov	r1, sp
 802572e:	a803      	add	r0, sp, #12
 8025730:	f7fe ff0f 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025734:	4604      	mov	r4, r0
 8025736:	bb90      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
 8025738:	4631      	mov	r1, r6
 802573a:	a803      	add	r0, sp, #12
 802573c:	f7ff fd58 	bl	80251f0 <ecp_modp>
 8025740:	4604      	mov	r4, r0
 8025742:	bb60      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8025744:	aa03      	add	r2, sp, #12
 8025746:	4629      	mov	r1, r5
 8025748:	4628      	mov	r0, r5
 802574a:	f7fe ff02 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802574e:	4604      	mov	r4, r0
 8025750:	bb28      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
 8025752:	4631      	mov	r1, r6
 8025754:	4628      	mov	r0, r5
 8025756:	f7ff fd4b 	bl	80251f0 <ecp_modp>
 802575a:	4604      	mov	r4, r0
 802575c:	b9f8      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 802575e:	350c      	adds	r5, #12
 8025760:	aa03      	add	r2, sp, #12
 8025762:	4629      	mov	r1, r5
 8025764:	4628      	mov	r0, r5
 8025766:	f7fe fef4 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802576a:	4604      	mov	r4, r0
 802576c:	b9b8      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
 802576e:	4631      	mov	r1, r6
 8025770:	4628      	mov	r0, r5
 8025772:	f7ff fd3d 	bl	80251f0 <ecp_modp>
 8025776:	4604      	mov	r4, r0
 8025778:	b988      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 802577a:	466a      	mov	r2, sp
 802577c:	4629      	mov	r1, r5
 802577e:	4628      	mov	r0, r5
 8025780:	f7fe fee7 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025784:	4604      	mov	r4, r0
 8025786:	b950      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
 8025788:	4631      	mov	r1, r6
 802578a:	4628      	mov	r0, r5
 802578c:	f7ff fd30 	bl	80251f0 <ecp_modp>
 8025790:	4604      	mov	r4, r0
 8025792:	b920      	cbnz	r0, 802579e <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8025794:	2101      	movs	r1, #1
 8025796:	4638      	mov	r0, r7
 8025798:	f7fe fc00 	bl	8023f9c <mbedtls_mpi_lset>
 802579c:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 802579e:	4668      	mov	r0, sp
 80257a0:	f7fe fb63 	bl	8023e6a <mbedtls_mpi_free>
 80257a4:	a803      	add	r0, sp, #12
 80257a6:	f7fe fb60 	bl	8023e6a <mbedtls_mpi_free>
}
 80257aa:	4620      	mov	r0, r4
 80257ac:	b007      	add	sp, #28
 80257ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080257b0 <mbedtls_ecp_point_init.part.4>:
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
 80257b0:	b510      	push	{r4, lr}
 80257b2:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 80257b4:	f7fe fb52 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 80257b8:	f104 000c 	add.w	r0, r4, #12
 80257bc:	f7fe fb4e 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 80257c0:	f104 0018 	add.w	r0, r4, #24
}
 80257c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 80257c8:	f7fe bb48 	b.w	8023e5c <mbedtls_mpi_init>

080257cc <mbedtls_ecp_point_free.part.6>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 80257cc:	b510      	push	{r4, lr}
 80257ce:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 80257d0:	f7fe fb4b 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 80257d4:	f104 000c 	add.w	r0, r4, #12
 80257d8:	f7fe fb47 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 80257dc:	f104 0018 	add.w	r0, r4, #24
}
 80257e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 80257e4:	f7fe bb41 	b.w	8023e6a <mbedtls_mpi_free>

080257e8 <ecp_select_comb.constprop.22>:
/*
 * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
 *
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
 80257e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 80257ec:	f3c3 0445 	ubfx	r4, r3, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 80257f0:	fab4 fa84 	clz	sl, r4
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
 80257f4:	460d      	mov	r5, r1
 80257f6:	4616      	mov	r6, r2
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 80257f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
 80257fc:	4681      	mov	r9, r0
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 80257fe:	4652      	mov	r2, sl
 8025800:	4631      	mov	r1, r6
 8025802:	4628      	mov	r0, r5
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
 8025804:	461f      	mov	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 8025806:	f7fe fb94 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 802580a:	bb00      	cbnz	r0, 802584e <ecp_select_comb.constprop.22+0x66>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 802580c:	f105 080c 	add.w	r8, r5, #12
 8025810:	4652      	mov	r2, sl
 8025812:	f106 010c 	add.w	r1, r6, #12
 8025816:	4640      	mov	r0, r8
 8025818:	f7fe fb8b 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 802581c:	b9b8      	cbnz	r0, 802584e <ecp_select_comb.constprop.22+0x66>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 802581e:	1e63      	subs	r3, r4, #1
 8025820:	425c      	negs	r4, r3
 8025822:	415c      	adcs	r4, r3
 8025824:	4622      	mov	r2, r4
 8025826:	f106 0124 	add.w	r1, r6, #36	; 0x24
 802582a:	4628      	mov	r0, r5
 802582c:	f7fe fb81 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 8025830:	b968      	cbnz	r0, 802584e <ecp_select_comb.constprop.22+0x66>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 8025832:	4622      	mov	r2, r4
 8025834:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8025838:	4640      	mov	r0, r8
 802583a:	f7fe fb7a 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 802583e:	b930      	cbnz	r0, 802584e <ecp_select_comb.constprop.22+0x66>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 8025840:	09fa      	lsrs	r2, r7, #7
 8025842:	4629      	mov	r1, r5
 8025844:	4648      	mov	r0, r9

cleanup:
    return( ret );
}
 8025846:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 802584a:	f7ff bcae 	b.w	80251aa <ecp_safe_invert_jac>
}
 802584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08025854 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8025854:	4b04      	ldr	r3, [pc, #16]	; (8025868 <mbedtls_ecp_grp_id_list+0x14>)
 8025856:	681a      	ldr	r2, [r3, #0]
 8025858:	b922      	cbnz	r2, 8025864 <mbedtls_ecp_grp_id_list+0x10>
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 802585a:	2103      	movs	r1, #3
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 802585c:	715a      	strb	r2, [r3, #5]
        init_done = 1;
 802585e:	2201      	movs	r2, #1
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8025860:	7119      	strb	r1, [r3, #4]
        init_done = 1;
 8025862:	601a      	str	r2, [r3, #0]
}
 8025864:	4801      	ldr	r0, [pc, #4]	; (802586c <mbedtls_ecp_grp_id_list+0x18>)
 8025866:	4770      	bx	lr
 8025868:	20031dec 	.word	0x20031dec
 802586c:	20031df0 	.word	0x20031df0

08025870 <mbedtls_ecp_point_init>:
    if( pt == NULL )
 8025870:	b108      	cbz	r0, 8025876 <mbedtls_ecp_point_init+0x6>
 8025872:	f7ff bf9d 	b.w	80257b0 <mbedtls_ecp_point_init.part.4>
}
 8025876:	4770      	bx	lr

08025878 <mbedtls_ecp_group_init.part.5>:
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
 8025878:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
 802587a:	2500      	movs	r5, #0
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
 802587c:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
 802587e:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 8025882:	f7fe faeb 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 8025886:	f104 0010 	add.w	r0, r4, #16
 802588a:	f7fe fae7 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 802588e:	f104 001c 	add.w	r0, r4, #28
 8025892:	f7fe fae3 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 8025896:	f104 0028 	add.w	r0, r4, #40	; 0x28
 802589a:	f7ff ffe9 	bl	8025870 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 802589e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80258a2:	f7fe fadb 	bl	8023e5c <mbedtls_mpi_init>
    grp->nbits = 0;
 80258a6:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
 80258aa:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
 80258ae:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
 80258b2:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->T_size = 0;
 80258b6:	67a5      	str	r5, [r4, #120]	; 0x78
}
 80258b8:	bd38      	pop	{r3, r4, r5, pc}

080258ba <mbedtls_ecp_group_init>:
    if( grp == NULL )
 80258ba:	b108      	cbz	r0, 80258c0 <mbedtls_ecp_group_init+0x6>
 80258bc:	f7ff bfdc 	b.w	8025878 <mbedtls_ecp_group_init.part.5>
}
 80258c0:	4770      	bx	lr

080258c2 <mbedtls_ecp_keypair_init>:
{
 80258c2:	b510      	push	{r4, lr}
    if( key == NULL )
 80258c4:	4604      	mov	r4, r0
 80258c6:	b158      	cbz	r0, 80258e0 <mbedtls_ecp_keypair_init+0x1e>
    mbedtls_ecp_group_init( &key->grp );
 80258c8:	f7ff fff7 	bl	80258ba <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 80258cc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80258d0:	f7fe fac4 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 80258d4:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 80258d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 80258dc:	f7ff bfc8 	b.w	8025870 <mbedtls_ecp_point_init>
}
 80258e0:	bd10      	pop	{r4, pc}

080258e2 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 80258e2:	b108      	cbz	r0, 80258e8 <mbedtls_ecp_point_free+0x6>
 80258e4:	f7ff bf72 	b.w	80257cc <mbedtls_ecp_point_free.part.6>
}
 80258e8:	4770      	bx	lr

080258ea <mbedtls_ecp_group_free>:
{
 80258ea:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 80258ec:	4604      	mov	r4, r0
 80258ee:	b360      	cbz	r0, 802594a <mbedtls_ecp_group_free+0x60>
    if( grp->h != 1 )
 80258f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80258f2:	2b01      	cmp	r3, #1
 80258f4:	d012      	beq.n	802591c <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 80258f6:	3004      	adds	r0, #4
 80258f8:	f7fe fab7 	bl	8023e6a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 80258fc:	f104 0010 	add.w	r0, r4, #16
 8025900:	f7fe fab3 	bl	8023e6a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8025904:	f104 001c 	add.w	r0, r4, #28
 8025908:	f7fe faaf 	bl	8023e6a <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 802590c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8025910:	f7ff ffe7 	bl	80258e2 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8025914:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025918:	f7fe faa7 	bl	8023e6a <mbedtls_mpi_free>
    if( grp->T != NULL )
 802591c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802591e:	b98b      	cbnz	r3, 8025944 <mbedtls_ecp_group_free+0x5a>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 8025920:	4620      	mov	r0, r4
 8025922:	217c      	movs	r1, #124	; 0x7c
}
 8025924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 8025928:	f001 ba2e 	b.w	8026d88 <mbedtls_platform_zeroize>
            mbedtls_ecp_point_free( &grp->T[i] );
 802592c:	fb06 0005 	mla	r0, r6, r5, r0
 8025930:	f7ff ffd7 	bl	80258e2 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 8025934:	3501      	adds	r5, #1
 8025936:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 802593a:	42ab      	cmp	r3, r5
 802593c:	d8f6      	bhi.n	802592c <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 802593e:	f001 fa1d 	bl	8026d7c <mbedtls_free>
 8025942:	e7ed      	b.n	8025920 <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 8025944:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 8025946:	2624      	movs	r6, #36	; 0x24
 8025948:	e7f5      	b.n	8025936 <mbedtls_ecp_group_free+0x4c>
}
 802594a:	bd70      	pop	{r4, r5, r6, pc}

0802594c <mbedtls_ecp_keypair_free>:
{
 802594c:	b510      	push	{r4, lr}
    if( key == NULL )
 802594e:	4604      	mov	r4, r0
 8025950:	b158      	cbz	r0, 802596a <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 8025952:	f7ff ffca 	bl	80258ea <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 8025956:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 802595a:	f7fe fa86 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 802595e:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8025962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 8025966:	f7ff bfbc 	b.w	80258e2 <mbedtls_ecp_point_free>
}
 802596a:	bd10      	pop	{r4, pc}

0802596c <mbedtls_ecp_copy>:
{
 802596c:	b538      	push	{r3, r4, r5, lr}
 802596e:	4604      	mov	r4, r0
 8025970:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8025972:	f7fe fab2 	bl	8023eda <mbedtls_mpi_copy>
 8025976:	b970      	cbnz	r0, 8025996 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8025978:	f105 010c 	add.w	r1, r5, #12
 802597c:	f104 000c 	add.w	r0, r4, #12
 8025980:	f7fe faab 	bl	8023eda <mbedtls_mpi_copy>
 8025984:	b938      	cbnz	r0, 8025996 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8025986:	f105 0118 	add.w	r1, r5, #24
 802598a:	f104 0018 	add.w	r0, r4, #24
}
 802598e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8025992:	f7fe baa2 	b.w	8023eda <mbedtls_mpi_copy>
}
 8025996:	bd38      	pop	{r3, r4, r5, pc}

08025998 <mbedtls_ecp_group_copy>:
    return mbedtls_ecp_group_load( dst, src->id );
 8025998:	7809      	ldrb	r1, [r1, #0]
 802599a:	f000 bda7 	b.w	80264ec <mbedtls_ecp_group_load>

0802599e <mbedtls_ecp_set_zero>:
{
 802599e:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80259a0:	2101      	movs	r1, #1
{
 80259a2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80259a4:	f7fe fafa 	bl	8023f9c <mbedtls_mpi_lset>
 80259a8:	b960      	cbnz	r0, 80259c4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80259aa:	2101      	movs	r1, #1
 80259ac:	f104 000c 	add.w	r0, r4, #12
 80259b0:	f7fe faf4 	bl	8023f9c <mbedtls_mpi_lset>
 80259b4:	b930      	cbnz	r0, 80259c4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80259b6:	4601      	mov	r1, r0
 80259b8:	f104 0018 	add.w	r0, r4, #24
}
 80259bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80259c0:	f7fe baec 	b.w	8023f9c <mbedtls_mpi_lset>
}
 80259c4:	bd10      	pop	{r4, pc}
	...

080259c8 <ecp_add_mixed>:
{
 80259c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80259cc:	f102 0918 	add.w	r9, r2, #24
{
 80259d0:	b096      	sub	sp, #88	; 0x58
 80259d2:	4605      	mov	r5, r0
 80259d4:	460e      	mov	r6, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80259d6:	4648      	mov	r0, r9
 80259d8:	2100      	movs	r1, #0
{
 80259da:	4690      	mov	r8, r2
 80259dc:	461f      	mov	r7, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80259de:	f7fe fca6 	bl	802432e <mbedtls_mpi_cmp_int>
 80259e2:	b940      	cbnz	r0, 80259f6 <ecp_add_mixed+0x2e>
        return( mbedtls_ecp_copy( R, Q ) );
 80259e4:	4639      	mov	r1, r7
        return( mbedtls_ecp_copy( R, P ) );
 80259e6:	4630      	mov	r0, r6
 80259e8:	f7ff ffc0 	bl	802596c <mbedtls_ecp_copy>
 80259ec:	4604      	mov	r4, r0
}
 80259ee:	4620      	mov	r0, r4
 80259f0:	b016      	add	sp, #88	; 0x58
 80259f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 80259f6:	6a3b      	ldr	r3, [r7, #32]
 80259f8:	b13b      	cbz	r3, 8025a0a <ecp_add_mixed+0x42>
 80259fa:	2100      	movs	r1, #0
 80259fc:	f107 0018 	add.w	r0, r7, #24
 8025a00:	f7fe fc95 	bl	802432e <mbedtls_mpi_cmp_int>
 8025a04:	b908      	cbnz	r0, 8025a0a <ecp_add_mixed+0x42>
        return( mbedtls_ecp_copy( R, P ) );
 8025a06:	4641      	mov	r1, r8
 8025a08:	e7ed      	b.n	80259e6 <ecp_add_mixed+0x1e>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8025a0a:	6a3b      	ldr	r3, [r7, #32]
 8025a0c:	2b00      	cmp	r3, #0
 8025a0e:	f040 8145 	bne.w	8025c9c <ecp_add_mixed+0x2d4>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 8025a12:	a801      	add	r0, sp, #4
 8025a14:	f7fe fa22 	bl	8023e5c <mbedtls_mpi_init>
 8025a18:	a804      	add	r0, sp, #16
 8025a1a:	f7fe fa1f 	bl	8023e5c <mbedtls_mpi_init>
 8025a1e:	a807      	add	r0, sp, #28
 8025a20:	f7fe fa1c 	bl	8023e5c <mbedtls_mpi_init>
 8025a24:	a80a      	add	r0, sp, #40	; 0x28
 8025a26:	f7fe fa19 	bl	8023e5c <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8025a2a:	a80d      	add	r0, sp, #52	; 0x34
 8025a2c:	f7fe fa16 	bl	8023e5c <mbedtls_mpi_init>
 8025a30:	a810      	add	r0, sp, #64	; 0x40
 8025a32:	f7fe fa13 	bl	8023e5c <mbedtls_mpi_init>
 8025a36:	a813      	add	r0, sp, #76	; 0x4c
 8025a38:	f7fe fa10 	bl	8023e5c <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8025a3c:	464a      	mov	r2, r9
 8025a3e:	4649      	mov	r1, r9
 8025a40:	a801      	add	r0, sp, #4
 8025a42:	f7fe fd86 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025a46:	4604      	mov	r4, r0
 8025a48:	2800      	cmp	r0, #0
 8025a4a:	f040 8141 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025a4e:	4629      	mov	r1, r5
 8025a50:	a801      	add	r0, sp, #4
 8025a52:	f7ff fbcd 	bl	80251f0 <ecp_modp>
 8025a56:	4604      	mov	r4, r0
 8025a58:	2800      	cmp	r0, #0
 8025a5a:	f040 8139 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8025a5e:	464a      	mov	r2, r9
 8025a60:	a901      	add	r1, sp, #4
 8025a62:	a804      	add	r0, sp, #16
 8025a64:	f7fe fd75 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025a68:	4604      	mov	r4, r0
 8025a6a:	2800      	cmp	r0, #0
 8025a6c:	f040 8130 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025a70:	4629      	mov	r1, r5
 8025a72:	a804      	add	r0, sp, #16
 8025a74:	f7ff fbbc 	bl	80251f0 <ecp_modp>
 8025a78:	4604      	mov	r4, r0
 8025a7a:	2800      	cmp	r0, #0
 8025a7c:	f040 8128 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8025a80:	a901      	add	r1, sp, #4
 8025a82:	463a      	mov	r2, r7
 8025a84:	4608      	mov	r0, r1
 8025a86:	f7fe fd64 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025a8a:	4604      	mov	r4, r0
 8025a8c:	2800      	cmp	r0, #0
 8025a8e:	f040 811f 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025a92:	4629      	mov	r1, r5
 8025a94:	a801      	add	r0, sp, #4
 8025a96:	f7ff fbab 	bl	80251f0 <ecp_modp>
 8025a9a:	4604      	mov	r4, r0
 8025a9c:	2800      	cmp	r0, #0
 8025a9e:	f040 8117 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8025aa2:	a904      	add	r1, sp, #16
 8025aa4:	f107 020c 	add.w	r2, r7, #12
 8025aa8:	4608      	mov	r0, r1
 8025aaa:	f7fe fd52 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025aae:	4604      	mov	r4, r0
 8025ab0:	2800      	cmp	r0, #0
 8025ab2:	f040 810d 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025ab6:	4629      	mov	r1, r5
 8025ab8:	a804      	add	r0, sp, #16
 8025aba:	f7ff fb99 	bl	80251f0 <ecp_modp>
 8025abe:	4604      	mov	r4, r0
 8025ac0:	2800      	cmp	r0, #0
 8025ac2:	f040 8105 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8025ac6:	a901      	add	r1, sp, #4
 8025ac8:	4642      	mov	r2, r8
 8025aca:	4608      	mov	r0, r1
 8025acc:	f7fe fd08 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025ad0:	4604      	mov	r4, r0
 8025ad2:	2800      	cmp	r0, #0
 8025ad4:	f040 80fc 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025ad8:	1d2f      	adds	r7, r5, #4
 8025ada:	9b01      	ldr	r3, [sp, #4]
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	f2c0 80e7 	blt.w	8025cb0 <ecp_add_mixed+0x2e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8025ae2:	a904      	add	r1, sp, #16
 8025ae4:	f108 0a0c 	add.w	sl, r8, #12
 8025ae8:	4652      	mov	r2, sl
 8025aea:	4608      	mov	r0, r1
 8025aec:	f7fe fcf8 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025af0:	4604      	mov	r4, r0
 8025af2:	2800      	cmp	r0, #0
 8025af4:	f040 80ec 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025af8:	1d2f      	adds	r7, r5, #4
 8025afa:	9b04      	ldr	r3, [sp, #16]
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	f2c0 80fd 	blt.w	8025cfc <ecp_add_mixed+0x334>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 8025b02:	2100      	movs	r1, #0
 8025b04:	a801      	add	r0, sp, #4
 8025b06:	f7fe fc12 	bl	802432e <mbedtls_mpi_cmp_int>
 8025b0a:	4601      	mov	r1, r0
 8025b0c:	2800      	cmp	r0, #0
 8025b0e:	f000 8106 	beq.w	8025d1e <ecp_add_mixed+0x356>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8025b12:	aa01      	add	r2, sp, #4
 8025b14:	4649      	mov	r1, r9
 8025b16:	a813      	add	r0, sp, #76	; 0x4c
 8025b18:	f7fe fd1b 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025b1c:	4604      	mov	r4, r0
 8025b1e:	2800      	cmp	r0, #0
 8025b20:	f040 80d6 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025b24:	4629      	mov	r1, r5
 8025b26:	a813      	add	r0, sp, #76	; 0x4c
 8025b28:	f7ff fb62 	bl	80251f0 <ecp_modp>
 8025b2c:	4604      	mov	r4, r0
 8025b2e:	2800      	cmp	r0, #0
 8025b30:	f040 80ce 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8025b34:	aa01      	add	r2, sp, #4
 8025b36:	4611      	mov	r1, r2
 8025b38:	a807      	add	r0, sp, #28
 8025b3a:	f7fe fd0a 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025b3e:	4604      	mov	r4, r0
 8025b40:	2800      	cmp	r0, #0
 8025b42:	f040 80c5 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025b46:	4629      	mov	r1, r5
 8025b48:	a807      	add	r0, sp, #28
 8025b4a:	f7ff fb51 	bl	80251f0 <ecp_modp>
 8025b4e:	4604      	mov	r4, r0
 8025b50:	2800      	cmp	r0, #0
 8025b52:	f040 80bd 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8025b56:	aa01      	add	r2, sp, #4
 8025b58:	a907      	add	r1, sp, #28
 8025b5a:	a80a      	add	r0, sp, #40	; 0x28
 8025b5c:	f7fe fcf9 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025b60:	4604      	mov	r4, r0
 8025b62:	2800      	cmp	r0, #0
 8025b64:	f040 80b4 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025b68:	4629      	mov	r1, r5
 8025b6a:	a80a      	add	r0, sp, #40	; 0x28
 8025b6c:	f7ff fb40 	bl	80251f0 <ecp_modp>
 8025b70:	4604      	mov	r4, r0
 8025b72:	2800      	cmp	r0, #0
 8025b74:	f040 80ac 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8025b78:	a907      	add	r1, sp, #28
 8025b7a:	4642      	mov	r2, r8
 8025b7c:	4608      	mov	r0, r1
 8025b7e:	f7fe fce8 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025b82:	4604      	mov	r4, r0
 8025b84:	2800      	cmp	r0, #0
 8025b86:	f040 80a3 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025b8a:	4629      	mov	r1, r5
 8025b8c:	a807      	add	r0, sp, #28
 8025b8e:	f7ff fb2f 	bl	80251f0 <ecp_modp>
 8025b92:	4604      	mov	r4, r0
 8025b94:	2800      	cmp	r0, #0
 8025b96:	f040 809b 	bne.w	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8025b9a:	2202      	movs	r2, #2
 8025b9c:	a907      	add	r1, sp, #28
 8025b9e:	a801      	add	r0, sp, #4
 8025ba0:	f7fe fd41 	bl	8024626 <mbedtls_mpi_mul_int>
 8025ba4:	4604      	mov	r4, r0
 8025ba6:	2800      	cmp	r0, #0
 8025ba8:	f040 8092 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025bac:	1d2f      	adds	r7, r5, #4
 8025bae:	4639      	mov	r1, r7
 8025bb0:	a801      	add	r0, sp, #4
 8025bb2:	f7fe fb7c 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8025bb6:	2800      	cmp	r0, #0
 8025bb8:	f280 80c0 	bge.w	8025d3c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8025bbc:	aa04      	add	r2, sp, #16
 8025bbe:	4611      	mov	r1, r2
 8025bc0:	a80d      	add	r0, sp, #52	; 0x34
 8025bc2:	f7fe fcc6 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025bc6:	4604      	mov	r4, r0
 8025bc8:	2800      	cmp	r0, #0
 8025bca:	f040 8081 	bne.w	8025cd0 <ecp_add_mixed+0x308>
 8025bce:	4629      	mov	r1, r5
 8025bd0:	a80d      	add	r0, sp, #52	; 0x34
 8025bd2:	f7ff fb0d 	bl	80251f0 <ecp_modp>
 8025bd6:	4604      	mov	r4, r0
 8025bd8:	2800      	cmp	r0, #0
 8025bda:	d179      	bne.n	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8025bdc:	a90d      	add	r1, sp, #52	; 0x34
 8025bde:	aa01      	add	r2, sp, #4
 8025be0:	4608      	mov	r0, r1
 8025be2:	f7fe fc7d 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025be6:	4604      	mov	r4, r0
 8025be8:	2800      	cmp	r0, #0
 8025bea:	d171      	bne.n	8025cd0 <ecp_add_mixed+0x308>
 8025bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025bee:	2b00      	cmp	r3, #0
 8025bf0:	f2c0 80ae 	blt.w	8025d50 <ecp_add_mixed+0x388>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 8025bf4:	a90d      	add	r1, sp, #52	; 0x34
 8025bf6:	aa0a      	add	r2, sp, #40	; 0x28
 8025bf8:	4608      	mov	r0, r1
 8025bfa:	f7fe fc71 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025bfe:	4604      	mov	r4, r0
 8025c00:	2800      	cmp	r0, #0
 8025c02:	d165      	bne.n	8025cd0 <ecp_add_mixed+0x308>
 8025c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	f2c0 80af 	blt.w	8025d6a <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8025c0c:	a907      	add	r1, sp, #28
 8025c0e:	aa0d      	add	r2, sp, #52	; 0x34
 8025c10:	4608      	mov	r0, r1
 8025c12:	f7fe fc65 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025c16:	4604      	mov	r4, r0
 8025c18:	2800      	cmp	r0, #0
 8025c1a:	d159      	bne.n	8025cd0 <ecp_add_mixed+0x308>
 8025c1c:	9b07      	ldr	r3, [sp, #28]
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	f2c0 80b0 	blt.w	8025d84 <ecp_add_mixed+0x3bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8025c24:	a907      	add	r1, sp, #28
 8025c26:	aa04      	add	r2, sp, #16
 8025c28:	4608      	mov	r0, r1
 8025c2a:	f7fe fc92 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025c2e:	4604      	mov	r4, r0
 8025c30:	2800      	cmp	r0, #0
 8025c32:	d14d      	bne.n	8025cd0 <ecp_add_mixed+0x308>
 8025c34:	4629      	mov	r1, r5
 8025c36:	a807      	add	r0, sp, #28
 8025c38:	f7ff fada 	bl	80251f0 <ecp_modp>
 8025c3c:	4604      	mov	r4, r0
 8025c3e:	2800      	cmp	r0, #0
 8025c40:	d146      	bne.n	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8025c42:	a90a      	add	r1, sp, #40	; 0x28
 8025c44:	4652      	mov	r2, sl
 8025c46:	4608      	mov	r0, r1
 8025c48:	f7fe fc83 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025c4c:	4604      	mov	r4, r0
 8025c4e:	2800      	cmp	r0, #0
 8025c50:	d13e      	bne.n	8025cd0 <ecp_add_mixed+0x308>
 8025c52:	4629      	mov	r1, r5
 8025c54:	a80a      	add	r0, sp, #40	; 0x28
 8025c56:	f7ff facb 	bl	80251f0 <ecp_modp>
 8025c5a:	4604      	mov	r4, r0
 8025c5c:	2800      	cmp	r0, #0
 8025c5e:	d137      	bne.n	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8025c60:	aa0a      	add	r2, sp, #40	; 0x28
 8025c62:	a907      	add	r1, sp, #28
 8025c64:	a810      	add	r0, sp, #64	; 0x40
 8025c66:	f7fe fc3b 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8025c6a:	4604      	mov	r4, r0
 8025c6c:	bb80      	cbnz	r0, 8025cd0 <ecp_add_mixed+0x308>
 8025c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	f2c0 8094 	blt.w	8025d9e <ecp_add_mixed+0x3d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 8025c76:	a90d      	add	r1, sp, #52	; 0x34
 8025c78:	4630      	mov	r0, r6
 8025c7a:	f7fe f92e 	bl	8023eda <mbedtls_mpi_copy>
 8025c7e:	4604      	mov	r4, r0
 8025c80:	bb30      	cbnz	r0, 8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 8025c82:	a910      	add	r1, sp, #64	; 0x40
 8025c84:	f106 000c 	add.w	r0, r6, #12
 8025c88:	f7fe f927 	bl	8023eda <mbedtls_mpi_copy>
 8025c8c:	4604      	mov	r4, r0
 8025c8e:	b9f8      	cbnz	r0, 8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8025c90:	a913      	add	r1, sp, #76	; 0x4c
 8025c92:	f106 0018 	add.w	r0, r6, #24
 8025c96:	f7fe f920 	bl	8023eda <mbedtls_mpi_copy>
 8025c9a:	e049      	b.n	8025d30 <ecp_add_mixed+0x368>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8025c9c:	2101      	movs	r1, #1
 8025c9e:	f107 0018 	add.w	r0, r7, #24
 8025ca2:	f7fe fb44 	bl	802432e <mbedtls_mpi_cmp_int>
 8025ca6:	2800      	cmp	r0, #0
 8025ca8:	f43f aeb3 	beq.w	8025a12 <ecp_add_mixed+0x4a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8025cac:	4c42      	ldr	r4, [pc, #264]	; (8025db8 <ecp_add_mixed+0x3f0>)
 8025cae:	e69e      	b.n	80259ee <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8025cb0:	2100      	movs	r1, #0
 8025cb2:	a801      	add	r0, sp, #4
 8025cb4:	f7fe fb3b 	bl	802432e <mbedtls_mpi_cmp_int>
 8025cb8:	2800      	cmp	r0, #0
 8025cba:	f43f af12 	beq.w	8025ae2 <ecp_add_mixed+0x11a>
 8025cbe:	a901      	add	r1, sp, #4
 8025cc0:	463a      	mov	r2, r7
 8025cc2:	4608      	mov	r0, r1
 8025cc4:	f7fe fbea 	bl	802449c <mbedtls_mpi_add_mpi>
 8025cc8:	4604      	mov	r4, r0
 8025cca:	2800      	cmp	r0, #0
 8025ccc:	f43f af05 	beq.w	8025ada <ecp_add_mixed+0x112>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 8025cd0:	a801      	add	r0, sp, #4
 8025cd2:	f7fe f8ca 	bl	8023e6a <mbedtls_mpi_free>
 8025cd6:	a804      	add	r0, sp, #16
 8025cd8:	f7fe f8c7 	bl	8023e6a <mbedtls_mpi_free>
 8025cdc:	a807      	add	r0, sp, #28
 8025cde:	f7fe f8c4 	bl	8023e6a <mbedtls_mpi_free>
 8025ce2:	a80a      	add	r0, sp, #40	; 0x28
 8025ce4:	f7fe f8c1 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8025ce8:	a80d      	add	r0, sp, #52	; 0x34
 8025cea:	f7fe f8be 	bl	8023e6a <mbedtls_mpi_free>
 8025cee:	a810      	add	r0, sp, #64	; 0x40
 8025cf0:	f7fe f8bb 	bl	8023e6a <mbedtls_mpi_free>
 8025cf4:	a813      	add	r0, sp, #76	; 0x4c
 8025cf6:	f7fe f8b8 	bl	8023e6a <mbedtls_mpi_free>
    return( ret );
 8025cfa:	e678      	b.n	80259ee <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8025cfc:	2100      	movs	r1, #0
 8025cfe:	a804      	add	r0, sp, #16
 8025d00:	f7fe fb15 	bl	802432e <mbedtls_mpi_cmp_int>
 8025d04:	2800      	cmp	r0, #0
 8025d06:	f43f aefc 	beq.w	8025b02 <ecp_add_mixed+0x13a>
 8025d0a:	a904      	add	r1, sp, #16
 8025d0c:	463a      	mov	r2, r7
 8025d0e:	4608      	mov	r0, r1
 8025d10:	f7fe fbc4 	bl	802449c <mbedtls_mpi_add_mpi>
 8025d14:	4604      	mov	r4, r0
 8025d16:	2800      	cmp	r0, #0
 8025d18:	f43f aeef 	beq.w	8025afa <ecp_add_mixed+0x132>
cleanup:
 8025d1c:	e7d8      	b.n	8025cd0 <ecp_add_mixed+0x308>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 8025d1e:	a804      	add	r0, sp, #16
 8025d20:	f7fe fb05 	bl	802432e <mbedtls_mpi_cmp_int>
 8025d24:	b930      	cbnz	r0, 8025d34 <ecp_add_mixed+0x36c>
            ret = ecp_double_jac( grp, R, P );
 8025d26:	4642      	mov	r2, r8
 8025d28:	4631      	mov	r1, r6
 8025d2a:	4628      	mov	r0, r5
 8025d2c:	f7ff faa6 	bl	802527c <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8025d30:	4604      	mov	r4, r0
cleanup:
 8025d32:	e7cd      	b.n	8025cd0 <ecp_add_mixed+0x308>
            ret = mbedtls_ecp_set_zero( R );
 8025d34:	4630      	mov	r0, r6
 8025d36:	f7ff fe32 	bl	802599e <mbedtls_ecp_set_zero>
 8025d3a:	e7f9      	b.n	8025d30 <ecp_add_mixed+0x368>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8025d3c:	a901      	add	r1, sp, #4
 8025d3e:	463a      	mov	r2, r7
 8025d40:	4608      	mov	r0, r1
 8025d42:	f7fe fb6d 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025d46:	4604      	mov	r4, r0
 8025d48:	2800      	cmp	r0, #0
 8025d4a:	f43f af30 	beq.w	8025bae <ecp_add_mixed+0x1e6>
cleanup:
 8025d4e:	e7bf      	b.n	8025cd0 <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8025d50:	2100      	movs	r1, #0
 8025d52:	a80d      	add	r0, sp, #52	; 0x34
 8025d54:	f7fe faeb 	bl	802432e <mbedtls_mpi_cmp_int>
 8025d58:	2800      	cmp	r0, #0
 8025d5a:	f43f af4b 	beq.w	8025bf4 <ecp_add_mixed+0x22c>
 8025d5e:	a90d      	add	r1, sp, #52	; 0x34
 8025d60:	463a      	mov	r2, r7
 8025d62:	4608      	mov	r0, r1
 8025d64:	f7fe fb9a 	bl	802449c <mbedtls_mpi_add_mpi>
 8025d68:	e73d      	b.n	8025be6 <ecp_add_mixed+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 8025d6a:	2100      	movs	r1, #0
 8025d6c:	a80d      	add	r0, sp, #52	; 0x34
 8025d6e:	f7fe fade 	bl	802432e <mbedtls_mpi_cmp_int>
 8025d72:	2800      	cmp	r0, #0
 8025d74:	f43f af4a 	beq.w	8025c0c <ecp_add_mixed+0x244>
 8025d78:	a90d      	add	r1, sp, #52	; 0x34
 8025d7a:	463a      	mov	r2, r7
 8025d7c:	4608      	mov	r0, r1
 8025d7e:	f7fe fb8d 	bl	802449c <mbedtls_mpi_add_mpi>
 8025d82:	e73c      	b.n	8025bfe <ecp_add_mixed+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8025d84:	2100      	movs	r1, #0
 8025d86:	a807      	add	r0, sp, #28
 8025d88:	f7fe fad1 	bl	802432e <mbedtls_mpi_cmp_int>
 8025d8c:	2800      	cmp	r0, #0
 8025d8e:	f43f af49 	beq.w	8025c24 <ecp_add_mixed+0x25c>
 8025d92:	a907      	add	r1, sp, #28
 8025d94:	463a      	mov	r2, r7
 8025d96:	4608      	mov	r0, r1
 8025d98:	f7fe fb80 	bl	802449c <mbedtls_mpi_add_mpi>
 8025d9c:	e73b      	b.n	8025c16 <ecp_add_mixed+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8025d9e:	2100      	movs	r1, #0
 8025da0:	a810      	add	r0, sp, #64	; 0x40
 8025da2:	f7fe fac4 	bl	802432e <mbedtls_mpi_cmp_int>
 8025da6:	2800      	cmp	r0, #0
 8025da8:	f43f af65 	beq.w	8025c76 <ecp_add_mixed+0x2ae>
 8025dac:	a910      	add	r1, sp, #64	; 0x40
 8025dae:	463a      	mov	r2, r7
 8025db0:	4608      	mov	r0, r1
 8025db2:	f7fe fb73 	bl	802449c <mbedtls_mpi_add_mpi>
 8025db6:	e758      	b.n	8025c6a <ecp_add_mixed+0x2a2>
 8025db8:	ffffb080 	.word	0xffffb080

08025dbc <mbedtls_ecp_point_read_binary>:
{
 8025dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dbe:	460c      	mov	r4, r1
 8025dc0:	4615      	mov	r5, r2
    if( ilen < 1 )
 8025dc2:	461f      	mov	r7, r3
 8025dc4:	b90b      	cbnz	r3, 8025dca <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8025dc6:	4817      	ldr	r0, [pc, #92]	; (8025e24 <mbedtls_ecp_point_read_binary+0x68>)
}
 8025dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
 8025dca:	7813      	ldrb	r3, [r2, #0]
 8025dcc:	b933      	cbnz	r3, 8025ddc <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
 8025dce:	2f01      	cmp	r7, #1
 8025dd0:	d1f9      	bne.n	8025dc6 <mbedtls_ecp_point_read_binary+0xa>
            return( mbedtls_ecp_set_zero( pt ) );
 8025dd2:	4608      	mov	r0, r1
}
 8025dd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
 8025dd8:	f7ff bde1 	b.w	802599e <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
 8025ddc:	3004      	adds	r0, #4
 8025dde:	f7fe f944 	bl	802406a <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
 8025de2:	782b      	ldrb	r3, [r5, #0]
 8025de4:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
 8025de6:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
 8025de8:	d11a      	bne.n	8025e20 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 8025dea:	0042      	lsls	r2, r0, #1
 8025dec:	3201      	adds	r2, #1
 8025dee:	4297      	cmp	r7, r2
 8025df0:	d1e9      	bne.n	8025dc6 <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8025df2:	4602      	mov	r2, r0
 8025df4:	1c69      	adds	r1, r5, #1
 8025df6:	4620      	mov	r0, r4
 8025df8:	f7fe f93d 	bl	8024076 <mbedtls_mpi_read_binary>
 8025dfc:	2800      	cmp	r0, #0
 8025dfe:	d1e3      	bne.n	8025dc8 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8025e00:	1c71      	adds	r1, r6, #1
 8025e02:	4632      	mov	r2, r6
 8025e04:	4429      	add	r1, r5
 8025e06:	f104 000c 	add.w	r0, r4, #12
 8025e0a:	f7fe f934 	bl	8024076 <mbedtls_mpi_read_binary>
 8025e0e:	2800      	cmp	r0, #0
 8025e10:	d1da      	bne.n	8025dc8 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8025e12:	f104 0018 	add.w	r0, r4, #24
 8025e16:	2101      	movs	r1, #1
}
 8025e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8025e1c:	f7fe b8be 	b.w	8023f9c <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8025e20:	4801      	ldr	r0, [pc, #4]	; (8025e28 <mbedtls_ecp_point_read_binary+0x6c>)
 8025e22:	e7d1      	b.n	8025dc8 <mbedtls_ecp_point_read_binary+0xc>
 8025e24:	ffffb080 	.word	0xffffb080
 8025e28:	ffffb180 	.word	0xffffb180

08025e2c <mbedtls_ecp_check_pubkey>:

/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8025e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e2e:	460f      	mov	r7, r1
 8025e30:	b087      	sub	sp, #28
 8025e32:	4605      	mov	r5, r0
    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8025e34:	2101      	movs	r1, #1
 8025e36:	f107 0018 	add.w	r0, r7, #24
 8025e3a:	f7fe fa78 	bl	802432e <mbedtls_mpi_cmp_int>
 8025e3e:	4606      	mov	r6, r0
 8025e40:	b958      	cbnz	r0, 8025e5a <mbedtls_ecp_check_pubkey+0x2e>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8025e42:	4628      	mov	r0, r5
 8025e44:	f7ff f9a7 	bl	8025196 <ecp_get_type>
 8025e48:	2801      	cmp	r0, #1
 8025e4a:	f040 80a0 	bne.w	8025f8e <mbedtls_ecp_check_pubkey+0x162>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8025e4e:	4631      	mov	r1, r6
 8025e50:	4638      	mov	r0, r7
 8025e52:	f7fe fa6c 	bl	802432e <mbedtls_mpi_cmp_int>
 8025e56:	2800      	cmp	r0, #0
 8025e58:	da01      	bge.n	8025e5e <mbedtls_ecp_check_pubkey+0x32>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8025e5a:	4c4e      	ldr	r4, [pc, #312]	; (8025f94 <mbedtls_ecp_check_pubkey+0x168>)
 8025e5c:	e06d      	b.n	8025f3a <mbedtls_ecp_check_pubkey+0x10e>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8025e5e:	f107 040c 	add.w	r4, r7, #12
 8025e62:	4631      	mov	r1, r6
 8025e64:	4620      	mov	r0, r4
 8025e66:	f7fe fa62 	bl	802432e <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8025e6a:	2800      	cmp	r0, #0
 8025e6c:	dbf5      	blt.n	8025e5a <mbedtls_ecp_check_pubkey+0x2e>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8025e6e:	1d2e      	adds	r6, r5, #4
 8025e70:	4631      	mov	r1, r6
 8025e72:	4638      	mov	r0, r7
 8025e74:	f7fe fa1b 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8025e78:	2800      	cmp	r0, #0
 8025e7a:	daee      	bge.n	8025e5a <mbedtls_ecp_check_pubkey+0x2e>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8025e7c:	4631      	mov	r1, r6
 8025e7e:	4620      	mov	r0, r4
 8025e80:	f7fe fa15 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8025e84:	2800      	cmp	r0, #0
 8025e86:	dae8      	bge.n	8025e5a <mbedtls_ecp_check_pubkey+0x2e>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8025e88:	4668      	mov	r0, sp
 8025e8a:	f7fd ffe7 	bl	8023e5c <mbedtls_mpi_init>
 8025e8e:	a803      	add	r0, sp, #12
 8025e90:	f7fd ffe4 	bl	8023e5c <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8025e94:	4622      	mov	r2, r4
 8025e96:	4621      	mov	r1, r4
 8025e98:	4668      	mov	r0, sp
 8025e9a:	f7fe fb5a 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025e9e:	4604      	mov	r4, r0
 8025ea0:	2800      	cmp	r0, #0
 8025ea2:	d144      	bne.n	8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025ea4:	4629      	mov	r1, r5
 8025ea6:	4668      	mov	r0, sp
 8025ea8:	f7ff f9a2 	bl	80251f0 <ecp_modp>
 8025eac:	4604      	mov	r4, r0
 8025eae:	2800      	cmp	r0, #0
 8025eb0:	d13d      	bne.n	8025f2e <mbedtls_ecp_check_pubkey+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8025eb2:	463a      	mov	r2, r7
 8025eb4:	4639      	mov	r1, r7
 8025eb6:	a803      	add	r0, sp, #12
 8025eb8:	f7fe fb4b 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025ebc:	4604      	mov	r4, r0
 8025ebe:	2800      	cmp	r0, #0
 8025ec0:	d135      	bne.n	8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025ec2:	4629      	mov	r1, r5
 8025ec4:	a803      	add	r0, sp, #12
 8025ec6:	f7ff f993 	bl	80251f0 <ecp_modp>
 8025eca:	4604      	mov	r4, r0
 8025ecc:	bb78      	cbnz	r0, 8025f2e <mbedtls_ecp_check_pubkey+0x102>
    if( grp->A.p == NULL )
 8025ece:	69ab      	ldr	r3, [r5, #24]
 8025ed0:	2b00      	cmp	r3, #0
 8025ed2:	d141      	bne.n	8025f58 <mbedtls_ecp_check_pubkey+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8025ed4:	a903      	add	r1, sp, #12
 8025ed6:	2203      	movs	r2, #3
 8025ed8:	4608      	mov	r0, r1
 8025eda:	f7fe fb24 	bl	8024526 <mbedtls_mpi_sub_int>
 8025ede:	4604      	mov	r4, r0
 8025ee0:	bb28      	cbnz	r0, 8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025ee2:	9b03      	ldr	r3, [sp, #12]
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	db2b      	blt.n	8025f40 <mbedtls_ecp_check_pubkey+0x114>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8025ee8:	a903      	add	r1, sp, #12
 8025eea:	463a      	mov	r2, r7
 8025eec:	4608      	mov	r0, r1
 8025eee:	f7fe fb30 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8025ef2:	4604      	mov	r4, r0
 8025ef4:	b9d8      	cbnz	r0, 8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025ef6:	4629      	mov	r1, r5
 8025ef8:	a803      	add	r0, sp, #12
 8025efa:	f7ff f979 	bl	80251f0 <ecp_modp>
 8025efe:	4604      	mov	r4, r0
 8025f00:	b9a8      	cbnz	r0, 8025f2e <mbedtls_ecp_check_pubkey+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8025f02:	a903      	add	r1, sp, #12
 8025f04:	f105 021c 	add.w	r2, r5, #28
 8025f08:	4608      	mov	r0, r1
 8025f0a:	f7fe fac7 	bl	802449c <mbedtls_mpi_add_mpi>
 8025f0e:	4604      	mov	r4, r0
 8025f10:	b968      	cbnz	r0, 8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025f12:	4631      	mov	r1, r6
 8025f14:	a803      	add	r0, sp, #12
 8025f16:	f7fe f9ca 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8025f1a:	2800      	cmp	r0, #0
 8025f1c:	da31      	bge.n	8025f82 <mbedtls_ecp_check_pubkey+0x156>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8025f1e:	a903      	add	r1, sp, #12
 8025f20:	4668      	mov	r0, sp
 8025f22:	f7fe f9c4 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8025f26:	4c1b      	ldr	r4, [pc, #108]	; (8025f94 <mbedtls_ecp_check_pubkey+0x168>)
 8025f28:	2800      	cmp	r0, #0
 8025f2a:	bf08      	it	eq
 8025f2c:	2400      	moveq	r4, #0
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8025f2e:	4668      	mov	r0, sp
 8025f30:	f7fd ff9b 	bl	8023e6a <mbedtls_mpi_free>
 8025f34:	a803      	add	r0, sp, #12
 8025f36:	f7fd ff98 	bl	8023e6a <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8025f3a:	4620      	mov	r0, r4
 8025f3c:	b007      	add	sp, #28
 8025f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8025f40:	2100      	movs	r1, #0
 8025f42:	a803      	add	r0, sp, #12
 8025f44:	f7fe f9f3 	bl	802432e <mbedtls_mpi_cmp_int>
 8025f48:	2800      	cmp	r0, #0
 8025f4a:	d0cd      	beq.n	8025ee8 <mbedtls_ecp_check_pubkey+0xbc>
 8025f4c:	a903      	add	r1, sp, #12
 8025f4e:	4632      	mov	r2, r6
 8025f50:	4608      	mov	r0, r1
 8025f52:	f7fe faa3 	bl	802449c <mbedtls_mpi_add_mpi>
 8025f56:	e7c2      	b.n	8025ede <mbedtls_ecp_check_pubkey+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8025f58:	a903      	add	r1, sp, #12
 8025f5a:	f105 0210 	add.w	r2, r5, #16
 8025f5e:	4608      	mov	r0, r1
 8025f60:	f7fe fa9c 	bl	802449c <mbedtls_mpi_add_mpi>
 8025f64:	4604      	mov	r4, r0
 8025f66:	2800      	cmp	r0, #0
 8025f68:	d1e1      	bne.n	8025f2e <mbedtls_ecp_check_pubkey+0x102>
 8025f6a:	4631      	mov	r1, r6
 8025f6c:	a803      	add	r0, sp, #12
 8025f6e:	f7fe f99e 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 8025f72:	2800      	cmp	r0, #0
 8025f74:	dbb8      	blt.n	8025ee8 <mbedtls_ecp_check_pubkey+0xbc>
 8025f76:	a903      	add	r1, sp, #12
 8025f78:	4632      	mov	r2, r6
 8025f7a:	4608      	mov	r0, r1
 8025f7c:	f7fe fa50 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025f80:	e7f0      	b.n	8025f64 <mbedtls_ecp_check_pubkey+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8025f82:	a903      	add	r1, sp, #12
 8025f84:	4632      	mov	r2, r6
 8025f86:	4608      	mov	r0, r1
 8025f88:	f7fe fa4a 	bl	8024420 <mbedtls_mpi_sub_abs>
 8025f8c:	e7bf      	b.n	8025f0e <mbedtls_ecp_check_pubkey+0xe2>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8025f8e:	4c02      	ldr	r4, [pc, #8]	; (8025f98 <mbedtls_ecp_check_pubkey+0x16c>)
 8025f90:	e7d3      	b.n	8025f3a <mbedtls_ecp_check_pubkey+0x10e>
 8025f92:	bf00      	nop
 8025f94:	ffffb380 	.word	0xffffb380
 8025f98:	ffffb080 	.word	0xffffb080

08025f9c <mbedtls_ecp_check_privkey>:

/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
{
 8025f9c:	b538      	push	{r3, r4, r5, lr}
 8025f9e:	460c      	mov	r4, r1
 8025fa0:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8025fa2:	f7ff f8f8 	bl	8025196 <ecp_get_type>
 8025fa6:	2801      	cmp	r0, #1
 8025fa8:	4601      	mov	r1, r0
 8025faa:	d10d      	bne.n	8025fc8 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8025fac:	4620      	mov	r0, r4
 8025fae:	f7fe f9be 	bl	802432e <mbedtls_mpi_cmp_int>
 8025fb2:	2800      	cmp	r0, #0
 8025fb4:	db06      	blt.n	8025fc4 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8025fb6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8025fba:	4620      	mov	r0, r4
 8025fbc:	f7fe f977 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8025fc0:	2800      	cmp	r0, #0
 8025fc2:	db03      	blt.n	8025fcc <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8025fc4:	4802      	ldr	r0, [pc, #8]	; (8025fd0 <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8025fc6:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8025fc8:	4802      	ldr	r0, [pc, #8]	; (8025fd4 <mbedtls_ecp_check_privkey+0x38>)
 8025fca:	e7fc      	b.n	8025fc6 <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 8025fcc:	2000      	movs	r0, #0
 8025fce:	e7fa      	b.n	8025fc6 <mbedtls_ecp_check_privkey+0x2a>
 8025fd0:	ffffb380 	.word	0xffffb380
 8025fd4:	ffffb080 	.word	0xffffb080

08025fd8 <mbedtls_ecp_mul_restartable>:
{
 8025fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fdc:	460e      	mov	r6, r1
 8025fde:	b0c5      	sub	sp, #276	; 0x114
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 8025fe0:	4611      	mov	r1, r2
{
 8025fe2:	4605      	mov	r5, r0
 8025fe4:	4691      	mov	r9, r2
 8025fe6:	461f      	mov	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 8025fe8:	f7ff ffd8 	bl	8025f9c <mbedtls_ecp_check_privkey>
 8025fec:	4604      	mov	r4, r0
 8025fee:	2800      	cmp	r0, #0
 8025ff0:	d176      	bne.n	80260e0 <mbedtls_ecp_mul_restartable+0x108>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 8025ff2:	4639      	mov	r1, r7
 8025ff4:	4628      	mov	r0, r5
 8025ff6:	f7ff ff19 	bl	8025e2c <mbedtls_ecp_check_pubkey>
 8025ffa:	4604      	mov	r4, r0
 8025ffc:	2800      	cmp	r0, #0
 8025ffe:	d16f      	bne.n	80260e0 <mbedtls_ecp_mul_restartable+0x108>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8026000:	4628      	mov	r0, r5
 8026002:	f7ff f8c8 	bl	8025196 <ecp_get_type>
 8026006:	2801      	cmp	r0, #1
 8026008:	4682      	mov	sl, r0
 802600a:	f040 81c1 	bne.w	8026390 <mbedtls_ecp_mul_restartable+0x3b8>
    d = ( grp->nbits + w - 1 ) / w;
 802600e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8026010:	9301      	str	r3, [sp, #4]
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 8026012:	2124      	movs	r1, #36	; 0x24
 8026014:	2002      	movs	r0, #2
 8026016:	f000 feab 	bl	8026d70 <mbedtls_calloc>
        if( T == NULL )
 802601a:	4683      	mov	fp, r0
 802601c:	2800      	cmp	r0, #0
 802601e:	f000 81b1 	beq.w	8026384 <mbedtls_ecp_mul_restartable+0x3ac>
            mbedtls_ecp_point_init( &T[i] );
 8026022:	f10b 0824 	add.w	r8, fp, #36	; 0x24
 8026026:	f7ff fc23 	bl	8025870 <mbedtls_ecp_point_init>
 802602a:	4640      	mov	r0, r8
 802602c:	f7ff fc20 	bl	8025870 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 8026030:	4639      	mov	r1, r7
 8026032:	4658      	mov	r0, fp
 8026034:	f7ff fc9a 	bl	802596c <mbedtls_ecp_copy>
 8026038:	4604      	mov	r4, r0
 802603a:	2800      	cmp	r0, #0
 802603c:	d13c      	bne.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
    d = ( grp->nbits + w - 1 ) / w;
 802603e:	9f01      	ldr	r7, [sp, #4]
 8026040:	3701      	adds	r7, #1
 8026042:	087b      	lsrs	r3, r7, #1
        j = 0;
 8026044:	4607      	mov	r7, r0
    for( ; j < d * ( w - 1 ); j++ )
 8026046:	42bb      	cmp	r3, r7
 8026048:	d123      	bne.n	8026092 <mbedtls_ecp_mul_restartable+0xba>
        return( ecp_normalize_jac( grp, *T ) );
 802604a:	4641      	mov	r1, r8
 802604c:	4628      	mov	r0, r5
 802604e:	f7ff fb52 	bl	80256f6 <ecp_normalize_jac>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 8026052:	4604      	mov	r4, r0
 8026054:	bb80      	cbnz	r0, 80260b8 <mbedtls_ecp_mul_restartable+0xe0>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 8026056:	4643      	mov	r3, r8
 8026058:	465a      	mov	r2, fp
 802605a:	4641      	mov	r1, r8
 802605c:	4628      	mov	r0, r5
 802605e:	f7ff fcb3 	bl	80259c8 <ecp_add_mixed>
 8026062:	4604      	mov	r4, r0
 8026064:	bb40      	cbnz	r0, 80260b8 <mbedtls_ecp_mul_restartable+0xe0>
        return( ecp_normalize_jac( grp, *T ) );
 8026066:	4641      	mov	r1, r8
 8026068:	4628      	mov	r0, r5
 802606a:	f7ff fb44 	bl	80256f6 <ecp_normalize_jac>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 802606e:	4604      	mov	r4, r0
 8026070:	bb10      	cbnz	r0, 80260b8 <mbedtls_ecp_mul_restartable+0xe0>
    mbedtls_mpi_init( &M );
 8026072:	a807      	add	r0, sp, #28
 8026074:	f7fd fef2 	bl	8023e5c <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 8026078:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mbedtls_mpi_init( &mm );
 802607c:	a80a      	add	r0, sp, #40	; 0x28
 802607e:	f7fd feed 	bl	8023e5c <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 8026082:	4621      	mov	r1, r4
 8026084:	4640      	mov	r0, r8
 8026086:	f7fd ffa5 	bl	8023fd4 <mbedtls_mpi_get_bit>
 802608a:	2801      	cmp	r0, #1
 802608c:	d03e      	beq.n	802610c <mbedtls_ecp_mul_restartable+0x134>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 802608e:	4cbe      	ldr	r4, [pc, #760]	; (8026388 <mbedtls_ecp_mul_restartable+0x3b0>)
 8026090:	e012      	b.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
        i = 1U << ( j / d );
 8026092:	fbb7 f0f3 	udiv	r0, r7, r3
 8026096:	fa0a f100 	lsl.w	r1, sl, r0
        cur = T + i;
 802609a:	b2c9      	uxtb	r1, r1
 802609c:	2224      	movs	r2, #36	; 0x24
        if( j % d == 0 )
 802609e:	fb03 7010 	mls	r0, r3, r0, r7
        cur = T + i;
 80260a2:	fb02 b201 	mla	r2, r2, r1, fp
        if( j % d == 0 )
 80260a6:	b1f8      	cbz	r0, 80260e8 <mbedtls_ecp_mul_restartable+0x110>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 80260a8:	4611      	mov	r1, r2
 80260aa:	4628      	mov	r0, r5
 80260ac:	9301      	str	r3, [sp, #4]
 80260ae:	f7ff f8e5 	bl	802527c <ecp_double_jac>
 80260b2:	9b01      	ldr	r3, [sp, #4]
 80260b4:	4604      	mov	r4, r0
 80260b6:	b338      	cbz	r0, 8026108 <mbedtls_ecp_mul_restartable+0x130>
    if( T == grp->T )
 80260b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80260ba:	459b      	cmp	fp, r3
 80260bc:	d00c      	beq.n	80260d8 <mbedtls_ecp_mul_restartable+0x100>
    if( T != NULL )
 80260be:	f1bb 0f00 	cmp.w	fp, #0
 80260c2:	d009      	beq.n	80260d8 <mbedtls_ecp_mul_restartable+0x100>
            mbedtls_ecp_point_free( &T[i] );
 80260c4:	4658      	mov	r0, fp
 80260c6:	f7ff fc0c 	bl	80258e2 <mbedtls_ecp_point_free>
 80260ca:	f10b 0024 	add.w	r0, fp, #36	; 0x24
 80260ce:	f7ff fc08 	bl	80258e2 <mbedtls_ecp_point_free>
        mbedtls_free( T );
 80260d2:	4658      	mov	r0, fp
 80260d4:	f000 fe52 	bl	8026d7c <mbedtls_free>
    if( ret != 0 )
 80260d8:	b114      	cbz	r4, 80260e0 <mbedtls_ecp_mul_restartable+0x108>
        mbedtls_ecp_point_free( R );
 80260da:	4630      	mov	r0, r6
 80260dc:	f7ff fc01 	bl	80258e2 <mbedtls_ecp_point_free>
}
 80260e0:	4620      	mov	r0, r4
 80260e2:	b045      	add	sp, #276	; 0x114
 80260e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80260e8:	0849      	lsrs	r1, r1, #1
 80260ea:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80260ee:	4610      	mov	r0, r2
 80260f0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80260f4:	9302      	str	r3, [sp, #8]
 80260f6:	9201      	str	r2, [sp, #4]
 80260f8:	f7ff fc38 	bl	802596c <mbedtls_ecp_copy>
 80260fc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8026100:	4604      	mov	r4, r0
 8026102:	2800      	cmp	r0, #0
 8026104:	d0d0      	beq.n	80260a8 <mbedtls_ecp_mul_restartable+0xd0>
 8026106:	e7d7      	b.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
    for( ; j < d * ( w - 1 ); j++ )
 8026108:	3701      	adds	r7, #1
 802610a:	e79c      	b.n	8026046 <mbedtls_ecp_mul_restartable+0x6e>
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 802610c:	4621      	mov	r1, r4
 802610e:	4648      	mov	r0, r9
 8026110:	f7fd ff60 	bl	8023fd4 <mbedtls_mpi_get_bit>
 8026114:	fab0 f380 	clz	r3, r0
 8026118:	095b      	lsrs	r3, r3, #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 802611a:	4649      	mov	r1, r9
 802611c:	a807      	add	r0, sp, #28
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 802611e:	9301      	str	r3, [sp, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8026120:	f7fd fedb 	bl	8023eda <mbedtls_mpi_copy>
 8026124:	4604      	mov	r4, r0
 8026126:	bb18      	cbnz	r0, 8026170 <mbedtls_ecp_mul_restartable+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 8026128:	464a      	mov	r2, r9
 802612a:	4641      	mov	r1, r8
 802612c:	a80a      	add	r0, sp, #40	; 0x28
 802612e:	f7fe f9d7 	bl	80244e0 <mbedtls_mpi_sub_mpi>
 8026132:	4604      	mov	r4, r0
 8026134:	b9e0      	cbnz	r0, 8026170 <mbedtls_ecp_mul_restartable+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 8026136:	9a01      	ldr	r2, [sp, #4]
 8026138:	a90a      	add	r1, sp, #40	; 0x28
 802613a:	a807      	add	r0, sp, #28
 802613c:	f7fd fef9 	bl	8023f32 <mbedtls_mpi_safe_cond_assign>
 8026140:	4604      	mov	r4, r0
 8026142:	b9a8      	cbnz	r0, 8026170 <mbedtls_ecp_mul_restartable+0x198>
    memset( x, 0, d+1 );
 8026144:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 8026148:	4601      	mov	r1, r0
 802614a:	1c7a      	adds	r2, r7, #1
 802614c:	4640      	mov	r0, r8
 802614e:	f002 fc3f 	bl	80289d0 <memset>
    for( i = 0; i < d; i++ )
 8026152:	46a1      	mov	r9, r4
 8026154:	454f      	cmp	r7, r9
 8026156:	f040 80aa 	bne.w	80262ae <mbedtls_ecp_mul_restartable+0x2d6>
 802615a:	f10d 034d 	add.w	r3, sp, #77	; 0x4d
    c = 0;
 802615e:	f04f 0e00 	mov.w	lr, #0
    for( i = 1; i <= d; i++ )
 8026162:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8026166:	eba3 0209 	sub.w	r2, r3, r9
 802616a:	4297      	cmp	r7, r2
 802616c:	f080 80b5 	bcs.w	80262da <mbedtls_ecp_mul_restartable+0x302>
    mbedtls_mpi_free( &mm );
 8026170:	a80a      	add	r0, sp, #40	; 0x28
 8026172:	f7fd fe7a 	bl	8023e6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 8026176:	a807      	add	r0, sp, #28
 8026178:	f7fd fe77 	bl	8023e6a <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 802617c:	2c00      	cmp	r4, #0
 802617e:	d19b      	bne.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
 8026180:	a80a      	add	r0, sp, #40	; 0x28
 8026182:	f7ff fb15 	bl	80257b0 <mbedtls_ecp_point_init.part.4>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 8026186:	ab44      	add	r3, sp, #272	; 0x110
 8026188:	443b      	add	r3, r7
 802618a:	465a      	mov	r2, fp
 802618c:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 8026190:	4631      	mov	r1, r6
 8026192:	4628      	mov	r0, r5
 8026194:	f7ff fb28 	bl	80257e8 <ecp_select_comb.constprop.22>
 8026198:	4604      	mov	r4, r0
 802619a:	2800      	cmp	r0, #0
 802619c:	f040 80dd 	bne.w	802635a <mbedtls_ecp_mul_restartable+0x382>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 80261a0:	f106 0918 	add.w	r9, r6, #24
 80261a4:	2101      	movs	r1, #1
 80261a6:	4648      	mov	r0, r9
 80261a8:	f7fd fef8 	bl	8023f9c <mbedtls_mpi_lset>
 80261ac:	4604      	mov	r4, r0
 80261ae:	2800      	cmp	r0, #0
 80261b0:	f040 80d3 	bne.w	802635a <mbedtls_ecp_mul_restartable+0x382>
        if( f_rng != 0 )
 80261b4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80261b6:	2b00      	cmp	r3, #0
 80261b8:	f000 80cb 	beq.w	8026352 <mbedtls_ecp_mul_restartable+0x37a>
    p_size = ( grp->pbits + 7 ) / 8;
 80261bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80261be:	f10d 0810 	add.w	r8, sp, #16
    p_size = ( grp->pbits + 7 ) / 8;
 80261c2:	3307      	adds	r3, #7
 80261c4:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80261c6:	4640      	mov	r0, r8
    p_size = ( grp->pbits + 7 ) / 8;
 80261c8:	9302      	str	r3, [sp, #8]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80261ca:	f7fd fe47 	bl	8023e5c <mbedtls_mpi_init>
 80261ce:	a807      	add	r0, sp, #28
 80261d0:	f7fd fe44 	bl	8023e5c <mbedtls_mpi_init>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80261d4:	1d2b      	adds	r3, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80261d6:	f04f 0a0c 	mov.w	sl, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80261da:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 80261dc:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80261de:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80261e0:	9902      	ldr	r1, [sp, #8]
 80261e2:	4640      	mov	r0, r8
 80261e4:	f7fe fc98 	bl	8024b18 <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80261e8:	4603      	mov	r3, r0
 80261ea:	2800      	cmp	r0, #0
 80261ec:	d153      	bne.n	8026296 <mbedtls_ecp_mul_restartable+0x2be>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80261ee:	9903      	ldr	r1, [sp, #12]
 80261f0:	4640      	mov	r0, r8
 80261f2:	f7fe f85c 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80261f6:	2800      	cmp	r0, #0
 80261f8:	f280 808e 	bge.w	8026318 <mbedtls_ecp_mul_restartable+0x340>
        if( count++ > 10 )
 80261fc:	f1ba 0a01 	subs.w	sl, sl, #1
 8026200:	f000 80c8 	beq.w	8026394 <mbedtls_ecp_mul_restartable+0x3bc>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 8026204:	2101      	movs	r1, #1
 8026206:	4640      	mov	r0, r8
 8026208:	f7fe f891 	bl	802432e <mbedtls_mpi_cmp_int>
 802620c:	2800      	cmp	r0, #0
 802620e:	dde5      	ble.n	80261dc <mbedtls_ecp_mul_restartable+0x204>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 8026210:	4642      	mov	r2, r8
 8026212:	4649      	mov	r1, r9
 8026214:	4648      	mov	r0, r9
 8026216:	f7fe f99c 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802621a:	4603      	mov	r3, r0
 802621c:	2800      	cmp	r0, #0
 802621e:	d13a      	bne.n	8026296 <mbedtls_ecp_mul_restartable+0x2be>
 8026220:	4629      	mov	r1, r5
 8026222:	4648      	mov	r0, r9
 8026224:	f7fe ffe4 	bl	80251f0 <ecp_modp>
 8026228:	4603      	mov	r3, r0
 802622a:	bba0      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 802622c:	4642      	mov	r2, r8
 802622e:	4641      	mov	r1, r8
 8026230:	a807      	add	r0, sp, #28
 8026232:	f7fe f98e 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8026236:	4603      	mov	r3, r0
 8026238:	bb68      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
 802623a:	4629      	mov	r1, r5
 802623c:	a807      	add	r0, sp, #28
 802623e:	f7fe ffd7 	bl	80251f0 <ecp_modp>
 8026242:	4603      	mov	r3, r0
 8026244:	bb38      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8026246:	aa07      	add	r2, sp, #28
 8026248:	4631      	mov	r1, r6
 802624a:	4630      	mov	r0, r6
 802624c:	f7fe f981 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8026250:	4603      	mov	r3, r0
 8026252:	bb00      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
 8026254:	4629      	mov	r1, r5
 8026256:	4630      	mov	r0, r6
 8026258:	f7fe ffca 	bl	80251f0 <ecp_modp>
 802625c:	4603      	mov	r3, r0
 802625e:	b9d0      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8026260:	a907      	add	r1, sp, #28
 8026262:	4642      	mov	r2, r8
 8026264:	4608      	mov	r0, r1
 8026266:	f7fe f974 	bl	8024552 <mbedtls_mpi_mul_mpi>
 802626a:	4603      	mov	r3, r0
 802626c:	b998      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
 802626e:	4629      	mov	r1, r5
 8026270:	a807      	add	r0, sp, #28
 8026272:	f7fe ffbd 	bl	80251f0 <ecp_modp>
 8026276:	4603      	mov	r3, r0
 8026278:	b968      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 802627a:	f106 090c 	add.w	r9, r6, #12
 802627e:	aa07      	add	r2, sp, #28
 8026280:	4649      	mov	r1, r9
 8026282:	4648      	mov	r0, r9
 8026284:	f7fe f965 	bl	8024552 <mbedtls_mpi_mul_mpi>
 8026288:	4603      	mov	r3, r0
 802628a:	b920      	cbnz	r0, 8026296 <mbedtls_ecp_mul_restartable+0x2be>
 802628c:	4629      	mov	r1, r5
 802628e:	4648      	mov	r0, r9
 8026290:	f7fe ffae 	bl	80251f0 <ecp_modp>
 8026294:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8026296:	4640      	mov	r0, r8
 8026298:	9302      	str	r3, [sp, #8]
 802629a:	f7fd fde6 	bl	8023e6a <mbedtls_mpi_free>
 802629e:	a807      	add	r0, sp, #28
 80262a0:	f7fd fde3 	bl	8023e6a <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 80262a4:	9b02      	ldr	r3, [sp, #8]
 80262a6:	2b00      	cmp	r3, #0
 80262a8:	d053      	beq.n	8026352 <mbedtls_ecp_mul_restartable+0x37a>
 80262aa:	461c      	mov	r4, r3
 80262ac:	e055      	b.n	802635a <mbedtls_ecp_mul_restartable+0x382>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 80262ae:	4649      	mov	r1, r9
 80262b0:	a807      	add	r0, sp, #28
 80262b2:	f7fd fe8f 	bl	8023fd4 <mbedtls_mpi_get_bit>
 80262b6:	f818 a009 	ldrb.w	sl, [r8, r9]
 80262ba:	eb07 0109 	add.w	r1, r7, r9
 80262be:	ea4a 0a00 	orr.w	sl, sl, r0
 80262c2:	a807      	add	r0, sp, #28
 80262c4:	f7fd fe86 	bl	8023fd4 <mbedtls_mpi_get_bit>
 80262c8:	fa4f fa8a 	sxtb.w	sl, sl
 80262cc:	ea4a 0040 	orr.w	r0, sl, r0, lsl #1
 80262d0:	f808 0009 	strb.w	r0, [r8, r9]
    for( i = 0; i < d; i++ )
 80262d4:	f109 0901 	add.w	r9, r9, #1
 80262d8:	e73c      	b.n	8026154 <mbedtls_ecp_mul_restartable+0x17c>
        cc   = x[i] & c;
 80262da:	f893 c000 	ldrb.w	ip, [r3]
        c   |= x[i] & ( x[i-1] * adjust );
 80262de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
        x[i] = x[i] ^ c;
 80262e2:	ea8c 020e 	eor.w	r2, ip, lr
 80262e6:	43d0      	mvns	r0, r2
 80262e8:	f000 0001 	and.w	r0, r0, #1
        c   |= x[i] & ( x[i-1] * adjust );
 80262ec:	fb11 f100 	smulbb	r1, r1, r0
 80262f0:	b252      	sxtb	r2, r2
 80262f2:	b249      	sxtb	r1, r1
 80262f4:	ea02 0801 	and.w	r8, r2, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80262f8:	404a      	eors	r2, r1
 80262fa:	f803 2b01 	strb.w	r2, [r3], #1
        x[i-1] |= adjust << 7;
 80262fe:	f813 2c02 	ldrb.w	r2, [r3, #-2]
        cc   = x[i] & c;
 8026302:	ea0c 0c0e 	and.w	ip, ip, lr
        c   |= x[i] & ( x[i-1] * adjust );
 8026306:	ea48 0e0c 	orr.w	lr, r8, ip
        x[i-1] |= adjust << 7;
 802630a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 802630e:	fa5f fe8e 	uxtb.w	lr, lr
        x[i-1] |= adjust << 7;
 8026312:	f803 0c02 	strb.w	r0, [r3, #-2]
 8026316:	e726      	b.n	8026166 <mbedtls_ecp_mul_restartable+0x18e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8026318:	2101      	movs	r1, #1
 802631a:	4640      	mov	r0, r8
 802631c:	f7fd ff5b 	bl	80241d6 <mbedtls_mpi_shift_r>
 8026320:	e762      	b.n	80261e8 <mbedtls_ecp_mul_restartable+0x210>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 8026322:	4632      	mov	r2, r6
 8026324:	4631      	mov	r1, r6
 8026326:	4628      	mov	r0, r5
        --i;
 8026328:	3f01      	subs	r7, #1
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 802632a:	f7fe ffa7 	bl	802527c <ecp_double_jac>
 802632e:	b970      	cbnz	r0, 802634e <mbedtls_ecp_mul_restartable+0x376>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 8026330:	f818 3007 	ldrb.w	r3, [r8, r7]
 8026334:	465a      	mov	r2, fp
 8026336:	a90a      	add	r1, sp, #40	; 0x28
 8026338:	4628      	mov	r0, r5
 802633a:	f7ff fa55 	bl	80257e8 <ecp_select_comb.constprop.22>
 802633e:	b930      	cbnz	r0, 802634e <mbedtls_ecp_mul_restartable+0x376>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 8026340:	ab0a      	add	r3, sp, #40	; 0x28
 8026342:	4632      	mov	r2, r6
 8026344:	4631      	mov	r1, r6
 8026346:	4628      	mov	r0, r5
 8026348:	f7ff fb3e 	bl	80259c8 <ecp_add_mixed>
 802634c:	b118      	cbz	r0, 8026356 <mbedtls_ecp_mul_restartable+0x37e>
 802634e:	4604      	mov	r4, r0
 8026350:	e003      	b.n	802635a <mbedtls_ecp_mul_restartable+0x382>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 8026352:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
    while( i != 0 )
 8026356:	2f00      	cmp	r7, #0
 8026358:	d1e3      	bne.n	8026322 <mbedtls_ecp_mul_restartable+0x34a>
 802635a:	a80a      	add	r0, sp, #40	; 0x28
 802635c:	f7ff fa36 	bl	80257cc <mbedtls_ecp_point_free.part.6>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 8026360:	2c00      	cmp	r4, #0
 8026362:	f47f aea9 	bne.w	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 8026366:	9a01      	ldr	r2, [sp, #4]
 8026368:	4631      	mov	r1, r6
 802636a:	4628      	mov	r0, r5
 802636c:	f7fe ff1d 	bl	80251aa <ecp_safe_invert_jac>
 8026370:	4604      	mov	r4, r0
 8026372:	2800      	cmp	r0, #0
 8026374:	f47f aea0 	bne.w	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 8026378:	4631      	mov	r1, r6
 802637a:	4628      	mov	r0, r5
 802637c:	f7ff f9bb 	bl	80256f6 <ecp_normalize_jac>
 8026380:	4604      	mov	r4, r0
 8026382:	e699      	b.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8026384:	4c01      	ldr	r4, [pc, #4]	; (802638c <mbedtls_ecp_mul_restartable+0x3b4>)
 8026386:	e697      	b.n	80260b8 <mbedtls_ecp_mul_restartable+0xe0>
 8026388:	ffffb080 	.word	0xffffb080
 802638c:	ffffb280 	.word	0xffffb280
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8026390:	4c01      	ldr	r4, [pc, #4]	; (8026398 <mbedtls_ecp_mul_restartable+0x3c0>)
    return( ret );
 8026392:	e6a5      	b.n	80260e0 <mbedtls_ecp_mul_restartable+0x108>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8026394:	4c01      	ldr	r4, [pc, #4]	; (802639c <mbedtls_ecp_mul_restartable+0x3c4>)
 8026396:	e7e0      	b.n	802635a <mbedtls_ecp_mul_restartable+0x382>
 8026398:	ffffb080 	.word	0xffffb080
 802639c:	ffffb300 	.word	0xffffb300

080263a0 <mbedtls_ecp_mul>:
{
 80263a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 80263a2:	2400      	movs	r4, #0
 80263a4:	9402      	str	r4, [sp, #8]
 80263a6:	9c07      	ldr	r4, [sp, #28]
 80263a8:	9401      	str	r4, [sp, #4]
 80263aa:	9c06      	ldr	r4, [sp, #24]
 80263ac:	9400      	str	r4, [sp, #0]
 80263ae:	f7ff fe13 	bl	8025fd8 <mbedtls_ecp_mul_restartable>
}
 80263b2:	b004      	add	sp, #16
 80263b4:	bd10      	pop	{r4, pc}
	...

080263b8 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80263b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80263bc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 80263be:	4607      	mov	r7, r0
 80263c0:	460d      	mov	r5, r1
 80263c2:	4692      	mov	sl, r2
 80263c4:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80263c6:	f7fe fee6 	bl	8025196 <ecp_get_type>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80263ca:	3407      	adds	r4, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80263cc:	2801      	cmp	r0, #1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80263ce:	ea4f 09d4 	mov.w	r9, r4, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80263d2:	d004      	beq.n	80263de <mbedtls_ecp_gen_privkey+0x26>
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80263d4:	4c16      	ldr	r4, [pc, #88]	; (8026430 <mbedtls_ecp_gen_privkey+0x78>)
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 80263d6:	4620      	mov	r0, r4
 80263d8:	b003      	add	sp, #12
 80263da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 80263de:	f024 0307 	bic.w	r3, r4, #7
 80263e2:	261f      	movs	r6, #31
 80263e4:	9301      	str	r3, [sp, #4]
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 80263e6:	f107 084c 	add.w	r8, r7, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 80263ea:	465b      	mov	r3, fp
 80263ec:	4652      	mov	r2, sl
 80263ee:	4649      	mov	r1, r9
 80263f0:	4628      	mov	r0, r5
 80263f2:	f7fe fb91 	bl	8024b18 <mbedtls_mpi_fill_random>
 80263f6:	4604      	mov	r4, r0
 80263f8:	2800      	cmp	r0, #0
 80263fa:	d1ec      	bne.n	80263d6 <mbedtls_ecp_gen_privkey+0x1e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 80263fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80263fe:	9b01      	ldr	r3, [sp, #4]
 8026400:	4628      	mov	r0, r5
 8026402:	1a59      	subs	r1, r3, r1
 8026404:	f7fd fee7 	bl	80241d6 <mbedtls_mpi_shift_r>
 8026408:	4604      	mov	r4, r0
 802640a:	2800      	cmp	r0, #0
 802640c:	d1e3      	bne.n	80263d6 <mbedtls_ecp_gen_privkey+0x1e>
            if( ++count > 30 )
 802640e:	3e01      	subs	r6, #1
 8026410:	d00c      	beq.n	802642c <mbedtls_ecp_gen_privkey+0x74>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8026412:	2101      	movs	r1, #1
 8026414:	4628      	mov	r0, r5
 8026416:	f7fd ff8a 	bl	802432e <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 802641a:	2800      	cmp	r0, #0
 802641c:	dbe5      	blt.n	80263ea <mbedtls_ecp_gen_privkey+0x32>
 802641e:	4641      	mov	r1, r8
 8026420:	4628      	mov	r0, r5
 8026422:	f7fd ff44 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8026426:	2800      	cmp	r0, #0
 8026428:	dadf      	bge.n	80263ea <mbedtls_ecp_gen_privkey+0x32>
 802642a:	e7d4      	b.n	80263d6 <mbedtls_ecp_gen_privkey+0x1e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 802642c:	4c01      	ldr	r4, [pc, #4]	; (8026434 <mbedtls_ecp_gen_privkey+0x7c>)
 802642e:	e7d2      	b.n	80263d6 <mbedtls_ecp_gen_privkey+0x1e>
 8026430:	ffffb080 	.word	0xffffb080
 8026434:	ffffb300 	.word	0xffffb300

08026438 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8026438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 802643c:	7803      	ldrb	r3, [r0, #0]
{
 802643e:	b0aa      	sub	sp, #168	; 0xa8
 8026440:	4605      	mov	r5, r0
 8026442:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8026444:	b923      	cbnz	r3, 8026450 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8026446:	4c28      	ldr	r4, [pc, #160]	; (80264e8 <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 8026448:	4620      	mov	r0, r4
 802644a:	b02a      	add	sp, #168	; 0xa8
 802644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8026450:	780a      	ldrb	r2, [r1, #0]
 8026452:	429a      	cmp	r2, r3
 8026454:	d1f7      	bne.n	8026446 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8026456:	f101 0888 	add.w	r8, r1, #136	; 0x88
 802645a:	4641      	mov	r1, r8
 802645c:	3088      	adds	r0, #136	; 0x88
 802645e:	f7fd ff26 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 8026462:	2800      	cmp	r0, #0
 8026464:	d1ef      	bne.n	8026446 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8026466:	f104 0794 	add.w	r7, r4, #148	; 0x94
 802646a:	4639      	mov	r1, r7
 802646c:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8026470:	f7fd ff1d 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8026474:	2800      	cmp	r0, #0
 8026476:	d1e6      	bne.n	8026446 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 8026478:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 802647c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8026480:	4631      	mov	r1, r6
 8026482:	f7fd ff14 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8026486:	4605      	mov	r5, r0
 8026488:	2800      	cmp	r0, #0
 802648a:	d1dc      	bne.n	8026446 <mbedtls_ecp_check_pub_priv+0xe>
 802648c:	a802      	add	r0, sp, #8
 802648e:	f7ff f98f 	bl	80257b0 <mbedtls_ecp_point_init.part.4>
 8026492:	a80b      	add	r0, sp, #44	; 0x2c
 8026494:	f7ff f9f0 	bl	8025878 <mbedtls_ecp_group_init.part.5>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 8026498:	4621      	mov	r1, r4
 802649a:	a80b      	add	r0, sp, #44	; 0x2c
 802649c:	f7ff fa7c 	bl	8025998 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 80264a0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80264a4:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 80264a8:	e9cd 5500 	strd	r5, r5, [sp]
 80264ac:	a902      	add	r1, sp, #8
 80264ae:	a80b      	add	r0, sp, #44	; 0x2c
 80264b0:	f7ff ff76 	bl	80263a0 <mbedtls_ecp_mul>
 80264b4:	4604      	mov	r4, r0
 80264b6:	b980      	cbnz	r0, 80264da <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80264b8:	4641      	mov	r1, r8
 80264ba:	a802      	add	r0, sp, #8
 80264bc:	f7fd fef7 	bl	80242ae <mbedtls_mpi_cmp_mpi>
 80264c0:	b950      	cbnz	r0, 80264d8 <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80264c2:	4639      	mov	r1, r7
 80264c4:	a805      	add	r0, sp, #20
 80264c6:	f7fd fef2 	bl	80242ae <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80264ca:	b928      	cbnz	r0, 80264d8 <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 80264cc:	4631      	mov	r1, r6
 80264ce:	a808      	add	r0, sp, #32
 80264d0:	f7fd feed 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80264d4:	4604      	mov	r4, r0
 80264d6:	b100      	cbz	r0, 80264da <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80264d8:	4c03      	ldr	r4, [pc, #12]	; (80264e8 <mbedtls_ecp_check_pub_priv+0xb0>)
 80264da:	a802      	add	r0, sp, #8
 80264dc:	f7ff f976 	bl	80257cc <mbedtls_ecp_point_free.part.6>
    mbedtls_ecp_group_free( &grp );
 80264e0:	a80b      	add	r0, sp, #44	; 0x2c
 80264e2:	f7ff fa02 	bl	80258ea <mbedtls_ecp_group_free>
    return( ret );
 80264e6:	e7af      	b.n	8026448 <mbedtls_ecp_check_pub_priv+0x10>
 80264e8:	ffffb080 	.word	0xffffb080

080264ec <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 80264ec:	b538      	push	{r3, r4, r5, lr}
 80264ee:	460d      	mov	r5, r1
 80264f0:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( grp );
 80264f2:	f7ff f9fa 	bl	80258ea <mbedtls_ecp_group_free>

    grp->id = id;

    switch( id )
 80264f6:	2d03      	cmp	r5, #3
    grp->id = id;
 80264f8:	7025      	strb	r5, [r4, #0]
    switch( id )
 80264fa:	d128      	bne.n	802654e <mbedtls_ecp_group_load+0x62>
    X->p = (mbedtls_mpi_uint *) p;
 80264fc:	4b16      	ldr	r3, [pc, #88]	; (8026558 <mbedtls_ecp_group_load+0x6c>)
 80264fe:	60e3      	str	r3, [r4, #12]
 8026500:	f103 0120 	add.w	r1, r3, #32
 8026504:	6261      	str	r1, [r4, #36]	; 0x24
 8026506:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 802650a:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 802650c:	6561      	str	r1, [r4, #84]	; 0x54
 802650e:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8026512:	3380      	adds	r3, #128	; 0x80
    X->n = len / sizeof( mbedtls_mpi_uint );
 8026514:	2208      	movs	r2, #8
    X->s = 1;
 8026516:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 802651a:	4b10      	ldr	r3, [pc, #64]	; (802655c <mbedtls_ecp_group_load+0x70>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 802651c:	63a2      	str	r2, [r4, #56]	; 0x38
 802651e:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8026522:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8026526:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 802652a:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 802652e:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->p = one;
 8026532:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 8026534:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8026536:	1d20      	adds	r0, r4, #4
 8026538:	f7fd fd77 	bl	802402a <mbedtls_mpi_bitlen>
 802653c:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 802653e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8026542:	f7fd fd72 	bl	802402a <mbedtls_mpi_bitlen>
    grp->h = 1;
 8026546:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
 802654a:	2000      	movs	r0, #0

        default:
            mbedtls_ecp_group_free( grp );
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
    }
}
 802654c:	bd38      	pop	{r3, r4, r5, pc}
            mbedtls_ecp_group_free( grp );
 802654e:	4620      	mov	r0, r4
 8026550:	f7ff f9cb 	bl	80258ea <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8026554:	4802      	ldr	r0, [pc, #8]	; (8026560 <mbedtls_ecp_group_load+0x74>)
 8026556:	e7f9      	b.n	802654c <mbedtls_ecp_group_load+0x60>
 8026558:	08029ed4 	.word	0x08029ed4
 802655c:	200300f8 	.word	0x200300f8
 8026560:	ffffb180 	.word	0xffffb180

08026564 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8026564:	2805      	cmp	r0, #5
 8026566:	d004      	beq.n	8026572 <mbedtls_md_info_from_type+0xe>
 8026568:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 802656a:	4803      	ldr	r0, [pc, #12]	; (8026578 <mbedtls_md_info_from_type+0x14>)
 802656c:	bf18      	it	ne
 802656e:	2000      	movne	r0, #0
 8026570:	4770      	bx	lr
            return( &mbedtls_sha224_info );
 8026572:	4802      	ldr	r0, [pc, #8]	; (802657c <mbedtls_md_info_from_type+0x18>)
    }
}
 8026574:	4770      	bx	lr
 8026576:	bf00      	nop
 8026578:	08029f74 	.word	0x08029f74
 802657c:	08029fa4 	.word	0x08029fa4

08026580 <mbedtls_md>:
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8026580:	b430      	push	{r4, r5}
 8026582:	460d      	mov	r5, r1
 8026584:	4611      	mov	r1, r2
    if( md_info == NULL )
 8026586:	b128      	cbz	r0, 8026594 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8026588:	69c4      	ldr	r4, [r0, #28]
 802658a:	461a      	mov	r2, r3
 802658c:	4628      	mov	r0, r5
 802658e:	4623      	mov	r3, r4
}
 8026590:	bc30      	pop	{r4, r5}
    return( md_info->digest_func( input, ilen, output ) );
 8026592:	4718      	bx	r3
}
 8026594:	4801      	ldr	r0, [pc, #4]	; (802659c <mbedtls_md+0x1c>)
 8026596:	bc30      	pop	{r4, r5}
 8026598:	4770      	bx	lr
 802659a:	bf00      	nop
 802659c:	ffffaf00 	.word	0xffffaf00

080265a0 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80265a0:	b100      	cbz	r0, 80265a4 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80265a2:	7a00      	ldrb	r0, [r0, #8]
}
 80265a4:	4770      	bx	lr

080265a6 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 80265a6:	f000 bc57 	b.w	8026e58 <mbedtls_internal_sha256_process>

080265aa <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 80265aa:	f000 bbfe 	b.w	8026daa <mbedtls_sha256_clone>

080265ae <sha224_ctx_free>:
{
 80265ae:	b510      	push	{r4, lr}
 80265b0:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80265b2:	f000 fbf5 	bl	8026da0 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80265b6:	4620      	mov	r0, r4
}
 80265b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80265bc:	f000 bbde 	b.w	8026d7c <mbedtls_free>

080265c0 <sha224_ctx_alloc>:
{
 80265c0:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80265c2:	216c      	movs	r1, #108	; 0x6c
 80265c4:	2001      	movs	r0, #1
 80265c6:	f000 fbd3 	bl	8026d70 <mbedtls_calloc>
    if( ctx != NULL )
 80265ca:	4604      	mov	r4, r0
 80265cc:	b108      	cbz	r0, 80265d2 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80265ce:	f000 fbe3 	bl	8026d98 <mbedtls_sha256_init>
}
 80265d2:	4620      	mov	r0, r4
 80265d4:	bd10      	pop	{r4, pc}

080265d6 <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80265d6:	2301      	movs	r3, #1
 80265d8:	f001 b874 	b.w	80276c4 <mbedtls_sha256_ret>

080265dc <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80265dc:	2300      	movs	r3, #0
 80265de:	f001 b871 	b.w	80276c4 <mbedtls_sha256_ret>

080265e2 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 80265e2:	f000 bfda 	b.w	802759a <mbedtls_sha256_finish_ret>

080265e6 <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 80265e6:	f000 bf9b 	b.w	8027520 <mbedtls_sha256_update_ret>

080265ea <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80265ea:	2101      	movs	r1, #1
 80265ec:	f000 bbe2 	b.w	8026db4 <mbedtls_sha256_starts_ret>

080265f0 <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80265f0:	2100      	movs	r1, #0
 80265f2:	f000 bbdf 	b.w	8026db4 <mbedtls_sha256_starts_ret>
	...

080265f8 <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80265f8:	b538      	push	{r3, r4, r5, lr}
 80265fa:	4605      	mov	r5, r0
 80265fc:	b180      	cbz	r0, 8026620 <oid_sig_alg_from_asn1+0x28>
 80265fe:	4c09      	ldr	r4, [pc, #36]	; (8026624 <oid_sig_alg_from_asn1+0x2c>)
 8026600:	6820      	ldr	r0, [r4, #0]
 8026602:	b910      	cbnz	r0, 802660a <oid_sig_alg_from_asn1+0x12>
 8026604:	4604      	mov	r4, r0
 8026606:	4620      	mov	r0, r4
 8026608:	bd38      	pop	{r3, r4, r5, pc}
 802660a:	6862      	ldr	r2, [r4, #4]
 802660c:	686b      	ldr	r3, [r5, #4]
 802660e:	429a      	cmp	r2, r3
 8026610:	d104      	bne.n	802661c <oid_sig_alg_from_asn1+0x24>
 8026612:	68a9      	ldr	r1, [r5, #8]
 8026614:	f002 f9c2 	bl	802899c <memcmp>
 8026618:	2800      	cmp	r0, #0
 802661a:	d0f4      	beq.n	8026606 <oid_sig_alg_from_asn1+0xe>
 802661c:	3414      	adds	r4, #20
 802661e:	e7ef      	b.n	8026600 <oid_sig_alg_from_asn1+0x8>
 8026620:	4604      	mov	r4, r0
 8026622:	e7f0      	b.n	8026606 <oid_sig_alg_from_asn1+0xe>
 8026624:	08029fd4 	.word	0x08029fd4

08026628 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8026628:	b570      	push	{r4, r5, r6, lr}
 802662a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 802662c:	4605      	mov	r5, r0
 802662e:	b110      	cbz	r0, 8026636 <mbedtls_oid_get_x509_ext_type+0xe>
 8026630:	4c09      	ldr	r4, [pc, #36]	; (8026658 <mbedtls_oid_get_x509_ext_type+0x30>)
 8026632:	6820      	ldr	r0, [r4, #0]
 8026634:	b910      	cbnz	r0, 802663c <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8026636:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 802663a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 802663c:	6862      	ldr	r2, [r4, #4]
 802663e:	686b      	ldr	r3, [r5, #4]
 8026640:	429a      	cmp	r2, r3
 8026642:	d103      	bne.n	802664c <mbedtls_oid_get_x509_ext_type+0x24>
 8026644:	68a9      	ldr	r1, [r5, #8]
 8026646:	f002 f9a9 	bl	802899c <memcmp>
 802664a:	b108      	cbz	r0, 8026650 <mbedtls_oid_get_x509_ext_type+0x28>
 802664c:	3414      	adds	r4, #20
 802664e:	e7f0      	b.n	8026632 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8026650:	6923      	ldr	r3, [r4, #16]
 8026652:	6033      	str	r3, [r6, #0]
 8026654:	e7f1      	b.n	802663a <mbedtls_oid_get_x509_ext_type+0x12>
 8026656:	bf00      	nop
 8026658:	0802a1a0 	.word	0x0802a1a0

0802665c <mbedtls_oid_get_sig_alg>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 802665c:	b538      	push	{r3, r4, r5, lr}
 802665e:	460d      	mov	r5, r1
 8026660:	4614      	mov	r4, r2
 8026662:	f7ff ffc9 	bl	80265f8 <oid_sig_alg_from_asn1>
 8026666:	b128      	cbz	r0, 8026674 <mbedtls_oid_get_sig_alg+0x18>
 8026668:	7c03      	ldrb	r3, [r0, #16]
 802666a:	702b      	strb	r3, [r5, #0]
 802666c:	7c43      	ldrb	r3, [r0, #17]
 802666e:	7023      	strb	r3, [r4, #0]
 8026670:	2000      	movs	r0, #0
 8026672:	bd38      	pop	{r3, r4, r5, pc}
 8026674:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026678:	e7fb      	b.n	8026672 <mbedtls_oid_get_sig_alg+0x16>
	...

0802667c <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 802667c:	b570      	push	{r4, r5, r6, lr}
 802667e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8026680:	4605      	mov	r5, r0
 8026682:	b110      	cbz	r0, 802668a <mbedtls_oid_get_pk_alg+0xe>
 8026684:	4c09      	ldr	r4, [pc, #36]	; (80266ac <mbedtls_oid_get_pk_alg+0x30>)
 8026686:	6820      	ldr	r0, [r4, #0]
 8026688:	b910      	cbnz	r0, 8026690 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 802668a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 802668e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8026690:	6862      	ldr	r2, [r4, #4]
 8026692:	686b      	ldr	r3, [r5, #4]
 8026694:	429a      	cmp	r2, r3
 8026696:	d103      	bne.n	80266a0 <mbedtls_oid_get_pk_alg+0x24>
 8026698:	68a9      	ldr	r1, [r5, #8]
 802669a:	f002 f97f 	bl	802899c <memcmp>
 802669e:	b108      	cbz	r0, 80266a4 <mbedtls_oid_get_pk_alg+0x28>
 80266a0:	3414      	adds	r4, #20
 80266a2:	e7f0      	b.n	8026686 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80266a4:	7c23      	ldrb	r3, [r4, #16]
 80266a6:	7033      	strb	r3, [r6, #0]
 80266a8:	e7f1      	b.n	802668e <mbedtls_oid_get_pk_alg+0x12>
 80266aa:	bf00      	nop
 80266ac:	0802a288 	.word	0x0802a288

080266b0 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80266b0:	b570      	push	{r4, r5, r6, lr}
 80266b2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80266b4:	4605      	mov	r5, r0
 80266b6:	b110      	cbz	r0, 80266be <mbedtls_oid_get_ec_grp+0xe>
 80266b8:	4c09      	ldr	r4, [pc, #36]	; (80266e0 <mbedtls_oid_get_ec_grp+0x30>)
 80266ba:	6820      	ldr	r0, [r4, #0]
 80266bc:	b910      	cbnz	r0, 80266c4 <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80266be:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80266c2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80266c4:	6862      	ldr	r2, [r4, #4]
 80266c6:	686b      	ldr	r3, [r5, #4]
 80266c8:	429a      	cmp	r2, r3
 80266ca:	d103      	bne.n	80266d4 <mbedtls_oid_get_ec_grp+0x24>
 80266cc:	68a9      	ldr	r1, [r5, #8]
 80266ce:	f002 f965 	bl	802899c <memcmp>
 80266d2:	b108      	cbz	r0, 80266d8 <mbedtls_oid_get_ec_grp+0x28>
 80266d4:	3414      	adds	r4, #20
 80266d6:	e7f0      	b.n	80266ba <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80266d8:	7c23      	ldrb	r3, [r4, #16]
 80266da:	7033      	strb	r3, [r6, #0]
 80266dc:	e7f1      	b.n	80266c2 <mbedtls_oid_get_ec_grp+0x12>
 80266de:	bf00      	nop
 80266e0:	0802a2d8 	.word	0x0802a2d8

080266e4 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 80266e4:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 80266e6:	4604      	mov	r4, r0
 80266e8:	b150      	cbz	r0, 8026700 <mbedtls_pk_free+0x1c>
 80266ea:	6803      	ldr	r3, [r0, #0]
 80266ec:	b143      	cbz	r3, 8026700 <mbedtls_pk_free+0x1c>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 80266ee:	6840      	ldr	r0, [r0, #4]
 80266f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80266f2:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 80266f4:	4620      	mov	r0, r4
 80266f6:	2108      	movs	r1, #8
}
 80266f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 80266fc:	f000 bb44 	b.w	8026d88 <mbedtls_platform_zeroize>
}
 8026700:	bd10      	pop	{r4, pc}
	...

08026704 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 8026704:	3802      	subs	r0, #2
 8026706:	b2c0      	uxtb	r0, r0
 8026708:	2802      	cmp	r0, #2
 802670a:	bf9a      	itte	ls
 802670c:	4b02      	ldrls	r3, [pc, #8]	; (8026718 <mbedtls_pk_info_from_type+0x14>)
 802670e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8026712:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8026714:	4770      	bx	lr
 8026716:	bf00      	nop
 8026718:	0802a378 	.word	0x0802a378

0802671c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 802671c:	b570      	push	{r4, r5, r6, lr}
 802671e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 8026720:	4605      	mov	r5, r0
 8026722:	b148      	cbz	r0, 8026738 <mbedtls_pk_setup+0x1c>
 8026724:	b141      	cbz	r1, 8026738 <mbedtls_pk_setup+0x1c>
 8026726:	6804      	ldr	r4, [r0, #0]
 8026728:	b934      	cbnz	r4, 8026738 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 802672a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802672c:	4798      	blx	r3
 802672e:	6068      	str	r0, [r5, #4]
 8026730:	b120      	cbz	r0, 802673c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8026732:	602e      	str	r6, [r5, #0]

    return( 0 );
 8026734:	4620      	mov	r0, r4
}
 8026736:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8026738:	4801      	ldr	r0, [pc, #4]	; (8026740 <mbedtls_pk_setup+0x24>)
 802673a:	e7fc      	b.n	8026736 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 802673c:	4801      	ldr	r0, [pc, #4]	; (8026744 <mbedtls_pk_setup+0x28>)
 802673e:	e7fa      	b.n	8026736 <mbedtls_pk_setup+0x1a>
 8026740:	ffffc180 	.word	0xffffc180
 8026744:	ffffc080 	.word	0xffffc080

08026748 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 8026748:	b120      	cbz	r0, 8026754 <mbedtls_pk_can_do+0xc>
 802674a:	6803      	ldr	r3, [r0, #0]
 802674c:	b113      	cbz	r3, 8026754 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 802674e:	68db      	ldr	r3, [r3, #12]
 8026750:	4608      	mov	r0, r1
 8026752:	4718      	bx	r3
}
 8026754:	2000      	movs	r0, #0
 8026756:	4770      	bx	lr

08026758 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
 8026758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802675c:	460e      	mov	r6, r1
 802675e:	4617      	mov	r7, r2
 8026760:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL ||
 8026764:	4604      	mov	r4, r0
 8026766:	b910      	cbnz	r0, 802676e <mbedtls_pk_verify_restartable+0x16>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8026768:	480e      	ldr	r0, [pc, #56]	; (80267a4 <mbedtls_pk_verify_restartable+0x4c>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
 802676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 802676e:	6802      	ldr	r2, [r0, #0]
 8026770:	2a00      	cmp	r2, #0
 8026772:	d0f9      	beq.n	8026768 <mbedtls_pk_verify_restartable+0x10>
    if( *hash_len != 0 )
 8026774:	b93b      	cbnz	r3, 8026786 <mbedtls_pk_verify_restartable+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8026776:	4608      	mov	r0, r1
 8026778:	f7ff fef4 	bl	8026564 <mbedtls_md_info_from_type>
 802677c:	2800      	cmp	r0, #0
 802677e:	d0f3      	beq.n	8026768 <mbedtls_pk_verify_restartable+0x10>
    *hash_len = mbedtls_md_get_size( md_info );
 8026780:	f7ff ff0e 	bl	80265a0 <mbedtls_md_get_size>
 8026784:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
 8026786:	6822      	ldr	r2, [r4, #0]
 8026788:	6915      	ldr	r5, [r2, #16]
 802678a:	b145      	cbz	r5, 802679e <mbedtls_pk_verify_restartable+0x46>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 802678c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8026790:	463a      	mov	r2, r7
 8026792:	4631      	mov	r1, r6
 8026794:	6860      	ldr	r0, [r4, #4]
 8026796:	46ac      	mov	ip, r5
}
 8026798:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 802679c:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 802679e:	4802      	ldr	r0, [pc, #8]	; (80267a8 <mbedtls_pk_verify_restartable+0x50>)
 80267a0:	e7e3      	b.n	802676a <mbedtls_pk_verify_restartable+0x12>
 80267a2:	bf00      	nop
 80267a4:	ffffc180 	.word	0xffffc180
 80267a8:	ffffc100 	.word	0xffffc100

080267ac <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80267ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
 80267ae:	2400      	movs	r4, #0
 80267b0:	9402      	str	r4, [sp, #8]
 80267b2:	9c07      	ldr	r4, [sp, #28]
 80267b4:	9401      	str	r4, [sp, #4]
 80267b6:	9c06      	ldr	r4, [sp, #24]
 80267b8:	9400      	str	r4, [sp, #0]
 80267ba:	f7ff ffcd 	bl	8026758 <mbedtls_pk_verify_restartable>
                                           sig, sig_len, NULL ) );
}
 80267be:	b004      	add	sp, #16
 80267c0:	bd10      	pop	{r4, pc}
	...

080267c4 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80267c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267c8:	4605      	mov	r5, r0
 80267ca:	468b      	mov	fp, r1
 80267cc:	461e      	mov	r6, r3
 80267ce:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 80267d2:	e9dd 9a0c 	ldrd	r9, sl, [sp, #48]	; 0x30
    if( ctx == NULL || ctx->pk_info == NULL )
 80267d6:	4614      	mov	r4, r2
 80267d8:	b91a      	cbnz	r2, 80267e2 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80267da:	4810      	ldr	r0, [pc, #64]	; (802681c <mbedtls_pk_verify_ext+0x58>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 80267dc:	b001      	add	sp, #4
 80267de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 80267e2:	6813      	ldr	r3, [r2, #0]
 80267e4:	2b00      	cmp	r3, #0
 80267e6:	d0f8      	beq.n	80267da <mbedtls_pk_verify_ext+0x16>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 80267e8:	4601      	mov	r1, r0
 80267ea:	4610      	mov	r0, r2
 80267ec:	f7ff ffac 	bl	8026748 <mbedtls_pk_can_do>
 80267f0:	b178      	cbz	r0, 8026812 <mbedtls_pk_verify_ext+0x4e>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 80267f2:	2d06      	cmp	r5, #6
 80267f4:	d00f      	beq.n	8026816 <mbedtls_pk_verify_ext+0x52>
    if( options != NULL )
 80267f6:	f1bb 0f00 	cmp.w	fp, #0
 80267fa:	d1ee      	bne.n	80267da <mbedtls_pk_verify_ext+0x16>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80267fc:	4643      	mov	r3, r8
 80267fe:	463a      	mov	r2, r7
 8026800:	4631      	mov	r1, r6
 8026802:	4620      	mov	r0, r4
 8026804:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
}
 8026808:	b001      	add	sp, #4
 802680a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 802680e:	f7ff bfcd 	b.w	80267ac <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8026812:	4803      	ldr	r0, [pc, #12]	; (8026820 <mbedtls_pk_verify_ext+0x5c>)
 8026814:	e7e2      	b.n	80267dc <mbedtls_pk_verify_ext+0x18>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8026816:	4803      	ldr	r0, [pc, #12]	; (8026824 <mbedtls_pk_verify_ext+0x60>)
 8026818:	e7e0      	b.n	80267dc <mbedtls_pk_verify_ext+0x18>
 802681a:	bf00      	nop
 802681c:	ffffc180 	.word	0xffffc180
 8026820:	ffffc100 	.word	0xffffc100
 8026824:	ffffc680 	.word	0xffffc680

08026828 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8026828:	b110      	cbz	r0, 8026830 <mbedtls_pk_get_type+0x8>
 802682a:	6800      	ldr	r0, [r0, #0]
 802682c:	b100      	cbz	r0, 8026830 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 802682e:	7800      	ldrb	r0, [r0, #0]
}
 8026830:	4770      	bx	lr

08026832 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 8026832:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 8026834:	2802      	cmp	r0, #2
 8026836:	bf8c      	ite	hi
 8026838:	2000      	movhi	r0, #0
 802683a:	2001      	movls	r0, #1
 802683c:	4770      	bx	lr

0802683e <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 802683e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8026840:	4770      	bx	lr
	...

08026844 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 8026844:	2302      	movs	r3, #2
 8026846:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8026848:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 802684a:	4b02      	ldr	r3, [pc, #8]	; (8026854 <eckey_debug+0x10>)
 802684c:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 802684e:	6088      	str	r0, [r1, #8]
}
 8026850:	4770      	bx	lr
 8026852:	bf00      	nop
 8026854:	0802d3de 	.word	0x0802d3de

08026858 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 8026858:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 802685a:	2801      	cmp	r0, #1
 802685c:	bf8c      	ite	hi
 802685e:	2000      	movhi	r0, #0
 8026860:	2001      	movls	r0, #1
 8026862:	4770      	bx	lr

08026864 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 8026864:	1f03      	subs	r3, r0, #4
 8026866:	4258      	negs	r0, r3
 8026868:	4158      	adcs	r0, r3
 802686a:	4770      	bx	lr

0802686c <eckey_free_wrap>:
{
 802686c:	b510      	push	{r4, lr}
 802686e:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8026870:	f7ff f86c 	bl	802594c <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 8026874:	4620      	mov	r0, r4
}
 8026876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 802687a:	f000 ba7f 	b.w	8026d7c <mbedtls_free>

0802687e <eckey_alloc_wrap>:
{
 802687e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8026880:	21ac      	movs	r1, #172	; 0xac
 8026882:	2001      	movs	r0, #1
 8026884:	f000 fa74 	bl	8026d70 <mbedtls_calloc>
    if( ctx != NULL )
 8026888:	4604      	mov	r4, r0
 802688a:	b108      	cbz	r0, 8026890 <eckey_alloc_wrap+0x12>
        mbedtls_ecp_keypair_init( ctx );
 802688c:	f7ff f819 	bl	80258c2 <mbedtls_ecp_keypair_init>
}
 8026890:	4620      	mov	r0, r4
 8026892:	bd10      	pop	{r4, pc}

08026894 <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 8026894:	f7ff bdd0 	b.w	8026438 <mbedtls_ecp_check_pub_priv>

08026898 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 8026898:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 802689a:	21ac      	movs	r1, #172	; 0xac
 802689c:	2001      	movs	r0, #1
 802689e:	f000 fa67 	bl	8026d70 <mbedtls_calloc>

    if( ctx != NULL )
 80268a2:	4604      	mov	r4, r0
 80268a4:	b108      	cbz	r0, 80268aa <ecdsa_alloc_wrap+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 80268a6:	f7fe fc72 	bl	802518e <mbedtls_ecdsa_init>

    return( ctx );
}
 80268aa:	4620      	mov	r0, r4
 80268ac:	bd10      	pop	{r4, pc}

080268ae <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 80268ae:	b510      	push	{r4, lr}
 80268b0:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 80268b2:	f7fe fc6e 	bl	8025192 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 80268b6:	4620      	mov	r0, r4
}
 80268b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80268bc:	f000 ba5e 	b.w	8026d7c <mbedtls_free>

080268c0 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 80268c0:	f7fe bbe0 	b.w	8025084 <mbedtls_ecdsa_write_signature>

080268c4 <eckey_sign_wrap>:
{
 80268c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268c6:	b0b1      	sub	sp, #196	; 0xc4
 80268c8:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 80268ca:	a805      	add	r0, sp, #20
{
 80268cc:	460d      	mov	r5, r1
 80268ce:	4616      	mov	r6, r2
 80268d0:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 80268d2:	f7fe fc5c 	bl	802518e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 80268d6:	4621      	mov	r1, r4
 80268d8:	a805      	add	r0, sp, #20
 80268da:	f7fe fc3c 	bl	8025156 <mbedtls_ecdsa_from_keypair>
 80268de:	4604      	mov	r4, r0
 80268e0:	b970      	cbnz	r0, 8026900 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 80268e2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80268e4:	9303      	str	r3, [sp, #12]
 80268e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80268e8:	9302      	str	r3, [sp, #8]
 80268ea:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80268ec:	9301      	str	r3, [sp, #4]
 80268ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80268f0:	9300      	str	r3, [sp, #0]
 80268f2:	4632      	mov	r2, r6
 80268f4:	463b      	mov	r3, r7
 80268f6:	4629      	mov	r1, r5
 80268f8:	a805      	add	r0, sp, #20
 80268fa:	f7fe fbc3 	bl	8025084 <mbedtls_ecdsa_write_signature>
 80268fe:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8026900:	a805      	add	r0, sp, #20
 8026902:	f7fe fc46 	bl	8025192 <mbedtls_ecdsa_free>
}
 8026906:	4620      	mov	r0, r4
 8026908:	b031      	add	sp, #196	; 0xc4
 802690a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802690c <ecdsa_verify_wrap>:
{
 802690c:	b507      	push	{r0, r1, r2, lr}
 802690e:	4611      	mov	r1, r2
 8026910:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 8026912:	9b05      	ldr	r3, [sp, #20]
 8026914:	9300      	str	r3, [sp, #0]
 8026916:	9b04      	ldr	r3, [sp, #16]
 8026918:	f7fe fc14 	bl	8025144 <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 802691c:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8026920:	bf08      	it	eq
 8026922:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 8026926:	b003      	add	sp, #12
 8026928:	f85d fb04 	ldr.w	pc, [sp], #4

0802692c <eckey_verify_wrap>:
{
 802692c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802692e:	b0af      	sub	sp, #188	; 0xbc
 8026930:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8026932:	a803      	add	r0, sp, #12
{
 8026934:	460d      	mov	r5, r1
 8026936:	4616      	mov	r6, r2
 8026938:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 802693a:	f7fe fc28 	bl	802518e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 802693e:	4621      	mov	r1, r4
 8026940:	a803      	add	r0, sp, #12
 8026942:	f7fe fc08 	bl	8025156 <mbedtls_ecdsa_from_keypair>
 8026946:	4604      	mov	r4, r0
 8026948:	b950      	cbnz	r0, 8026960 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 802694a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802694c:	9301      	str	r3, [sp, #4]
 802694e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026950:	9300      	str	r3, [sp, #0]
 8026952:	4632      	mov	r2, r6
 8026954:	463b      	mov	r3, r7
 8026956:	4629      	mov	r1, r5
 8026958:	a803      	add	r0, sp, #12
 802695a:	f7ff ffd7 	bl	802690c <ecdsa_verify_wrap>
 802695e:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8026960:	a803      	add	r0, sp, #12
 8026962:	f7fe fc16 	bl	8025192 <mbedtls_ecdsa_free>
}
 8026966:	4620      	mov	r0, r4
 8026968:	b02f      	add	sp, #188	; 0xbc
 802696a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802696c <pk_use_ecparams>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
 802696c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 802696e:	6803      	ldr	r3, [r0, #0]
 8026970:	2b06      	cmp	r3, #6
{
 8026972:	b0c1      	sub	sp, #260	; 0x104
 8026974:	4604      	mov	r4, r0
 8026976:	460d      	mov	r5, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 8026978:	d110      	bne.n	802699c <pk_use_ecparams+0x30>
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 802697a:	a901      	add	r1, sp, #4
 802697c:	f7ff fe98 	bl	80266b0 <mbedtls_oid_get_ec_grp>
 8026980:	2800      	cmp	r0, #0
 8026982:	f040 8155 	bne.w	8026c30 <pk_use_ecparams+0x2c4>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8026986:	782b      	ldrb	r3, [r5, #0]
 8026988:	f89d 1004 	ldrb.w	r1, [sp, #4]
 802698c:	2b00      	cmp	r3, #0
 802698e:	f040 814a 	bne.w	8026c26 <pk_use_ecparams+0x2ba>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 8026992:	4628      	mov	r0, r5
 8026994:	f7ff fdaa 	bl	80264ec <mbedtls_ecp_group_load>
 8026998:	4604      	mov	r4, r0
 802699a:	e077      	b.n	8026a8c <pk_use_ecparams+0x120>
    mbedtls_ecp_group_init( &grp );
 802699c:	a802      	add	r0, sp, #8
 802699e:	f7fe ff8c 	bl	80258ba <mbedtls_ecp_group_init>
    unsigned char *p = params->p;
 80269a2:	68a6      	ldr	r6, [r4, #8]
    const unsigned char * const end = params->p + params->len;
 80269a4:	6863      	ldr	r3, [r4, #4]
    unsigned char *p = params->p;
 80269a6:	9600      	str	r6, [sp, #0]
    const unsigned char * const end = params->p + params->len;
 80269a8:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )
 80269aa:	aa21      	add	r2, sp, #132	; 0x84
 80269ac:	4631      	mov	r1, r6
 80269ae:	4668      	mov	r0, sp
 80269b0:	f7fc ff9f 	bl	80238f2 <mbedtls_asn1_get_int>
 80269b4:	2800      	cmp	r0, #0
 80269b6:	d05e      	beq.n	8026a76 <pk_use_ecparams+0x10a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80269b8:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )
 80269bc:	2c00      	cmp	r4, #0
 80269be:	d15f      	bne.n	8026a80 <pk_use_ecparams+0x114>
    mbedtls_ecp_group_init( &ref );
 80269c0:	a821      	add	r0, sp, #132	; 0x84
 80269c2:	f7fe ff7a 	bl	80258ba <mbedtls_ecp_group_init>
    for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )
 80269c6:	f7fe ff45 	bl	8025854 <mbedtls_ecp_grp_id_list>
 80269ca:	4606      	mov	r6, r0
 80269cc:	4637      	mov	r7, r6
 80269ce:	3601      	adds	r6, #1
 80269d0:	783b      	ldrb	r3, [r7, #0]
 80269d2:	2b00      	cmp	r3, #0
 80269d4:	d041      	beq.n	8026a5a <pk_use_ecparams+0xee>
        mbedtls_ecp_group_free( &ref );
 80269d6:	a821      	add	r0, sp, #132	; 0x84
 80269d8:	f7fe ff87 	bl	80258ea <mbedtls_ecp_group_free>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 80269dc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80269e0:	a821      	add	r0, sp, #132	; 0x84
 80269e2:	f7ff fd83 	bl	80264ec <mbedtls_ecp_group_load>
 80269e6:	4604      	mov	r4, r0
 80269e8:	2800      	cmp	r0, #0
 80269ea:	d137      	bne.n	8026a5c <pk_use_ecparams+0xf0>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 80269ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80269ee:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80269f0:	429a      	cmp	r2, r3
 80269f2:	d1eb      	bne.n	80269cc <pk_use_ecparams+0x60>
 80269f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80269f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80269f8:	429a      	cmp	r2, r3
 80269fa:	d1e7      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 80269fc:	a922      	add	r1, sp, #136	; 0x88
 80269fe:	a803      	add	r0, sp, #12
 8026a00:	f7fd fc55 	bl	80242ae <mbedtls_mpi_cmp_mpi>
        if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
 8026a04:	2800      	cmp	r0, #0
 8026a06:	d1e1      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 8026a08:	a925      	add	r1, sp, #148	; 0x94
 8026a0a:	a806      	add	r0, sp, #24
 8026a0c:	f7fd fc4f 	bl	80242ae <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
 8026a10:	2800      	cmp	r0, #0
 8026a12:	d1db      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 8026a14:	a928      	add	r1, sp, #160	; 0xa0
 8026a16:	a809      	add	r0, sp, #36	; 0x24
 8026a18:	f7fd fc49 	bl	80242ae <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
 8026a1c:	2800      	cmp	r0, #0
 8026a1e:	d1d5      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 8026a20:	a934      	add	r1, sp, #208	; 0xd0
 8026a22:	a815      	add	r0, sp, #84	; 0x54
 8026a24:	f7fd fc43 	bl	80242ae <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
 8026a28:	2800      	cmp	r0, #0
 8026a2a:	d1cf      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 8026a2c:	a92b      	add	r1, sp, #172	; 0xac
 8026a2e:	a80c      	add	r0, sp, #48	; 0x30
 8026a30:	f7fd fc3d 	bl	80242ae <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
 8026a34:	2800      	cmp	r0, #0
 8026a36:	d1c9      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 8026a38:	a931      	add	r1, sp, #196	; 0xc4
 8026a3a:	a812      	add	r0, sp, #72	; 0x48
 8026a3c:	f7fd fc37 	bl	80242ae <mbedtls_mpi_cmp_mpi>
            mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
 8026a40:	2800      	cmp	r0, #0
 8026a42:	d1c3      	bne.n	80269cc <pk_use_ecparams+0x60>
            mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )
 8026a44:	2100      	movs	r1, #0
 8026a46:	a80f      	add	r0, sp, #60	; 0x3c
 8026a48:	f7fd fac4 	bl	8023fd4 <mbedtls_mpi_get_bit>
 8026a4c:	2100      	movs	r1, #0
 8026a4e:	4604      	mov	r4, r0
 8026a50:	a82e      	add	r0, sp, #184	; 0xb8
 8026a52:	f7fd fabf 	bl	8023fd4 <mbedtls_mpi_get_bit>
            mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
 8026a56:	4284      	cmp	r4, r0
 8026a58:	d1b8      	bne.n	80269cc <pk_use_ecparams+0x60>
        MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
 8026a5a:	2400      	movs	r4, #0
    mbedtls_ecp_group_free( &ref );
 8026a5c:	a821      	add	r0, sp, #132	; 0x84
 8026a5e:	f7fe ff44 	bl	80258ea <mbedtls_ecp_group_free>
    *grp_id = *id;
 8026a62:	783b      	ldrb	r3, [r7, #0]
 8026a64:	f88d 3004 	strb.w	r3, [sp, #4]
    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
 8026a68:	b954      	cbnz	r4, 8026a80 <pk_use_ecparams+0x114>
 8026a6a:	783a      	ldrb	r2, [r7, #0]
        ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 8026a6c:	4b71      	ldr	r3, [pc, #452]	; (8026c34 <pk_use_ecparams+0x2c8>)
 8026a6e:	2a00      	cmp	r2, #0
 8026a70:	bf08      	it	eq
 8026a72:	461c      	moveq	r4, r3
 8026a74:	e004      	b.n	8026a80 <pk_use_ecparams+0x114>
    if( ver < 1 || ver > 3 )
 8026a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026a78:	3b01      	subs	r3, #1
 8026a7a:	2b02      	cmp	r3, #2
 8026a7c:	d909      	bls.n	8026a92 <pk_use_ecparams+0x126>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8026a7e:	4c6e      	ldr	r4, [pc, #440]	; (8026c38 <pk_use_ecparams+0x2cc>)
    mbedtls_ecp_group_free( &grp );
 8026a80:	a802      	add	r0, sp, #8
 8026a82:	f7fe ff32 	bl	80258ea <mbedtls_ecp_group_free>
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
 8026a86:	2c00      	cmp	r4, #0
 8026a88:	f43f af7d 	beq.w	8026986 <pk_use_ecparams+0x1a>
        return( ret );

    return( 0 );
}
 8026a8c:	4620      	mov	r0, r4
 8026a8e:	b041      	add	sp, #260	; 0x104
 8026a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8026a92:	2330      	movs	r3, #48	; 0x30
 8026a94:	aa01      	add	r2, sp, #4
 8026a96:	4631      	mov	r1, r6
 8026a98:	4668      	mov	r0, sp
 8026a9a:	f7fc fefe 	bl	802389a <mbedtls_asn1_get_tag>
 8026a9e:	4604      	mov	r4, r0
 8026aa0:	2800      	cmp	r0, #0
 8026aa2:	d1ed      	bne.n	8026a80 <pk_use_ecparams+0x114>
    end_field = p + len;
 8026aa4:	e9dd 7300 	ldrd	r7, r3, [sp]
 8026aa8:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )
 8026aaa:	aa01      	add	r2, sp, #4
 8026aac:	2306      	movs	r3, #6
 8026aae:	4639      	mov	r1, r7
 8026ab0:	4668      	mov	r0, sp
 8026ab2:	f7fc fef2 	bl	802389a <mbedtls_asn1_get_tag>
 8026ab6:	4604      	mov	r4, r0
 8026ab8:	2800      	cmp	r0, #0
 8026aba:	d1e1      	bne.n	8026a80 <pk_use_ecparams+0x114>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 8026abc:	9a01      	ldr	r2, [sp, #4]
 8026abe:	2a07      	cmp	r2, #7
 8026ac0:	f040 80af 	bne.w	8026c22 <pk_use_ecparams+0x2b6>
        memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )
 8026ac4:	9c00      	ldr	r4, [sp, #0]
 8026ac6:	495d      	ldr	r1, [pc, #372]	; (8026c3c <pk_use_ecparams+0x2d0>)
 8026ac8:	4620      	mov	r0, r4
 8026aca:	f001 ff67 	bl	802899c <memcmp>
    if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
 8026ace:	2800      	cmp	r0, #0
 8026ad0:	f040 80a7 	bne.w	8026c22 <pk_use_ecparams+0x2b6>
    p += len;
 8026ad4:	3407      	adds	r4, #7
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 8026ad6:	aa03      	add	r2, sp, #12
 8026ad8:	4639      	mov	r1, r7
 8026ada:	4668      	mov	r0, sp
    p += len;
 8026adc:	9400      	str	r4, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
 8026ade:	f7fc ff2c 	bl	802393a <mbedtls_asn1_get_mpi>
 8026ae2:	2800      	cmp	r0, #0
 8026ae4:	f47f af68 	bne.w	80269b8 <pk_use_ecparams+0x4c>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8026ae8:	a803      	add	r0, sp, #12
 8026aea:	f7fd fa9e 	bl	802402a <mbedtls_mpi_bitlen>
    if( p != end_field )
 8026aee:	9b00      	ldr	r3, [sp, #0]
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8026af0:	9018      	str	r0, [sp, #96]	; 0x60
    if( p != end_field )
 8026af2:	429f      	cmp	r7, r3
 8026af4:	f040 8093 	bne.w	8026c1e <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8026af8:	2330      	movs	r3, #48	; 0x30
 8026afa:	aa01      	add	r2, sp, #4
 8026afc:	4631      	mov	r1, r6
 8026afe:	4668      	mov	r0, sp
 8026b00:	f7fc fecb 	bl	802389a <mbedtls_asn1_get_tag>
 8026b04:	4604      	mov	r4, r0
 8026b06:	2800      	cmp	r0, #0
 8026b08:	d1ba      	bne.n	8026a80 <pk_use_ecparams+0x114>
    end_curve = p + len;
 8026b0a:	e9dd 4300 	ldrd	r4, r3, [sp]
 8026b0e:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 8026b10:	2304      	movs	r3, #4
 8026b12:	eb0d 0203 	add.w	r2, sp, r3
 8026b16:	4621      	mov	r1, r4
 8026b18:	4668      	mov	r0, sp
 8026b1a:	f7fc febe 	bl	802389a <mbedtls_asn1_get_tag>
 8026b1e:	2800      	cmp	r0, #0
 8026b20:	f47f af4a 	bne.w	80269b8 <pk_use_ecparams+0x4c>
 8026b24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026b28:	a806      	add	r0, sp, #24
 8026b2a:	f7fd faa4 	bl	8024076 <mbedtls_mpi_read_binary>
 8026b2e:	2800      	cmp	r0, #0
 8026b30:	f47f af42 	bne.w	80269b8 <pk_use_ecparams+0x4c>
    p += len;
 8026b34:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026b38:	4413      	add	r3, r2
 8026b3a:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
 8026b3c:	2304      	movs	r3, #4
 8026b3e:	eb0d 0203 	add.w	r2, sp, r3
 8026b42:	4621      	mov	r1, r4
 8026b44:	4668      	mov	r0, sp
 8026b46:	f7fc fea8 	bl	802389a <mbedtls_asn1_get_tag>
 8026b4a:	2800      	cmp	r0, #0
 8026b4c:	f47f af34 	bne.w	80269b8 <pk_use_ecparams+0x4c>
 8026b50:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026b54:	a809      	add	r0, sp, #36	; 0x24
 8026b56:	f7fd fa8e 	bl	8024076 <mbedtls_mpi_read_binary>
 8026b5a:	2800      	cmp	r0, #0
 8026b5c:	f47f af2c 	bne.w	80269b8 <pk_use_ecparams+0x4c>
    p += len;
 8026b60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026b64:	4413      	add	r3, r2
 8026b66:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )
 8026b68:	aa01      	add	r2, sp, #4
 8026b6a:	2303      	movs	r3, #3
 8026b6c:	4621      	mov	r1, r4
 8026b6e:	4668      	mov	r0, sp
 8026b70:	f7fc fe93 	bl	802389a <mbedtls_asn1_get_tag>
 8026b74:	b918      	cbnz	r0, 8026b7e <pk_use_ecparams+0x212>
        p += len;
 8026b76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026b7a:	4413      	add	r3, r2
 8026b7c:	9300      	str	r3, [sp, #0]
    if( p != end_curve )
 8026b7e:	9b00      	ldr	r3, [sp, #0]
 8026b80:	429c      	cmp	r4, r3
 8026b82:	d14c      	bne.n	8026c1e <pk_use_ecparams+0x2b2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8026b84:	2304      	movs	r3, #4
 8026b86:	eb0d 0203 	add.w	r2, sp, r3
 8026b8a:	4631      	mov	r1, r6
 8026b8c:	4668      	mov	r0, sp
 8026b8e:	f7fc fe84 	bl	802389a <mbedtls_asn1_get_tag>
 8026b92:	2800      	cmp	r0, #0
 8026b94:	f47f af10 	bne.w	80269b8 <pk_use_ecparams+0x4c>
    if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,
 8026b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026b9c:	a90c      	add	r1, sp, #48	; 0x30
 8026b9e:	a802      	add	r0, sp, #8
 8026ba0:	f7ff f90c 	bl	8025dbc <mbedtls_ecp_point_read_binary>
 8026ba4:	b980      	cbnz	r0, 8026bc8 <pk_use_ecparams+0x25c>
    p += len;
 8026ba6:	e9dd 3200 	ldrd	r3, r2, [sp]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 8026baa:	4631      	mov	r1, r6
    p += len;
 8026bac:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 8026bae:	4668      	mov	r0, sp
 8026bb0:	aa15      	add	r2, sp, #84	; 0x54
    p += len;
 8026bb2:	9300      	str	r3, [sp, #0]
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
 8026bb4:	f7fc fec1 	bl	802393a <mbedtls_asn1_get_mpi>
 8026bb8:	2800      	cmp	r0, #0
 8026bba:	f47f aefd 	bne.w	80269b8 <pk_use_ecparams+0x4c>
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8026bbe:	a815      	add	r0, sp, #84	; 0x54
 8026bc0:	f7fd fa33 	bl	802402a <mbedtls_mpi_bitlen>
 8026bc4:	9019      	str	r0, [sp, #100]	; 0x64
 8026bc6:	e6fb      	b.n	80269c0 <pk_use_ecparams+0x54>
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 8026bc8:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 8026bcc:	f47f af57 	bne.w	8026a7e <pk_use_ecparams+0x112>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 8026bd0:	9b00      	ldr	r3, [sp, #0]
 8026bd2:	781b      	ldrb	r3, [r3, #0]
        if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
 8026bd4:	3b02      	subs	r3, #2
 8026bd6:	2b01      	cmp	r3, #1
 8026bd8:	f63f af51 	bhi.w	8026a7e <pk_use_ecparams+0x112>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 8026bdc:	a803      	add	r0, sp, #12
 8026bde:	f7fd fa44 	bl	802406a <mbedtls_mpi_size>
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 8026be2:	9b01      	ldr	r3, [sp, #4]
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 8026be4:	1c41      	adds	r1, r0, #1
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 8026be6:	4299      	cmp	r1, r3
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 8026be8:	4602      	mov	r2, r0
            ( p[0] != 0x02 && p[0] != 0x03 ) ||
 8026bea:	f47f af48 	bne.w	8026a7e <pk_use_ecparams+0x112>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 8026bee:	9900      	ldr	r1, [sp, #0]
 8026bf0:	a80c      	add	r0, sp, #48	; 0x30
 8026bf2:	3101      	adds	r1, #1
 8026bf4:	f7fd fa3f 	bl	8024076 <mbedtls_mpi_read_binary>
            len != mbedtls_mpi_size( &grp->P ) + 1 ||
 8026bf8:	2800      	cmp	r0, #0
 8026bfa:	f47f af40 	bne.w	8026a7e <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 8026bfe:	9b00      	ldr	r3, [sp, #0]
 8026c00:	7819      	ldrb	r1, [r3, #0]
 8026c02:	a80f      	add	r0, sp, #60	; 0x3c
 8026c04:	3902      	subs	r1, #2
 8026c06:	f7fd f9c9 	bl	8023f9c <mbedtls_mpi_lset>
            mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
 8026c0a:	2800      	cmp	r0, #0
 8026c0c:	f47f af37 	bne.w	8026a7e <pk_use_ecparams+0x112>
            mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )
 8026c10:	2101      	movs	r1, #1
 8026c12:	a812      	add	r0, sp, #72	; 0x48
 8026c14:	f7fd f9c2 	bl	8023f9c <mbedtls_mpi_lset>
            mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
 8026c18:	2800      	cmp	r0, #0
 8026c1a:	d0c4      	beq.n	8026ba6 <pk_use_ecparams+0x23a>
 8026c1c:	e72f      	b.n	8026a7e <pk_use_ecparams+0x112>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8026c1e:	4c08      	ldr	r4, [pc, #32]	; (8026c40 <pk_use_ecparams+0x2d4>)
 8026c20:	e72e      	b.n	8026a80 <pk_use_ecparams+0x114>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8026c22:	4c08      	ldr	r4, [pc, #32]	; (8026c44 <pk_use_ecparams+0x2d8>)
 8026c24:	e72c      	b.n	8026a80 <pk_use_ecparams+0x114>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8026c26:	428b      	cmp	r3, r1
 8026c28:	f43f aeb3 	beq.w	8026992 <pk_use_ecparams+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8026c2c:	4c02      	ldr	r4, [pc, #8]	; (8026c38 <pk_use_ecparams+0x2cc>)
 8026c2e:	e72d      	b.n	8026a8c <pk_use_ecparams+0x120>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8026c30:	4c05      	ldr	r4, [pc, #20]	; (8026c48 <pk_use_ecparams+0x2dc>)
 8026c32:	e72b      	b.n	8026a8c <pk_use_ecparams+0x120>
 8026c34:	ffffb180 	.word	0xffffb180
 8026c38:	ffffc300 	.word	0xffffc300
 8026c3c:	0802d3f5 	.word	0x0802d3f5
 8026c40:	ffffc29a 	.word	0xffffc29a
 8026c44:	ffffc680 	.word	0xffffc680
 8026c48:	ffffc600 	.word	0xffffc600

08026c4c <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8026c4c:	b530      	push	{r4, r5, lr}
 8026c4e:	4615      	mov	r5, r2
 8026c50:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8026c52:	2200      	movs	r2, #0
 8026c54:	e9c3 2200 	strd	r2, r2, [r3]
 8026c58:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8026c5a:	aa01      	add	r2, sp, #4
{
 8026c5c:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8026c5e:	f7fc fef4 	bl	8023a4a <mbedtls_asn1_get_alg>
 8026c62:	b118      	cbz	r0, 8026c6c <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8026c64:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
    }

    return( 0 );
}
 8026c68:	b005      	add	sp, #20
 8026c6a:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8026c6c:	4629      	mov	r1, r5
 8026c6e:	a801      	add	r0, sp, #4
 8026c70:	f7ff fd04 	bl	802667c <mbedtls_oid_get_pk_alg>
 8026c74:	b960      	cbnz	r0, 8026c90 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8026c76:	782b      	ldrb	r3, [r5, #0]
 8026c78:	2b01      	cmp	r3, #1
 8026c7a:	d1f5      	bne.n	8026c68 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8026c7c:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8026c7e:	2b05      	cmp	r3, #5
 8026c80:	d000      	beq.n	8026c84 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8026c82:	b93b      	cbnz	r3, 8026c94 <pk_get_pk_alg+0x48>
 8026c84:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8026c86:	4b04      	ldr	r3, [pc, #16]	; (8026c98 <pk_get_pk_alg+0x4c>)
 8026c88:	2a00      	cmp	r2, #0
 8026c8a:	bf18      	it	ne
 8026c8c:	4618      	movne	r0, r3
 8026c8e:	e7eb      	b.n	8026c68 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8026c90:	4802      	ldr	r0, [pc, #8]	; (8026c9c <pk_get_pk_alg+0x50>)
 8026c92:	e7e9      	b.n	8026c68 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8026c94:	4800      	ldr	r0, [pc, #0]	; (8026c98 <pk_get_pk_alg+0x4c>)
 8026c96:	e7e7      	b.n	8026c68 <pk_get_pk_alg+0x1c>
 8026c98:	ffffc580 	.word	0xffffc580
 8026c9c:	ffffc380 	.word	0xffffc380

08026ca0 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8026ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026ca4:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8026ca6:	2300      	movs	r3, #0
{
 8026ca8:	4617      	mov	r7, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8026caa:	f88d 3007 	strb.w	r3, [sp, #7]
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8026cae:	aa02      	add	r2, sp, #8
 8026cb0:	2330      	movs	r3, #48	; 0x30
{
 8026cb2:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8026cb4:	f7fc fdf1 	bl	802389a <mbedtls_asn1_get_tag>
 8026cb8:	b128      	cbz	r0, 8026cc6 <mbedtls_pk_parse_subpubkey+0x26>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8026cba:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8026cbe:	4620      	mov	r0, r4
 8026cc0:	b007      	add	sp, #28
 8026cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    end = *p + len;
 8026cc6:	9b02      	ldr	r3, [sp, #8]
 8026cc8:	6835      	ldr	r5, [r6, #0]
 8026cca:	441d      	add	r5, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8026ccc:	f10d 0207 	add.w	r2, sp, #7
 8026cd0:	ab03      	add	r3, sp, #12
 8026cd2:	4629      	mov	r1, r5
 8026cd4:	4630      	mov	r0, r6
 8026cd6:	f7ff ffb9 	bl	8026c4c <pk_get_pk_alg>
 8026cda:	4604      	mov	r4, r0
 8026cdc:	2800      	cmp	r0, #0
 8026cde:	d1ee      	bne.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8026ce0:	aa02      	add	r2, sp, #8
 8026ce2:	4629      	mov	r1, r5
 8026ce4:	4630      	mov	r0, r6
 8026ce6:	f7fc fe5e 	bl	80239a6 <mbedtls_asn1_get_bitstring_null>
 8026cea:	b110      	cbz	r0, 8026cf2 <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8026cec:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 8026cf0:	e7e5      	b.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8026cf2:	6833      	ldr	r3, [r6, #0]
 8026cf4:	9a02      	ldr	r2, [sp, #8]
 8026cf6:	4413      	add	r3, r2
 8026cf8:	429d      	cmp	r5, r3
 8026cfa:	d130      	bne.n	8026d5e <mbedtls_pk_parse_subpubkey+0xbe>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8026cfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8026d00:	f7ff fd00 	bl	8026704 <mbedtls_pk_info_from_type>
 8026d04:	4601      	mov	r1, r0
 8026d06:	b360      	cbz	r0, 8026d62 <mbedtls_pk_parse_subpubkey+0xc2>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8026d08:	4638      	mov	r0, r7
 8026d0a:	f7ff fd07 	bl	802671c <mbedtls_pk_setup>
 8026d0e:	4604      	mov	r4, r0
 8026d10:	2800      	cmp	r0, #0
 8026d12:	d1d4      	bne.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 8026d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8026d18:	3b02      	subs	r3, #2
 8026d1a:	2b01      	cmp	r3, #1
 8026d1c:	d81d      	bhi.n	8026d5a <mbedtls_pk_parse_subpubkey+0xba>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 8026d1e:	6879      	ldr	r1, [r7, #4]
 8026d20:	a803      	add	r0, sp, #12
 8026d22:	f7ff fe23 	bl	802696c <pk_use_ecparams>
        if( ret == 0 )
 8026d26:	4604      	mov	r4, r0
 8026d28:	b998      	cbnz	r0, 8026d52 <mbedtls_pk_parse_subpubkey+0xb2>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 8026d2a:	f8d7 8004 	ldr.w	r8, [r7, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8026d2e:	6832      	ldr	r2, [r6, #0]
 8026d30:	f108 0988 	add.w	r9, r8, #136	; 0x88
 8026d34:	1aab      	subs	r3, r5, r2
 8026d36:	4649      	mov	r1, r9
 8026d38:	4640      	mov	r0, r8
 8026d3a:	f7ff f83f 	bl	8025dbc <mbedtls_ecp_point_read_binary>
 8026d3e:	4604      	mov	r4, r0
 8026d40:	b920      	cbnz	r0, 8026d4c <mbedtls_pk_parse_subpubkey+0xac>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8026d42:	4649      	mov	r1, r9
 8026d44:	4640      	mov	r0, r8
 8026d46:	f7ff f871 	bl	8025e2c <mbedtls_ecp_check_pubkey>
 8026d4a:	4604      	mov	r4, r0
    *p = (unsigned char *) end;
 8026d4c:	6035      	str	r5, [r6, #0]
    if( ret == 0 && *p != end )
 8026d4e:	2c00      	cmp	r4, #0
 8026d50:	d0b5      	beq.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
        mbedtls_pk_free( pk );
 8026d52:	4638      	mov	r0, r7
 8026d54:	f7ff fcc6 	bl	80266e4 <mbedtls_pk_free>
 8026d58:	e7b1      	b.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8026d5a:	4c03      	ldr	r4, [pc, #12]	; (8026d68 <mbedtls_pk_parse_subpubkey+0xc8>)
 8026d5c:	e7f9      	b.n	8026d52 <mbedtls_pk_parse_subpubkey+0xb2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8026d5e:	4c03      	ldr	r4, [pc, #12]	; (8026d6c <mbedtls_pk_parse_subpubkey+0xcc>)
 8026d60:	e7ad      	b.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8026d62:	4c01      	ldr	r4, [pc, #4]	; (8026d68 <mbedtls_pk_parse_subpubkey+0xc8>)
 8026d64:	e7ab      	b.n	8026cbe <mbedtls_pk_parse_subpubkey+0x1e>
 8026d66:	bf00      	nop
 8026d68:	ffffc380 	.word	0xffffc380
 8026d6c:	ffffc49a 	.word	0xffffc49a

08026d70 <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
 8026d70:	4b01      	ldr	r3, [pc, #4]	; (8026d78 <mbedtls_calloc+0x8>)
 8026d72:	681b      	ldr	r3, [r3, #0]
 8026d74:	4718      	bx	r3
 8026d76:	bf00      	nop
 8026d78:	200300fc 	.word	0x200300fc

08026d7c <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
 8026d7c:	4b01      	ldr	r3, [pc, #4]	; (8026d84 <mbedtls_free+0x8>)
 8026d7e:	685b      	ldr	r3, [r3, #4]
 8026d80:	4718      	bx	r3
 8026d82:	bf00      	nop
 8026d84:	200300fc 	.word	0x200300fc

08026d88 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 8026d88:	4b02      	ldr	r3, [pc, #8]	; (8026d94 <mbedtls_platform_zeroize+0xc>)
 8026d8a:	460a      	mov	r2, r1
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	2100      	movs	r1, #0
 8026d90:	4718      	bx	r3
 8026d92:	bf00      	nop
 8026d94:	20030104 	.word	0x20030104

08026d98 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8026d98:	226c      	movs	r2, #108	; 0x6c
 8026d9a:	2100      	movs	r1, #0
 8026d9c:	f001 be18 	b.w	80289d0 <memset>

08026da0 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8026da0:	b110      	cbz	r0, 8026da8 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8026da2:	216c      	movs	r1, #108	; 0x6c
 8026da4:	f7ff bff0 	b.w	8026d88 <mbedtls_platform_zeroize>
}
 8026da8:	4770      	bx	lr

08026daa <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8026daa:	b508      	push	{r3, lr}
    *dst = *src;
 8026dac:	226c      	movs	r2, #108	; 0x6c
 8026dae:	f001 fe04 	bl	80289ba <memcpy>
}
 8026db2:	bd08      	pop	{r3, pc}

08026db4 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8026db4:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8026db6:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8026dba:	b9c1      	cbnz	r1, 8026dee <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8026dbc:	4a19      	ldr	r2, [pc, #100]	; (8026e24 <mbedtls_sha256_starts_ret+0x70>)
 8026dbe:	4b1a      	ldr	r3, [pc, #104]	; (8026e28 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8026dc0:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8026e50 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
 8026dc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8026dc8:	4b18      	ldr	r3, [pc, #96]	; (8026e2c <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8026dca:	4a19      	ldr	r2, [pc, #100]	; (8026e30 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8026dcc:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8026dd0:	4b18      	ldr	r3, [pc, #96]	; (8026e34 <mbedtls_sha256_starts_ret+0x80>)
 8026dd2:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 8026dd6:	4b18      	ldr	r3, [pc, #96]	; (8026e38 <mbedtls_sha256_starts_ret+0x84>)
 8026dd8:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8026dda:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8026dde:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8026de2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 8026de6:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8026de8:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8026dea:	2000      	movs	r0, #0
 8026dec:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8026dee:	4b13      	ldr	r3, [pc, #76]	; (8026e3c <mbedtls_sha256_starts_ret+0x88>)
 8026df0:	4a13      	ldr	r2, [pc, #76]	; (8026e40 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 8026df2:	f8df c060 	ldr.w	ip, [pc, #96]	; 8026e54 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
 8026df6:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8026dfa:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8026dfe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8026e02:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8026e06:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8026e08:	4b0e      	ldr	r3, [pc, #56]	; (8026e44 <mbedtls_sha256_starts_ret+0x90>)
 8026e0a:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 8026e0e:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8026e12:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8026e16:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8026e1a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8026e1c:	4b0a      	ldr	r3, [pc, #40]	; (8026e48 <mbedtls_sha256_starts_ret+0x94>)
 8026e1e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8026e20:	4b0a      	ldr	r3, [pc, #40]	; (8026e4c <mbedtls_sha256_starts_ret+0x98>)
 8026e22:	e7e0      	b.n	8026de6 <mbedtls_sha256_starts_ret+0x32>
 8026e24:	6a09e667 	.word	0x6a09e667
 8026e28:	bb67ae85 	.word	0xbb67ae85
 8026e2c:	a54ff53a 	.word	0xa54ff53a
 8026e30:	510e527f 	.word	0x510e527f
 8026e34:	9b05688c 	.word	0x9b05688c
 8026e38:	1f83d9ab 	.word	0x1f83d9ab
 8026e3c:	367cd507 	.word	0x367cd507
 8026e40:	c1059ed8 	.word	0xc1059ed8
 8026e44:	ffc00b31 	.word	0xffc00b31
 8026e48:	64f98fa7 	.word	0x64f98fa7
 8026e4c:	befa4fa4 	.word	0xbefa4fa4
 8026e50:	3c6ef372 	.word	0x3c6ef372
 8026e54:	f70e5939 	.word	0xf70e5939

08026e58 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8026e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e5c:	b0cf      	sub	sp, #316	; 0x13c
 8026e5e:	f100 0308 	add.w	r3, r0, #8
 8026e62:	9304      	str	r3, [sp, #16]
 8026e64:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8026e66:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8026e68:	ac06      	add	r4, sp, #24
 8026e6a:	f852 0b04 	ldr.w	r0, [r2], #4
 8026e6e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 8026e72:	3301      	adds	r3, #1
 8026e74:	2b08      	cmp	r3, #8
 8026e76:	d1f7      	bne.n	8026e68 <mbedtls_internal_sha256_process+0x10>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8026e78:	2200      	movs	r2, #0
        GET_UINT32_BE( W[i], data, 4 * i );
 8026e7a:	784b      	ldrb	r3, [r1, #1]
 8026e7c:	7808      	ldrb	r0, [r1, #0]
 8026e7e:	041b      	lsls	r3, r3, #16
 8026e80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8026e84:	78c8      	ldrb	r0, [r1, #3]
 8026e86:	4303      	orrs	r3, r0
 8026e88:	7888      	ldrb	r0, [r1, #2]
 8026e8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8026e8e:	a80e      	add	r0, sp, #56	; 0x38
 8026e90:	3104      	adds	r1, #4
 8026e92:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8026e96:	3201      	adds	r2, #1
 8026e98:	2a10      	cmp	r2, #16
 8026e9a:	d1ee      	bne.n	8026e7a <mbedtls_internal_sha256_process+0x22>
 8026e9c:	4da1      	ldr	r5, [pc, #644]	; (8027124 <mbedtls_internal_sha256_process+0x2cc>)
 8026e9e:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8026ea2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026ea6:	9b08      	ldr	r3, [sp, #32]
 8026ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026eaa:	9a07      	ldr	r2, [sp, #28]
 8026eac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026eb0:	9f06      	ldr	r7, [sp, #24]
 8026eb2:	9500      	str	r5, [sp, #0]
 8026eb4:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8026eb8:	46da      	mov	sl, fp
 8026eba:	46a8      	mov	r8, r5

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8026ebc:	f8d8 5000 	ldr.w	r5, [r8]
 8026ec0:	f8da 6000 	ldr.w	r6, [sl]
 8026ec4:	ea4f 2cf9 	mov.w	ip, r9, ror #11
 8026ec8:	ea8c 1cb9 	eor.w	ip, ip, r9, ror #6
 8026ecc:	4435      	add	r5, r6
 8026ece:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 8026ed2:	44ac      	add	ip, r5
 8026ed4:	ea80 0501 	eor.w	r5, r0, r1
 8026ed8:	ea05 0509 	and.w	r5, r5, r9
 8026edc:	4045      	eors	r5, r0
 8026ede:	44ac      	add	ip, r5
 8026ee0:	ea47 0602 	orr.w	r6, r7, r2
 8026ee4:	ea4f 3577 	mov.w	r5, r7, ror #13
 8026ee8:	44e6      	add	lr, ip
 8026eea:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 8026eee:	ea07 0c02 	and.w	ip, r7, r2
 8026ef2:	401e      	ands	r6, r3
 8026ef4:	ea85 55b7 	eor.w	r5, r5, r7, ror #22
 8026ef8:	ea46 060c 	orr.w	r6, r6, ip
 8026efc:	442e      	add	r6, r5
 8026efe:	4474      	add	r4, lr
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8026f00:	f8d8 5004 	ldr.w	r5, [r8, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8026f04:	44b6      	add	lr, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8026f06:	f8da 6004 	ldr.w	r6, [sl, #4]
 8026f0a:	4435      	add	r5, r6
 8026f0c:	4405      	add	r5, r0
 8026f0e:	ea89 0001 	eor.w	r0, r9, r1
 8026f12:	4020      	ands	r0, r4
 8026f14:	ea80 0c01 	eor.w	ip, r0, r1
 8026f18:	eb05 000c 	add.w	r0, r5, ip
 8026f1c:	ea4f 25f4 	mov.w	r5, r4, ror #11
 8026f20:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
 8026f24:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8026f28:	4405      	add	r5, r0
 8026f2a:	ea4e 0607 	orr.w	r6, lr, r7
 8026f2e:	ea4f 307e 	mov.w	r0, lr, ror #13
 8026f32:	ea0e 0c07 	and.w	ip, lr, r7
 8026f36:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8026f3a:	4016      	ands	r6, r2
 8026f3c:	ea46 060c 	orr.w	r6, r6, ip
 8026f40:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8026f44:	4430      	add	r0, r6
 8026f46:	4428      	add	r0, r5
 8026f48:	442b      	add	r3, r5
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8026f4a:	f8da 6008 	ldr.w	r6, [sl, #8]
 8026f4e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8026f52:	4435      	add	r5, r6
 8026f54:	440d      	add	r5, r1
 8026f56:	ea84 0109 	eor.w	r1, r4, r9
 8026f5a:	4019      	ands	r1, r3
 8026f5c:	ea81 0c09 	eor.w	ip, r1, r9
 8026f60:	eb05 010c 	add.w	r1, r5, ip
 8026f64:	ea4f 25f3 	mov.w	r5, r3, ror #11
 8026f68:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 8026f6c:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 8026f70:	440d      	add	r5, r1
 8026f72:	ea4e 0600 	orr.w	r6, lr, r0
 8026f76:	ea4f 3170 	mov.w	r1, r0, ror #13
 8026f7a:	ea0e 0c00 	and.w	ip, lr, r0
 8026f7e:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8026f82:	403e      	ands	r6, r7
 8026f84:	ea46 060c 	orr.w	r6, r6, ip
 8026f88:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8026f8c:	4431      	add	r1, r6
 8026f8e:	4429      	add	r1, r5
 8026f90:	442a      	add	r2, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8026f92:	f8da 600c 	ldr.w	r6, [sl, #12]
 8026f96:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8026f9a:	4435      	add	r5, r6
 8026f9c:	44a9      	add	r9, r5
 8026f9e:	ea84 0503 	eor.w	r5, r4, r3
 8026fa2:	4015      	ands	r5, r2
 8026fa4:	ea85 0c04 	eor.w	ip, r5, r4
 8026fa8:	eb09 050c 	add.w	r5, r9, ip
 8026fac:	ea4f 29f2 	mov.w	r9, r2, ror #11
 8026fb0:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
 8026fb4:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8026fb8:	44a9      	add	r9, r5
 8026fba:	ea40 0601 	orr.w	r6, r0, r1
 8026fbe:	ea4f 3571 	mov.w	r5, r1, ror #13
 8026fc2:	eb07 0c09 	add.w	ip, r7, r9
 8026fc6:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
 8026fca:	ea00 0701 	and.w	r7, r0, r1
 8026fce:	ea06 060e 	and.w	r6, r6, lr
 8026fd2:	433e      	orrs	r6, r7
 8026fd4:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8026fd8:	f8da 7010 	ldr.w	r7, [sl, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8026fdc:	4435      	add	r5, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8026fde:	f8d8 6010 	ldr.w	r6, [r8, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8026fe2:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8026fe4:	443e      	add	r6, r7
 8026fe6:	ea83 0902 	eor.w	r9, r3, r2
 8026fea:	4434      	add	r4, r6
 8026fec:	ea09 090c 	and.w	r9, r9, ip
 8026ff0:	ea4f 26fc 	mov.w	r6, ip, ror #11
 8026ff4:	ea89 0903 	eor.w	r9, r9, r3
 8026ff8:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8026ffc:	444c      	add	r4, r9
 8026ffe:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 8027002:	4426      	add	r6, r4
 8027004:	ea41 0705 	orr.w	r7, r1, r5
 8027008:	ea4f 3475 	mov.w	r4, r5, ror #13
 802700c:	ea01 0905 	and.w	r9, r1, r5
 8027010:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8027014:	4007      	ands	r7, r0
 8027016:	ea47 0709 	orr.w	r7, r7, r9
 802701a:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 802701e:	443c      	add	r4, r7
 8027020:	4434      	add	r4, r6
 8027022:	44b6      	add	lr, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8027024:	f8d8 7014 	ldr.w	r7, [r8, #20]
 8027028:	f8da 6014 	ldr.w	r6, [sl, #20]
 802702c:	443e      	add	r6, r7
 802702e:	4433      	add	r3, r6
 8027030:	ea82 060c 	eor.w	r6, r2, ip
 8027034:	ea06 060e 	and.w	r6, r6, lr
 8027038:	4056      	eors	r6, r2
 802703a:	4433      	add	r3, r6
 802703c:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8027040:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8027044:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8027048:	441e      	add	r6, r3
 802704a:	ea45 0704 	orr.w	r7, r5, r4
 802704e:	ea4f 3374 	mov.w	r3, r4, ror #13
 8027052:	ea05 0904 	and.w	r9, r5, r4
 8027056:	400f      	ands	r7, r1
 8027058:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 802705c:	ea47 0709 	orr.w	r7, r7, r9
 8027060:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 8027064:	443b      	add	r3, r7
 8027066:	4433      	add	r3, r6
 8027068:	4430      	add	r0, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 802706a:	f8d8 7018 	ldr.w	r7, [r8, #24]
 802706e:	f8da 6018 	ldr.w	r6, [sl, #24]
 8027072:	ea8c 090e 	eor.w	r9, ip, lr
 8027076:	443e      	add	r6, r7
 8027078:	4432      	add	r2, r6
 802707a:	ea09 0900 	and.w	r9, r9, r0
 802707e:	ea4f 26f0 	mov.w	r6, r0, ror #11
 8027082:	ea89 090c 	eor.w	r9, r9, ip
 8027086:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 802708a:	444a      	add	r2, r9
 802708c:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 8027090:	4416      	add	r6, r2
 8027092:	ea44 0703 	orr.w	r7, r4, r3
 8027096:	ea4f 3273 	mov.w	r2, r3, ror #13
 802709a:	402f      	ands	r7, r5
 802709c:	ea04 0903 	and.w	r9, r4, r3
 80270a0:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 80270a4:	ea47 0709 	orr.w	r7, r7, r9
 80270a8:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 80270ac:	443a      	add	r2, r7
 80270ae:	4432      	add	r2, r6
 80270b0:	4431      	add	r1, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80270b2:	f8da 701c 	ldr.w	r7, [sl, #28]
 80270b6:	f8d8 601c 	ldr.w	r6, [r8, #28]
 80270ba:	ea8e 0900 	eor.w	r9, lr, r0
 80270be:	443e      	add	r6, r7
 80270c0:	ea09 0901 	and.w	r9, r9, r1
 80270c4:	ea4f 27f1 	mov.w	r7, r1, ror #11
 80270c8:	44b4      	add	ip, r6
 80270ca:	ea89 090e 	eor.w	r9, r9, lr
 80270ce:	ea87 17b1 	eor.w	r7, r7, r1, ror #6
 80270d2:	44cc      	add	ip, r9
 80270d4:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 80270d8:	44bc      	add	ip, r7
 80270da:	eb05 090c 	add.w	r9, r5, ip
 80270de:	ea4f 3772 	mov.w	r7, r2, ror #13
 80270e2:	ea43 0502 	orr.w	r5, r3, r2
 80270e6:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80270ea:	4025      	ands	r5, r4
 80270ec:	ea03 0602 	and.w	r6, r3, r2
 80270f0:	4335      	orrs	r5, r6
 80270f2:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80270f6:	442f      	add	r7, r5
    for( i = 0; i < 16; i += 8 )
 80270f8:	4d0b      	ldr	r5, [pc, #44]	; (8027128 <mbedtls_internal_sha256_process+0x2d0>)
 80270fa:	f108 0820 	add.w	r8, r8, #32
 80270fe:	4545      	cmp	r5, r8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8027100:	4467      	add	r7, ip
 8027102:	f10a 0a20 	add.w	sl, sl, #32
    for( i = 0; i < 16; i += 8 )
 8027106:	f47f aed9 	bne.w	8026ebc <mbedtls_internal_sha256_process+0x64>
 802710a:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 802710e:	e9cd 7206 	strd	r7, r2, [sp, #24]
 8027112:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8027116:	ad3e      	add	r5, sp, #248	; 0xf8
 8027118:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802711c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8027120:	9505      	str	r5, [sp, #20]
 8027122:	e003      	b.n	802712c <mbedtls_internal_sha256_process+0x2d4>
 8027124:	0802a414 	.word	0x0802a414
 8027128:	0802a454 	.word	0x0802a454
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802712c:	f8db 5038 	ldr.w	r5, [fp, #56]	; 0x38
 8027130:	f8db c004 	ldr.w	ip, [fp, #4]
 8027134:	f8db 6000 	ldr.w	r6, [fp]
 8027138:	ea4f 48f5 	mov.w	r8, r5, ror #19
 802713c:	ea88 4875 	eor.w	r8, r8, r5, ror #17
 8027140:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 8027144:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 8027148:	ea4f 4abc 	mov.w	sl, ip, ror #18
 802714c:	4435      	add	r5, r6
 802714e:	ea8a 1afc 	eor.w	sl, sl, ip, ror #7
 8027152:	ea8a 0adc 	eor.w	sl, sl, ip, lsr #3
 8027156:	44a8      	add	r8, r5
 8027158:	ea4f 26f9 	mov.w	r6, r9, ror #11
 802715c:	eb08 050a 	add.w	r5, r8, sl
 8027160:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 8027164:	9503      	str	r5, [sp, #12]
 8027166:	ea86 6579 	eor.w	r5, r6, r9, ror #25
 802716a:	ea80 0601 	eor.w	r6, r0, r1
 802716e:	ea06 0609 	and.w	r6, r6, r9
 8027172:	4046      	eors	r6, r0
 8027174:	442e      	add	r6, r5
 8027176:	9d00      	ldr	r5, [sp, #0]
 8027178:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 802717a:	4435      	add	r5, r6
 802717c:	9e03      	ldr	r6, [sp, #12]
 802717e:	f8cb 6040 	str.w	r6, [fp, #64]	; 0x40
 8027182:	4435      	add	r5, r6
 8027184:	44ae      	add	lr, r5
 8027186:	eb04 080e 	add.w	r8, r4, lr
 802718a:	ea47 0502 	orr.w	r5, r7, r2
 802718e:	ea4f 3477 	mov.w	r4, r7, ror #13
 8027192:	ea07 0602 	and.w	r6, r7, r2
 8027196:	ea84 04b7 	eor.w	r4, r4, r7, ror #2
 802719a:	401d      	ands	r5, r3
 802719c:	ea84 54b7 	eor.w	r4, r4, r7, ror #22
 80271a0:	4335      	orrs	r5, r6
 80271a2:	4425      	add	r5, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80271a4:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
 80271a8:	f8db 6008 	ldr.w	r6, [fp, #8]
 80271ac:	ea4f 4af4 	mov.w	sl, r4, ror #19
 80271b0:	ea8a 4a74 	eor.w	sl, sl, r4, ror #17
 80271b4:	ea8a 2a94 	eor.w	sl, sl, r4, lsr #10
 80271b8:	f8db 4028 	ldr.w	r4, [fp, #40]	; 0x28
 80271bc:	4464      	add	r4, ip
 80271be:	44a2      	add	sl, r4
 80271c0:	9c00      	ldr	r4, [sp, #0]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80271c2:	44ae      	add	lr, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80271c4:	ea4f 45b6 	mov.w	r5, r6, ror #18
 80271c8:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
 80271cc:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80271ce:	ea89 0c01 	eor.w	ip, r9, r1
 80271d2:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 80271d6:	4455      	add	r5, sl
 80271d8:	ea0c 0c08 	and.w	ip, ip, r8
 80271dc:	4404      	add	r4, r0
 80271de:	ea4f 20f8 	mov.w	r0, r8, ror #11
 80271e2:	442c      	add	r4, r5
 80271e4:	ea8c 0c01 	eor.w	ip, ip, r1
 80271e8:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
 80271ec:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 80271f0:	44a4      	add	ip, r4
 80271f2:	eb00 040c 	add.w	r4, r0, ip
 80271f6:	4423      	add	r3, r4
 80271f8:	9301      	str	r3, [sp, #4]
 80271fa:	ea4f 307e 	mov.w	r0, lr, ror #13
 80271fe:	ea47 030e 	orr.w	r3, r7, lr
 8027202:	ea07 0c0e 	and.w	ip, r7, lr
 8027206:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 802720a:	4013      	ands	r3, r2
 802720c:	ea43 030c 	orr.w	r3, r3, ip
 8027210:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8027214:	4418      	add	r0, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8027216:	9b03      	ldr	r3, [sp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8027218:	f8cb 5044 	str.w	r5, [fp, #68]	; 0x44
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802721c:	ea4f 4cf3 	mov.w	ip, r3, ror #19
 8027220:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8027224:	4420      	add	r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8027226:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 802722a:	f8db 400c 	ldr.w	r4, [fp, #12]
 802722e:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8027232:	441e      	add	r6, r3
 8027234:	ea4f 43b4 	mov.w	r3, r4, ror #18
 8027238:	ea83 13f4 	eor.w	r3, r3, r4, ror #7
 802723c:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 8027240:	4466      	add	r6, ip
 8027242:	441e      	add	r6, r3
 8027244:	9b01      	ldr	r3, [sp, #4]
 8027246:	f8cb 6048 	str.w	r6, [fp, #72]	; 0x48
 802724a:	ea89 0c08 	eor.w	ip, r9, r8
 802724e:	ea0c 0c03 	and.w	ip, ip, r3
 8027252:	9b00      	ldr	r3, [sp, #0]
 8027254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027256:	440b      	add	r3, r1
 8027258:	4433      	add	r3, r6
 802725a:	ea8c 0c09 	eor.w	ip, ip, r9
 802725e:	449c      	add	ip, r3
 8027260:	9b01      	ldr	r3, [sp, #4]
 8027262:	ea4f 21f3 	mov.w	r1, r3, ror #11
 8027266:	ea81 11b3 	eor.w	r1, r1, r3, ror #6
 802726a:	ea81 6173 	eor.w	r1, r1, r3, ror #25
 802726e:	eb01 030c 	add.w	r3, r1, ip
 8027272:	441a      	add	r2, r3
 8027274:	9202      	str	r2, [sp, #8]
 8027276:	ea4f 3170 	mov.w	r1, r0, ror #13
 802727a:	ea4e 0200 	orr.w	r2, lr, r0
 802727e:	ea0e 0c00 	and.w	ip, lr, r0
 8027282:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8027286:	403a      	ands	r2, r7
 8027288:	ea42 020c 	orr.w	r2, r2, ip
 802728c:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8027290:	4411      	add	r1, r2
 8027292:	4419      	add	r1, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8027294:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8027298:	f8db 2010 	ldr.w	r2, [fp, #16]
 802729c:	ea4f 4cf5 	mov.w	ip, r5, ror #19
 80272a0:	441c      	add	r4, r3
 80272a2:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
 80272a6:	9b01      	ldr	r3, [sp, #4]
 80272a8:	ea8c 2595 	eor.w	r5, ip, r5, lsr #10
 80272ac:	4425      	add	r5, r4
 80272ae:	ea88 0403 	eor.w	r4, r8, r3
 80272b2:	9b02      	ldr	r3, [sp, #8]
 80272b4:	401c      	ands	r4, r3
 80272b6:	9b00      	ldr	r3, [sp, #0]
 80272b8:	ea4f 4cb2 	mov.w	ip, r2, ror #18
 80272bc:	ea8c 1cf2 	eor.w	ip, ip, r2, ror #7
 80272c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80272c2:	ea8c 0cd2 	eor.w	ip, ip, r2, lsr #3
 80272c6:	44ac      	add	ip, r5
 80272c8:	444b      	add	r3, r9
 80272ca:	4463      	add	r3, ip
 80272cc:	ea84 0408 	eor.w	r4, r4, r8
 80272d0:	f8cb c04c 	str.w	ip, [fp, #76]	; 0x4c
 80272d4:	441c      	add	r4, r3
 80272d6:	9b02      	ldr	r3, [sp, #8]
 80272d8:	ea4f 25f3 	mov.w	r5, r3, ror #11
 80272dc:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 80272e0:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 80272e4:	192b      	adds	r3, r5, r4
 80272e6:	ea40 0501 	orr.w	r5, r0, r1
 80272ea:	ea00 0401 	and.w	r4, r0, r1
 80272ee:	ea05 050e 	and.w	r5, r5, lr
 80272f2:	4325      	orrs	r5, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80272f4:	ea4f 44f6 	mov.w	r4, r6, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80272f8:	ea4f 3971 	mov.w	r9, r1, ror #13
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80272fc:	ea84 4476 	eor.w	r4, r4, r6, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8027300:	ea89 09b1 	eor.w	r9, r9, r1, ror #2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8027304:	ea84 2696 	eor.w	r6, r4, r6, lsr #10
 8027308:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802730c:	eb07 0a03 	add.w	sl, r7, r3
 8027310:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8027314:	f8db 7014 	ldr.w	r7, [fp, #20]
 8027318:	4422      	add	r2, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802731a:	444d      	add	r5, r9
 802731c:	441d      	add	r5, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802731e:	4416      	add	r6, r2
 8027320:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8027324:	ea4f 42b7 	mov.w	r2, r7, ror #18
 8027328:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 802732c:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8027330:	4432      	add	r2, r6
 8027332:	ea83 0604 	eor.w	r6, r3, r4
 8027336:	ea06 060a 	and.w	r6, r6, sl
 802733a:	405e      	eors	r6, r3
 802733c:	9b00      	ldr	r3, [sp, #0]
 802733e:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 8027342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027344:	ea4f 24fa 	mov.w	r4, sl, ror #11
 8027348:	4413      	add	r3, r2
 802734a:	4443      	add	r3, r8
 802734c:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 8027350:	441e      	add	r6, r3
 8027352:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 8027356:	19a3      	adds	r3, r4, r6
 8027358:	ea41 0605 	orr.w	r6, r1, r5
 802735c:	ea4f 3475 	mov.w	r4, r5, ror #13
 8027360:	ea01 0805 	and.w	r8, r1, r5
 8027364:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8027368:	4006      	ands	r6, r0
 802736a:	ea46 0608 	orr.w	r6, r6, r8
 802736e:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 8027372:	4434      	add	r4, r6
 8027374:	441c      	add	r4, r3
 8027376:	449e      	add	lr, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8027378:	f8db 8018 	ldr.w	r8, [fp, #24]
 802737c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8027380:	ea4f 46fc 	mov.w	r6, ip, ror #19
 8027384:	ea86 467c 	eor.w	r6, r6, ip, ror #17
 8027388:	ea86 2c9c 	eor.w	ip, r6, ip, lsr #10
 802738c:	19de      	adds	r6, r3, r7
 802738e:	ea4f 43b8 	mov.w	r3, r8, ror #18
 8027392:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 8027396:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 802739a:	4466      	add	r6, ip
 802739c:	441e      	add	r6, r3
 802739e:	9b02      	ldr	r3, [sp, #8]
 80273a0:	9f01      	ldr	r7, [sp, #4]
 80273a2:	f8cb 6054 	str.w	r6, [fp, #84]	; 0x54
 80273a6:	ea83 0c0a 	eor.w	ip, r3, sl
 80273aa:	ea0c 0c0e 	and.w	ip, ip, lr
 80273ae:	ea8c 0c03 	eor.w	ip, ip, r3
 80273b2:	9b00      	ldr	r3, [sp, #0]
 80273b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80273b6:	4433      	add	r3, r6
 80273b8:	443b      	add	r3, r7
 80273ba:	449c      	add	ip, r3
 80273bc:	ea4f 23fe 	mov.w	r3, lr, ror #11
 80273c0:	ea83 13be 	eor.w	r3, r3, lr, ror #6
 80273c4:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 80273c8:	eb03 070c 	add.w	r7, r3, ip
 80273cc:	ea45 0c04 	orr.w	ip, r5, r4
 80273d0:	ea4f 3374 	mov.w	r3, r4, ror #13
 80273d4:	ea05 0904 	and.w	r9, r5, r4
 80273d8:	ea0c 0c01 	and.w	ip, ip, r1
 80273dc:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 80273e0:	ea4c 0c09 	orr.w	ip, ip, r9
 80273e4:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 80273e8:	4463      	add	r3, ip
 80273ea:	443b      	add	r3, r7
 80273ec:	4438      	add	r0, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80273ee:	f8db 701c 	ldr.w	r7, [fp, #28]
 80273f2:	9701      	str	r7, [sp, #4]
 80273f4:	ea4f 4cf2 	mov.w	ip, r2, ror #19
 80273f8:	f8db 703c 	ldr.w	r7, [fp, #60]	; 0x3c
 80273fc:	ea8c 4c72 	eor.w	ip, ip, r2, ror #17
 8027400:	ea8c 2292 	eor.w	r2, ip, r2, lsr #10
 8027404:	44b8      	add	r8, r7
 8027406:	4490      	add	r8, r2
 8027408:	9a01      	ldr	r2, [sp, #4]
 802740a:	9f01      	ldr	r7, [sp, #4]
 802740c:	ea4f 42b2 	mov.w	r2, r2, ror #18
 8027410:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 8027414:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8027418:	4490      	add	r8, r2
 802741a:	9a00      	ldr	r2, [sp, #0]
 802741c:	9f02      	ldr	r7, [sp, #8]
 802741e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8027420:	f8cb 8058 	str.w	r8, [fp, #88]	; 0x58
 8027424:	ea8a 090e 	eor.w	r9, sl, lr
 8027428:	4442      	add	r2, r8
 802742a:	ea09 0900 	and.w	r9, r9, r0
 802742e:	ea4f 2cf0 	mov.w	ip, r0, ror #11
 8027432:	ea89 090a 	eor.w	r9, r9, sl
 8027436:	443a      	add	r2, r7
 8027438:	ea8c 1cb0 	eor.w	ip, ip, r0, ror #6
 802743c:	444a      	add	r2, r9
 802743e:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
 8027442:	4494      	add	ip, r2
 8027444:	ea44 0803 	orr.w	r8, r4, r3
 8027448:	ea4f 3273 	mov.w	r2, r3, ror #13
 802744c:	ea08 0805 	and.w	r8, r8, r5
 8027450:	ea04 0903 	and.w	r9, r4, r3
 8027454:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8027458:	ea48 0809 	orr.w	r8, r8, r9
 802745c:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8027460:	4442      	add	r2, r8
 8027462:	4462      	add	r2, ip
 8027464:	4461      	add	r1, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8027466:	ea4f 4cf6 	mov.w	ip, r6, ror #19
 802746a:	ea8c 4c76 	eor.w	ip, ip, r6, ror #17
 802746e:	f8db 8020 	ldr.w	r8, [fp, #32]
 8027472:	9f03      	ldr	r7, [sp, #12]
 8027474:	ea8c 2c96 	eor.w	ip, ip, r6, lsr #10
 8027478:	9e01      	ldr	r6, [sp, #4]
 802747a:	443e      	add	r6, r7
 802747c:	ea4f 47b8 	mov.w	r7, r8, ror #18
 8027480:	ea87 17f8 	eor.w	r7, r7, r8, ror #7
 8027484:	ea87 08d8 	eor.w	r8, r7, r8, lsr #3
 8027488:	9f00      	ldr	r7, [sp, #0]
 802748a:	4466      	add	r6, ip
 802748c:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 802748e:	4446      	add	r6, r8
 8027490:	ea8e 0800 	eor.w	r8, lr, r0
 8027494:	4437      	add	r7, r6
 8027496:	ea08 0801 	and.w	r8, r8, r1
 802749a:	ea4f 2cf1 	mov.w	ip, r1, ror #11
 802749e:	4457      	add	r7, sl
 80274a0:	ea88 080e 	eor.w	r8, r8, lr
 80274a4:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
 80274a8:	44b8      	add	r8, r7
 80274aa:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 80274ae:	44c4      	add	ip, r8
 80274b0:	eb05 090c 	add.w	r9, r5, ip
 80274b4:	ea4f 3772 	mov.w	r7, r2, ror #13
 80274b8:	ea43 0502 	orr.w	r5, r3, r2
 80274bc:	f8cb 605c 	str.w	r6, [fp, #92]	; 0x5c
 80274c0:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80274c4:	4025      	ands	r5, r4
 80274c6:	ea03 0602 	and.w	r6, r3, r2
 80274ca:	4335      	orrs	r5, r6
 80274cc:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80274d0:	442f      	add	r7, r5
 80274d2:	9d00      	ldr	r5, [sp, #0]
 80274d4:	3520      	adds	r5, #32
 80274d6:	9500      	str	r5, [sp, #0]
    for( i = 16; i < 64; i += 8 )
 80274d8:	9d05      	ldr	r5, [sp, #20]
 80274da:	f10b 0b20 	add.w	fp, fp, #32
 80274de:	455d      	cmp	r5, fp
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80274e0:	4467      	add	r7, ip
    for( i = 16; i < 64; i += 8 )
 80274e2:	f47f ae23 	bne.w	802712c <mbedtls_internal_sha256_process+0x2d4>
 80274e6:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 80274ea:	e9cd 7206 	strd	r7, r2, [sp, #24]
 80274ee:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80274f2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80274f6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80274fa:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
 80274fc:	9a04      	ldr	r2, [sp, #16]
 80274fe:	6811      	ldr	r1, [r2, #0]
 8027500:	aa06      	add	r2, sp, #24
 8027502:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027506:	440a      	add	r2, r1
 8027508:	9904      	ldr	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 802750a:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 802750c:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
 8027510:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8027512:	9104      	str	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 8027514:	d1f2      	bne.n	80274fc <mbedtls_internal_sha256_process+0x6a4>

    return( 0 );
}
 8027516:	2000      	movs	r0, #0
 8027518:	b04f      	add	sp, #316	; 0x13c
 802751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802751e:	bf00      	nop

08027520 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8027520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027524:	4605      	mov	r5, r0
 8027526:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8027528:	4614      	mov	r4, r2
 802752a:	b912      	cbnz	r2, 8027532 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 802752c:	2000      	movs	r0, #0
}
 802752e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 8027532:	6803      	ldr	r3, [r0, #0]
 8027534:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 8027538:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
 802753a:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 802753c:	bf22      	ittt	cs
 802753e:	6843      	ldrcs	r3, [r0, #4]
 8027540:	3301      	addcs	r3, #1
 8027542:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 8027544:	b1a7      	cbz	r7, 8027570 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
 8027546:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 802754a:	4542      	cmp	r2, r8
 802754c:	d310      	bcc.n	8027570 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802754e:	f100 0928 	add.w	r9, r0, #40	; 0x28
 8027552:	4642      	mov	r2, r8
 8027554:	eb09 0007 	add.w	r0, r9, r7
 8027558:	f001 fa2f 	bl	80289ba <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802755c:	4649      	mov	r1, r9
 802755e:	4628      	mov	r0, r5
 8027560:	f7ff fc7a 	bl	8026e58 <mbedtls_internal_sha256_process>
 8027564:	2800      	cmp	r0, #0
 8027566:	d1e2      	bne.n	802752e <mbedtls_sha256_update_ret+0xe>
        input += fill;
 8027568:	4446      	add	r6, r8
        ilen  -= fill;
 802756a:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
 802756e:	4607      	mov	r7, r0
 8027570:	4426      	add	r6, r4
 8027572:	e005      	b.n	8027580 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8027574:	4628      	mov	r0, r5
 8027576:	f7ff fc6f 	bl	8026e58 <mbedtls_internal_sha256_process>
 802757a:	2800      	cmp	r0, #0
 802757c:	d1d7      	bne.n	802752e <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
 802757e:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8027580:	2c3f      	cmp	r4, #63	; 0x3f
 8027582:	eba6 0104 	sub.w	r1, r6, r4
 8027586:	d8f5      	bhi.n	8027574 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
 8027588:	2c00      	cmp	r4, #0
 802758a:	d0cf      	beq.n	802752c <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802758c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8027590:	4622      	mov	r2, r4
 8027592:	4438      	add	r0, r7
 8027594:	f001 fa11 	bl	80289ba <memcpy>
 8027598:	e7c8      	b.n	802752c <mbedtls_sha256_update_ret+0xc>

0802759a <mbedtls_sha256_finish_ret>:
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802759a:	6803      	ldr	r3, [r0, #0]
 802759c:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80275a0:	1c5a      	adds	r2, r3, #1
 80275a2:	4403      	add	r3, r0
{
 80275a4:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
 80275a6:	2a38      	cmp	r2, #56	; 0x38
{
 80275a8:	460d      	mov	r5, r1
 80275aa:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
 80275ae:	f04f 0180 	mov.w	r1, #128	; 0x80
{
 80275b2:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 80275b4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
 80275b8:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 80275bc:	d873      	bhi.n	80276a6 <mbedtls_sha256_finish_ret+0x10c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80275be:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80275c2:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80275c4:	f001 fa04 	bl	80289d0 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80275c8:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 80275cc:	0f5a      	lsrs	r2, r3, #29
 80275ce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80275d2:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 80275d4:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80275d6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80275da:	0c11      	lsrs	r1, r2, #16
 80275dc:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80275e0:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80275e4:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80275e6:	0e1a      	lsrs	r2, r3, #24
 80275e8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80275ec:	0c1a      	lsrs	r2, r3, #16
 80275ee:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80275f2:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80275f4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80275f8:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 80275fc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8027600:	4631      	mov	r1, r6
 8027602:	4620      	mov	r0, r4
 8027604:	f7ff fc28 	bl	8026e58 <mbedtls_internal_sha256_process>
 8027608:	2800      	cmp	r0, #0
 802760a:	d14b      	bne.n	80276a4 <mbedtls_sha256_finish_ret+0x10a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802760c:	7ae3      	ldrb	r3, [r4, #11]
 802760e:	702b      	strb	r3, [r5, #0]
 8027610:	8963      	ldrh	r3, [r4, #10]
 8027612:	706b      	strb	r3, [r5, #1]
 8027614:	68a3      	ldr	r3, [r4, #8]
 8027616:	0a1b      	lsrs	r3, r3, #8
 8027618:	70ab      	strb	r3, [r5, #2]
 802761a:	68a3      	ldr	r3, [r4, #8]
 802761c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802761e:	7be3      	ldrb	r3, [r4, #15]
 8027620:	712b      	strb	r3, [r5, #4]
 8027622:	89e3      	ldrh	r3, [r4, #14]
 8027624:	716b      	strb	r3, [r5, #5]
 8027626:	68e3      	ldr	r3, [r4, #12]
 8027628:	0a1b      	lsrs	r3, r3, #8
 802762a:	71ab      	strb	r3, [r5, #6]
 802762c:	68e3      	ldr	r3, [r4, #12]
 802762e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8027630:	7ce3      	ldrb	r3, [r4, #19]
 8027632:	722b      	strb	r3, [r5, #8]
 8027634:	8a63      	ldrh	r3, [r4, #18]
 8027636:	726b      	strb	r3, [r5, #9]
 8027638:	6923      	ldr	r3, [r4, #16]
 802763a:	0a1b      	lsrs	r3, r3, #8
 802763c:	72ab      	strb	r3, [r5, #10]
 802763e:	6923      	ldr	r3, [r4, #16]
 8027640:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8027642:	7de3      	ldrb	r3, [r4, #23]
 8027644:	732b      	strb	r3, [r5, #12]
 8027646:	8ae3      	ldrh	r3, [r4, #22]
 8027648:	736b      	strb	r3, [r5, #13]
 802764a:	6963      	ldr	r3, [r4, #20]
 802764c:	0a1b      	lsrs	r3, r3, #8
 802764e:	73ab      	strb	r3, [r5, #14]
 8027650:	6963      	ldr	r3, [r4, #20]
 8027652:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8027654:	7ee3      	ldrb	r3, [r4, #27]
 8027656:	742b      	strb	r3, [r5, #16]
 8027658:	8b63      	ldrh	r3, [r4, #26]
 802765a:	746b      	strb	r3, [r5, #17]
 802765c:	69a3      	ldr	r3, [r4, #24]
 802765e:	0a1b      	lsrs	r3, r3, #8
 8027660:	74ab      	strb	r3, [r5, #18]
 8027662:	69a3      	ldr	r3, [r4, #24]
 8027664:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8027666:	7fe3      	ldrb	r3, [r4, #31]
 8027668:	752b      	strb	r3, [r5, #20]
 802766a:	8be3      	ldrh	r3, [r4, #30]
 802766c:	756b      	strb	r3, [r5, #21]
 802766e:	69e3      	ldr	r3, [r4, #28]
 8027670:	0a1b      	lsrs	r3, r3, #8
 8027672:	75ab      	strb	r3, [r5, #22]
 8027674:	69e3      	ldr	r3, [r4, #28]
 8027676:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8027678:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802767c:	762b      	strb	r3, [r5, #24]
 802767e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8027680:	766b      	strb	r3, [r5, #25]
 8027682:	6a23      	ldr	r3, [r4, #32]
 8027684:	0a1b      	lsrs	r3, r3, #8
 8027686:	76ab      	strb	r3, [r5, #26]
 8027688:	6a23      	ldr	r3, [r4, #32]
 802768a:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 802768c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802768e:	b94b      	cbnz	r3, 80276a4 <mbedtls_sha256_finish_ret+0x10a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8027690:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8027694:	772b      	strb	r3, [r5, #28]
 8027696:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8027698:	776b      	strb	r3, [r5, #29]
 802769a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802769c:	0a1b      	lsrs	r3, r3, #8
 802769e:	77ab      	strb	r3, [r5, #30]
 80276a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80276a2:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 80276a4:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 80276a6:	2100      	movs	r1, #0
 80276a8:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80276ac:	f001 f990 	bl	80289d0 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80276b0:	4631      	mov	r1, r6
 80276b2:	4620      	mov	r0, r4
 80276b4:	f7ff fbd0 	bl	8026e58 <mbedtls_internal_sha256_process>
 80276b8:	2800      	cmp	r0, #0
 80276ba:	d1f3      	bne.n	80276a4 <mbedtls_sha256_finish_ret+0x10a>
        memset( ctx->buffer, 0, 56 );
 80276bc:	4601      	mov	r1, r0
 80276be:	2238      	movs	r2, #56	; 0x38
 80276c0:	4630      	mov	r0, r6
 80276c2:	e77f      	b.n	80275c4 <mbedtls_sha256_finish_ret+0x2a>

080276c4 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80276c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276c6:	b09d      	sub	sp, #116	; 0x74
 80276c8:	461c      	mov	r4, r3
 80276ca:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80276cc:	a801      	add	r0, sp, #4
{
 80276ce:	460f      	mov	r7, r1
 80276d0:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 80276d2:	f7ff fb61 	bl	8026d98 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80276d6:	4621      	mov	r1, r4
 80276d8:	a801      	add	r0, sp, #4
 80276da:	f7ff fb6b 	bl	8026db4 <mbedtls_sha256_starts_ret>
 80276de:	4604      	mov	r4, r0
 80276e0:	b958      	cbnz	r0, 80276fa <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80276e2:	463a      	mov	r2, r7
 80276e4:	4631      	mov	r1, r6
 80276e6:	a801      	add	r0, sp, #4
 80276e8:	f7ff ff1a 	bl	8027520 <mbedtls_sha256_update_ret>
 80276ec:	4604      	mov	r4, r0
 80276ee:	b920      	cbnz	r0, 80276fa <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80276f0:	4629      	mov	r1, r5
 80276f2:	a801      	add	r0, sp, #4
 80276f4:	f7ff ff51 	bl	802759a <mbedtls_sha256_finish_ret>
 80276f8:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80276fa:	a801      	add	r0, sp, #4
 80276fc:	f7ff fb50 	bl	8026da0 <mbedtls_sha256_free>

    return( ret );
}
 8027700:	4620      	mov	r0, r4
 8027702:	b01d      	add	sp, #116	; 0x74
 8027704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08027708 <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 8027708:	2300      	movs	r3, #0
{
 802770a:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 802770c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 802770e:	260a      	movs	r6, #10
        if( ( **p < '0') || ( **p > '9' ) )
 8027710:	6805      	ldr	r5, [r0, #0]
 8027712:	782b      	ldrb	r3, [r5, #0]
 8027714:	3b30      	subs	r3, #48	; 0x30
 8027716:	2b09      	cmp	r3, #9
 8027718:	d80d      	bhi.n	8027736 <x509_parse_int+0x2e>
        *res *= 10;
 802771a:	6813      	ldr	r3, [r2, #0]
 802771c:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 8027720:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 8027722:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8027724:	6003      	str	r3, [r0, #0]
 8027726:	782b      	ldrb	r3, [r5, #0]
 8027728:	3b30      	subs	r3, #48	; 0x30
 802772a:	4423      	add	r3, r4
    for( ; n > 0; --n )
 802772c:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
 802772e:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 8027730:	d1ee      	bne.n	8027710 <x509_parse_int+0x8>
    }

    return( 0 );
 8027732:	4608      	mov	r0, r1
}
 8027734:	bd70      	pop	{r4, r5, r6, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8027736:	4801      	ldr	r0, [pc, #4]	; (802773c <x509_parse_int+0x34>)
 8027738:	e7fc      	b.n	8027734 <x509_parse_int+0x2c>
 802773a:	bf00      	nop
 802773c:	ffffdc00 	.word	0xffffdc00

08027740 <mbedtls_x509_get_serial>:
{
 8027740:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 8027742:	6803      	ldr	r3, [r0, #0]
{
 8027744:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 8027746:	1aca      	subs	r2, r1, r3
 8027748:	2a00      	cmp	r2, #0
{
 802774a:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 802774c:	dd17      	ble.n	802777e <mbedtls_x509_get_serial+0x3e>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 802774e:	781a      	ldrb	r2, [r3, #0]
 8027750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8027754:	2a02      	cmp	r2, #2
 8027756:	d114      	bne.n	8027782 <mbedtls_x509_get_serial+0x42>
    serial->tag = *(*p)++;
 8027758:	1c5a      	adds	r2, r3, #1
 802775a:	6002      	str	r2, [r0, #0]
 802775c:	462a      	mov	r2, r5
 802775e:	781b      	ldrb	r3, [r3, #0]
 8027760:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8027764:	f7fc f852 	bl	802380c <mbedtls_asn1_get_len>
 8027768:	b110      	cbz	r0, 8027770 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 802776a:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 802776e:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 8027770:	6823      	ldr	r3, [r4, #0]
 8027772:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 8027774:	6823      	ldr	r3, [r4, #0]
 8027776:	686a      	ldr	r2, [r5, #4]
 8027778:	4413      	add	r3, r2
 802777a:	6023      	str	r3, [r4, #0]
    return( 0 );
 802777c:	e7f7      	b.n	802776e <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 802777e:	4802      	ldr	r0, [pc, #8]	; (8027788 <mbedtls_x509_get_serial+0x48>)
 8027780:	e7f5      	b.n	802776e <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8027782:	4802      	ldr	r0, [pc, #8]	; (802778c <mbedtls_x509_get_serial+0x4c>)
 8027784:	e7f3      	b.n	802776e <mbedtls_x509_get_serial+0x2e>
 8027786:	bf00      	nop
 8027788:	ffffdd20 	.word	0xffffdd20
 802778c:	ffffdd1e 	.word	0xffffdd1e

08027790 <mbedtls_x509_get_alg>:
{
 8027790:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8027792:	f7fc f95a 	bl	8023a4a <mbedtls_asn1_get_alg>
 8027796:	b108      	cbz	r0, 802779c <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8027798:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 802779c:	bd08      	pop	{r3, pc}
	...

080277a0 <mbedtls_x509_get_name>:
{
 80277a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80277a4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8027894 <mbedtls_x509_get_name+0xf4>
{
 80277a8:	4604      	mov	r4, r0
 80277aa:	460f      	mov	r7, r1
 80277ac:	4691      	mov	r9, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80277ae:	2331      	movs	r3, #49	; 0x31
 80277b0:	466a      	mov	r2, sp
 80277b2:	4639      	mov	r1, r7
 80277b4:	4620      	mov	r0, r4
 80277b6:	f7fc f870 	bl	802389a <mbedtls_asn1_get_tag>
 80277ba:	b120      	cbz	r0, 80277c6 <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80277bc:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 80277c0:	b003      	add	sp, #12
 80277c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        end_set  = *p + set_len;
 80277c6:	6826      	ldr	r6, [r4, #0]
 80277c8:	9b00      	ldr	r3, [sp, #0]
 80277ca:	464d      	mov	r5, r9
 80277cc:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80277ce:	2330      	movs	r3, #48	; 0x30
 80277d0:	aa01      	add	r2, sp, #4
 80277d2:	4631      	mov	r1, r6
 80277d4:	4620      	mov	r0, r4
 80277d6:	f7fc f860 	bl	802389a <mbedtls_asn1_get_tag>
 80277da:	b188      	cbz	r0, 8027800 <mbedtls_x509_get_name+0x60>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80277dc:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 80277e0:	2800      	cmp	r0, #0
 80277e2:	d1ed      	bne.n	80277c0 <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
 80277e4:	6823      	ldr	r3, [r4, #0]
 80277e6:	42b3      	cmp	r3, r6
 80277e8:	d041      	beq.n	802786e <mbedtls_x509_get_name+0xce>
            cur->next_merged = 1;
 80277ea:	2001      	movs	r0, #1
 80277ec:	7728      	strb	r0, [r5, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80277ee:	2120      	movs	r1, #32
 80277f0:	f7ff fabe 	bl	8026d70 <mbedtls_calloc>
 80277f4:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
 80277f6:	4605      	mov	r5, r0
 80277f8:	2800      	cmp	r0, #0
 80277fa:	d1e8      	bne.n	80277ce <mbedtls_x509_get_name+0x2e>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80277fc:	4822      	ldr	r0, [pc, #136]	; (8027888 <mbedtls_x509_get_name+0xe8>)
 80277fe:	e7df      	b.n	80277c0 <mbedtls_x509_get_name+0x20>
    if( ( end - *p ) < 1 )
 8027800:	6823      	ldr	r3, [r4, #0]
 8027802:	1af2      	subs	r2, r6, r3
 8027804:	2a00      	cmp	r2, #0
 8027806:	dc01      	bgt.n	802780c <mbedtls_x509_get_name+0x6c>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 8027808:	4820      	ldr	r0, [pc, #128]	; (802788c <mbedtls_x509_get_name+0xec>)
 802780a:	e7d9      	b.n	80277c0 <mbedtls_x509_get_name+0x20>
    oid->tag = **p;
 802780c:	462a      	mov	r2, r5
 802780e:	781b      	ldrb	r3, [r3, #0]
 8027810:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8027814:	4631      	mov	r1, r6
 8027816:	2306      	movs	r3, #6
 8027818:	4620      	mov	r0, r4
 802781a:	f7fc f83e 	bl	802389a <mbedtls_asn1_get_tag>
 802781e:	2800      	cmp	r0, #0
 8027820:	d1dc      	bne.n	80277dc <mbedtls_x509_get_name+0x3c>
    oid->p = *p;
 8027822:	6823      	ldr	r3, [r4, #0]
 8027824:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8027826:	6820      	ldr	r0, [r4, #0]
 8027828:	6869      	ldr	r1, [r5, #4]
 802782a:	1843      	adds	r3, r0, r1
    if( ( end - *p ) < 1 )
 802782c:	1af2      	subs	r2, r6, r3
 802782e:	2a00      	cmp	r2, #0
    *p += oid->len;
 8027830:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 8027832:	dde9      	ble.n	8027808 <mbedtls_x509_get_name+0x68>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8027834:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8027836:	2a1e      	cmp	r2, #30
 8027838:	d817      	bhi.n	802786a <mbedtls_x509_get_name+0xca>
 802783a:	fa28 f202 	lsr.w	r2, r8, r2
 802783e:	07d2      	lsls	r2, r2, #31
 8027840:	d513      	bpl.n	802786a <mbedtls_x509_get_name+0xca>
    val->tag = *(*p)++;
 8027842:	3301      	adds	r3, #1
 8027844:	6023      	str	r3, [r4, #0]
 8027846:	5c43      	ldrb	r3, [r0, r1]
 8027848:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 802784a:	f105 0210 	add.w	r2, r5, #16
 802784e:	4631      	mov	r1, r6
 8027850:	4620      	mov	r0, r4
 8027852:	f7fb ffdb 	bl	802380c <mbedtls_asn1_get_len>
 8027856:	2800      	cmp	r0, #0
 8027858:	d1c0      	bne.n	80277dc <mbedtls_x509_get_name+0x3c>
    val->p = *p;
 802785a:	6823      	ldr	r3, [r4, #0]
 802785c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 802785e:	6823      	ldr	r3, [r4, #0]
 8027860:	692a      	ldr	r2, [r5, #16]
 8027862:	4413      	add	r3, r2
 8027864:	6023      	str	r3, [r4, #0]
    cur->next = NULL;
 8027866:	61a8      	str	r0, [r5, #24]
 8027868:	e7bc      	b.n	80277e4 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 802786a:	4809      	ldr	r0, [pc, #36]	; (8027890 <mbedtls_x509_get_name+0xf0>)
 802786c:	e7a8      	b.n	80277c0 <mbedtls_x509_get_name+0x20>
        if( *p == end )
 802786e:	42be      	cmp	r6, r7
 8027870:	d008      	beq.n	8027884 <mbedtls_x509_get_name+0xe4>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8027872:	2120      	movs	r1, #32
 8027874:	2001      	movs	r0, #1
 8027876:	f7ff fa7b 	bl	8026d70 <mbedtls_calloc>
 802787a:	4681      	mov	r9, r0
 802787c:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
 802787e:	2800      	cmp	r0, #0
 8027880:	d195      	bne.n	80277ae <mbedtls_x509_get_name+0xe>
 8027882:	e7bb      	b.n	80277fc <mbedtls_x509_get_name+0x5c>
            return( 0 );
 8027884:	2000      	movs	r0, #0
 8027886:	e79b      	b.n	80277c0 <mbedtls_x509_get_name+0x20>
 8027888:	ffffd780 	.word	0xffffd780
 802788c:	ffffdc20 	.word	0xffffdc20
 8027890:	ffffdc1e 	.word	0xffffdc1e
 8027894:	50581008 	.word	0x50581008

08027898 <mbedtls_x509_get_time>:
{
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8027898:	6803      	ldr	r3, [r0, #0]
{
 802789a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802789c:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 802789e:	1aca      	subs	r2, r1, r3
 80278a0:	2a00      	cmp	r2, #0
{
 80278a2:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 80278a4:	f340 809f 	ble.w	80279e6 <mbedtls_x509_get_time+0x14e>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80278a8:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80278aa:	2a17      	cmp	r2, #23
 80278ac:	d00e      	beq.n	80278cc <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80278ae:	2a18      	cmp	r2, #24
 80278b0:	f040 809b 	bne.w	80279ea <mbedtls_x509_get_time+0x152>
        year_len = 4;
 80278b4:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80278b6:	3301      	adds	r3, #1
 80278b8:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80278ba:	aa01      	add	r2, sp, #4
 80278bc:	4628      	mov	r0, r5
 80278be:	f7fb ffa5 	bl	802380c <mbedtls_asn1_get_len>

    if( ret != 0 )
 80278c2:	b128      	cbz	r0, 80278d0 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80278c4:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 80278c8:	b003      	add	sp, #12
 80278ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 80278cc:	2702      	movs	r7, #2
 80278ce:	e7f2      	b.n	80278b6 <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 80278d0:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
 80278d2:	f107 0308 	add.w	r3, r7, #8
 80278d6:	429e      	cmp	r6, r3
 80278d8:	d37d      	bcc.n	80279d6 <mbedtls_x509_get_time+0x13e>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80278da:	4622      	mov	r2, r4
 80278dc:	4639      	mov	r1, r7
 80278de:	4628      	mov	r0, r5
 80278e0:	f7ff ff12 	bl	8027708 <x509_parse_int>
 80278e4:	2800      	cmp	r0, #0
 80278e6:	d1ef      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 80278e8:	2f02      	cmp	r7, #2
 80278ea:	d108      	bne.n	80278fe <mbedtls_x509_get_time+0x66>
        if ( tm->year < 50 )
 80278ec:	6823      	ldr	r3, [r4, #0]
 80278ee:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80278f0:	bfdc      	itt	le
 80278f2:	3364      	addle	r3, #100	; 0x64
 80278f4:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 80278f6:	6823      	ldr	r3, [r4, #0]
 80278f8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80278fc:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80278fe:	1d22      	adds	r2, r4, #4
 8027900:	2102      	movs	r1, #2
 8027902:	4628      	mov	r0, r5
 8027904:	f7ff ff00 	bl	8027708 <x509_parse_int>
 8027908:	2800      	cmp	r0, #0
 802790a:	d1dd      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 802790c:	f104 0208 	add.w	r2, r4, #8
 8027910:	2102      	movs	r1, #2
 8027912:	4628      	mov	r0, r5
 8027914:	f7ff fef8 	bl	8027708 <x509_parse_int>
 8027918:	2800      	cmp	r0, #0
 802791a:	d1d5      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 802791c:	f104 020c 	add.w	r2, r4, #12
 8027920:	2102      	movs	r1, #2
 8027922:	4628      	mov	r0, r5
 8027924:	f7ff fef0 	bl	8027708 <x509_parse_int>
 8027928:	2800      	cmp	r0, #0
 802792a:	d1cd      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 802792c:	f104 0210 	add.w	r2, r4, #16
 8027930:	2102      	movs	r1, #2
 8027932:	4628      	mov	r0, r5
 8027934:	f7ff fee8 	bl	8027708 <x509_parse_int>
 8027938:	2800      	cmp	r0, #0
 802793a:	d1c5      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 802793c:	1bf6      	subs	r6, r6, r7
 802793e:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 8027942:	2b01      	cmp	r3, #1
 8027944:	d947      	bls.n	80279d6 <mbedtls_x509_get_time+0x13e>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8027946:	f104 0214 	add.w	r2, r4, #20
 802794a:	2102      	movs	r1, #2
 802794c:	4628      	mov	r0, r5
 802794e:	f7ff fedb 	bl	8027708 <x509_parse_int>
 8027952:	2800      	cmp	r0, #0
 8027954:	d1b8      	bne.n	80278c8 <mbedtls_x509_get_time+0x30>
        len -= 2;
 8027956:	3e0a      	subs	r6, #10
    if ( 1 == len && 'Z' == **p )
 8027958:	2e01      	cmp	r6, #1
 802795a:	d13a      	bne.n	80279d2 <mbedtls_x509_get_time+0x13a>
 802795c:	682b      	ldr	r3, [r5, #0]
 802795e:	781a      	ldrb	r2, [r3, #0]
 8027960:	2a5a      	cmp	r2, #90	; 0x5a
 8027962:	d138      	bne.n	80279d6 <mbedtls_x509_get_time+0x13e>
        (*p)++;
 8027964:	3301      	adds	r3, #1
 8027966:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 8027968:	6823      	ldr	r3, [r4, #0]
 802796a:	f242 720f 	movw	r2, #9999	; 0x270f
 802796e:	4293      	cmp	r3, r2
 8027970:	d831      	bhi.n	80279d6 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 23,   t->hour );
 8027972:	68e2      	ldr	r2, [r4, #12]
 8027974:	2a17      	cmp	r2, #23
 8027976:	d82e      	bhi.n	80279d6 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->min  );
 8027978:	6922      	ldr	r2, [r4, #16]
 802797a:	2a3b      	cmp	r2, #59	; 0x3b
 802797c:	d82b      	bhi.n	80279d6 <mbedtls_x509_get_time+0x13e>
    CHECK_RANGE( 0, 59,   t->sec  );
 802797e:	6962      	ldr	r2, [r4, #20]
 8027980:	2a3b      	cmp	r2, #59	; 0x3b
 8027982:	d828      	bhi.n	80279d6 <mbedtls_x509_get_time+0x13e>
 8027984:	6861      	ldr	r1, [r4, #4]
 8027986:	290c      	cmp	r1, #12
 8027988:	d825      	bhi.n	80279d6 <mbedtls_x509_get_time+0x13e>
 802798a:	2201      	movs	r2, #1
 802798c:	408a      	lsls	r2, r1
 802798e:	f241 51aa 	movw	r1, #5546	; 0x15aa
 8027992:	420a      	tst	r2, r1
 8027994:	d121      	bne.n	80279da <mbedtls_x509_get_time+0x142>
 8027996:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 802799a:	d120      	bne.n	80279de <mbedtls_x509_get_time+0x146>
 802799c:	0751      	lsls	r1, r2, #29
 802799e:	d51a      	bpl.n	80279d6 <mbedtls_x509_get_time+0x13e>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80279a0:	079a      	lsls	r2, r3, #30
 80279a2:	d105      	bne.n	80279b0 <mbedtls_x509_get_time+0x118>
 80279a4:	2164      	movs	r1, #100	; 0x64
 80279a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80279aa:	fb01 3212 	mls	r2, r1, r2, r3
 80279ae:	b9c2      	cbnz	r2, 80279e2 <mbedtls_x509_get_time+0x14a>
                !( t->year % 400 ) )
 80279b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80279b4:	fb93 f2f1 	sdiv	r2, r3, r1
 80279b8:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
 80279bc:	2b00      	cmp	r3, #0
 80279be:	bf0c      	ite	eq
 80279c0:	231d      	moveq	r3, #29
 80279c2:	231c      	movne	r3, #28
    CHECK_RANGE( 1, month_len, t->day );
 80279c4:	68a2      	ldr	r2, [r4, #8]
 80279c6:	2a00      	cmp	r2, #0
 80279c8:	dd05      	ble.n	80279d6 <mbedtls_x509_get_time+0x13e>
 80279ca:	429a      	cmp	r2, r3
 80279cc:	f77f af7c 	ble.w	80278c8 <mbedtls_x509_get_time+0x30>
 80279d0:	e001      	b.n	80279d6 <mbedtls_x509_get_time+0x13e>
    if ( 0 != len )
 80279d2:	2e00      	cmp	r6, #0
 80279d4:	d0c8      	beq.n	8027968 <mbedtls_x509_get_time+0xd0>
    CHECK_RANGE( 1, month_len, t->day );
 80279d6:	4806      	ldr	r0, [pc, #24]	; (80279f0 <mbedtls_x509_get_time+0x158>)
 80279d8:	e776      	b.n	80278c8 <mbedtls_x509_get_time+0x30>
            month_len = 31;
 80279da:	231f      	movs	r3, #31
 80279dc:	e7f2      	b.n	80279c4 <mbedtls_x509_get_time+0x12c>
            month_len = 30;
 80279de:	231e      	movs	r3, #30
 80279e0:	e7f0      	b.n	80279c4 <mbedtls_x509_get_time+0x12c>
                month_len = 29;
 80279e2:	231d      	movs	r3, #29
 80279e4:	e7ee      	b.n	80279c4 <mbedtls_x509_get_time+0x12c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80279e6:	4803      	ldr	r0, [pc, #12]	; (80279f4 <mbedtls_x509_get_time+0x15c>)
 80279e8:	e76e      	b.n	80278c8 <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80279ea:	4803      	ldr	r0, [pc, #12]	; (80279f8 <mbedtls_x509_get_time+0x160>)
 80279ec:	e76c      	b.n	80278c8 <mbedtls_x509_get_time+0x30>
 80279ee:	bf00      	nop
 80279f0:	ffffdc00 	.word	0xffffdc00
 80279f4:	ffffdba0 	.word	0xffffdba0
 80279f8:	ffffdb9e 	.word	0xffffdb9e

080279fc <mbedtls_x509_get_sig>:
{
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80279fc:	6803      	ldr	r3, [r0, #0]
{
 80279fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a00:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 8027a02:	1aca      	subs	r2, r1, r3
 8027a04:	2a00      	cmp	r2, #0
{
 8027a06:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 8027a08:	dd11      	ble.n	8027a2e <mbedtls_x509_get_sig+0x32>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8027a0a:	aa01      	add	r2, sp, #4
    tag_type = **p;
 8027a0c:	781e      	ldrb	r6, [r3, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8027a0e:	f7fb ffca 	bl	80239a6 <mbedtls_asn1_get_bitstring_null>
 8027a12:	b118      	cbz	r0, 8027a1c <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8027a14:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8027a18:	b002      	add	sp, #8
 8027a1a:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 8027a1c:	6823      	ldr	r3, [r4, #0]
 8027a1e:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 8027a20:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 8027a22:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 8027a24:	602e      	str	r6, [r5, #0]
    *p += len;
 8027a26:	4413      	add	r3, r2
    sig->len = len;
 8027a28:	606a      	str	r2, [r5, #4]
    *p += len;
 8027a2a:	6023      	str	r3, [r4, #0]
    return( 0 );
 8027a2c:	e7f4      	b.n	8027a18 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 8027a2e:	4801      	ldr	r0, [pc, #4]	; (8027a34 <mbedtls_x509_get_sig+0x38>)
 8027a30:	e7f2      	b.n	8027a18 <mbedtls_x509_get_sig+0x1c>
 8027a32:	bf00      	nop
 8027a34:	ffffdb20 	.word	0xffffdb20

08027a38 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 8027a38:	b510      	push	{r4, lr}
 8027a3a:	460c      	mov	r4, r1
 8027a3c:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8027a3e:	9a02      	ldr	r2, [sp, #8]
 8027a40:	6812      	ldr	r2, [r2, #0]
 8027a42:	b982      	cbnz	r2, 8027a66 <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8027a44:	461a      	mov	r2, r3
 8027a46:	f7fe fe09 	bl	802665c <mbedtls_oid_get_sig_alg>
 8027a4a:	b110      	cbz	r0, 8027a52 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8027a4c:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
}
 8027a50:	bd10      	pop	{r4, pc}
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8027a52:	6823      	ldr	r3, [r4, #0]
 8027a54:	2b05      	cmp	r3, #5
 8027a56:	d000      	beq.n	8027a5a <mbedtls_x509_get_sig_alg+0x22>
 8027a58:	b93b      	cbnz	r3, 8027a6a <mbedtls_x509_get_sig_alg+0x32>
 8027a5a:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8027a5c:	4b04      	ldr	r3, [pc, #16]	; (8027a70 <mbedtls_x509_get_sig_alg+0x38>)
 8027a5e:	2a00      	cmp	r2, #0
 8027a60:	bf18      	it	ne
 8027a62:	4618      	movne	r0, r3
 8027a64:	e7f4      	b.n	8027a50 <mbedtls_x509_get_sig_alg+0x18>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8027a66:	4803      	ldr	r0, [pc, #12]	; (8027a74 <mbedtls_x509_get_sig_alg+0x3c>)
 8027a68:	e7f2      	b.n	8027a50 <mbedtls_x509_get_sig_alg+0x18>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8027a6a:	4801      	ldr	r0, [pc, #4]	; (8027a70 <mbedtls_x509_get_sig_alg+0x38>)
 8027a6c:	e7f0      	b.n	8027a50 <mbedtls_x509_get_sig_alg+0x18>
 8027a6e:	bf00      	nop
 8027a70:	ffffdd00 	.word	0xffffdd00
 8027a74:	ffffd800 	.word	0xffffd800

08027a78 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8027a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a7a:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 8027a7c:	6802      	ldr	r2, [r0, #0]
 8027a7e:	428a      	cmp	r2, r1
{
 8027a80:	4604      	mov	r4, r0
    if( *p == end )
 8027a82:	d01d      	beq.n	8027ac0 <mbedtls_x509_get_ext+0x48>
        return( 0 );

    ext->tag = **p;
 8027a84:	7815      	ldrb	r5, [r2, #0]
 8027a86:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8027a88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 8027a8c:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8027a90:	f7fb ff03 	bl	802389a <mbedtls_asn1_get_tag>
 8027a94:	b968      	cbnz	r0, 8027ab2 <mbedtls_x509_get_ext+0x3a>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8027a96:	6823      	ldr	r3, [r4, #0]
 8027a98:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 8027a9a:	6825      	ldr	r5, [r4, #0]
 8027a9c:	6873      	ldr	r3, [r6, #4]
 8027a9e:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8027aa0:	aa01      	add	r2, sp, #4
 8027aa2:	2330      	movs	r3, #48	; 0x30
 8027aa4:	4629      	mov	r1, r5
 8027aa6:	4620      	mov	r0, r4
 8027aa8:	f7fb fef7 	bl	802389a <mbedtls_asn1_get_tag>
 8027aac:	b118      	cbz	r0, 8027ab6 <mbedtls_x509_get_ext+0x3e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8027aae:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8027ab2:	b002      	add	sp, #8
 8027ab4:	bd70      	pop	{r4, r5, r6, pc}
    if( end != *p + len )
 8027ab6:	6823      	ldr	r3, [r4, #0]
 8027ab8:	9a01      	ldr	r2, [sp, #4]
 8027aba:	4413      	add	r3, r2
 8027abc:	429d      	cmp	r5, r3
 8027abe:	d101      	bne.n	8027ac4 <mbedtls_x509_get_ext+0x4c>
    return( 0 );
 8027ac0:	2000      	movs	r0, #0
 8027ac2:	e7f6      	b.n	8027ab2 <mbedtls_x509_get_ext+0x3a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8027ac4:	4800      	ldr	r0, [pc, #0]	; (8027ac8 <mbedtls_x509_get_ext+0x50>)
 8027ac6:	e7f4      	b.n	8027ab2 <mbedtls_x509_get_ext+0x3a>
 8027ac8:	ffffda9a 	.word	0xffffda9a

08027acc <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
    ((void) to);
    return( 0 );
}
 8027acc:	2000      	movs	r0, #0
 8027ace:	4770      	bx	lr

08027ad0 <mbedtls_x509_time_is_future>:
 8027ad0:	2000      	movs	r0, #0
 8027ad2:	4770      	bx	lr

08027ad4 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8027ad4:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 8027ad6:	2400      	movs	r4, #0
 8027ad8:	4294      	cmp	r4, r2
 8027ada:	d101      	bne.n	8027ae0 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 8027adc:	2000      	movs	r0, #0
}
 8027ade:	bd70      	pop	{r4, r5, r6, pc}
        diff = n1[i] ^ n2[i];
 8027ae0:	5d03      	ldrb	r3, [r0, r4]
 8027ae2:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 8027ae4:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
 8027ae6:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
 8027aea:	d006      	beq.n	8027afa <x509_memcasecmp+0x26>
        if( diff == 32 &&
 8027aec:	2e20      	cmp	r6, #32
 8027aee:	d106      	bne.n	8027afe <x509_memcasecmp+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 8027af0:	f023 0320 	bic.w	r3, r3, #32
 8027af4:	3b41      	subs	r3, #65	; 0x41
 8027af6:	2b19      	cmp	r3, #25
 8027af8:	d801      	bhi.n	8027afe <x509_memcasecmp+0x2a>
    for( i = 0; i < len; i++ )
 8027afa:	3401      	adds	r4, #1
 8027afc:	e7ec      	b.n	8027ad8 <x509_memcasecmp+0x4>
        return( -1 );
 8027afe:	f04f 30ff 	mov.w	r0, #4294967295
 8027b02:	e7ec      	b.n	8027ade <x509_memcasecmp+0xa>

08027b04 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8027b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b08:	4605      	mov	r5, r0
 8027b0a:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 8027b0c:	b92d      	cbnz	r5, 8027b1a <x509_name_cmp+0x16>
 8027b0e:	1c20      	adds	r0, r4, #0
 8027b10:	bf18      	it	ne
 8027b12:	2001      	movne	r0, #1
 8027b14:	4240      	negs	r0, r0
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8027b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( a == NULL || b == NULL )
 8027b1a:	2c00      	cmp	r4, #0
 8027b1c:	d036      	beq.n	8027b8c <x509_name_cmp+0x88>
        if( a->oid.tag != b->oid.tag ||
 8027b1e:	682a      	ldr	r2, [r5, #0]
 8027b20:	6823      	ldr	r3, [r4, #0]
 8027b22:	429a      	cmp	r2, r3
 8027b24:	d132      	bne.n	8027b8c <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 8027b26:	686a      	ldr	r2, [r5, #4]
        if( a->oid.tag != b->oid.tag ||
 8027b28:	6863      	ldr	r3, [r4, #4]
 8027b2a:	429a      	cmp	r2, r3
 8027b2c:	d12e      	bne.n	8027b8c <x509_name_cmp+0x88>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8027b2e:	68a1      	ldr	r1, [r4, #8]
 8027b30:	68a8      	ldr	r0, [r5, #8]
 8027b32:	f000 ff33 	bl	802899c <memcmp>
            a->oid.len != b->oid.len ||
 8027b36:	bb48      	cbnz	r0, 8027b8c <x509_name_cmp+0x88>
    if( a->tag == b->tag &&
 8027b38:	68ef      	ldr	r7, [r5, #12]
 8027b3a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8027b3e:	4547      	cmp	r7, r8
 8027b40:	d110      	bne.n	8027b64 <x509_name_cmp+0x60>
        a->len == b->len &&
 8027b42:	692e      	ldr	r6, [r5, #16]
    if( a->tag == b->tag &&
 8027b44:	6923      	ldr	r3, [r4, #16]
 8027b46:	429e      	cmp	r6, r3
 8027b48:	d12a      	bne.n	8027ba0 <x509_name_cmp+0x9c>
        memcmp( a->p, b->p, b->len ) == 0 )
 8027b4a:	4632      	mov	r2, r6
 8027b4c:	6961      	ldr	r1, [r4, #20]
 8027b4e:	6968      	ldr	r0, [r5, #20]
 8027b50:	f000 ff24 	bl	802899c <memcmp>
        a->len == b->len &&
 8027b54:	b9f8      	cbnz	r0, 8027b96 <x509_name_cmp+0x92>
        if( a->next_merged != b->next_merged )
 8027b56:	7f2a      	ldrb	r2, [r5, #28]
 8027b58:	7f23      	ldrb	r3, [r4, #28]
 8027b5a:	429a      	cmp	r2, r3
 8027b5c:	d116      	bne.n	8027b8c <x509_name_cmp+0x88>
        a = a->next;
 8027b5e:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8027b60:	69a4      	ldr	r4, [r4, #24]
 8027b62:	e7d3      	b.n	8027b0c <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027b64:	2f0c      	cmp	r7, #12
 8027b66:	d001      	beq.n	8027b6c <x509_name_cmp+0x68>
 8027b68:	2f13      	cmp	r7, #19
 8027b6a:	d10f      	bne.n	8027b8c <x509_name_cmp+0x88>
 8027b6c:	f1b8 0f0c 	cmp.w	r8, #12
 8027b70:	d002      	beq.n	8027b78 <x509_name_cmp+0x74>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027b72:	f1b8 0f13 	cmp.w	r8, #19
 8027b76:	d109      	bne.n	8027b8c <x509_name_cmp+0x88>
        a->len == b->len &&
 8027b78:	692a      	ldr	r2, [r5, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027b7a:	6923      	ldr	r3, [r4, #16]
 8027b7c:	429a      	cmp	r2, r3
 8027b7e:	d105      	bne.n	8027b8c <x509_name_cmp+0x88>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8027b80:	6961      	ldr	r1, [r4, #20]
 8027b82:	6968      	ldr	r0, [r5, #20]
 8027b84:	f7ff ffa6 	bl	8027ad4 <x509_memcasecmp>
        a->len == b->len &&
 8027b88:	2800      	cmp	r0, #0
 8027b8a:	d0e4      	beq.n	8027b56 <x509_name_cmp+0x52>
            return( -1 );
 8027b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8027b90:	e7c1      	b.n	8027b16 <x509_name_cmp+0x12>
        a->len == b->len &&
 8027b92:	4632      	mov	r2, r6
 8027b94:	e7f4      	b.n	8027b80 <x509_name_cmp+0x7c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027b96:	2f0c      	cmp	r7, #12
 8027b98:	d0fb      	beq.n	8027b92 <x509_name_cmp+0x8e>
 8027b9a:	2f13      	cmp	r7, #19
 8027b9c:	d0e9      	beq.n	8027b72 <x509_name_cmp+0x6e>
 8027b9e:	e7f5      	b.n	8027b8c <x509_name_cmp+0x88>
 8027ba0:	2f0c      	cmp	r7, #12
 8027ba2:	d1fa      	bne.n	8027b9a <x509_name_cmp+0x96>
 8027ba4:	e7f2      	b.n	8027b8c <x509_name_cmp+0x88>

08027ba6 <x509_crt_check_cn>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 8027ba6:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
 8027ba8:	6845      	ldr	r5, [r0, #4]
 8027baa:	4295      	cmp	r5, r2
{
 8027bac:	4606      	mov	r6, r0
 8027bae:	460c      	mov	r4, r1
    if( name->len == cn_len &&
 8027bb0:	d104      	bne.n	8027bbc <x509_crt_check_cn+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
 8027bb2:	6881      	ldr	r1, [r0, #8]
 8027bb4:	4620      	mov	r0, r4
 8027bb6:	f7ff ff8d 	bl	8027ad4 <x509_memcasecmp>
    if( name->len == cn_len &&
 8027bba:	b328      	cbz	r0, 8027c08 <x509_crt_check_cn+0x62>
    size_t cn_idx = 0, cn_len = strlen( cn );
 8027bbc:	4620      	mov	r0, r4
 8027bbe:	f7f4 fbbf 	bl	801c340 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8027bc2:	2d02      	cmp	r5, #2
 8027bc4:	d909      	bls.n	8027bda <x509_crt_check_cn+0x34>
 8027bc6:	68b3      	ldr	r3, [r6, #8]
 8027bc8:	781a      	ldrb	r2, [r3, #0]
 8027bca:	2a2a      	cmp	r2, #42	; 0x2a
 8027bcc:	d105      	bne.n	8027bda <x509_crt_check_cn+0x34>
 8027bce:	785a      	ldrb	r2, [r3, #1]
 8027bd0:	2a2e      	cmp	r2, #46	; 0x2e
 8027bd2:	d102      	bne.n	8027bda <x509_crt_check_cn+0x34>
    for( i = 0; i < cn_len; ++i )
 8027bd4:	2200      	movs	r2, #0
 8027bd6:	4290      	cmp	r0, r2
 8027bd8:	d102      	bne.n	8027be0 <x509_crt_check_cn+0x3a>
    if( x509_check_wildcard( cn, name ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 8027bda:	f04f 30ff 	mov.w	r0, #4294967295
 8027bde:	e013      	b.n	8027c08 <x509_crt_check_cn+0x62>
        if( cn[i] == '.' )
 8027be0:	4621      	mov	r1, r4
 8027be2:	3401      	adds	r4, #1
 8027be4:	780e      	ldrb	r6, [r1, #0]
 8027be6:	2e2e      	cmp	r6, #46	; 0x2e
 8027be8:	d001      	beq.n	8027bee <x509_crt_check_cn+0x48>
    for( i = 0; i < cn_len; ++i )
 8027bea:	3201      	adds	r2, #1
 8027bec:	e7f3      	b.n	8027bd6 <x509_crt_check_cn+0x30>
    if( cn_idx == 0 )
 8027bee:	2a00      	cmp	r2, #0
 8027bf0:	d0f3      	beq.n	8027bda <x509_crt_check_cn+0x34>
    if( cn_len - cn_idx == name->len - 1 &&
 8027bf2:	1a82      	subs	r2, r0, r2
 8027bf4:	3d01      	subs	r5, #1
 8027bf6:	42aa      	cmp	r2, r5
 8027bf8:	d1ef      	bne.n	8027bda <x509_crt_check_cn+0x34>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8027bfa:	1c58      	adds	r0, r3, #1
 8027bfc:	f7ff ff6a 	bl	8027ad4 <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 8027c00:	3000      	adds	r0, #0
 8027c02:	bf18      	it	ne
 8027c04:	2001      	movne	r0, #1
 8027c06:	4240      	negs	r0, r0
}
 8027c08:	bd70      	pop	{r4, r5, r6, pc}

08027c0a <x509_profile_check_pk_alg.isra.2>:
    if( pk_alg == MBEDTLS_PK_NONE )
 8027c0a:	b151      	cbz	r1, 8027c22 <x509_profile_check_pk_alg.isra.2+0x18>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8027c0c:	2301      	movs	r3, #1
 8027c0e:	3901      	subs	r1, #1
 8027c10:	fa03 f101 	lsl.w	r1, r3, r1
 8027c14:	6803      	ldr	r3, [r0, #0]
 8027c16:	4219      	tst	r1, r3
 8027c18:	bf0c      	ite	eq
 8027c1a:	f04f 30ff 	moveq.w	r0, #4294967295
 8027c1e:	2000      	movne	r0, #0
 8027c20:	4770      	bx	lr
        return( -1 );
 8027c22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8027c26:	4770      	bx	lr

08027c28 <x509_get_uid>:
{
 8027c28:	b570      	push	{r4, r5, r6, lr}
 8027c2a:	4615      	mov	r5, r2
    if( *p == end )
 8027c2c:	6802      	ldr	r2, [r0, #0]
 8027c2e:	428a      	cmp	r2, r1
{
 8027c30:	4604      	mov	r4, r0
    if( *p == end )
 8027c32:	d00b      	beq.n	8027c4c <x509_get_uid+0x24>
    uid->tag = **p;
 8027c34:	7816      	ldrb	r6, [r2, #0]
 8027c36:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8027c38:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
 8027c3c:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8027c40:	f7fb fe2b 	bl	802389a <mbedtls_asn1_get_tag>
 8027c44:	b120      	cbz	r0, 8027c50 <x509_get_uid+0x28>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8027c46:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8027c4a:	d100      	bne.n	8027c4e <x509_get_uid+0x26>
            return( 0 );
 8027c4c:	2000      	movs	r0, #0
}
 8027c4e:	bd70      	pop	{r4, r5, r6, pc}
    uid->p = *p;
 8027c50:	6823      	ldr	r3, [r4, #0]
 8027c52:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 8027c54:	6823      	ldr	r3, [r4, #0]
 8027c56:	686a      	ldr	r2, [r5, #4]
 8027c58:	4413      	add	r3, r2
 8027c5a:	6023      	str	r3, [r4, #0]
 8027c5c:	e7f7      	b.n	8027c4e <x509_get_uid+0x26>

08027c5e <x509_profile_check_key.isra.4>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8027c5e:	b538      	push	{r3, r4, r5, lr}
 8027c60:	4605      	mov	r5, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 8027c62:	4608      	mov	r0, r1
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8027c64:	460c      	mov	r4, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 8027c66:	f7fe fddf 	bl	8026828 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 8027c6a:	3802      	subs	r0, #2
 8027c6c:	b2c0      	uxtb	r0, r0
 8027c6e:	2802      	cmp	r0, #2
 8027c70:	d80d      	bhi.n	8027c8e <x509_profile_check_key.isra.4+0x30>
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 8027c72:	6863      	ldr	r3, [r4, #4]
 8027c74:	781b      	ldrb	r3, [r3, #0]
        if( gid == MBEDTLS_ECP_DP_NONE )
 8027c76:	b153      	cbz	r3, 8027c8e <x509_profile_check_key.isra.4+0x30>
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 8027c78:	2201      	movs	r2, #1
 8027c7a:	3b01      	subs	r3, #1
 8027c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8027c80:	682a      	ldr	r2, [r5, #0]
 8027c82:	4213      	tst	r3, r2
 8027c84:	bf0c      	ite	eq
 8027c86:	f04f 30ff 	moveq.w	r0, #4294967295
 8027c8a:	2000      	movne	r0, #0
}
 8027c8c:	bd38      	pop	{r3, r4, r5, pc}
    return( -1 );
 8027c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8027c92:	e7fb      	b.n	8027c8c <x509_profile_check_key.isra.4+0x2e>

08027c94 <mbedtls_x509_crt_verify_info>:
{
 8027c94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8027c98:	4e1b      	ldr	r6, [pc, #108]	; (8027d08 <mbedtls_x509_crt_verify_info+0x74>)
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8027c9a:	f8df a078 	ldr.w	sl, [pc, #120]	; 8027d14 <mbedtls_x509_crt_verify_info+0x80>
{
 8027c9e:	4607      	mov	r7, r0
 8027ca0:	460d      	mov	r5, r1
 8027ca2:	4691      	mov	r9, r2
 8027ca4:	4698      	mov	r8, r3
    size_t n = size;
 8027ca6:	460c      	mov	r4, r1
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8027ca8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8027cac:	b97b      	cbnz	r3, 8027cce <mbedtls_x509_crt_verify_info+0x3a>
    if( flags != 0 )
 8027cae:	f1b8 0f00 	cmp.w	r8, #0
 8027cb2:	d00a      	beq.n	8027cca <mbedtls_x509_crt_verify_info+0x36>
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 8027cb4:	464b      	mov	r3, r9
 8027cb6:	4a15      	ldr	r2, [pc, #84]	; (8027d0c <mbedtls_x509_crt_verify_info+0x78>)
 8027cb8:	4621      	mov	r1, r4
 8027cba:	4638      	mov	r0, r7
 8027cbc:	f001 f894 	bl	8028de8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027cc0:	2800      	cmp	r0, #0
 8027cc2:	db12      	blt.n	8027cea <mbedtls_x509_crt_verify_info+0x56>
 8027cc4:	42a0      	cmp	r0, r4
 8027cc6:	d210      	bcs.n	8027cea <mbedtls_x509_crt_verify_info+0x56>
 8027cc8:	1a24      	subs	r4, r4, r0
    return( (int) ( size - n ) );
 8027cca:	1b28      	subs	r0, r5, r4
 8027ccc:	e00e      	b.n	8027cec <mbedtls_x509_crt_verify_info+0x58>
        if( ( flags & cur->code ) == 0 )
 8027cce:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8027cd2:	ea18 0f02 	tst.w	r8, r2
 8027cd6:	d014      	beq.n	8027d02 <mbedtls_x509_crt_verify_info+0x6e>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8027cd8:	9300      	str	r3, [sp, #0]
 8027cda:	4652      	mov	r2, sl
 8027cdc:	464b      	mov	r3, r9
 8027cde:	4621      	mov	r1, r4
 8027ce0:	4638      	mov	r0, r7
 8027ce2:	f001 f881 	bl	8028de8 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027ce6:	2800      	cmp	r0, #0
 8027ce8:	da03      	bge.n	8027cf2 <mbedtls_x509_crt_verify_info+0x5e>
 8027cea:	4809      	ldr	r0, [pc, #36]	; (8027d10 <mbedtls_x509_crt_verify_info+0x7c>)
}
 8027cec:	b002      	add	sp, #8
 8027cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027cf2:	42a0      	cmp	r0, r4
 8027cf4:	d2f9      	bcs.n	8027cea <mbedtls_x509_crt_verify_info+0x56>
        flags ^= cur->code;
 8027cf6:	f856 3c08 	ldr.w	r3, [r6, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027cfa:	1a24      	subs	r4, r4, r0
 8027cfc:	4407      	add	r7, r0
        flags ^= cur->code;
 8027cfe:	ea88 0803 	eor.w	r8, r8, r3
 8027d02:	3608      	adds	r6, #8
 8027d04:	e7d0      	b.n	8027ca8 <mbedtls_x509_crt_verify_info+0x14>
 8027d06:	bf00      	nop
 8027d08:	0802a51c 	.word	0x0802a51c
 8027d0c:	0802d761 	.word	0x0802d761
 8027d10:	ffffd680 	.word	0xffffd680
 8027d14:	0802d75b 	.word	0x0802d75b

08027d18 <mbedtls_x509_crt_check_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8027d18:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8027d1c:	f013 0304 	ands.w	r3, r3, #4
 8027d20:	d012      	beq.n	8027d48 <mbedtls_x509_crt_check_key_usage+0x30>
    usage_must = usage & ~may_mask;
 8027d22:	f421 4200 	bic.w	r2, r1, #32768	; 0x8000
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8027d26:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    usage_must = usage & ~may_mask;
 8027d2a:	f022 0201 	bic.w	r2, r2, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8027d2e:	ea32 0300 	bics.w	r3, r2, r0
 8027d32:	d10b      	bne.n	8027d4c <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
 8027d34:	f248 0301 	movw	r3, #32769	; 0x8001
 8027d38:	ea01 0203 	and.w	r2, r1, r3
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8027d3c:	4301      	orrs	r1, r0
 8027d3e:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8027d40:	4b03      	ldr	r3, [pc, #12]	; (8027d50 <mbedtls_x509_crt_check_key_usage+0x38>)
 8027d42:	428a      	cmp	r2, r1
 8027d44:	bf08      	it	eq
 8027d46:	2300      	moveq	r3, #0
}
 8027d48:	4618      	mov	r0, r3
 8027d4a:	4770      	bx	lr
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8027d4c:	4b00      	ldr	r3, [pc, #0]	; (8027d50 <mbedtls_x509_crt_check_key_usage+0x38>)
 8027d4e:	e7fb      	b.n	8027d48 <mbedtls_x509_crt_check_key_usage+0x30>
 8027d50:	ffffd800 	.word	0xffffd800

08027d54 <mbedtls_x509_crt_is_revoked>:
{
 8027d54:	b538      	push	{r3, r4, r5, lr}
 8027d56:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 8027d58:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 8027d5c:	b1ac      	cbz	r4, 8027d8a <mbedtls_x509_crt_is_revoked+0x36>
 8027d5e:	6920      	ldr	r0, [r4, #16]
 8027d60:	b900      	cbnz	r0, 8027d64 <mbedtls_x509_crt_is_revoked+0x10>
}
 8027d62:	bd38      	pop	{r3, r4, r5, pc}
        if( crt->serial.len == cur->serial.len &&
 8027d64:	6a2a      	ldr	r2, [r5, #32]
 8027d66:	4282      	cmp	r2, r0
 8027d68:	d001      	beq.n	8027d6e <mbedtls_x509_crt_is_revoked+0x1a>
        cur = cur->next;
 8027d6a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8027d6c:	e7f6      	b.n	8027d5c <mbedtls_x509_crt_is_revoked+0x8>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 8027d6e:	6961      	ldr	r1, [r4, #20]
 8027d70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8027d72:	f000 fe13 	bl	802899c <memcmp>
        if( crt->serial.len == cur->serial.len &&
 8027d76:	2800      	cmp	r0, #0
 8027d78:	d1f7      	bne.n	8027d6a <mbedtls_x509_crt_is_revoked+0x16>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8027d7a:	f104 0018 	add.w	r0, r4, #24
 8027d7e:	f7ff fea5 	bl	8027acc <mbedtls_x509_time_is_past>
 8027d82:	2800      	cmp	r0, #0
 8027d84:	d0f1      	beq.n	8027d6a <mbedtls_x509_crt_is_revoked+0x16>
                return( 1 );
 8027d86:	2001      	movs	r0, #1
 8027d88:	e7eb      	b.n	8027d62 <mbedtls_x509_crt_is_revoked+0xe>
    return( 0 );
 8027d8a:	4620      	mov	r0, r4
 8027d8c:	e7e9      	b.n	8027d62 <mbedtls_x509_crt_is_revoked+0xe>
	...

08027d90 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 8027d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d94:	b0b3      	sub	sp, #204	; 0xcc
 8027d96:	4604      	mov	r4, r0
 8027d98:	9210      	str	r2, [sp, #64]	; 0x40
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 8027d9a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
{
 8027d9c:	9307      	str	r3, [sp, #28]
 8027d9e:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 8027da0:	910a      	str	r1, [sp, #40]	; 0x28
    *flags = 0;
 8027da2:	2300      	movs	r3, #0
 8027da4:	6013      	str	r3, [r2, #0]
        ver_chain->items[i].crt = NULL;
 8027da6:	ae1d      	add	r6, sp, #116	; 0x74
 8027da8:	4618      	mov	r0, r3
        ver_chain->items[i].flags = -1u;
 8027daa:	f04f 31ff 	mov.w	r1, #4294967295
        ver_chain->items[i].crt = NULL;
 8027dae:	5198      	str	r0, [r3, r6]
        ver_chain->items[i].flags = -1u;
 8027db0:	18f2      	adds	r2, r6, r3
 8027db2:	3308      	adds	r3, #8
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 8027db4:	2b50      	cmp	r3, #80	; 0x50
        ver_chain->items[i].flags = -1u;
 8027db6:	6051      	str	r1, [r2, #4]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 8027db8:	d1f9      	bne.n	8027dae <mbedtls_x509_crt_verify_restartable+0x1e>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
 8027dba:	9b07      	ldr	r3, [sp, #28]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	f000 8212 	beq.w	80281e6 <mbedtls_x509_crt_verify_restartable+0x456>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
 8027dc2:	2d00      	cmp	r5, #0
 8027dc4:	f000 80b0 	beq.w	8027f28 <mbedtls_x509_crt_verify_restartable+0x198>
    size_t cn_len = strlen( cn );
 8027dc8:	4628      	mov	r0, r5
 8027dca:	f7f4 fab9 	bl	801c340 <strlen>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8027dce:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8027dd2:	0699      	lsls	r1, r3, #26
    size_t cn_len = strlen( cn );
 8027dd4:	4607      	mov	r7, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8027dd6:	f140 808c 	bpl.w	8027ef2 <mbedtls_x509_crt_verify_restartable+0x162>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 8027dda:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
 8027dde:	463a      	mov	r2, r7
 8027de0:	4629      	mov	r1, r5
 8027de2:	4640      	mov	r0, r8
 8027de4:	f7ff fedf 	bl	8027ba6 <x509_crt_check_cn>
 8027de8:	2800      	cmp	r0, #0
 8027dea:	f000 809f 	beq.w	8027f2c <mbedtls_x509_crt_verify_restartable+0x19c>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 8027dee:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8027df2:	f1b8 0f00 	cmp.w	r8, #0
 8027df6:	d1f2      	bne.n	8027dde <mbedtls_x509_crt_verify_restartable+0x4e>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8027df8:	f04f 0804 	mov.w	r8, #4
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8027dfc:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8027e00:	4628      	mov	r0, r5
 8027e02:	f7fe fd11 	bl	8026828 <mbedtls_pk_get_type>
 8027e06:	9b07      	ldr	r3, [sp, #28]
 8027e08:	3304      	adds	r3, #4

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 8027e0a:	4601      	mov	r1, r0
 8027e0c:	4618      	mov	r0, r3
 8027e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027e10:	f7ff fefb 	bl	8027c0a <x509_profile_check_pk_alg.isra.2>
 8027e14:	b108      	cbz	r0, 8027e1a <mbedtls_x509_crt_verify_restartable+0x8a>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8027e16:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8027e1a:	9b07      	ldr	r3, [sp, #28]
 8027e1c:	3308      	adds	r3, #8

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
 8027e1e:	4629      	mov	r1, r5
 8027e20:	4618      	mov	r0, r3
 8027e22:	930c      	str	r3, [sp, #48]	; 0x30
 8027e24:	f7ff ff1b 	bl	8027c5e <x509_profile_check_key.isra.4>
 8027e28:	b108      	cbz	r0, 8027e2e <mbedtls_x509_crt_verify_restartable+0x9e>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8027e2a:	f448 3880 	orr.w	r8, r8, #65536	; 0x10000
    ver_chain->len = 0;
 8027e2e:	2300      	movs	r3, #0
 8027e30:	9306      	str	r3, [sp, #24]
    self_cnt = 0;
 8027e32:	930d      	str	r3, [sp, #52]	; 0x34
    child_is_trusted = 0;
 8027e34:	461d      	mov	r5, r3
        cur->crt = child;
 8027e36:	ab1d      	add	r3, sp, #116	; 0x74
 8027e38:	9a06      	ldr	r2, [sp, #24]
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8027e3a:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
        cur->crt = child;
 8027e3e:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
        cur->flags = 0;
 8027e42:	2300      	movs	r3, #0
 8027e44:	6073      	str	r3, [r6, #4]
        ver_chain->len++;
 8027e46:	f102 0b01 	add.w	fp, r2, #1
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8027e4a:	f7ff fe3f 	bl	8027acc <mbedtls_x509_time_is_past>
 8027e4e:	b108      	cbz	r0, 8027e54 <mbedtls_x509_crt_verify_restartable+0xc4>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8027e50:	2301      	movs	r3, #1
 8027e52:	6073      	str	r3, [r6, #4]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8027e54:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8027e58:	f7ff fe3a 	bl	8027ad0 <mbedtls_x509_time_is_future>
 8027e5c:	b118      	cbz	r0, 8027e66 <mbedtls_x509_crt_verify_restartable+0xd6>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8027e5e:	6873      	ldr	r3, [r6, #4]
 8027e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027e64:	6073      	str	r3, [r6, #4]
        if( child_is_trusted )
 8027e66:	2d00      	cmp	r5, #0
 8027e68:	f040 8106 	bne.w	8028078 <mbedtls_x509_crt_verify_restartable+0x2e8>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8027e6c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    if( md_alg == MBEDTLS_MD_NONE )
 8027e70:	b13b      	cbz	r3, 8027e82 <mbedtls_x509_crt_verify_restartable+0xf2>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8027e72:	2201      	movs	r2, #1
 8027e74:	3b01      	subs	r3, #1
 8027e76:	fa02 f303 	lsl.w	r3, r2, r3
 8027e7a:	9a07      	ldr	r2, [sp, #28]
 8027e7c:	6812      	ldr	r2, [r2, #0]
 8027e7e:	4213      	tst	r3, r2
 8027e80:	d103      	bne.n	8027e8a <mbedtls_x509_crt_verify_restartable+0xfa>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8027e82:	6873      	ldr	r3, [r6, #4]
 8027e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027e88:	6073      	str	r3, [r6, #4]
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 8027e8a:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8027e8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027e90:	f7ff febb 	bl	8027c0a <x509_profile_check_pk_alg.isra.2>
 8027e94:	b118      	cbz	r0, 8027e9e <mbedtls_x509_crt_verify_restartable+0x10e>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8027e96:	6873      	ldr	r3, [r6, #4]
 8027e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027e9c:	6073      	str	r3, [r6, #4]
        if( ver_chain->len == 1 &&
 8027e9e:	f1bb 0f01 	cmp.w	fp, #1
 8027ea2:	d10a      	bne.n	8027eba <mbedtls_x509_crt_verify_restartable+0x12a>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 8027ea4:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8027ea8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8027eac:	f7ff fe2a 	bl	8027b04 <x509_name_cmp>
 8027eb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027eb2:	2800      	cmp	r0, #0
 8027eb4:	d14a      	bne.n	8027f4c <mbedtls_x509_crt_verify_restartable+0x1bc>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 8027eb6:	2f00      	cmp	r7, #0
 8027eb8:	d13a      	bne.n	8027f30 <mbedtls_x509_crt_verify_restartable+0x1a0>
        if( ver_chain->len == 1 &&
 8027eba:	2302      	movs	r3, #2
 8027ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8027ebe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027ec0:	2301      	movs	r3, #1
 8027ec2:	9305      	str	r3, [sp, #20]
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8027ec4:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8027ec8:	9311      	str	r3, [sp, #68]	; 0x44
            if( fallback_parent == NULL )
 8027eca:	2300      	movs	r3, #0
 8027ecc:	9308      	str	r3, [sp, #32]
 8027ece:	469a      	mov	sl, r3
    for( parent = candidates; parent != NULL; parent = parent->next )
 8027ed0:	2f00      	cmp	r7, #0
 8027ed2:	d140      	bne.n	8027f56 <mbedtls_x509_crt_verify_restartable+0x1c6>
        if( *parent != NULL || *parent_is_trusted == 0 )
 8027ed4:	f1ba 0f00 	cmp.w	sl, #0
 8027ed8:	f040 80a9 	bne.w	802802e <mbedtls_x509_crt_verify_restartable+0x29e>
 8027edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ede:	2b01      	cmp	r3, #1
 8027ee0:	f000 80c0 	beq.w	8028064 <mbedtls_x509_crt_verify_restartable+0x2d4>
 8027ee4:	2301      	movs	r3, #1
        search_list = *parent_is_trusted ? trust_ca : child->next;
 8027ee6:	f8d4 7130 	ldr.w	r7, [r4, #304]	; 0x130
 8027eea:	9309      	str	r3, [sp, #36]	; 0x24
 8027eec:	f8cd a014 	str.w	sl, [sp, #20]
 8027ef0:	e7eb      	b.n	8027eca <mbedtls_x509_crt_verify_restartable+0x13a>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027ef2:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80281f8 <mbedtls_x509_crt_verify_restartable+0x468>
        for( name = &crt->subject; name != NULL; name = name->next )
 8027ef6:	f104 096c 	add.w	r9, r4, #108	; 0x6c
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027efa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8027efe:	2a03      	cmp	r2, #3
 8027f00:	d10c      	bne.n	8027f1c <mbedtls_x509_crt_verify_restartable+0x18c>
 8027f02:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8027f06:	4640      	mov	r0, r8
 8027f08:	f000 fd48 	bl	802899c <memcmp>
 8027f0c:	b930      	cbnz	r0, 8027f1c <mbedtls_x509_crt_verify_restartable+0x18c>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
 8027f0e:	463a      	mov	r2, r7
 8027f10:	4629      	mov	r1, r5
 8027f12:	f109 000c 	add.w	r0, r9, #12
 8027f16:	f7ff fe46 	bl	8027ba6 <x509_crt_check_cn>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027f1a:	b138      	cbz	r0, 8027f2c <mbedtls_x509_crt_verify_restartable+0x19c>
        for( name = &crt->subject; name != NULL; name = name->next )
 8027f1c:	f8d9 9018 	ldr.w	r9, [r9, #24]
 8027f20:	f1b9 0f00 	cmp.w	r9, #0
 8027f24:	d1e9      	bne.n	8027efa <mbedtls_x509_crt_verify_restartable+0x16a>
 8027f26:	e767      	b.n	8027df8 <mbedtls_x509_crt_verify_restartable+0x68>
    ee_flags = 0;
 8027f28:	46a8      	mov	r8, r5
 8027f2a:	e767      	b.n	8027dfc <mbedtls_x509_crt_verify_restartable+0x6c>
 8027f2c:	4680      	mov	r8, r0
 8027f2e:	e765      	b.n	8027dfc <mbedtls_x509_crt_verify_restartable+0x6c>
        if( crt->raw.len == cur->raw.len &&
 8027f30:	6862      	ldr	r2, [r4, #4]
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	429a      	cmp	r2, r3
 8027f36:	d106      	bne.n	8027f46 <mbedtls_x509_crt_verify_restartable+0x1b6>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
 8027f38:	68b9      	ldr	r1, [r7, #8]
 8027f3a:	68a0      	ldr	r0, [r4, #8]
 8027f3c:	f000 fd2e 	bl	802899c <memcmp>
        if( crt->raw.len == cur->raw.len &&
 8027f40:	2800      	cmp	r0, #0
 8027f42:	f000 8099 	beq.w	8028078 <mbedtls_x509_crt_verify_restartable+0x2e8>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 8027f46:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8027f4a:	e7b4      	b.n	8027eb6 <mbedtls_x509_crt_verify_restartable+0x126>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 8027f4c:	2302      	movs	r3, #2
 8027f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8027f50:	f8cd b014 	str.w	fp, [sp, #20]
 8027f54:	e7b6      	b.n	8027ec4 <mbedtls_x509_crt_verify_restartable+0x134>
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8027f56:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027f5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027f5c:	f7ff fdd2 	bl	8027b04 <x509_name_cmp>
 8027f60:	bba0      	cbnz	r0, 8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
    if( top && parent->version < 3 )
 8027f62:	9b05      	ldr	r3, [sp, #20]
 8027f64:	b113      	cbz	r3, 8027f6c <mbedtls_x509_crt_verify_restartable+0x1dc>
 8027f66:	69bb      	ldr	r3, [r7, #24]
 8027f68:	2b02      	cmp	r3, #2
 8027f6a:	dd07      	ble.n	8027f7c <mbedtls_x509_crt_verify_restartable+0x1ec>
    if( need_ca_bit && ! parent->ca_istrue )
 8027f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8027f70:	b363      	cbz	r3, 8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 8027f72:	2104      	movs	r1, #4
 8027f74:	4638      	mov	r0, r7
 8027f76:	f7ff fecf 	bl	8027d18 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
 8027f7a:	bb38      	cbnz	r0, 8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
        if( parent->max_pathlen > 0 &&
 8027f7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	dd04      	ble.n	8027f8e <mbedtls_x509_crt_verify_restartable+0x1fe>
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
 8027f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027f86:	ebab 0202 	sub.w	r2, fp, r2
        if( parent->max_pathlen > 0 &&
 8027f8a:	4293      	cmp	r3, r2
 8027f8c:	d31e      	bcc.n	8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
    md_info = mbedtls_md_info_from_type( child->sig_md );
 8027f8e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8027f92:	f7fe fae7 	bl	8026564 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8027f96:	ab15      	add	r3, sp, #84	; 0x54
 8027f98:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    md_info = mbedtls_md_info_from_type( child->sig_md );
 8027f9c:	900e      	str	r0, [sp, #56]	; 0x38
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8027f9e:	f7fe faef 	bl	8026580 <mbedtls_md>
 8027fa2:	b1b0      	cbz	r0, 8027fd2 <mbedtls_x509_crt_verify_restartable+0x242>
        return( -1 );
 8027fa4:	f04f 30ff 	mov.w	r0, #4294967295
        if( top && ! signature_is_good )
 8027fa8:	9b05      	ldr	r3, [sp, #20]
        signature_is_good = ret == 0;
 8027faa:	fab0 f980 	clz	r9, r0
 8027fae:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( top && ! signature_is_good )
 8027fb2:	b103      	cbz	r3, 8027fb6 <mbedtls_x509_crt_verify_restartable+0x226>
 8027fb4:	b950      	cbnz	r0, 8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 8027fb6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8027fba:	f7ff fd87 	bl	8027acc <mbedtls_x509_time_is_past>
 8027fbe:	b368      	cbz	r0, 802801c <mbedtls_x509_crt_verify_restartable+0x28c>
            if( fallback_parent == NULL )
 8027fc0:	f1ba 0f00 	cmp.w	sl, #0
 8027fc4:	d102      	bne.n	8027fcc <mbedtls_x509_crt_verify_restartable+0x23c>
                fallback_signature_is_good = signature_is_good;
 8027fc6:	f8cd 9020 	str.w	r9, [sp, #32]
            if( fallback_parent == NULL )
 8027fca:	46ba      	mov	sl, r7
    for( parent = candidates; parent != NULL; parent = parent->next )
 8027fcc:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8027fd0:	e77e      	b.n	8027ed0 <mbedtls_x509_crt_verify_restartable+0x140>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
 8027fd2:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 8027fd6:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8027fda:	4648      	mov	r0, r9
 8027fdc:	f7fe fbb4 	bl	8026748 <mbedtls_pk_can_do>
 8027fe0:	2800      	cmp	r0, #0
 8027fe2:	d0df      	beq.n	8027fa4 <mbedtls_x509_crt_verify_restartable+0x214>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8027fe4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8027fe8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8027fec:	930f      	str	r3, [sp, #60]	; 0x3c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8027fee:	980e      	ldr	r0, [sp, #56]	; 0x38
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8027ff0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8027ff4:	9113      	str	r1, [sp, #76]	; 0x4c
 8027ff6:	9312      	str	r3, [sp, #72]	; 0x48
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8027ff8:	f7fe fad2 	bl	80265a0 <mbedtls_md_get_size>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8027ffc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8028000:	9203      	str	r2, [sp, #12]
 8028002:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8028006:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028008:	ab15      	add	r3, sp, #84	; 0x54
 802800a:	e9cd 0201 	strd	r0, r2, [sp, #4]
 802800e:	9300      	str	r3, [sp, #0]
 8028010:	464a      	mov	r2, r9
 8028012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028014:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028016:	f7fe fbd5 	bl	80267c4 <mbedtls_pk_verify_ext>
 802801a:	e7c5      	b.n	8027fa8 <mbedtls_x509_crt_verify_restartable+0x218>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
 802801c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8028020:	f7ff fd56 	bl	8027ad0 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 8028024:	2800      	cmp	r0, #0
 8028026:	d1cb      	bne.n	8027fc0 <mbedtls_x509_crt_verify_restartable+0x230>
        signature_is_good = ret == 0;
 8028028:	f8cd 9020 	str.w	r9, [sp, #32]
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 802802c:	46ba      	mov	sl, r7
        if( ver_chain->len != 1 &&
 802802e:	f1bb 0f01 	cmp.w	fp, #1
 8028032:	d03e      	beq.n	80280b2 <mbedtls_x509_crt_verify_restartable+0x322>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8028034:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8028038:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 802803c:	f7ff fd62 	bl	8027b04 <x509_name_cmp>
        if( ver_chain->len != 1 &&
 8028040:	b910      	cbnz	r0, 8028048 <mbedtls_x509_crt_verify_restartable+0x2b8>
            self_cnt++;
 8028042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028044:	3301      	adds	r3, #1
 8028046:	930d      	str	r3, [sp, #52]	; 0x34
        if( ! parent_is_trusted &&
 8028048:	9b05      	ldr	r3, [sp, #20]
 802804a:	2b00      	cmp	r3, #0
 802804c:	d131      	bne.n	80280b2 <mbedtls_x509_crt_verify_restartable+0x322>
 802804e:	f1bb 0f08 	cmp.w	fp, #8
 8028052:	d92e      	bls.n	80280b2 <mbedtls_x509_crt_verify_restartable+0x322>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8028054:	4865      	ldr	r0, [pc, #404]	; (80281ec <mbedtls_x509_crt_verify_restartable+0x45c>)
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 8028056:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8028058:	f04f 33ff 	mov.w	r3, #4294967295
 802805c:	6013      	str	r3, [r2, #0]

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 802805e:	b033      	add	sp, #204	; 0xcc
 8028060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8028064:	9b06      	ldr	r3, [sp, #24]
 8028066:	aa32      	add	r2, sp, #200	; 0xc8
 8028068:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802806c:	f852 3c50 	ldr.w	r3, [r2, #-80]
 8028070:	f043 0308 	orr.w	r3, r3, #8
 8028074:	f842 3c50 	str.w	r3, [r2, #-80]
    ver_chain.items[0].flags |= ee_flags;
 8028078:	981e      	ldr	r0, [sp, #120]	; 0x78
 802807a:	ea40 0008 	orr.w	r0, r0, r8
 802807e:	901e      	str	r0, [sp, #120]	; 0x78
        cur_flags = cur->flags;
 8028080:	ac1d      	add	r4, sp, #116	; 0x74
        cur = &ver_chain->items[i-1];
 8028082:	f10b 3bff 	add.w	fp, fp, #4294967295
        cur_flags = cur->flags;
 8028086:	eb04 03cb 	add.w	r3, r4, fp, lsl #3
 802808a:	685b      	ldr	r3, [r3, #4]
 802808c:	9315      	str	r3, [sp, #84]	; 0x54
        if( NULL != f_vrfy )
 802808e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8028090:	2b00      	cmp	r3, #0
 8028092:	f040 8099 	bne.w	80281c8 <mbedtls_x509_crt_verify_restartable+0x438>
        *flags |= cur_flags;
 8028096:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8028098:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802809a:	681b      	ldr	r3, [r3, #0]
 802809c:	4313      	orrs	r3, r2
 802809e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80280a0:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
 80280a2:	f1bb 0f00 	cmp.w	fp, #0
 80280a6:	d1ec      	bne.n	8028082 <mbedtls_x509_crt_verify_restartable+0x2f2>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 80280a8:	2b00      	cmp	r3, #0
 80280aa:	4851      	ldr	r0, [pc, #324]	; (80281f0 <mbedtls_x509_crt_verify_restartable+0x460>)
 80280ac:	bf08      	it	eq
 80280ae:	2000      	moveq	r0, #0
 80280b0:	e7d5      	b.n	802805e <mbedtls_x509_crt_verify_restartable+0x2ce>
        if( ! signature_is_good )
 80280b2:	9b08      	ldr	r3, [sp, #32]
 80280b4:	b91b      	cbnz	r3, 80280be <mbedtls_x509_crt_verify_restartable+0x32e>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80280b6:	6873      	ldr	r3, [r6, #4]
 80280b8:	f043 0308 	orr.w	r3, r3, #8
 80280bc:	6073      	str	r3, [r6, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
 80280be:	f10a 09bc 	add.w	r9, sl, #188	; 0xbc
 80280c2:	4649      	mov	r1, r9
 80280c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80280c6:	f7ff fdca 	bl	8027c5e <x509_profile_check_key.isra.4>
 80280ca:	b118      	cbz	r0, 80280d4 <mbedtls_x509_crt_verify_restartable+0x344>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80280cc:	6873      	ldr	r3, [r6, #4]
 80280ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280d2:	6073      	str	r3, [r6, #4]
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80280d4:	f10a 036c 	add.w	r3, sl, #108	; 0x6c
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 80280d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80280da:	9309      	str	r3, [sp, #36]	; 0x24
    while( crl_list != NULL )
 80280dc:	b18f      	cbz	r7, 8028102 <mbedtls_x509_crt_verify_restartable+0x372>
        if( crl_list->version == 0 ||
 80280de:	69bb      	ldr	r3, [r7, #24]
 80280e0:	b12b      	cbz	r3, 80280ee <mbedtls_x509_crt_verify_restartable+0x35e>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80280e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80280e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80280e8:	f7ff fd0c 	bl	8027b04 <x509_name_cmp>
        if( crl_list->version == 0 ||
 80280ec:	b110      	cbz	r0, 80280f4 <mbedtls_x509_crt_verify_restartable+0x364>
        crl_list = crl_list->next;
 80280ee:	f8d7 70f0 	ldr.w	r7, [r7, #240]	; 0xf0
 80280f2:	e7f3      	b.n	80280dc <mbedtls_x509_crt_verify_restartable+0x34c>
        if( mbedtls_x509_crt_check_key_usage( ca,
 80280f4:	2102      	movs	r1, #2
 80280f6:	4650      	mov	r0, sl
 80280f8:	f7ff fe0e 	bl	8027d18 <mbedtls_x509_crt_check_key_usage>
 80280fc:	b150      	cbz	r0, 8028114 <mbedtls_x509_crt_verify_restartable+0x384>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80280fe:	f045 0510 	orr.w	r5, r5, #16
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
 8028102:	6873      	ldr	r3, [r6, #4]
        ver_chain->len++;
 8028104:	f8cd b018 	str.w	fp, [sp, #24]
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
 8028108:	431d      	orrs	r5, r3
 802810a:	6075      	str	r5, [r6, #4]
        ver_chain->len++;
 802810c:	4654      	mov	r4, sl
 802810e:	3608      	adds	r6, #8
 8028110:	9d05      	ldr	r5, [sp, #20]
 8028112:	e690      	b.n	8027e36 <mbedtls_x509_crt_verify_restartable+0xa6>
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8028114:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
    if( md_alg == MBEDTLS_MD_NONE )
 8028118:	b132      	cbz	r2, 8028128 <mbedtls_x509_crt_verify_restartable+0x398>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802811a:	1e51      	subs	r1, r2, #1
 802811c:	2301      	movs	r3, #1
 802811e:	408b      	lsls	r3, r1
 8028120:	9907      	ldr	r1, [sp, #28]
 8028122:	6809      	ldr	r1, [r1, #0]
 8028124:	420b      	tst	r3, r1
 8028126:	d101      	bne.n	802812c <mbedtls_x509_crt_verify_restartable+0x39c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8028128:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
 802812c:	f897 10e9 	ldrb.w	r1, [r7, #233]	; 0xe9
 8028130:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8028132:	f7ff fd6a 	bl	8027c0a <x509_profile_check_pk_alg.isra.2>
 8028136:	b108      	cbz	r0, 802813c <mbedtls_x509_crt_verify_restartable+0x3ac>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8028138:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 802813c:	4610      	mov	r0, r2
 802813e:	f7fe fa11 	bl	8026564 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8028142:	ab15      	add	r3, sp, #84	; 0x54
 8028144:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8028148:	9006      	str	r0, [sp, #24]
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 802814a:	f7fe fa19 	bl	8026580 <mbedtls_md>
 802814e:	2800      	cmp	r0, #0
 8028150:	d1d5      	bne.n	80280fe <mbedtls_x509_crt_verify_restartable+0x36e>
        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
 8028152:	4649      	mov	r1, r9
 8028154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028156:	f7ff fd82 	bl	8027c5e <x509_profile_check_key.isra.4>
 802815a:	b108      	cbz	r0, 8028160 <mbedtls_x509_crt_verify_restartable+0x3d0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 802815c:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8028160:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8028164:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8028168:	9308      	str	r3, [sp, #32]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 802816a:	9806      	ldr	r0, [sp, #24]
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 802816c:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8028170:	910f      	str	r1, [sp, #60]	; 0x3c
 8028172:	930e      	str	r3, [sp, #56]	; 0x38
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8028174:	f7fe fa14 	bl	80265a0 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8028178:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802817c:	9203      	str	r2, [sp, #12]
 802817e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8028182:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028184:	ab15      	add	r3, sp, #84	; 0x54
 8028186:	e9cd 0201 	strd	r0, r2, [sp, #4]
 802818a:	9300      	str	r3, [sp, #0]
 802818c:	464a      	mov	r2, r9
 802818e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028190:	9808      	ldr	r0, [sp, #32]
 8028192:	f7fe fb17 	bl	80267c4 <mbedtls_pk_verify_ext>
 8028196:	2800      	cmp	r0, #0
 8028198:	d1b1      	bne.n	80280fe <mbedtls_x509_crt_verify_restartable+0x36e>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 802819a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 802819e:	f7ff fc95 	bl	8027acc <mbedtls_x509_time_is_past>
 80281a2:	b108      	cbz	r0, 80281a8 <mbedtls_x509_crt_verify_restartable+0x418>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80281a4:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80281a8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80281ac:	f7ff fc90 	bl	8027ad0 <mbedtls_x509_time_is_future>
 80281b0:	b108      	cbz	r0, 80281b6 <mbedtls_x509_crt_verify_restartable+0x426>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80281b2:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80281b6:	4639      	mov	r1, r7
 80281b8:	4620      	mov	r0, r4
 80281ba:	f7ff fdcb 	bl	8027d54 <mbedtls_x509_crt_is_revoked>
 80281be:	2800      	cmp	r0, #0
 80281c0:	d095      	beq.n	80280ee <mbedtls_x509_crt_verify_restartable+0x35e>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80281c2:	f045 0502 	orr.w	r5, r5, #2
 80281c6:	e79c      	b.n	8028102 <mbedtls_x509_crt_verify_restartable+0x372>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 80281c8:	ab15      	add	r3, sp, #84	; 0x54
 80281ca:	465a      	mov	r2, fp
 80281cc:	f854 103b 	ldr.w	r1, [r4, fp, lsl #3]
 80281d0:	e9dd 503e 	ldrd	r5, r0, [sp, #248]	; 0xf8
 80281d4:	47a8      	blx	r5
 80281d6:	2800      	cmp	r0, #0
 80281d8:	f43f af5d 	beq.w	8028096 <mbedtls_x509_crt_verify_restartable+0x306>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80281dc:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80281e0:	f43f af38 	beq.w	8028054 <mbedtls_x509_crt_verify_restartable+0x2c4>
 80281e4:	e737      	b.n	8028056 <mbedtls_x509_crt_verify_restartable+0x2c6>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80281e6:	4803      	ldr	r0, [pc, #12]	; (80281f4 <mbedtls_x509_crt_verify_restartable+0x464>)
 80281e8:	e735      	b.n	8028056 <mbedtls_x509_crt_verify_restartable+0x2c6>
 80281ea:	bf00      	nop
 80281ec:	ffffd000 	.word	0xffffd000
 80281f0:	ffffd900 	.word	0xffffd900
 80281f4:	ffffd800 	.word	0xffffd800
 80281f8:	0802d12c 	.word	0x0802d12c

080281fc <mbedtls_x509_crt_verify>:
{
 80281fc:	b510      	push	{r4, lr}
 80281fe:	b086      	sub	sp, #24
    return( mbedtls_x509_crt_verify_restartable( crt, trust_ca, ca_crl,
 8028200:	2400      	movs	r4, #0
 8028202:	9404      	str	r4, [sp, #16]
 8028204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028206:	9403      	str	r4, [sp, #12]
 8028208:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802820a:	9402      	str	r4, [sp, #8]
 802820c:	9c08      	ldr	r4, [sp, #32]
 802820e:	e9cd 3400 	strd	r3, r4, [sp]
 8028212:	4b02      	ldr	r3, [pc, #8]	; (802821c <mbedtls_x509_crt_verify+0x20>)
 8028214:	f7ff fdbc 	bl	8027d90 <mbedtls_x509_crt_verify_restartable>
}
 8028218:	b006      	add	sp, #24
 802821a:	bd10      	pop	{r4, pc}
 802821c:	0802a5c4 	.word	0x0802a5c4

08028220 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 8028220:	f44f 729a 	mov.w	r2, #308	; 0x134
 8028224:	2100      	movs	r1, #0
 8028226:	f000 bbd3 	b.w	80289d0 <memset>

0802822a <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 802822a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 802822c:	4606      	mov	r6, r0
 802822e:	b360      	cbz	r0, 802828a <mbedtls_x509_crt_free+0x60>
 8028230:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 8028232:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8028236:	f7fe fa55 	bl	80266e4 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 802823a:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
 802823c:	bb35      	cbnz	r5, 802828c <mbedtls_x509_crt_free+0x62>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 802823e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
 8028242:	bb6d      	cbnz	r5, 80282a0 <mbedtls_x509_crt_free+0x76>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 8028244:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 8028248:	bba5      	cbnz	r5, 80282b4 <mbedtls_x509_crt_free+0x8a>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 802824a:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 802824e:	2d00      	cmp	r5, #0
 8028250:	d13a      	bne.n	80282c8 <mbedtls_x509_crt_free+0x9e>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8028252:	68a0      	ldr	r0, [r4, #8]
 8028254:	b128      	cbz	r0, 8028262 <mbedtls_x509_crt_free+0x38>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8028256:	6861      	ldr	r1, [r4, #4]
 8028258:	f7fe fd96 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
 802825c:	68a0      	ldr	r0, [r4, #8]
 802825e:	f7fe fd8d 	bl	8026d7c <mbedtls_free>
        }

        cert_cur = cert_cur->next;
 8028262:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8028266:	2c00      	cmp	r4, #0
 8028268:	d1e3      	bne.n	8028232 <mbedtls_x509_crt_free+0x8>
 802826a:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802826c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8028270:	4620      	mov	r0, r4
        cert_cur = cert_cur->next;
 8028272:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8028276:	f7fe fd87 	bl	8026d88 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
 802827a:	42a6      	cmp	r6, r4
 802827c:	d002      	beq.n	8028284 <mbedtls_x509_crt_free+0x5a>
            mbedtls_free( cert_prv );
 802827e:	4620      	mov	r0, r4
 8028280:	f7fe fd7c 	bl	8026d7c <mbedtls_free>
    }
    while( cert_cur != NULL );
 8028284:	462c      	mov	r4, r5
 8028286:	2d00      	cmp	r5, #0
 8028288:	d1f0      	bne.n	802826c <mbedtls_x509_crt_free+0x42>
}
 802828a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802828c:	4628      	mov	r0, r5
            name_cur = name_cur->next;
 802828e:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8028290:	2120      	movs	r1, #32
 8028292:	f7fe fd79 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 8028296:	4628      	mov	r0, r5
 8028298:	f7fe fd70 	bl	8026d7c <mbedtls_free>
            name_cur = name_cur->next;
 802829c:	463d      	mov	r5, r7
 802829e:	e7cd      	b.n	802823c <mbedtls_x509_crt_free+0x12>
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80282a0:	4628      	mov	r0, r5
            name_cur = name_cur->next;
 80282a2:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80282a4:	2120      	movs	r1, #32
 80282a6:	f7fe fd6f 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 80282aa:	4628      	mov	r0, r5
 80282ac:	f7fe fd66 	bl	8026d7c <mbedtls_free>
            name_cur = name_cur->next;
 80282b0:	463d      	mov	r5, r7
 80282b2:	e7c6      	b.n	8028242 <mbedtls_x509_crt_free+0x18>
            mbedtls_platform_zeroize( seq_prv,
 80282b4:	4628      	mov	r0, r5
            seq_cur = seq_cur->next;
 80282b6:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
 80282b8:	2110      	movs	r1, #16
 80282ba:	f7fe fd65 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 80282be:	4628      	mov	r0, r5
 80282c0:	f7fe fd5c 	bl	8026d7c <mbedtls_free>
            seq_cur = seq_cur->next;
 80282c4:	463d      	mov	r5, r7
 80282c6:	e7bf      	b.n	8028248 <mbedtls_x509_crt_free+0x1e>
            mbedtls_platform_zeroize( seq_prv,
 80282c8:	4628      	mov	r0, r5
            seq_cur = seq_cur->next;
 80282ca:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
 80282cc:	2110      	movs	r1, #16
 80282ce:	f7fe fd5b 	bl	8026d88 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 80282d2:	4628      	mov	r0, r5
 80282d4:	f7fe fd52 	bl	8026d7c <mbedtls_free>
            seq_cur = seq_cur->next;
 80282d8:	463d      	mov	r5, r7
 80282da:	e7b8      	b.n	802824e <mbedtls_x509_crt_free+0x24>

080282dc <mbedtls_x509_crt_parse_der>:
{
 80282dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282e0:	460d      	mov	r5, r1
 80282e2:	b09b      	sub	sp, #108	; 0x6c
 80282e4:	4617      	mov	r7, r2
    if( crt == NULL || buf == NULL )
 80282e6:	4682      	mov	sl, r0
 80282e8:	2800      	cmp	r0, #0
 80282ea:	f000 82fa 	beq.w	80288e2 <mbedtls_x509_crt_parse_der+0x606>
 80282ee:	2900      	cmp	r1, #0
 80282f0:	f000 82f7 	beq.w	80288e2 <mbedtls_x509_crt_parse_der+0x606>
 80282f4:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 80282f6:	f04f 0900 	mov.w	r9, #0
    while( crt->version != 0 && crt->next != NULL )
 80282fa:	69a3      	ldr	r3, [r4, #24]
 80282fc:	b1a3      	cbz	r3, 8028328 <mbedtls_x509_crt_parse_der+0x4c>
 80282fe:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8028302:	46a1      	mov	r9, r4
 8028304:	b94b      	cbnz	r3, 802831a <mbedtls_x509_crt_parse_der+0x3e>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 8028306:	f44f 719a 	mov.w	r1, #308	; 0x134
 802830a:	2001      	movs	r0, #1
 802830c:	f7fe fd30 	bl	8026d70 <mbedtls_calloc>
 8028310:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 8028314:	b918      	cbnz	r0, 802831e <mbedtls_x509_crt_parse_der+0x42>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8028316:	4da8      	ldr	r5, [pc, #672]	; (80285b8 <mbedtls_x509_crt_parse_der+0x2dc>)
 8028318:	e2d3      	b.n	80288c2 <mbedtls_x509_crt_parse_der+0x5e6>
    while( crt->version != 0 && crt->next != NULL )
 802831a:	461c      	mov	r4, r3
 802831c:	e7ed      	b.n	80282fa <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 802831e:	f7ff ff7f 	bl	8028220 <mbedtls_x509_crt_init>
        crt = crt->next;
 8028322:	46a1      	mov	r9, r4
 8028324:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 8028328:	2300      	movs	r3, #0
 802832a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 802832e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8028332:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 8028336:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 802833a:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 802833c:	2c00      	cmp	r4, #0
 802833e:	f000 82c4 	beq.w	80288ca <mbedtls_x509_crt_parse_der+0x5ee>
    len = buflen;
 8028342:	ae1a      	add	r6, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8028344:	2330      	movs	r3, #48	; 0x30
    len = buflen;
 8028346:	f846 7d54 	str.w	r7, [r6, #-84]!
    end = p + len;
 802834a:	442f      	add	r7, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802834c:	4632      	mov	r2, r6
 802834e:	4639      	mov	r1, r7
 8028350:	a806      	add	r0, sp, #24
    p = (unsigned char*) buf;
 8028352:	9506      	str	r5, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8028354:	f7fb faa1 	bl	802389a <mbedtls_asn1_get_tag>
 8028358:	b158      	cbz	r0, 8028372 <mbedtls_x509_crt_parse_der+0x96>
        mbedtls_x509_crt_free( crt );
 802835a:	4620      	mov	r0, r4
 802835c:	f7ff ff65 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 8028360:	4d96      	ldr	r5, [pc, #600]	; (80285bc <mbedtls_x509_crt_parse_der+0x2e0>)
        if( prev )
 8028362:	f1b9 0f00 	cmp.w	r9, #0
 8028366:	f040 82b8 	bne.w	80288da <mbedtls_x509_crt_parse_der+0x5fe>
        if( crt != chain )
 802836a:	45a2      	cmp	sl, r4
 802836c:	f040 82b1 	bne.w	80288d2 <mbedtls_x509_crt_parse_der+0x5f6>
 8028370:	e2a7      	b.n	80288c2 <mbedtls_x509_crt_parse_der+0x5e6>
    if( len > (size_t) ( end - p ) )
 8028372:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8028376:	1a7f      	subs	r7, r7, r1
 8028378:	429f      	cmp	r7, r3
 802837a:	d204      	bcs.n	8028386 <mbedtls_x509_crt_parse_der+0xaa>
        mbedtls_x509_crt_free( crt );
 802837c:	4620      	mov	r0, r4
 802837e:	f7ff ff54 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8028382:	4d8f      	ldr	r5, [pc, #572]	; (80285c0 <mbedtls_x509_crt_parse_der+0x2e4>)
 8028384:	e7ed      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
    crt_end = p + len;
 8028386:	4419      	add	r1, r3
    crt->raw.len = crt_end - buf;
 8028388:	1b49      	subs	r1, r1, r5
 802838a:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 802838c:	2001      	movs	r0, #1
 802838e:	f7fe fcef 	bl	8026d70 <mbedtls_calloc>
 8028392:	9006      	str	r0, [sp, #24]
 8028394:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8028396:	b908      	cbnz	r0, 802839c <mbedtls_x509_crt_parse_der+0xc0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8028398:	4d87      	ldr	r5, [pc, #540]	; (80285b8 <mbedtls_x509_crt_parse_der+0x2dc>)
 802839a:	e7e2      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
    memcpy( p, buf, crt->raw.len );
 802839c:	6862      	ldr	r2, [r4, #4]
 802839e:	4629      	mov	r1, r5
 80283a0:	f000 fb0b 	bl	80289ba <memcpy>
    p += crt->raw.len - len;
 80283a4:	6862      	ldr	r2, [r4, #4]
 80283a6:	9b05      	ldr	r3, [sp, #20]
 80283a8:	9f06      	ldr	r7, [sp, #24]
 80283aa:	1ad3      	subs	r3, r2, r3
 80283ac:	443b      	add	r3, r7
    end = crt_end = p + len;
 80283ae:	4417      	add	r7, r2
    p += crt->raw.len - len;
 80283b0:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 80283b2:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80283b4:	4632      	mov	r2, r6
 80283b6:	2330      	movs	r3, #48	; 0x30
 80283b8:	4639      	mov	r1, r7
 80283ba:	a806      	add	r0, sp, #24
 80283bc:	f7fb fa6d 	bl	802389a <mbedtls_asn1_get_tag>
 80283c0:	4680      	mov	r8, r0
 80283c2:	b140      	cbz	r0, 80283d6 <mbedtls_x509_crt_parse_der+0xfa>
        mbedtls_x509_crt_free( crt );
 80283c4:	4620      	mov	r0, r4
 80283c6:	f7ff ff30 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80283ca:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80283ce:	2d00      	cmp	r5, #0
 80283d0:	f000 8277 	beq.w	80288c2 <mbedtls_x509_crt_parse_der+0x5e6>
 80283d4:	e7c5      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
    end = p + len;
 80283d6:	e9dd 3605 	ldrd	r3, r6, [sp, #20]
 80283da:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 80283dc:	6963      	ldr	r3, [r4, #20]
 80283de:	1af3      	subs	r3, r6, r3
 80283e0:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80283e2:	aa17      	add	r2, sp, #92	; 0x5c
 80283e4:	23a0      	movs	r3, #160	; 0xa0
 80283e6:	4631      	mov	r1, r6
 80283e8:	a806      	add	r0, sp, #24
 80283ea:	f7fb fa56 	bl	802389a <mbedtls_asn1_get_tag>
 80283ee:	4605      	mov	r5, r0
 80283f0:	b1f0      	cbz	r0, 8028430 <mbedtls_x509_crt_parse_der+0x154>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80283f2:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80283f6:	d129      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
            *ver = 0;
 80283f8:	f8c4 8018 	str.w	r8, [r4, #24]
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80283fc:	f104 021c 	add.w	r2, r4, #28
 8028400:	4631      	mov	r1, r6
 8028402:	a806      	add	r0, sp, #24
 8028404:	f7ff f99c 	bl	8027740 <mbedtls_x509_get_serial>
 8028408:	4605      	mov	r5, r0
 802840a:	b9f8      	cbnz	r0, 802844c <mbedtls_x509_crt_parse_der+0x170>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 802840c:	f104 0828 	add.w	r8, r4, #40	; 0x28
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8028410:	ab0b      	add	r3, sp, #44	; 0x2c
 8028412:	4642      	mov	r2, r8
 8028414:	4631      	mov	r1, r6
 8028416:	a806      	add	r0, sp, #24
 8028418:	f7ff f9ba 	bl	8027790 <mbedtls_x509_get_alg>
 802841c:	4605      	mov	r5, r0
 802841e:	b9a8      	cbnz	r0, 802844c <mbedtls_x509_crt_parse_der+0x170>
    if( crt->version < 0 || crt->version > 2 )
 8028420:	69a3      	ldr	r3, [r4, #24]
 8028422:	2b02      	cmp	r3, #2
 8028424:	d91b      	bls.n	802845e <mbedtls_x509_crt_parse_der+0x182>
        mbedtls_x509_crt_free( crt );
 8028426:	4620      	mov	r0, r4
 8028428:	f7ff feff 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 802842c:	4d65      	ldr	r5, [pc, #404]	; (80285c4 <mbedtls_x509_crt_parse_der+0x2e8>)
 802842e:	e798      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
    end = *p + len;
 8028430:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028432:	9b06      	ldr	r3, [sp, #24]
 8028434:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8028438:	4641      	mov	r1, r8
 802843a:	f104 0218 	add.w	r2, r4, #24
 802843e:	a806      	add	r0, sp, #24
 8028440:	f7fb fa57 	bl	80238f2 <mbedtls_asn1_get_int>
 8028444:	b130      	cbz	r0, 8028454 <mbedtls_x509_crt_parse_der+0x178>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8028446:	f5b0 5508 	subs.w	r5, r0, #8704	; 0x2200
 802844a:	d0d7      	beq.n	80283fc <mbedtls_x509_crt_parse_der+0x120>
        mbedtls_x509_crt_free( crt );
 802844c:	4620      	mov	r0, r4
 802844e:	f7ff feec 	bl	802822a <mbedtls_x509_crt_free>
 8028452:	e786      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
    if( *p != end )
 8028454:	9b06      	ldr	r3, [sp, #24]
 8028456:	4598      	cmp	r8, r3
 8028458:	d0d0      	beq.n	80283fc <mbedtls_x509_crt_parse_der+0x120>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 802845a:	4d5b      	ldr	r5, [pc, #364]	; (80285c8 <mbedtls_x509_crt_parse_der+0x2ec>)
 802845c:	e7f6      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    crt->version++;
 802845e:	3301      	adds	r3, #1
 8028460:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8028462:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8028466:	9300      	str	r3, [sp, #0]
 8028468:	f504 7294 	add.w	r2, r4, #296	; 0x128
 802846c:	f204 1329 	addw	r3, r4, #297	; 0x129
 8028470:	a90b      	add	r1, sp, #44	; 0x2c
 8028472:	4640      	mov	r0, r8
 8028474:	f7ff fae0 	bl	8027a38 <mbedtls_x509_get_sig_alg>
 8028478:	4605      	mov	r5, r0
 802847a:	2800      	cmp	r0, #0
 802847c:	d1e6      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    crt->issuer_raw.p = p;
 802847e:	9b06      	ldr	r3, [sp, #24]
 8028480:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8028482:	aa05      	add	r2, sp, #20
 8028484:	2330      	movs	r3, #48	; 0x30
 8028486:	4631      	mov	r1, r6
 8028488:	a806      	add	r0, sp, #24
 802848a:	f7fb fa06 	bl	802389a <mbedtls_asn1_get_tag>
 802848e:	4605      	mov	r5, r0
 8028490:	b128      	cbz	r0, 802849e <mbedtls_x509_crt_parse_der+0x1c2>
        mbedtls_x509_crt_free( crt );
 8028492:	4620      	mov	r0, r4
 8028494:	f7ff fec9 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8028498:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 802849c:	e797      	b.n	80283ce <mbedtls_x509_crt_parse_der+0xf2>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802849e:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 80284a2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80284a6:	4419      	add	r1, r3
 80284a8:	a806      	add	r0, sp, #24
 80284aa:	f7ff f979 	bl	80277a0 <mbedtls_x509_get_name>
 80284ae:	4605      	mov	r5, r0
 80284b0:	2800      	cmp	r0, #0
 80284b2:	d1cb      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80284b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80284b6:	9b06      	ldr	r3, [sp, #24]
 80284b8:	1a9b      	subs	r3, r3, r2
 80284ba:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80284bc:	aa17      	add	r2, sp, #92	; 0x5c
 80284be:	2330      	movs	r3, #48	; 0x30
 80284c0:	4631      	mov	r1, r6
 80284c2:	a806      	add	r0, sp, #24
 80284c4:	f7fb f9e9 	bl	802389a <mbedtls_asn1_get_tag>
 80284c8:	2800      	cmp	r0, #0
 80284ca:	d057      	beq.n	802857c <mbedtls_x509_crt_parse_der+0x2a0>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80284cc:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 80284d0:	d1bc      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    crt->subject_raw.p = p;
 80284d2:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80284d6:	aa05      	add	r2, sp, #20
    crt->subject_raw.p = p;
 80284d8:	f858 3d50 	ldr.w	r3, [r8, #-80]!
 80284dc:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80284de:	4631      	mov	r1, r6
 80284e0:	2330      	movs	r3, #48	; 0x30
 80284e2:	4640      	mov	r0, r8
 80284e4:	f7fb f9d9 	bl	802389a <mbedtls_asn1_get_tag>
 80284e8:	4605      	mov	r5, r0
 80284ea:	2800      	cmp	r0, #0
 80284ec:	d1d1      	bne.n	8028492 <mbedtls_x509_crt_parse_der+0x1b6>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80284ee:	9b05      	ldr	r3, [sp, #20]
 80284f0:	b14b      	cbz	r3, 8028506 <mbedtls_x509_crt_parse_der+0x22a>
 80284f2:	9906      	ldr	r1, [sp, #24]
 80284f4:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80284f8:	4419      	add	r1, r3
 80284fa:	4640      	mov	r0, r8
 80284fc:	f7ff f950 	bl	80277a0 <mbedtls_x509_get_name>
 8028500:	4605      	mov	r5, r0
 8028502:	2800      	cmp	r0, #0
 8028504:	d1a2      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    crt->subject_raw.len = p - crt->subject_raw.p;
 8028506:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8028508:	9b06      	ldr	r3, [sp, #24]
 802850a:	1a9b      	subs	r3, r3, r2
 802850c:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 802850e:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8028512:	4631      	mov	r1, r6
 8028514:	4640      	mov	r0, r8
 8028516:	f7fe fbc3 	bl	8026ca0 <mbedtls_pk_parse_subpubkey>
 802851a:	4605      	mov	r5, r0
 802851c:	2800      	cmp	r0, #0
 802851e:	d195      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( crt->version == 2 || crt->version == 3 )
 8028520:	69a3      	ldr	r3, [r4, #24]
 8028522:	3b02      	subs	r3, #2
 8028524:	2b01      	cmp	r3, #1
 8028526:	d809      	bhi.n	802853c <mbedtls_x509_crt_parse_der+0x260>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8028528:	2301      	movs	r3, #1
 802852a:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 802852e:	4631      	mov	r1, r6
 8028530:	4640      	mov	r0, r8
 8028532:	f7ff fb79 	bl	8027c28 <x509_get_uid>
        if( ret != 0 )
 8028536:	4605      	mov	r5, r0
 8028538:	2800      	cmp	r0, #0
 802853a:	d187      	bne.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( crt->version == 2 || crt->version == 3 )
 802853c:	69a3      	ldr	r3, [r4, #24]
 802853e:	3b02      	subs	r3, #2
 8028540:	2b01      	cmp	r3, #1
 8028542:	d80a      	bhi.n	802855a <mbedtls_x509_crt_parse_der+0x27e>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8028544:	2302      	movs	r3, #2
 8028546:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 802854a:	4631      	mov	r1, r6
 802854c:	4640      	mov	r0, r8
 802854e:	f7ff fb6b 	bl	8027c28 <x509_get_uid>
        if( ret != 0 )
 8028552:	4605      	mov	r5, r0
 8028554:	2800      	cmp	r0, #0
 8028556:	f47f af79 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( crt->version == 3 )
 802855a:	69a3      	ldr	r3, [r4, #24]
 802855c:	2b03      	cmp	r3, #3
 802855e:	d13b      	bne.n	80285d8 <mbedtls_x509_crt_parse_der+0x2fc>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8028560:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8028564:	4631      	mov	r1, r6
 8028566:	4640      	mov	r0, r8
 8028568:	f7ff fa86 	bl	8027a78 <mbedtls_x509_get_ext>
 802856c:	4605      	mov	r5, r0
 802856e:	bb78      	cbnz	r0, 80285d0 <mbedtls_x509_crt_parse_der+0x2f4>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8028570:	4680      	mov	r8, r0
    while( *p < end )
 8028572:	9b06      	ldr	r3, [sp, #24]
 8028574:	429e      	cmp	r6, r3
 8028576:	d859      	bhi.n	802862c <mbedtls_x509_crt_parse_der+0x350>
    if( *p != end )
 8028578:	d02e      	beq.n	80285d8 <mbedtls_x509_crt_parse_der+0x2fc>
 802857a:	e15b      	b.n	8028834 <mbedtls_x509_crt_parse_der+0x558>
    end = *p + len;
 802857c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802857e:	9b06      	ldr	r3, [sp, #24]
 8028580:	eb03 0802 	add.w	r8, r3, r2
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8028584:	4641      	mov	r1, r8
 8028586:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 802858a:	a806      	add	r0, sp, #24
 802858c:	f7ff f984 	bl	8027898 <mbedtls_x509_get_time>
 8028590:	4605      	mov	r5, r0
 8028592:	2800      	cmp	r0, #0
 8028594:	f47f af5a 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8028598:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 802859c:	4641      	mov	r1, r8
 802859e:	a806      	add	r0, sp, #24
 80285a0:	f7ff f97a 	bl	8027898 <mbedtls_x509_get_time>
 80285a4:	4605      	mov	r5, r0
 80285a6:	2800      	cmp	r0, #0
 80285a8:	f47f af50 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( *p != end )
 80285ac:	9b06      	ldr	r3, [sp, #24]
 80285ae:	4598      	cmp	r8, r3
 80285b0:	d08f      	beq.n	80284d2 <mbedtls_x509_crt_parse_der+0x1f6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80285b2:	4d06      	ldr	r5, [pc, #24]	; (80285cc <mbedtls_x509_crt_parse_der+0x2f0>)
 80285b4:	e74a      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
 80285b6:	bf00      	nop
 80285b8:	ffffd780 	.word	0xffffd780
 80285bc:	ffffde80 	.word	0xffffde80
 80285c0:	ffffde1a 	.word	0xffffde1a
 80285c4:	ffffda80 	.word	0xffffda80
 80285c8:	ffffdd9a 	.word	0xffffdd9a
 80285cc:	ffffdb9a 	.word	0xffffdb9a
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80285d0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80285d4:	f47f af3a 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( p != end )
 80285d8:	9b06      	ldr	r3, [sp, #24]
 80285da:	429e      	cmp	r6, r3
 80285dc:	f47f aece 	bne.w	802837c <mbedtls_x509_crt_parse_der+0xa0>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80285e0:	ab0e      	add	r3, sp, #56	; 0x38
 80285e2:	aa11      	add	r2, sp, #68	; 0x44
 80285e4:	4639      	mov	r1, r7
 80285e6:	a806      	add	r0, sp, #24
 80285e8:	f7ff f8d2 	bl	8027790 <mbedtls_x509_get_alg>
 80285ec:	4605      	mov	r5, r0
 80285ee:	2800      	cmp	r0, #0
 80285f0:	f47f af2c 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( crt->sig_oid.len != sig_oid2.len ||
 80285f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80285f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80285f8:	429a      	cmp	r2, r3
 80285fa:	d112      	bne.n	8028622 <mbedtls_x509_crt_parse_der+0x346>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80285fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80285fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8028600:	f000 f9cc 	bl	802899c <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 8028604:	b968      	cbnz	r0, 8028622 <mbedtls_x509_crt_parse_der+0x346>
        sig_params1.len != sig_params2.len ||
 8028606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8028608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802860a:	429a      	cmp	r2, r3
 802860c:	d109      	bne.n	8028622 <mbedtls_x509_crt_parse_der+0x346>
        sig_params1.len != sig_params2.len ||
 802860e:	2a00      	cmp	r2, #0
 8028610:	f000 8149 	beq.w	80288a6 <mbedtls_x509_crt_parse_der+0x5ca>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8028614:	9910      	ldr	r1, [sp, #64]	; 0x40
 8028616:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028618:	f000 f9c0 	bl	802899c <memcmp>
        ( sig_params1.len != 0 &&
 802861c:	2800      	cmp	r0, #0
 802861e:	f000 8142 	beq.w	80288a6 <mbedtls_x509_crt_parse_der+0x5ca>
        mbedtls_x509_crt_free( crt );
 8028622:	4620      	mov	r0, r4
 8028624:	f7ff fe01 	bl	802822a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8028628:	4db0      	ldr	r5, [pc, #704]	; (80288ec <mbedtls_x509_crt_parse_der+0x610>)
 802862a:	e69a      	b.n	8028362 <mbedtls_x509_crt_parse_der+0x86>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802862c:	2330      	movs	r3, #48	; 0x30
 802862e:	aa07      	add	r2, sp, #28
 8028630:	4631      	mov	r1, r6
 8028632:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8028634:	e9cd 8814 	strd	r8, r8, [sp, #80]	; 0x50
 8028638:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int ext_type = 0;
 802863c:	e9cd 8808 	strd	r8, r8, [sp, #32]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028640:	f7fb f92b 	bl	802389a <mbedtls_asn1_get_tag>
 8028644:	b120      	cbz	r0, 8028650 <mbedtls_x509_crt_parse_der+0x374>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028646:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
        if( ret != 0 )
 802864a:	2d00      	cmp	r5, #0
 802864c:	d0c4      	beq.n	80285d8 <mbedtls_x509_crt_parse_der+0x2fc>
 802864e:	e6fd      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
        end_ext_data = *p + len;
 8028650:	e9dd 5306 	ldrd	r5, r3, [sp, #24]
 8028654:	441d      	add	r5, r3
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 8028656:	aa15      	add	r2, sp, #84	; 0x54
 8028658:	2306      	movs	r3, #6
 802865a:	4629      	mov	r1, r5
 802865c:	a806      	add	r0, sp, #24
 802865e:	f7fb f91c 	bl	802389a <mbedtls_asn1_get_tag>
 8028662:	2800      	cmp	r0, #0
 8028664:	d1ef      	bne.n	8028646 <mbedtls_x509_crt_parse_der+0x36a>
        extn_oid.tag = MBEDTLS_ASN1_OID;
 8028666:	2306      	movs	r3, #6
        *p += extn_oid.len;
 8028668:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.tag = MBEDTLS_ASN1_OID;
 802866a:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
 802866c:	9b06      	ldr	r3, [sp, #24]
 802866e:	9316      	str	r3, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8028670:	4629      	mov	r1, r5
        *p += extn_oid.len;
 8028672:	4413      	add	r3, r2
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8028674:	a806      	add	r0, sp, #24
 8028676:	aa08      	add	r2, sp, #32
        *p += extn_oid.len;
 8028678:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 802867a:	f7fb f922 	bl	80238c2 <mbedtls_asn1_get_bool>
 802867e:	b110      	cbz	r0, 8028686 <mbedtls_x509_crt_parse_der+0x3aa>
 8028680:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8028684:	d1df      	bne.n	8028646 <mbedtls_x509_crt_parse_der+0x36a>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8028686:	2304      	movs	r3, #4
 8028688:	aa07      	add	r2, sp, #28
 802868a:	4629      	mov	r1, r5
 802868c:	a806      	add	r0, sp, #24
 802868e:	f7fb f904 	bl	802389a <mbedtls_asn1_get_tag>
 8028692:	2800      	cmp	r0, #0
 8028694:	d1d7      	bne.n	8028646 <mbedtls_x509_crt_parse_der+0x36a>
        end_ext_octet = *p + len;
 8028696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802869a:	4413      	add	r3, r2
        if( end_ext_octet != end_ext_data )
 802869c:	429d      	cmp	r5, r3
 802869e:	f040 80c9 	bne.w	8028834 <mbedtls_x509_crt_parse_der+0x558>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80286a2:	a909      	add	r1, sp, #36	; 0x24
 80286a4:	a814      	add	r0, sp, #80	; 0x50
 80286a6:	f7fd ffbf 	bl	8026628 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 80286aa:	b130      	cbz	r0, 80286ba <mbedtls_x509_crt_parse_der+0x3de>
            if( is_critical )
 80286ac:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 80286ae:	9506      	str	r5, [sp, #24]
            if( is_critical )
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	f43f af5e 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80286b6:	4d8e      	ldr	r5, [pc, #568]	; (80288f0 <mbedtls_x509_crt_parse_der+0x614>)
 80286b8:	e6c8      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
        if( ( crt->ext_types & ext_type ) != 0 )
 80286ba:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 80286be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80286c0:	ea11 0302 	ands.w	r3, r1, r2
 80286c4:	f040 8122 	bne.w	802890c <mbedtls_x509_crt_parse_der+0x630>
        crt->ext_types |= ext_type;
 80286c8:	4311      	orrs	r1, r2
        switch( ext_type )
 80286ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 80286ce:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 80286d2:	d020      	beq.n	8028716 <mbedtls_x509_crt_parse_der+0x43a>
 80286d4:	dc06      	bgt.n	80286e4 <mbedtls_x509_crt_parse_der+0x408>
 80286d6:	2a04      	cmp	r2, #4
 80286d8:	d061      	beq.n	802879e <mbedtls_x509_crt_parse_der+0x4c2>
 80286da:	2a20      	cmp	r2, #32
 80286dc:	f000 8094 	beq.w	8028808 <mbedtls_x509_crt_parse_der+0x52c>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80286e0:	4d84      	ldr	r5, [pc, #528]	; (80288f4 <mbedtls_x509_crt_parse_der+0x618>)
 80286e2:	e6b3      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
        switch( ext_type )
 80286e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80286e8:	d07f      	beq.n	80287ea <mbedtls_x509_crt_parse_der+0x50e>
 80286ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80286ee:	d1f7      	bne.n	80286e0 <mbedtls_x509_crt_parse_der+0x404>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80286f0:	aa17      	add	r2, sp, #92	; 0x5c
 80286f2:	4629      	mov	r1, r5
 80286f4:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80286f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80286f8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80286fc:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80286fe:	f7fb f92f 	bl	8023960 <mbedtls_asn1_get_bitstring>
 8028702:	2800      	cmp	r0, #0
 8028704:	d155      	bne.n	80287b2 <mbedtls_x509_crt_parse_der+0x4d6>
    if( bs.len != 1 )
 8028706:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028708:	2b01      	cmp	r3, #1
 802870a:	d159      	bne.n	80287c0 <mbedtls_x509_crt_parse_der+0x4e4>
    *ns_cert_type = *bs.p;
 802870c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802870e:	781b      	ldrb	r3, [r3, #0]
 8028710:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8028714:	e72d      	b.n	8028572 <mbedtls_x509_crt_parse_der+0x296>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8028716:	f504 7280 	add.w	r2, r4, #256	; 0x100
 802871a:	9203      	str	r2, [sp, #12]
    *ca_istrue = 0; /* DEFAULT FALSE */
 802871c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8028720:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028724:	aa17      	add	r2, sp, #92	; 0x5c
 8028726:	2330      	movs	r3, #48	; 0x30
 8028728:	4629      	mov	r1, r5
 802872a:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 802872c:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028730:	f7fb f8b3 	bl	802389a <mbedtls_asn1_get_tag>
 8028734:	b128      	cbz	r0, 8028742 <mbedtls_x509_crt_parse_der+0x466>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028736:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802873a:	2d00      	cmp	r5, #0
 802873c:	f43f af19 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
 8028740:	e684      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( *p == end )
 8028742:	9b06      	ldr	r3, [sp, #24]
 8028744:	429d      	cmp	r5, r3
 8028746:	f43f af14 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 802874a:	465a      	mov	r2, fp
 802874c:	4629      	mov	r1, r5
 802874e:	a806      	add	r0, sp, #24
 8028750:	f7fb f8b7 	bl	80238c2 <mbedtls_asn1_get_bool>
 8028754:	b178      	cbz	r0, 8028776 <mbedtls_x509_crt_parse_der+0x49a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8028756:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802875a:	d1ec      	bne.n	8028736 <mbedtls_x509_crt_parse_der+0x45a>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 802875c:	465a      	mov	r2, fp
 802875e:	4629      	mov	r1, r5
 8028760:	a806      	add	r0, sp, #24
 8028762:	f7fb f8c6 	bl	80238f2 <mbedtls_asn1_get_int>
        if( ret != 0 )
 8028766:	2800      	cmp	r0, #0
 8028768:	d1e5      	bne.n	8028736 <mbedtls_x509_crt_parse_der+0x45a>
        if( *ca_istrue != 0 )
 802876a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 802876e:	b113      	cbz	r3, 8028776 <mbedtls_x509_crt_parse_der+0x49a>
            *ca_istrue = 1;
 8028770:	2301      	movs	r3, #1
 8028772:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 8028776:	9b06      	ldr	r3, [sp, #24]
 8028778:	429d      	cmp	r5, r3
 802877a:	f43f aefa 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 802877e:	9a03      	ldr	r2, [sp, #12]
 8028780:	4629      	mov	r1, r5
 8028782:	a806      	add	r0, sp, #24
 8028784:	f7fb f8b5 	bl	80238f2 <mbedtls_asn1_get_int>
 8028788:	2800      	cmp	r0, #0
 802878a:	d1d4      	bne.n	8028736 <mbedtls_x509_crt_parse_der+0x45a>
    if( *p != end )
 802878c:	9b06      	ldr	r3, [sp, #24]
 802878e:	429d      	cmp	r5, r3
 8028790:	d150      	bne.n	8028834 <mbedtls_x509_crt_parse_der+0x558>
    (*max_pathlen)++;
 8028792:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8028796:	3301      	adds	r3, #1
 8028798:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 802879c:	e6e9      	b.n	8028572 <mbedtls_x509_crt_parse_der+0x296>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802879e:	aa17      	add	r2, sp, #92	; 0x5c
 80287a0:	4629      	mov	r1, r5
 80287a2:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80287a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80287a6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80287aa:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80287ac:	f7fb f8d8 	bl	8023960 <mbedtls_asn1_get_bitstring>
 80287b0:	b120      	cbz	r0, 80287bc <mbedtls_x509_crt_parse_der+0x4e0>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80287b2:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 80287b6:	f43f aedc 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
 80287ba:	e647      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( bs.len < 1 )
 80287bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80287be:	b909      	cbnz	r1, 80287c4 <mbedtls_x509_crt_parse_der+0x4e8>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80287c0:	4d4d      	ldr	r5, [pc, #308]	; (80288f8 <mbedtls_x509_crt_parse_der+0x61c>)
 80287c2:	e643      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80287c4:	9d19      	ldr	r5, [sp, #100]	; 0x64
    *key_usage = 0;
 80287c6:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80287ca:	5c2b      	ldrb	r3, [r5, r0]
 80287cc:	00c2      	lsls	r2, r0, #3
 80287ce:	fa03 f202 	lsl.w	r2, r3, r2
 80287d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80287d6:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80287d8:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80287da:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80287dc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80287e0:	f43f aec7 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
 80287e4:	2804      	cmp	r0, #4
 80287e6:	d1f0      	bne.n	80287ca <mbedtls_x509_crt_parse_der+0x4ee>
 80287e8:	e6c3      	b.n	8028572 <mbedtls_x509_crt_parse_der+0x296>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80287ea:	2306      	movs	r3, #6
 80287ec:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80287f0:	4629      	mov	r1, r5
 80287f2:	a806      	add	r0, sp, #24
 80287f4:	f7fb f8eb 	bl	80239ce <mbedtls_asn1_get_sequence_of>
 80287f8:	2800      	cmp	r0, #0
 80287fa:	d1da      	bne.n	80287b2 <mbedtls_x509_crt_parse_der+0x4d6>
    if( ext_key_usage->buf.p == NULL )
 80287fc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8028800:	2b00      	cmp	r3, #0
 8028802:	f47f aeb6 	bne.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
 8028806:	e7db      	b.n	80287c0 <mbedtls_x509_crt_parse_der+0x4e4>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028808:	2330      	movs	r3, #48	; 0x30
 802880a:	aa0a      	add	r2, sp, #40	; 0x28
 802880c:	4629      	mov	r1, r5
 802880e:	a806      	add	r0, sp, #24
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8028810:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028814:	f7fb f841 	bl	802389a <mbedtls_asn1_get_tag>
 8028818:	2800      	cmp	r0, #0
 802881a:	d18c      	bne.n	8028736 <mbedtls_x509_crt_parse_der+0x45a>
    if( *p + len != end )
 802881c:	9b06      	ldr	r3, [sp, #24]
 802881e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028820:	4413      	add	r3, r2
 8028822:	429d      	cmp	r5, r3
 8028824:	d106      	bne.n	8028834 <mbedtls_x509_crt_parse_der+0x558>
    while( *p < end )
 8028826:	9b06      	ldr	r3, [sp, #24]
 8028828:	429d      	cmp	r5, r3
 802882a:	d805      	bhi.n	8028838 <mbedtls_x509_crt_parse_der+0x55c>
    cur->next = NULL;
 802882c:	f8cb 800c 	str.w	r8, [fp, #12]
    if( *p != end )
 8028830:	f43f ae9f 	beq.w	8028572 <mbedtls_x509_crt_parse_der+0x296>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028834:	4d31      	ldr	r5, [pc, #196]	; (80288fc <mbedtls_x509_crt_parse_der+0x620>)
 8028836:	e609      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
        if( ( end - *p ) < 1 )
 8028838:	1aea      	subs	r2, r5, r3
 802883a:	2a00      	cmp	r2, #0
 802883c:	dd53      	ble.n	80288e6 <mbedtls_x509_crt_parse_der+0x60a>
        tag = **p;
 802883e:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8028840:	4629      	mov	r1, r5
        tag = **p;
 8028842:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 8028846:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8028848:	a806      	add	r0, sp, #24
 802884a:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 802884c:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802884e:	f7fa ffdd 	bl	802380c <mbedtls_asn1_get_len>
 8028852:	9b03      	ldr	r3, [sp, #12]
 8028854:	2800      	cmp	r0, #0
 8028856:	f47f af6e 	bne.w	8028736 <mbedtls_x509_crt_parse_der+0x45a>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 802885a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 802885e:	2a80      	cmp	r2, #128	; 0x80
 8028860:	f47f af29 	bne.w	80286b6 <mbedtls_x509_crt_parse_der+0x3da>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8028864:	2b82      	cmp	r3, #130	; 0x82
 8028866:	d004      	beq.n	8028872 <mbedtls_x509_crt_parse_der+0x596>
            *p += tag_len;
 8028868:	9b06      	ldr	r3, [sp, #24]
 802886a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
 802886c:	4413      	add	r3, r2
 802886e:	9306      	str	r3, [sp, #24]
 8028870:	e7d9      	b.n	8028826 <mbedtls_x509_crt_parse_der+0x54a>
        if( cur->buf.p != NULL )
 8028872:	f8db 3008 	ldr.w	r3, [fp, #8]
 8028876:	b163      	cbz	r3, 8028892 <mbedtls_x509_crt_parse_der+0x5b6>
            if( cur->next != NULL )
 8028878:	f8db 300c 	ldr.w	r3, [fp, #12]
 802887c:	2b00      	cmp	r3, #0
 802887e:	d145      	bne.n	802890c <mbedtls_x509_crt_parse_der+0x630>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8028880:	2110      	movs	r1, #16
 8028882:	2001      	movs	r0, #1
 8028884:	f7fe fa74 	bl	8026d70 <mbedtls_calloc>
 8028888:	f8cb 000c 	str.w	r0, [fp, #12]
            if( cur->next == NULL )
 802888c:	2800      	cmp	r0, #0
 802888e:	d03b      	beq.n	8028908 <mbedtls_x509_crt_parse_der+0x62c>
 8028890:	4683      	mov	fp, r0
        buf->tag = tag;
 8028892:	2382      	movs	r3, #130	; 0x82
 8028894:	f8cb 3000 	str.w	r3, [fp]
        buf->len = tag_len;
 8028898:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 802889a:	9b06      	ldr	r3, [sp, #24]
 802889c:	f8cb 3008 	str.w	r3, [fp, #8]
        buf->len = tag_len;
 80288a0:	f8cb 2004 	str.w	r2, [fp, #4]
 80288a4:	e7e2      	b.n	802886c <mbedtls_x509_crt_parse_der+0x590>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80288a6:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80288aa:	4639      	mov	r1, r7
 80288ac:	a806      	add	r0, sp, #24
 80288ae:	f7ff f8a5 	bl	80279fc <mbedtls_x509_get_sig>
 80288b2:	4605      	mov	r5, r0
 80288b4:	2800      	cmp	r0, #0
 80288b6:	f47f adc9 	bne.w	802844c <mbedtls_x509_crt_parse_der+0x170>
    if( p != end )
 80288ba:	9b06      	ldr	r3, [sp, #24]
 80288bc:	429f      	cmp	r7, r3
 80288be:	f47f ad5d 	bne.w	802837c <mbedtls_x509_crt_parse_der+0xa0>
}
 80288c2:	4628      	mov	r0, r5
 80288c4:	b01b      	add	sp, #108	; 0x6c
 80288c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80288ca:	4d0d      	ldr	r5, [pc, #52]	; (8028900 <mbedtls_x509_crt_parse_der+0x624>)
        if( prev )
 80288cc:	f1b9 0f00 	cmp.w	r9, #0
 80288d0:	d103      	bne.n	80288da <mbedtls_x509_crt_parse_der+0x5fe>
            mbedtls_free( crt );
 80288d2:	4620      	mov	r0, r4
 80288d4:	f7fe fa52 	bl	8026d7c <mbedtls_free>
 80288d8:	e7f3      	b.n	80288c2 <mbedtls_x509_crt_parse_der+0x5e6>
            prev->next = NULL;
 80288da:	2300      	movs	r3, #0
 80288dc:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130
 80288e0:	e543      	b.n	802836a <mbedtls_x509_crt_parse_der+0x8e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80288e2:	4d07      	ldr	r5, [pc, #28]	; (8028900 <mbedtls_x509_crt_parse_der+0x624>)
 80288e4:	e7ed      	b.n	80288c2 <mbedtls_x509_crt_parse_der+0x5e6>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80288e6:	4d07      	ldr	r5, [pc, #28]	; (8028904 <mbedtls_x509_crt_parse_der+0x628>)
 80288e8:	e5b0      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
 80288ea:	bf00      	nop
 80288ec:	ffffd980 	.word	0xffffd980
 80288f0:	ffffda9e 	.word	0xffffda9e
 80288f4:	ffffdf80 	.word	0xffffdf80
 80288f8:	ffffda9c 	.word	0xffffda9c
 80288fc:	ffffda9a 	.word	0xffffda9a
 8028900:	ffffd800 	.word	0xffffd800
 8028904:	ffffdaa0 	.word	0xffffdaa0
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028908:	4d01      	ldr	r5, [pc, #4]	; (8028910 <mbedtls_x509_crt_parse_der+0x634>)
 802890a:	e59f      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 802890c:	4d01      	ldr	r5, [pc, #4]	; (8028914 <mbedtls_x509_crt_parse_der+0x638>)
 802890e:	e59d      	b.n	802844c <mbedtls_x509_crt_parse_der+0x170>
 8028910:	ffffda96 	.word	0xffffda96
 8028914:	ffffdb00 	.word	0xffffdb00

08028918 <calloc>:
 8028918:	4b02      	ldr	r3, [pc, #8]	; (8028924 <calloc+0xc>)
 802891a:	460a      	mov	r2, r1
 802891c:	4601      	mov	r1, r0
 802891e:	6818      	ldr	r0, [r3, #0]
 8028920:	f000 b85e 	b.w	80289e0 <_calloc_r>
 8028924:	20030108 	.word	0x20030108

08028928 <__errno>:
 8028928:	4b01      	ldr	r3, [pc, #4]	; (8028930 <__errno+0x8>)
 802892a:	6818      	ldr	r0, [r3, #0]
 802892c:	4770      	bx	lr
 802892e:	bf00      	nop
 8028930:	20030108 	.word	0x20030108

08028934 <__libc_init_array>:
 8028934:	b570      	push	{r4, r5, r6, lr}
 8028936:	4e0d      	ldr	r6, [pc, #52]	; (802896c <__libc_init_array+0x38>)
 8028938:	4c0d      	ldr	r4, [pc, #52]	; (8028970 <__libc_init_array+0x3c>)
 802893a:	1ba4      	subs	r4, r4, r6
 802893c:	10a4      	asrs	r4, r4, #2
 802893e:	2500      	movs	r5, #0
 8028940:	42a5      	cmp	r5, r4
 8028942:	d109      	bne.n	8028958 <__libc_init_array+0x24>
 8028944:	4e0b      	ldr	r6, [pc, #44]	; (8028974 <__libc_init_array+0x40>)
 8028946:	4c0c      	ldr	r4, [pc, #48]	; (8028978 <__libc_init_array+0x44>)
 8028948:	f001 fa66 	bl	8029e18 <_init>
 802894c:	1ba4      	subs	r4, r4, r6
 802894e:	10a4      	asrs	r4, r4, #2
 8028950:	2500      	movs	r5, #0
 8028952:	42a5      	cmp	r5, r4
 8028954:	d105      	bne.n	8028962 <__libc_init_array+0x2e>
 8028956:	bd70      	pop	{r4, r5, r6, pc}
 8028958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802895c:	4798      	blx	r3
 802895e:	3501      	adds	r5, #1
 8028960:	e7ee      	b.n	8028940 <__libc_init_array+0xc>
 8028962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028966:	4798      	blx	r3
 8028968:	3501      	adds	r5, #1
 802896a:	e7f2      	b.n	8028952 <__libc_init_array+0x1e>
 802896c:	0802dc48 	.word	0x0802dc48
 8028970:	0802dc48 	.word	0x0802dc48
 8028974:	0802dc48 	.word	0x0802dc48
 8028978:	0802dc4c 	.word	0x0802dc4c

0802897c <malloc>:
 802897c:	4b02      	ldr	r3, [pc, #8]	; (8028988 <malloc+0xc>)
 802897e:	4601      	mov	r1, r0
 8028980:	6818      	ldr	r0, [r3, #0]
 8028982:	f000 b889 	b.w	8028a98 <_malloc_r>
 8028986:	bf00      	nop
 8028988:	20030108 	.word	0x20030108

0802898c <free>:
 802898c:	4b02      	ldr	r3, [pc, #8]	; (8028998 <free+0xc>)
 802898e:	4601      	mov	r1, r0
 8028990:	6818      	ldr	r0, [r3, #0]
 8028992:	f000 b833 	b.w	80289fc <_free_r>
 8028996:	bf00      	nop
 8028998:	20030108 	.word	0x20030108

0802899c <memcmp>:
 802899c:	b530      	push	{r4, r5, lr}
 802899e:	2400      	movs	r4, #0
 80289a0:	42a2      	cmp	r2, r4
 80289a2:	d101      	bne.n	80289a8 <memcmp+0xc>
 80289a4:	2000      	movs	r0, #0
 80289a6:	e007      	b.n	80289b8 <memcmp+0x1c>
 80289a8:	5d03      	ldrb	r3, [r0, r4]
 80289aa:	3401      	adds	r4, #1
 80289ac:	190d      	adds	r5, r1, r4
 80289ae:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80289b2:	42ab      	cmp	r3, r5
 80289b4:	d0f4      	beq.n	80289a0 <memcmp+0x4>
 80289b6:	1b58      	subs	r0, r3, r5
 80289b8:	bd30      	pop	{r4, r5, pc}

080289ba <memcpy>:
 80289ba:	b510      	push	{r4, lr}
 80289bc:	1e43      	subs	r3, r0, #1
 80289be:	440a      	add	r2, r1
 80289c0:	4291      	cmp	r1, r2
 80289c2:	d100      	bne.n	80289c6 <memcpy+0xc>
 80289c4:	bd10      	pop	{r4, pc}
 80289c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80289ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80289ce:	e7f7      	b.n	80289c0 <memcpy+0x6>

080289d0 <memset>:
 80289d0:	4402      	add	r2, r0
 80289d2:	4603      	mov	r3, r0
 80289d4:	4293      	cmp	r3, r2
 80289d6:	d100      	bne.n	80289da <memset+0xa>
 80289d8:	4770      	bx	lr
 80289da:	f803 1b01 	strb.w	r1, [r3], #1
 80289de:	e7f9      	b.n	80289d4 <memset+0x4>

080289e0 <_calloc_r>:
 80289e0:	b538      	push	{r3, r4, r5, lr}
 80289e2:	fb02 f401 	mul.w	r4, r2, r1
 80289e6:	4621      	mov	r1, r4
 80289e8:	f000 f856 	bl	8028a98 <_malloc_r>
 80289ec:	4605      	mov	r5, r0
 80289ee:	b118      	cbz	r0, 80289f8 <_calloc_r+0x18>
 80289f0:	4622      	mov	r2, r4
 80289f2:	2100      	movs	r1, #0
 80289f4:	f7ff ffec 	bl	80289d0 <memset>
 80289f8:	4628      	mov	r0, r5
 80289fa:	bd38      	pop	{r3, r4, r5, pc}

080289fc <_free_r>:
 80289fc:	b538      	push	{r3, r4, r5, lr}
 80289fe:	4605      	mov	r5, r0
 8028a00:	2900      	cmp	r1, #0
 8028a02:	d045      	beq.n	8028a90 <_free_r+0x94>
 8028a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028a08:	1f0c      	subs	r4, r1, #4
 8028a0a:	2b00      	cmp	r3, #0
 8028a0c:	bfb8      	it	lt
 8028a0e:	18e4      	addlt	r4, r4, r3
 8028a10:	f000 fcbc 	bl	802938c <__malloc_lock>
 8028a14:	4a1f      	ldr	r2, [pc, #124]	; (8028a94 <_free_r+0x98>)
 8028a16:	6813      	ldr	r3, [r2, #0]
 8028a18:	4610      	mov	r0, r2
 8028a1a:	b933      	cbnz	r3, 8028a2a <_free_r+0x2e>
 8028a1c:	6063      	str	r3, [r4, #4]
 8028a1e:	6014      	str	r4, [r2, #0]
 8028a20:	4628      	mov	r0, r5
 8028a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028a26:	f000 bcb2 	b.w	802938e <__malloc_unlock>
 8028a2a:	42a3      	cmp	r3, r4
 8028a2c:	d90c      	bls.n	8028a48 <_free_r+0x4c>
 8028a2e:	6821      	ldr	r1, [r4, #0]
 8028a30:	1862      	adds	r2, r4, r1
 8028a32:	4293      	cmp	r3, r2
 8028a34:	bf04      	itt	eq
 8028a36:	681a      	ldreq	r2, [r3, #0]
 8028a38:	685b      	ldreq	r3, [r3, #4]
 8028a3a:	6063      	str	r3, [r4, #4]
 8028a3c:	bf04      	itt	eq
 8028a3e:	1852      	addeq	r2, r2, r1
 8028a40:	6022      	streq	r2, [r4, #0]
 8028a42:	6004      	str	r4, [r0, #0]
 8028a44:	e7ec      	b.n	8028a20 <_free_r+0x24>
 8028a46:	4613      	mov	r3, r2
 8028a48:	685a      	ldr	r2, [r3, #4]
 8028a4a:	b10a      	cbz	r2, 8028a50 <_free_r+0x54>
 8028a4c:	42a2      	cmp	r2, r4
 8028a4e:	d9fa      	bls.n	8028a46 <_free_r+0x4a>
 8028a50:	6819      	ldr	r1, [r3, #0]
 8028a52:	1858      	adds	r0, r3, r1
 8028a54:	42a0      	cmp	r0, r4
 8028a56:	d10b      	bne.n	8028a70 <_free_r+0x74>
 8028a58:	6820      	ldr	r0, [r4, #0]
 8028a5a:	4401      	add	r1, r0
 8028a5c:	1858      	adds	r0, r3, r1
 8028a5e:	4282      	cmp	r2, r0
 8028a60:	6019      	str	r1, [r3, #0]
 8028a62:	d1dd      	bne.n	8028a20 <_free_r+0x24>
 8028a64:	6810      	ldr	r0, [r2, #0]
 8028a66:	6852      	ldr	r2, [r2, #4]
 8028a68:	605a      	str	r2, [r3, #4]
 8028a6a:	4401      	add	r1, r0
 8028a6c:	6019      	str	r1, [r3, #0]
 8028a6e:	e7d7      	b.n	8028a20 <_free_r+0x24>
 8028a70:	d902      	bls.n	8028a78 <_free_r+0x7c>
 8028a72:	230c      	movs	r3, #12
 8028a74:	602b      	str	r3, [r5, #0]
 8028a76:	e7d3      	b.n	8028a20 <_free_r+0x24>
 8028a78:	6820      	ldr	r0, [r4, #0]
 8028a7a:	1821      	adds	r1, r4, r0
 8028a7c:	428a      	cmp	r2, r1
 8028a7e:	bf04      	itt	eq
 8028a80:	6811      	ldreq	r1, [r2, #0]
 8028a82:	6852      	ldreq	r2, [r2, #4]
 8028a84:	6062      	str	r2, [r4, #4]
 8028a86:	bf04      	itt	eq
 8028a88:	1809      	addeq	r1, r1, r0
 8028a8a:	6021      	streq	r1, [r4, #0]
 8028a8c:	605c      	str	r4, [r3, #4]
 8028a8e:	e7c7      	b.n	8028a20 <_free_r+0x24>
 8028a90:	bd38      	pop	{r3, r4, r5, pc}
 8028a92:	bf00      	nop
 8028a94:	20031df4 	.word	0x20031df4

08028a98 <_malloc_r>:
 8028a98:	b570      	push	{r4, r5, r6, lr}
 8028a9a:	1ccd      	adds	r5, r1, #3
 8028a9c:	f025 0503 	bic.w	r5, r5, #3
 8028aa0:	3508      	adds	r5, #8
 8028aa2:	2d0c      	cmp	r5, #12
 8028aa4:	bf38      	it	cc
 8028aa6:	250c      	movcc	r5, #12
 8028aa8:	2d00      	cmp	r5, #0
 8028aaa:	4606      	mov	r6, r0
 8028aac:	db01      	blt.n	8028ab2 <_malloc_r+0x1a>
 8028aae:	42a9      	cmp	r1, r5
 8028ab0:	d903      	bls.n	8028aba <_malloc_r+0x22>
 8028ab2:	230c      	movs	r3, #12
 8028ab4:	6033      	str	r3, [r6, #0]
 8028ab6:	2000      	movs	r0, #0
 8028ab8:	bd70      	pop	{r4, r5, r6, pc}
 8028aba:	f000 fc67 	bl	802938c <__malloc_lock>
 8028abe:	4a21      	ldr	r2, [pc, #132]	; (8028b44 <_malloc_r+0xac>)
 8028ac0:	6814      	ldr	r4, [r2, #0]
 8028ac2:	4621      	mov	r1, r4
 8028ac4:	b991      	cbnz	r1, 8028aec <_malloc_r+0x54>
 8028ac6:	4c20      	ldr	r4, [pc, #128]	; (8028b48 <_malloc_r+0xb0>)
 8028ac8:	6823      	ldr	r3, [r4, #0]
 8028aca:	b91b      	cbnz	r3, 8028ad4 <_malloc_r+0x3c>
 8028acc:	4630      	mov	r0, r6
 8028ace:	f000 f8cd 	bl	8028c6c <_sbrk_r>
 8028ad2:	6020      	str	r0, [r4, #0]
 8028ad4:	4629      	mov	r1, r5
 8028ad6:	4630      	mov	r0, r6
 8028ad8:	f000 f8c8 	bl	8028c6c <_sbrk_r>
 8028adc:	1c43      	adds	r3, r0, #1
 8028ade:	d124      	bne.n	8028b2a <_malloc_r+0x92>
 8028ae0:	230c      	movs	r3, #12
 8028ae2:	6033      	str	r3, [r6, #0]
 8028ae4:	4630      	mov	r0, r6
 8028ae6:	f000 fc52 	bl	802938e <__malloc_unlock>
 8028aea:	e7e4      	b.n	8028ab6 <_malloc_r+0x1e>
 8028aec:	680b      	ldr	r3, [r1, #0]
 8028aee:	1b5b      	subs	r3, r3, r5
 8028af0:	d418      	bmi.n	8028b24 <_malloc_r+0x8c>
 8028af2:	2b0b      	cmp	r3, #11
 8028af4:	d90f      	bls.n	8028b16 <_malloc_r+0x7e>
 8028af6:	600b      	str	r3, [r1, #0]
 8028af8:	50cd      	str	r5, [r1, r3]
 8028afa:	18cc      	adds	r4, r1, r3
 8028afc:	4630      	mov	r0, r6
 8028afe:	f000 fc46 	bl	802938e <__malloc_unlock>
 8028b02:	f104 000b 	add.w	r0, r4, #11
 8028b06:	1d23      	adds	r3, r4, #4
 8028b08:	f020 0007 	bic.w	r0, r0, #7
 8028b0c:	1ac3      	subs	r3, r0, r3
 8028b0e:	d0d3      	beq.n	8028ab8 <_malloc_r+0x20>
 8028b10:	425a      	negs	r2, r3
 8028b12:	50e2      	str	r2, [r4, r3]
 8028b14:	e7d0      	b.n	8028ab8 <_malloc_r+0x20>
 8028b16:	428c      	cmp	r4, r1
 8028b18:	684b      	ldr	r3, [r1, #4]
 8028b1a:	bf16      	itet	ne
 8028b1c:	6063      	strne	r3, [r4, #4]
 8028b1e:	6013      	streq	r3, [r2, #0]
 8028b20:	460c      	movne	r4, r1
 8028b22:	e7eb      	b.n	8028afc <_malloc_r+0x64>
 8028b24:	460c      	mov	r4, r1
 8028b26:	6849      	ldr	r1, [r1, #4]
 8028b28:	e7cc      	b.n	8028ac4 <_malloc_r+0x2c>
 8028b2a:	1cc4      	adds	r4, r0, #3
 8028b2c:	f024 0403 	bic.w	r4, r4, #3
 8028b30:	42a0      	cmp	r0, r4
 8028b32:	d005      	beq.n	8028b40 <_malloc_r+0xa8>
 8028b34:	1a21      	subs	r1, r4, r0
 8028b36:	4630      	mov	r0, r6
 8028b38:	f000 f898 	bl	8028c6c <_sbrk_r>
 8028b3c:	3001      	adds	r0, #1
 8028b3e:	d0cf      	beq.n	8028ae0 <_malloc_r+0x48>
 8028b40:	6025      	str	r5, [r4, #0]
 8028b42:	e7db      	b.n	8028afc <_malloc_r+0x64>
 8028b44:	20031df4 	.word	0x20031df4
 8028b48:	20031df8 	.word	0x20031df8

08028b4c <iprintf>:
 8028b4c:	b40f      	push	{r0, r1, r2, r3}
 8028b4e:	4b0a      	ldr	r3, [pc, #40]	; (8028b78 <iprintf+0x2c>)
 8028b50:	b513      	push	{r0, r1, r4, lr}
 8028b52:	681c      	ldr	r4, [r3, #0]
 8028b54:	b124      	cbz	r4, 8028b60 <iprintf+0x14>
 8028b56:	69a3      	ldr	r3, [r4, #24]
 8028b58:	b913      	cbnz	r3, 8028b60 <iprintf+0x14>
 8028b5a:	4620      	mov	r0, r4
 8028b5c:	f000 fb28 	bl	80291b0 <__sinit>
 8028b60:	ab05      	add	r3, sp, #20
 8028b62:	9a04      	ldr	r2, [sp, #16]
 8028b64:	68a1      	ldr	r1, [r4, #8]
 8028b66:	9301      	str	r3, [sp, #4]
 8028b68:	4620      	mov	r0, r4
 8028b6a:	f000 fd8d 	bl	8029688 <_vfiprintf_r>
 8028b6e:	b002      	add	sp, #8
 8028b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028b74:	b004      	add	sp, #16
 8028b76:	4770      	bx	lr
 8028b78:	20030108 	.word	0x20030108

08028b7c <putchar>:
 8028b7c:	b538      	push	{r3, r4, r5, lr}
 8028b7e:	4b08      	ldr	r3, [pc, #32]	; (8028ba0 <putchar+0x24>)
 8028b80:	681c      	ldr	r4, [r3, #0]
 8028b82:	4605      	mov	r5, r0
 8028b84:	b124      	cbz	r4, 8028b90 <putchar+0x14>
 8028b86:	69a3      	ldr	r3, [r4, #24]
 8028b88:	b913      	cbnz	r3, 8028b90 <putchar+0x14>
 8028b8a:	4620      	mov	r0, r4
 8028b8c:	f000 fb10 	bl	80291b0 <__sinit>
 8028b90:	68a2      	ldr	r2, [r4, #8]
 8028b92:	4629      	mov	r1, r5
 8028b94:	4620      	mov	r0, r4
 8028b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b9a:	f001 b813 	b.w	8029bc4 <_putc_r>
 8028b9e:	bf00      	nop
 8028ba0:	20030108 	.word	0x20030108

08028ba4 <_puts_r>:
 8028ba4:	b570      	push	{r4, r5, r6, lr}
 8028ba6:	460e      	mov	r6, r1
 8028ba8:	4605      	mov	r5, r0
 8028baa:	b118      	cbz	r0, 8028bb4 <_puts_r+0x10>
 8028bac:	6983      	ldr	r3, [r0, #24]
 8028bae:	b90b      	cbnz	r3, 8028bb4 <_puts_r+0x10>
 8028bb0:	f000 fafe 	bl	80291b0 <__sinit>
 8028bb4:	69ab      	ldr	r3, [r5, #24]
 8028bb6:	68ac      	ldr	r4, [r5, #8]
 8028bb8:	b913      	cbnz	r3, 8028bc0 <_puts_r+0x1c>
 8028bba:	4628      	mov	r0, r5
 8028bbc:	f000 faf8 	bl	80291b0 <__sinit>
 8028bc0:	4b23      	ldr	r3, [pc, #140]	; (8028c50 <_puts_r+0xac>)
 8028bc2:	429c      	cmp	r4, r3
 8028bc4:	d117      	bne.n	8028bf6 <_puts_r+0x52>
 8028bc6:	686c      	ldr	r4, [r5, #4]
 8028bc8:	89a3      	ldrh	r3, [r4, #12]
 8028bca:	071b      	lsls	r3, r3, #28
 8028bcc:	d51d      	bpl.n	8028c0a <_puts_r+0x66>
 8028bce:	6923      	ldr	r3, [r4, #16]
 8028bd0:	b1db      	cbz	r3, 8028c0a <_puts_r+0x66>
 8028bd2:	3e01      	subs	r6, #1
 8028bd4:	68a3      	ldr	r3, [r4, #8]
 8028bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8028bda:	3b01      	subs	r3, #1
 8028bdc:	60a3      	str	r3, [r4, #8]
 8028bde:	b9e9      	cbnz	r1, 8028c1c <_puts_r+0x78>
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	da2e      	bge.n	8028c42 <_puts_r+0x9e>
 8028be4:	4622      	mov	r2, r4
 8028be6:	210a      	movs	r1, #10
 8028be8:	4628      	mov	r0, r5
 8028bea:	f000 f931 	bl	8028e50 <__swbuf_r>
 8028bee:	3001      	adds	r0, #1
 8028bf0:	d011      	beq.n	8028c16 <_puts_r+0x72>
 8028bf2:	200a      	movs	r0, #10
 8028bf4:	e011      	b.n	8028c1a <_puts_r+0x76>
 8028bf6:	4b17      	ldr	r3, [pc, #92]	; (8028c54 <_puts_r+0xb0>)
 8028bf8:	429c      	cmp	r4, r3
 8028bfa:	d101      	bne.n	8028c00 <_puts_r+0x5c>
 8028bfc:	68ac      	ldr	r4, [r5, #8]
 8028bfe:	e7e3      	b.n	8028bc8 <_puts_r+0x24>
 8028c00:	4b15      	ldr	r3, [pc, #84]	; (8028c58 <_puts_r+0xb4>)
 8028c02:	429c      	cmp	r4, r3
 8028c04:	bf08      	it	eq
 8028c06:	68ec      	ldreq	r4, [r5, #12]
 8028c08:	e7de      	b.n	8028bc8 <_puts_r+0x24>
 8028c0a:	4621      	mov	r1, r4
 8028c0c:	4628      	mov	r0, r5
 8028c0e:	f000 f971 	bl	8028ef4 <__swsetup_r>
 8028c12:	2800      	cmp	r0, #0
 8028c14:	d0dd      	beq.n	8028bd2 <_puts_r+0x2e>
 8028c16:	f04f 30ff 	mov.w	r0, #4294967295
 8028c1a:	bd70      	pop	{r4, r5, r6, pc}
 8028c1c:	2b00      	cmp	r3, #0
 8028c1e:	da04      	bge.n	8028c2a <_puts_r+0x86>
 8028c20:	69a2      	ldr	r2, [r4, #24]
 8028c22:	429a      	cmp	r2, r3
 8028c24:	dc06      	bgt.n	8028c34 <_puts_r+0x90>
 8028c26:	290a      	cmp	r1, #10
 8028c28:	d004      	beq.n	8028c34 <_puts_r+0x90>
 8028c2a:	6823      	ldr	r3, [r4, #0]
 8028c2c:	1c5a      	adds	r2, r3, #1
 8028c2e:	6022      	str	r2, [r4, #0]
 8028c30:	7019      	strb	r1, [r3, #0]
 8028c32:	e7cf      	b.n	8028bd4 <_puts_r+0x30>
 8028c34:	4622      	mov	r2, r4
 8028c36:	4628      	mov	r0, r5
 8028c38:	f000 f90a 	bl	8028e50 <__swbuf_r>
 8028c3c:	3001      	adds	r0, #1
 8028c3e:	d1c9      	bne.n	8028bd4 <_puts_r+0x30>
 8028c40:	e7e9      	b.n	8028c16 <_puts_r+0x72>
 8028c42:	6823      	ldr	r3, [r4, #0]
 8028c44:	200a      	movs	r0, #10
 8028c46:	1c5a      	adds	r2, r3, #1
 8028c48:	6022      	str	r2, [r4, #0]
 8028c4a:	7018      	strb	r0, [r3, #0]
 8028c4c:	e7e5      	b.n	8028c1a <_puts_r+0x76>
 8028c4e:	bf00      	nop
 8028c50:	0802dbc8 	.word	0x0802dbc8
 8028c54:	0802dbe8 	.word	0x0802dbe8
 8028c58:	0802dba8 	.word	0x0802dba8

08028c5c <puts>:
 8028c5c:	4b02      	ldr	r3, [pc, #8]	; (8028c68 <puts+0xc>)
 8028c5e:	4601      	mov	r1, r0
 8028c60:	6818      	ldr	r0, [r3, #0]
 8028c62:	f7ff bf9f 	b.w	8028ba4 <_puts_r>
 8028c66:	bf00      	nop
 8028c68:	20030108 	.word	0x20030108

08028c6c <_sbrk_r>:
 8028c6c:	b538      	push	{r3, r4, r5, lr}
 8028c6e:	4c06      	ldr	r4, [pc, #24]	; (8028c88 <_sbrk_r+0x1c>)
 8028c70:	2300      	movs	r3, #0
 8028c72:	4605      	mov	r5, r0
 8028c74:	4608      	mov	r0, r1
 8028c76:	6023      	str	r3, [r4, #0]
 8028c78:	f7f7 ff9c 	bl	8020bb4 <_sbrk>
 8028c7c:	1c43      	adds	r3, r0, #1
 8028c7e:	d102      	bne.n	8028c86 <_sbrk_r+0x1a>
 8028c80:	6823      	ldr	r3, [r4, #0]
 8028c82:	b103      	cbz	r3, 8028c86 <_sbrk_r+0x1a>
 8028c84:	602b      	str	r3, [r5, #0]
 8028c86:	bd38      	pop	{r3, r4, r5, pc}
 8028c88:	20032e4c 	.word	0x20032e4c

08028c8c <setvbuf>:
 8028c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028c90:	461d      	mov	r5, r3
 8028c92:	4b51      	ldr	r3, [pc, #324]	; (8028dd8 <setvbuf+0x14c>)
 8028c94:	681e      	ldr	r6, [r3, #0]
 8028c96:	4604      	mov	r4, r0
 8028c98:	460f      	mov	r7, r1
 8028c9a:	4690      	mov	r8, r2
 8028c9c:	b126      	cbz	r6, 8028ca8 <setvbuf+0x1c>
 8028c9e:	69b3      	ldr	r3, [r6, #24]
 8028ca0:	b913      	cbnz	r3, 8028ca8 <setvbuf+0x1c>
 8028ca2:	4630      	mov	r0, r6
 8028ca4:	f000 fa84 	bl	80291b0 <__sinit>
 8028ca8:	4b4c      	ldr	r3, [pc, #304]	; (8028ddc <setvbuf+0x150>)
 8028caa:	429c      	cmp	r4, r3
 8028cac:	d152      	bne.n	8028d54 <setvbuf+0xc8>
 8028cae:	6874      	ldr	r4, [r6, #4]
 8028cb0:	f1b8 0f02 	cmp.w	r8, #2
 8028cb4:	d006      	beq.n	8028cc4 <setvbuf+0x38>
 8028cb6:	f1b8 0f01 	cmp.w	r8, #1
 8028cba:	f200 8089 	bhi.w	8028dd0 <setvbuf+0x144>
 8028cbe:	2d00      	cmp	r5, #0
 8028cc0:	f2c0 8086 	blt.w	8028dd0 <setvbuf+0x144>
 8028cc4:	4621      	mov	r1, r4
 8028cc6:	4630      	mov	r0, r6
 8028cc8:	f000 fa08 	bl	80290dc <_fflush_r>
 8028ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028cce:	b141      	cbz	r1, 8028ce2 <setvbuf+0x56>
 8028cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028cd4:	4299      	cmp	r1, r3
 8028cd6:	d002      	beq.n	8028cde <setvbuf+0x52>
 8028cd8:	4630      	mov	r0, r6
 8028cda:	f7ff fe8f 	bl	80289fc <_free_r>
 8028cde:	2300      	movs	r3, #0
 8028ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8028ce2:	2300      	movs	r3, #0
 8028ce4:	61a3      	str	r3, [r4, #24]
 8028ce6:	6063      	str	r3, [r4, #4]
 8028ce8:	89a3      	ldrh	r3, [r4, #12]
 8028cea:	061b      	lsls	r3, r3, #24
 8028cec:	d503      	bpl.n	8028cf6 <setvbuf+0x6a>
 8028cee:	6921      	ldr	r1, [r4, #16]
 8028cf0:	4630      	mov	r0, r6
 8028cf2:	f7ff fe83 	bl	80289fc <_free_r>
 8028cf6:	89a3      	ldrh	r3, [r4, #12]
 8028cf8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8028cfc:	f023 0303 	bic.w	r3, r3, #3
 8028d00:	f1b8 0f02 	cmp.w	r8, #2
 8028d04:	81a3      	strh	r3, [r4, #12]
 8028d06:	d05d      	beq.n	8028dc4 <setvbuf+0x138>
 8028d08:	ab01      	add	r3, sp, #4
 8028d0a:	466a      	mov	r2, sp
 8028d0c:	4621      	mov	r1, r4
 8028d0e:	4630      	mov	r0, r6
 8028d10:	f000 fad8 	bl	80292c4 <__swhatbuf_r>
 8028d14:	89a3      	ldrh	r3, [r4, #12]
 8028d16:	4318      	orrs	r0, r3
 8028d18:	81a0      	strh	r0, [r4, #12]
 8028d1a:	bb2d      	cbnz	r5, 8028d68 <setvbuf+0xdc>
 8028d1c:	9d00      	ldr	r5, [sp, #0]
 8028d1e:	4628      	mov	r0, r5
 8028d20:	f7ff fe2c 	bl	802897c <malloc>
 8028d24:	4607      	mov	r7, r0
 8028d26:	2800      	cmp	r0, #0
 8028d28:	d14e      	bne.n	8028dc8 <setvbuf+0x13c>
 8028d2a:	f8dd 9000 	ldr.w	r9, [sp]
 8028d2e:	45a9      	cmp	r9, r5
 8028d30:	d13c      	bne.n	8028dac <setvbuf+0x120>
 8028d32:	f04f 30ff 	mov.w	r0, #4294967295
 8028d36:	89a3      	ldrh	r3, [r4, #12]
 8028d38:	f043 0302 	orr.w	r3, r3, #2
 8028d3c:	81a3      	strh	r3, [r4, #12]
 8028d3e:	2300      	movs	r3, #0
 8028d40:	60a3      	str	r3, [r4, #8]
 8028d42:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028d46:	6023      	str	r3, [r4, #0]
 8028d48:	6123      	str	r3, [r4, #16]
 8028d4a:	2301      	movs	r3, #1
 8028d4c:	6163      	str	r3, [r4, #20]
 8028d4e:	b003      	add	sp, #12
 8028d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028d54:	4b22      	ldr	r3, [pc, #136]	; (8028de0 <setvbuf+0x154>)
 8028d56:	429c      	cmp	r4, r3
 8028d58:	d101      	bne.n	8028d5e <setvbuf+0xd2>
 8028d5a:	68b4      	ldr	r4, [r6, #8]
 8028d5c:	e7a8      	b.n	8028cb0 <setvbuf+0x24>
 8028d5e:	4b21      	ldr	r3, [pc, #132]	; (8028de4 <setvbuf+0x158>)
 8028d60:	429c      	cmp	r4, r3
 8028d62:	bf08      	it	eq
 8028d64:	68f4      	ldreq	r4, [r6, #12]
 8028d66:	e7a3      	b.n	8028cb0 <setvbuf+0x24>
 8028d68:	2f00      	cmp	r7, #0
 8028d6a:	d0d8      	beq.n	8028d1e <setvbuf+0x92>
 8028d6c:	69b3      	ldr	r3, [r6, #24]
 8028d6e:	b913      	cbnz	r3, 8028d76 <setvbuf+0xea>
 8028d70:	4630      	mov	r0, r6
 8028d72:	f000 fa1d 	bl	80291b0 <__sinit>
 8028d76:	f1b8 0f01 	cmp.w	r8, #1
 8028d7a:	bf08      	it	eq
 8028d7c:	89a3      	ldrheq	r3, [r4, #12]
 8028d7e:	6027      	str	r7, [r4, #0]
 8028d80:	bf04      	itt	eq
 8028d82:	f043 0301 	orreq.w	r3, r3, #1
 8028d86:	81a3      	strheq	r3, [r4, #12]
 8028d88:	89a3      	ldrh	r3, [r4, #12]
 8028d8a:	f013 0008 	ands.w	r0, r3, #8
 8028d8e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8028d92:	d01b      	beq.n	8028dcc <setvbuf+0x140>
 8028d94:	f013 0001 	ands.w	r0, r3, #1
 8028d98:	bf18      	it	ne
 8028d9a:	426d      	negne	r5, r5
 8028d9c:	f04f 0300 	mov.w	r3, #0
 8028da0:	bf1d      	ittte	ne
 8028da2:	60a3      	strne	r3, [r4, #8]
 8028da4:	61a5      	strne	r5, [r4, #24]
 8028da6:	4618      	movne	r0, r3
 8028da8:	60a5      	streq	r5, [r4, #8]
 8028daa:	e7d0      	b.n	8028d4e <setvbuf+0xc2>
 8028dac:	4648      	mov	r0, r9
 8028dae:	f7ff fde5 	bl	802897c <malloc>
 8028db2:	4607      	mov	r7, r0
 8028db4:	2800      	cmp	r0, #0
 8028db6:	d0bc      	beq.n	8028d32 <setvbuf+0xa6>
 8028db8:	89a3      	ldrh	r3, [r4, #12]
 8028dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028dbe:	81a3      	strh	r3, [r4, #12]
 8028dc0:	464d      	mov	r5, r9
 8028dc2:	e7d3      	b.n	8028d6c <setvbuf+0xe0>
 8028dc4:	2000      	movs	r0, #0
 8028dc6:	e7b6      	b.n	8028d36 <setvbuf+0xaa>
 8028dc8:	46a9      	mov	r9, r5
 8028dca:	e7f5      	b.n	8028db8 <setvbuf+0x12c>
 8028dcc:	60a0      	str	r0, [r4, #8]
 8028dce:	e7be      	b.n	8028d4e <setvbuf+0xc2>
 8028dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8028dd4:	e7bb      	b.n	8028d4e <setvbuf+0xc2>
 8028dd6:	bf00      	nop
 8028dd8:	20030108 	.word	0x20030108
 8028ddc:	0802dbc8 	.word	0x0802dbc8
 8028de0:	0802dbe8 	.word	0x0802dbe8
 8028de4:	0802dba8 	.word	0x0802dba8

08028de8 <sniprintf>:
 8028de8:	b40c      	push	{r2, r3}
 8028dea:	b530      	push	{r4, r5, lr}
 8028dec:	4b17      	ldr	r3, [pc, #92]	; (8028e4c <sniprintf+0x64>)
 8028dee:	1e0c      	subs	r4, r1, #0
 8028df0:	b09d      	sub	sp, #116	; 0x74
 8028df2:	681d      	ldr	r5, [r3, #0]
 8028df4:	da08      	bge.n	8028e08 <sniprintf+0x20>
 8028df6:	238b      	movs	r3, #139	; 0x8b
 8028df8:	602b      	str	r3, [r5, #0]
 8028dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8028dfe:	b01d      	add	sp, #116	; 0x74
 8028e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028e04:	b002      	add	sp, #8
 8028e06:	4770      	bx	lr
 8028e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8028e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8028e10:	bf14      	ite	ne
 8028e12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8028e16:	4623      	moveq	r3, r4
 8028e18:	9304      	str	r3, [sp, #16]
 8028e1a:	9307      	str	r3, [sp, #28]
 8028e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028e20:	9002      	str	r0, [sp, #8]
 8028e22:	9006      	str	r0, [sp, #24]
 8028e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8028e2a:	ab21      	add	r3, sp, #132	; 0x84
 8028e2c:	a902      	add	r1, sp, #8
 8028e2e:	4628      	mov	r0, r5
 8028e30:	9301      	str	r3, [sp, #4]
 8028e32:	f000 fb07 	bl	8029444 <_svfiprintf_r>
 8028e36:	1c43      	adds	r3, r0, #1
 8028e38:	bfbc      	itt	lt
 8028e3a:	238b      	movlt	r3, #139	; 0x8b
 8028e3c:	602b      	strlt	r3, [r5, #0]
 8028e3e:	2c00      	cmp	r4, #0
 8028e40:	d0dd      	beq.n	8028dfe <sniprintf+0x16>
 8028e42:	9b02      	ldr	r3, [sp, #8]
 8028e44:	2200      	movs	r2, #0
 8028e46:	701a      	strb	r2, [r3, #0]
 8028e48:	e7d9      	b.n	8028dfe <sniprintf+0x16>
 8028e4a:	bf00      	nop
 8028e4c:	20030108 	.word	0x20030108

08028e50 <__swbuf_r>:
 8028e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e52:	460e      	mov	r6, r1
 8028e54:	4614      	mov	r4, r2
 8028e56:	4605      	mov	r5, r0
 8028e58:	b118      	cbz	r0, 8028e62 <__swbuf_r+0x12>
 8028e5a:	6983      	ldr	r3, [r0, #24]
 8028e5c:	b90b      	cbnz	r3, 8028e62 <__swbuf_r+0x12>
 8028e5e:	f000 f9a7 	bl	80291b0 <__sinit>
 8028e62:	4b21      	ldr	r3, [pc, #132]	; (8028ee8 <__swbuf_r+0x98>)
 8028e64:	429c      	cmp	r4, r3
 8028e66:	d12a      	bne.n	8028ebe <__swbuf_r+0x6e>
 8028e68:	686c      	ldr	r4, [r5, #4]
 8028e6a:	69a3      	ldr	r3, [r4, #24]
 8028e6c:	60a3      	str	r3, [r4, #8]
 8028e6e:	89a3      	ldrh	r3, [r4, #12]
 8028e70:	071a      	lsls	r2, r3, #28
 8028e72:	d52e      	bpl.n	8028ed2 <__swbuf_r+0x82>
 8028e74:	6923      	ldr	r3, [r4, #16]
 8028e76:	b363      	cbz	r3, 8028ed2 <__swbuf_r+0x82>
 8028e78:	6923      	ldr	r3, [r4, #16]
 8028e7a:	6820      	ldr	r0, [r4, #0]
 8028e7c:	1ac0      	subs	r0, r0, r3
 8028e7e:	6963      	ldr	r3, [r4, #20]
 8028e80:	b2f6      	uxtb	r6, r6
 8028e82:	4283      	cmp	r3, r0
 8028e84:	4637      	mov	r7, r6
 8028e86:	dc04      	bgt.n	8028e92 <__swbuf_r+0x42>
 8028e88:	4621      	mov	r1, r4
 8028e8a:	4628      	mov	r0, r5
 8028e8c:	f000 f926 	bl	80290dc <_fflush_r>
 8028e90:	bb28      	cbnz	r0, 8028ede <__swbuf_r+0x8e>
 8028e92:	68a3      	ldr	r3, [r4, #8]
 8028e94:	3b01      	subs	r3, #1
 8028e96:	60a3      	str	r3, [r4, #8]
 8028e98:	6823      	ldr	r3, [r4, #0]
 8028e9a:	1c5a      	adds	r2, r3, #1
 8028e9c:	6022      	str	r2, [r4, #0]
 8028e9e:	701e      	strb	r6, [r3, #0]
 8028ea0:	6963      	ldr	r3, [r4, #20]
 8028ea2:	3001      	adds	r0, #1
 8028ea4:	4283      	cmp	r3, r0
 8028ea6:	d004      	beq.n	8028eb2 <__swbuf_r+0x62>
 8028ea8:	89a3      	ldrh	r3, [r4, #12]
 8028eaa:	07db      	lsls	r3, r3, #31
 8028eac:	d519      	bpl.n	8028ee2 <__swbuf_r+0x92>
 8028eae:	2e0a      	cmp	r6, #10
 8028eb0:	d117      	bne.n	8028ee2 <__swbuf_r+0x92>
 8028eb2:	4621      	mov	r1, r4
 8028eb4:	4628      	mov	r0, r5
 8028eb6:	f000 f911 	bl	80290dc <_fflush_r>
 8028eba:	b190      	cbz	r0, 8028ee2 <__swbuf_r+0x92>
 8028ebc:	e00f      	b.n	8028ede <__swbuf_r+0x8e>
 8028ebe:	4b0b      	ldr	r3, [pc, #44]	; (8028eec <__swbuf_r+0x9c>)
 8028ec0:	429c      	cmp	r4, r3
 8028ec2:	d101      	bne.n	8028ec8 <__swbuf_r+0x78>
 8028ec4:	68ac      	ldr	r4, [r5, #8]
 8028ec6:	e7d0      	b.n	8028e6a <__swbuf_r+0x1a>
 8028ec8:	4b09      	ldr	r3, [pc, #36]	; (8028ef0 <__swbuf_r+0xa0>)
 8028eca:	429c      	cmp	r4, r3
 8028ecc:	bf08      	it	eq
 8028ece:	68ec      	ldreq	r4, [r5, #12]
 8028ed0:	e7cb      	b.n	8028e6a <__swbuf_r+0x1a>
 8028ed2:	4621      	mov	r1, r4
 8028ed4:	4628      	mov	r0, r5
 8028ed6:	f000 f80d 	bl	8028ef4 <__swsetup_r>
 8028eda:	2800      	cmp	r0, #0
 8028edc:	d0cc      	beq.n	8028e78 <__swbuf_r+0x28>
 8028ede:	f04f 37ff 	mov.w	r7, #4294967295
 8028ee2:	4638      	mov	r0, r7
 8028ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028ee6:	bf00      	nop
 8028ee8:	0802dbc8 	.word	0x0802dbc8
 8028eec:	0802dbe8 	.word	0x0802dbe8
 8028ef0:	0802dba8 	.word	0x0802dba8

08028ef4 <__swsetup_r>:
 8028ef4:	4b32      	ldr	r3, [pc, #200]	; (8028fc0 <__swsetup_r+0xcc>)
 8028ef6:	b570      	push	{r4, r5, r6, lr}
 8028ef8:	681d      	ldr	r5, [r3, #0]
 8028efa:	4606      	mov	r6, r0
 8028efc:	460c      	mov	r4, r1
 8028efe:	b125      	cbz	r5, 8028f0a <__swsetup_r+0x16>
 8028f00:	69ab      	ldr	r3, [r5, #24]
 8028f02:	b913      	cbnz	r3, 8028f0a <__swsetup_r+0x16>
 8028f04:	4628      	mov	r0, r5
 8028f06:	f000 f953 	bl	80291b0 <__sinit>
 8028f0a:	4b2e      	ldr	r3, [pc, #184]	; (8028fc4 <__swsetup_r+0xd0>)
 8028f0c:	429c      	cmp	r4, r3
 8028f0e:	d10f      	bne.n	8028f30 <__swsetup_r+0x3c>
 8028f10:	686c      	ldr	r4, [r5, #4]
 8028f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028f16:	b29a      	uxth	r2, r3
 8028f18:	0715      	lsls	r5, r2, #28
 8028f1a:	d42c      	bmi.n	8028f76 <__swsetup_r+0x82>
 8028f1c:	06d0      	lsls	r0, r2, #27
 8028f1e:	d411      	bmi.n	8028f44 <__swsetup_r+0x50>
 8028f20:	2209      	movs	r2, #9
 8028f22:	6032      	str	r2, [r6, #0]
 8028f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028f28:	81a3      	strh	r3, [r4, #12]
 8028f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8028f2e:	e03e      	b.n	8028fae <__swsetup_r+0xba>
 8028f30:	4b25      	ldr	r3, [pc, #148]	; (8028fc8 <__swsetup_r+0xd4>)
 8028f32:	429c      	cmp	r4, r3
 8028f34:	d101      	bne.n	8028f3a <__swsetup_r+0x46>
 8028f36:	68ac      	ldr	r4, [r5, #8]
 8028f38:	e7eb      	b.n	8028f12 <__swsetup_r+0x1e>
 8028f3a:	4b24      	ldr	r3, [pc, #144]	; (8028fcc <__swsetup_r+0xd8>)
 8028f3c:	429c      	cmp	r4, r3
 8028f3e:	bf08      	it	eq
 8028f40:	68ec      	ldreq	r4, [r5, #12]
 8028f42:	e7e6      	b.n	8028f12 <__swsetup_r+0x1e>
 8028f44:	0751      	lsls	r1, r2, #29
 8028f46:	d512      	bpl.n	8028f6e <__swsetup_r+0x7a>
 8028f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028f4a:	b141      	cbz	r1, 8028f5e <__swsetup_r+0x6a>
 8028f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028f50:	4299      	cmp	r1, r3
 8028f52:	d002      	beq.n	8028f5a <__swsetup_r+0x66>
 8028f54:	4630      	mov	r0, r6
 8028f56:	f7ff fd51 	bl	80289fc <_free_r>
 8028f5a:	2300      	movs	r3, #0
 8028f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8028f5e:	89a3      	ldrh	r3, [r4, #12]
 8028f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028f64:	81a3      	strh	r3, [r4, #12]
 8028f66:	2300      	movs	r3, #0
 8028f68:	6063      	str	r3, [r4, #4]
 8028f6a:	6923      	ldr	r3, [r4, #16]
 8028f6c:	6023      	str	r3, [r4, #0]
 8028f6e:	89a3      	ldrh	r3, [r4, #12]
 8028f70:	f043 0308 	orr.w	r3, r3, #8
 8028f74:	81a3      	strh	r3, [r4, #12]
 8028f76:	6923      	ldr	r3, [r4, #16]
 8028f78:	b94b      	cbnz	r3, 8028f8e <__swsetup_r+0x9a>
 8028f7a:	89a3      	ldrh	r3, [r4, #12]
 8028f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028f84:	d003      	beq.n	8028f8e <__swsetup_r+0x9a>
 8028f86:	4621      	mov	r1, r4
 8028f88:	4630      	mov	r0, r6
 8028f8a:	f000 f9bf 	bl	802930c <__smakebuf_r>
 8028f8e:	89a2      	ldrh	r2, [r4, #12]
 8028f90:	f012 0301 	ands.w	r3, r2, #1
 8028f94:	d00c      	beq.n	8028fb0 <__swsetup_r+0xbc>
 8028f96:	2300      	movs	r3, #0
 8028f98:	60a3      	str	r3, [r4, #8]
 8028f9a:	6963      	ldr	r3, [r4, #20]
 8028f9c:	425b      	negs	r3, r3
 8028f9e:	61a3      	str	r3, [r4, #24]
 8028fa0:	6923      	ldr	r3, [r4, #16]
 8028fa2:	b953      	cbnz	r3, 8028fba <__swsetup_r+0xc6>
 8028fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028fa8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8028fac:	d1ba      	bne.n	8028f24 <__swsetup_r+0x30>
 8028fae:	bd70      	pop	{r4, r5, r6, pc}
 8028fb0:	0792      	lsls	r2, r2, #30
 8028fb2:	bf58      	it	pl
 8028fb4:	6963      	ldrpl	r3, [r4, #20]
 8028fb6:	60a3      	str	r3, [r4, #8]
 8028fb8:	e7f2      	b.n	8028fa0 <__swsetup_r+0xac>
 8028fba:	2000      	movs	r0, #0
 8028fbc:	e7f7      	b.n	8028fae <__swsetup_r+0xba>
 8028fbe:	bf00      	nop
 8028fc0:	20030108 	.word	0x20030108
 8028fc4:	0802dbc8 	.word	0x0802dbc8
 8028fc8:	0802dbe8 	.word	0x0802dbe8
 8028fcc:	0802dba8 	.word	0x0802dba8

08028fd0 <__sflush_r>:
 8028fd0:	898a      	ldrh	r2, [r1, #12]
 8028fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fd6:	4605      	mov	r5, r0
 8028fd8:	0710      	lsls	r0, r2, #28
 8028fda:	460c      	mov	r4, r1
 8028fdc:	d458      	bmi.n	8029090 <__sflush_r+0xc0>
 8028fde:	684b      	ldr	r3, [r1, #4]
 8028fe0:	2b00      	cmp	r3, #0
 8028fe2:	dc05      	bgt.n	8028ff0 <__sflush_r+0x20>
 8028fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	dc02      	bgt.n	8028ff0 <__sflush_r+0x20>
 8028fea:	2000      	movs	r0, #0
 8028fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028ff2:	2e00      	cmp	r6, #0
 8028ff4:	d0f9      	beq.n	8028fea <__sflush_r+0x1a>
 8028ff6:	2300      	movs	r3, #0
 8028ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028ffc:	682f      	ldr	r7, [r5, #0]
 8028ffe:	6a21      	ldr	r1, [r4, #32]
 8029000:	602b      	str	r3, [r5, #0]
 8029002:	d032      	beq.n	802906a <__sflush_r+0x9a>
 8029004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029006:	89a3      	ldrh	r3, [r4, #12]
 8029008:	075a      	lsls	r2, r3, #29
 802900a:	d505      	bpl.n	8029018 <__sflush_r+0x48>
 802900c:	6863      	ldr	r3, [r4, #4]
 802900e:	1ac0      	subs	r0, r0, r3
 8029010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029012:	b10b      	cbz	r3, 8029018 <__sflush_r+0x48>
 8029014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029016:	1ac0      	subs	r0, r0, r3
 8029018:	2300      	movs	r3, #0
 802901a:	4602      	mov	r2, r0
 802901c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802901e:	6a21      	ldr	r1, [r4, #32]
 8029020:	4628      	mov	r0, r5
 8029022:	47b0      	blx	r6
 8029024:	1c43      	adds	r3, r0, #1
 8029026:	89a3      	ldrh	r3, [r4, #12]
 8029028:	d106      	bne.n	8029038 <__sflush_r+0x68>
 802902a:	6829      	ldr	r1, [r5, #0]
 802902c:	291d      	cmp	r1, #29
 802902e:	d848      	bhi.n	80290c2 <__sflush_r+0xf2>
 8029030:	4a29      	ldr	r2, [pc, #164]	; (80290d8 <__sflush_r+0x108>)
 8029032:	40ca      	lsrs	r2, r1
 8029034:	07d6      	lsls	r6, r2, #31
 8029036:	d544      	bpl.n	80290c2 <__sflush_r+0xf2>
 8029038:	2200      	movs	r2, #0
 802903a:	6062      	str	r2, [r4, #4]
 802903c:	04d9      	lsls	r1, r3, #19
 802903e:	6922      	ldr	r2, [r4, #16]
 8029040:	6022      	str	r2, [r4, #0]
 8029042:	d504      	bpl.n	802904e <__sflush_r+0x7e>
 8029044:	1c42      	adds	r2, r0, #1
 8029046:	d101      	bne.n	802904c <__sflush_r+0x7c>
 8029048:	682b      	ldr	r3, [r5, #0]
 802904a:	b903      	cbnz	r3, 802904e <__sflush_r+0x7e>
 802904c:	6560      	str	r0, [r4, #84]	; 0x54
 802904e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029050:	602f      	str	r7, [r5, #0]
 8029052:	2900      	cmp	r1, #0
 8029054:	d0c9      	beq.n	8028fea <__sflush_r+0x1a>
 8029056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802905a:	4299      	cmp	r1, r3
 802905c:	d002      	beq.n	8029064 <__sflush_r+0x94>
 802905e:	4628      	mov	r0, r5
 8029060:	f7ff fccc 	bl	80289fc <_free_r>
 8029064:	2000      	movs	r0, #0
 8029066:	6360      	str	r0, [r4, #52]	; 0x34
 8029068:	e7c0      	b.n	8028fec <__sflush_r+0x1c>
 802906a:	2301      	movs	r3, #1
 802906c:	4628      	mov	r0, r5
 802906e:	47b0      	blx	r6
 8029070:	1c41      	adds	r1, r0, #1
 8029072:	d1c8      	bne.n	8029006 <__sflush_r+0x36>
 8029074:	682b      	ldr	r3, [r5, #0]
 8029076:	2b00      	cmp	r3, #0
 8029078:	d0c5      	beq.n	8029006 <__sflush_r+0x36>
 802907a:	2b1d      	cmp	r3, #29
 802907c:	d001      	beq.n	8029082 <__sflush_r+0xb2>
 802907e:	2b16      	cmp	r3, #22
 8029080:	d101      	bne.n	8029086 <__sflush_r+0xb6>
 8029082:	602f      	str	r7, [r5, #0]
 8029084:	e7b1      	b.n	8028fea <__sflush_r+0x1a>
 8029086:	89a3      	ldrh	r3, [r4, #12]
 8029088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802908c:	81a3      	strh	r3, [r4, #12]
 802908e:	e7ad      	b.n	8028fec <__sflush_r+0x1c>
 8029090:	690f      	ldr	r7, [r1, #16]
 8029092:	2f00      	cmp	r7, #0
 8029094:	d0a9      	beq.n	8028fea <__sflush_r+0x1a>
 8029096:	0793      	lsls	r3, r2, #30
 8029098:	680e      	ldr	r6, [r1, #0]
 802909a:	bf08      	it	eq
 802909c:	694b      	ldreq	r3, [r1, #20]
 802909e:	600f      	str	r7, [r1, #0]
 80290a0:	bf18      	it	ne
 80290a2:	2300      	movne	r3, #0
 80290a4:	eba6 0807 	sub.w	r8, r6, r7
 80290a8:	608b      	str	r3, [r1, #8]
 80290aa:	f1b8 0f00 	cmp.w	r8, #0
 80290ae:	dd9c      	ble.n	8028fea <__sflush_r+0x1a>
 80290b0:	4643      	mov	r3, r8
 80290b2:	463a      	mov	r2, r7
 80290b4:	6a21      	ldr	r1, [r4, #32]
 80290b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80290b8:	4628      	mov	r0, r5
 80290ba:	47b0      	blx	r6
 80290bc:	2800      	cmp	r0, #0
 80290be:	dc06      	bgt.n	80290ce <__sflush_r+0xfe>
 80290c0:	89a3      	ldrh	r3, [r4, #12]
 80290c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80290c6:	81a3      	strh	r3, [r4, #12]
 80290c8:	f04f 30ff 	mov.w	r0, #4294967295
 80290cc:	e78e      	b.n	8028fec <__sflush_r+0x1c>
 80290ce:	4407      	add	r7, r0
 80290d0:	eba8 0800 	sub.w	r8, r8, r0
 80290d4:	e7e9      	b.n	80290aa <__sflush_r+0xda>
 80290d6:	bf00      	nop
 80290d8:	20400001 	.word	0x20400001

080290dc <_fflush_r>:
 80290dc:	b538      	push	{r3, r4, r5, lr}
 80290de:	690b      	ldr	r3, [r1, #16]
 80290e0:	4605      	mov	r5, r0
 80290e2:	460c      	mov	r4, r1
 80290e4:	b1db      	cbz	r3, 802911e <_fflush_r+0x42>
 80290e6:	b118      	cbz	r0, 80290f0 <_fflush_r+0x14>
 80290e8:	6983      	ldr	r3, [r0, #24]
 80290ea:	b90b      	cbnz	r3, 80290f0 <_fflush_r+0x14>
 80290ec:	f000 f860 	bl	80291b0 <__sinit>
 80290f0:	4b0c      	ldr	r3, [pc, #48]	; (8029124 <_fflush_r+0x48>)
 80290f2:	429c      	cmp	r4, r3
 80290f4:	d109      	bne.n	802910a <_fflush_r+0x2e>
 80290f6:	686c      	ldr	r4, [r5, #4]
 80290f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290fc:	b17b      	cbz	r3, 802911e <_fflush_r+0x42>
 80290fe:	4621      	mov	r1, r4
 8029100:	4628      	mov	r0, r5
 8029102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029106:	f7ff bf63 	b.w	8028fd0 <__sflush_r>
 802910a:	4b07      	ldr	r3, [pc, #28]	; (8029128 <_fflush_r+0x4c>)
 802910c:	429c      	cmp	r4, r3
 802910e:	d101      	bne.n	8029114 <_fflush_r+0x38>
 8029110:	68ac      	ldr	r4, [r5, #8]
 8029112:	e7f1      	b.n	80290f8 <_fflush_r+0x1c>
 8029114:	4b05      	ldr	r3, [pc, #20]	; (802912c <_fflush_r+0x50>)
 8029116:	429c      	cmp	r4, r3
 8029118:	bf08      	it	eq
 802911a:	68ec      	ldreq	r4, [r5, #12]
 802911c:	e7ec      	b.n	80290f8 <_fflush_r+0x1c>
 802911e:	2000      	movs	r0, #0
 8029120:	bd38      	pop	{r3, r4, r5, pc}
 8029122:	bf00      	nop
 8029124:	0802dbc8 	.word	0x0802dbc8
 8029128:	0802dbe8 	.word	0x0802dbe8
 802912c:	0802dba8 	.word	0x0802dba8

08029130 <std>:
 8029130:	2300      	movs	r3, #0
 8029132:	b510      	push	{r4, lr}
 8029134:	4604      	mov	r4, r0
 8029136:	e9c0 3300 	strd	r3, r3, [r0]
 802913a:	6083      	str	r3, [r0, #8]
 802913c:	8181      	strh	r1, [r0, #12]
 802913e:	6643      	str	r3, [r0, #100]	; 0x64
 8029140:	81c2      	strh	r2, [r0, #14]
 8029142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029146:	6183      	str	r3, [r0, #24]
 8029148:	4619      	mov	r1, r3
 802914a:	2208      	movs	r2, #8
 802914c:	305c      	adds	r0, #92	; 0x5c
 802914e:	f7ff fc3f 	bl	80289d0 <memset>
 8029152:	4b05      	ldr	r3, [pc, #20]	; (8029168 <std+0x38>)
 8029154:	6263      	str	r3, [r4, #36]	; 0x24
 8029156:	4b05      	ldr	r3, [pc, #20]	; (802916c <std+0x3c>)
 8029158:	62a3      	str	r3, [r4, #40]	; 0x28
 802915a:	4b05      	ldr	r3, [pc, #20]	; (8029170 <std+0x40>)
 802915c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802915e:	4b05      	ldr	r3, [pc, #20]	; (8029174 <std+0x44>)
 8029160:	6224      	str	r4, [r4, #32]
 8029162:	6323      	str	r3, [r4, #48]	; 0x30
 8029164:	bd10      	pop	{r4, pc}
 8029166:	bf00      	nop
 8029168:	08029c31 	.word	0x08029c31
 802916c:	08029c53 	.word	0x08029c53
 8029170:	08029c8b 	.word	0x08029c8b
 8029174:	08029caf 	.word	0x08029caf

08029178 <_cleanup_r>:
 8029178:	4901      	ldr	r1, [pc, #4]	; (8029180 <_cleanup_r+0x8>)
 802917a:	f000 b885 	b.w	8029288 <_fwalk_reent>
 802917e:	bf00      	nop
 8029180:	080290dd 	.word	0x080290dd

08029184 <__sfmoreglue>:
 8029184:	b570      	push	{r4, r5, r6, lr}
 8029186:	1e4a      	subs	r2, r1, #1
 8029188:	2568      	movs	r5, #104	; 0x68
 802918a:	4355      	muls	r5, r2
 802918c:	460e      	mov	r6, r1
 802918e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8029192:	f7ff fc81 	bl	8028a98 <_malloc_r>
 8029196:	4604      	mov	r4, r0
 8029198:	b140      	cbz	r0, 80291ac <__sfmoreglue+0x28>
 802919a:	2100      	movs	r1, #0
 802919c:	e9c0 1600 	strd	r1, r6, [r0]
 80291a0:	300c      	adds	r0, #12
 80291a2:	60a0      	str	r0, [r4, #8]
 80291a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80291a8:	f7ff fc12 	bl	80289d0 <memset>
 80291ac:	4620      	mov	r0, r4
 80291ae:	bd70      	pop	{r4, r5, r6, pc}

080291b0 <__sinit>:
 80291b0:	6983      	ldr	r3, [r0, #24]
 80291b2:	b510      	push	{r4, lr}
 80291b4:	4604      	mov	r4, r0
 80291b6:	bb33      	cbnz	r3, 8029206 <__sinit+0x56>
 80291b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80291bc:	6503      	str	r3, [r0, #80]	; 0x50
 80291be:	4b12      	ldr	r3, [pc, #72]	; (8029208 <__sinit+0x58>)
 80291c0:	4a12      	ldr	r2, [pc, #72]	; (802920c <__sinit+0x5c>)
 80291c2:	681b      	ldr	r3, [r3, #0]
 80291c4:	6282      	str	r2, [r0, #40]	; 0x28
 80291c6:	4298      	cmp	r0, r3
 80291c8:	bf04      	itt	eq
 80291ca:	2301      	moveq	r3, #1
 80291cc:	6183      	streq	r3, [r0, #24]
 80291ce:	f000 f81f 	bl	8029210 <__sfp>
 80291d2:	6060      	str	r0, [r4, #4]
 80291d4:	4620      	mov	r0, r4
 80291d6:	f000 f81b 	bl	8029210 <__sfp>
 80291da:	60a0      	str	r0, [r4, #8]
 80291dc:	4620      	mov	r0, r4
 80291de:	f000 f817 	bl	8029210 <__sfp>
 80291e2:	2200      	movs	r2, #0
 80291e4:	60e0      	str	r0, [r4, #12]
 80291e6:	2104      	movs	r1, #4
 80291e8:	6860      	ldr	r0, [r4, #4]
 80291ea:	f7ff ffa1 	bl	8029130 <std>
 80291ee:	2201      	movs	r2, #1
 80291f0:	2109      	movs	r1, #9
 80291f2:	68a0      	ldr	r0, [r4, #8]
 80291f4:	f7ff ff9c 	bl	8029130 <std>
 80291f8:	2202      	movs	r2, #2
 80291fa:	2112      	movs	r1, #18
 80291fc:	68e0      	ldr	r0, [r4, #12]
 80291fe:	f7ff ff97 	bl	8029130 <std>
 8029202:	2301      	movs	r3, #1
 8029204:	61a3      	str	r3, [r4, #24]
 8029206:	bd10      	pop	{r4, pc}
 8029208:	0802dba4 	.word	0x0802dba4
 802920c:	08029179 	.word	0x08029179

08029210 <__sfp>:
 8029210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029212:	4b1b      	ldr	r3, [pc, #108]	; (8029280 <__sfp+0x70>)
 8029214:	681e      	ldr	r6, [r3, #0]
 8029216:	69b3      	ldr	r3, [r6, #24]
 8029218:	4607      	mov	r7, r0
 802921a:	b913      	cbnz	r3, 8029222 <__sfp+0x12>
 802921c:	4630      	mov	r0, r6
 802921e:	f7ff ffc7 	bl	80291b0 <__sinit>
 8029222:	3648      	adds	r6, #72	; 0x48
 8029224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029228:	3b01      	subs	r3, #1
 802922a:	d503      	bpl.n	8029234 <__sfp+0x24>
 802922c:	6833      	ldr	r3, [r6, #0]
 802922e:	b133      	cbz	r3, 802923e <__sfp+0x2e>
 8029230:	6836      	ldr	r6, [r6, #0]
 8029232:	e7f7      	b.n	8029224 <__sfp+0x14>
 8029234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029238:	b16d      	cbz	r5, 8029256 <__sfp+0x46>
 802923a:	3468      	adds	r4, #104	; 0x68
 802923c:	e7f4      	b.n	8029228 <__sfp+0x18>
 802923e:	2104      	movs	r1, #4
 8029240:	4638      	mov	r0, r7
 8029242:	f7ff ff9f 	bl	8029184 <__sfmoreglue>
 8029246:	6030      	str	r0, [r6, #0]
 8029248:	2800      	cmp	r0, #0
 802924a:	d1f1      	bne.n	8029230 <__sfp+0x20>
 802924c:	230c      	movs	r3, #12
 802924e:	603b      	str	r3, [r7, #0]
 8029250:	4604      	mov	r4, r0
 8029252:	4620      	mov	r0, r4
 8029254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029256:	4b0b      	ldr	r3, [pc, #44]	; (8029284 <__sfp+0x74>)
 8029258:	6665      	str	r5, [r4, #100]	; 0x64
 802925a:	e9c4 5500 	strd	r5, r5, [r4]
 802925e:	60a5      	str	r5, [r4, #8]
 8029260:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8029264:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8029268:	2208      	movs	r2, #8
 802926a:	4629      	mov	r1, r5
 802926c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029270:	f7ff fbae 	bl	80289d0 <memset>
 8029274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802927c:	e7e9      	b.n	8029252 <__sfp+0x42>
 802927e:	bf00      	nop
 8029280:	0802dba4 	.word	0x0802dba4
 8029284:	ffff0001 	.word	0xffff0001

08029288 <_fwalk_reent>:
 8029288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802928c:	4680      	mov	r8, r0
 802928e:	4689      	mov	r9, r1
 8029290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029294:	2600      	movs	r6, #0
 8029296:	b914      	cbnz	r4, 802929e <_fwalk_reent+0x16>
 8029298:	4630      	mov	r0, r6
 802929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802929e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80292a2:	3f01      	subs	r7, #1
 80292a4:	d501      	bpl.n	80292aa <_fwalk_reent+0x22>
 80292a6:	6824      	ldr	r4, [r4, #0]
 80292a8:	e7f5      	b.n	8029296 <_fwalk_reent+0xe>
 80292aa:	89ab      	ldrh	r3, [r5, #12]
 80292ac:	2b01      	cmp	r3, #1
 80292ae:	d907      	bls.n	80292c0 <_fwalk_reent+0x38>
 80292b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80292b4:	3301      	adds	r3, #1
 80292b6:	d003      	beq.n	80292c0 <_fwalk_reent+0x38>
 80292b8:	4629      	mov	r1, r5
 80292ba:	4640      	mov	r0, r8
 80292bc:	47c8      	blx	r9
 80292be:	4306      	orrs	r6, r0
 80292c0:	3568      	adds	r5, #104	; 0x68
 80292c2:	e7ee      	b.n	80292a2 <_fwalk_reent+0x1a>

080292c4 <__swhatbuf_r>:
 80292c4:	b570      	push	{r4, r5, r6, lr}
 80292c6:	460e      	mov	r6, r1
 80292c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292cc:	2900      	cmp	r1, #0
 80292ce:	b096      	sub	sp, #88	; 0x58
 80292d0:	4614      	mov	r4, r2
 80292d2:	461d      	mov	r5, r3
 80292d4:	da07      	bge.n	80292e6 <__swhatbuf_r+0x22>
 80292d6:	2300      	movs	r3, #0
 80292d8:	602b      	str	r3, [r5, #0]
 80292da:	89b3      	ldrh	r3, [r6, #12]
 80292dc:	061a      	lsls	r2, r3, #24
 80292de:	d410      	bmi.n	8029302 <__swhatbuf_r+0x3e>
 80292e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80292e4:	e00e      	b.n	8029304 <__swhatbuf_r+0x40>
 80292e6:	466a      	mov	r2, sp
 80292e8:	f000 fd08 	bl	8029cfc <_fstat_r>
 80292ec:	2800      	cmp	r0, #0
 80292ee:	dbf2      	blt.n	80292d6 <__swhatbuf_r+0x12>
 80292f0:	9a01      	ldr	r2, [sp, #4]
 80292f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80292f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80292fa:	425a      	negs	r2, r3
 80292fc:	415a      	adcs	r2, r3
 80292fe:	602a      	str	r2, [r5, #0]
 8029300:	e7ee      	b.n	80292e0 <__swhatbuf_r+0x1c>
 8029302:	2340      	movs	r3, #64	; 0x40
 8029304:	2000      	movs	r0, #0
 8029306:	6023      	str	r3, [r4, #0]
 8029308:	b016      	add	sp, #88	; 0x58
 802930a:	bd70      	pop	{r4, r5, r6, pc}

0802930c <__smakebuf_r>:
 802930c:	898b      	ldrh	r3, [r1, #12]
 802930e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029310:	079d      	lsls	r5, r3, #30
 8029312:	4606      	mov	r6, r0
 8029314:	460c      	mov	r4, r1
 8029316:	d507      	bpl.n	8029328 <__smakebuf_r+0x1c>
 8029318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802931c:	6023      	str	r3, [r4, #0]
 802931e:	6123      	str	r3, [r4, #16]
 8029320:	2301      	movs	r3, #1
 8029322:	6163      	str	r3, [r4, #20]
 8029324:	b002      	add	sp, #8
 8029326:	bd70      	pop	{r4, r5, r6, pc}
 8029328:	ab01      	add	r3, sp, #4
 802932a:	466a      	mov	r2, sp
 802932c:	f7ff ffca 	bl	80292c4 <__swhatbuf_r>
 8029330:	9900      	ldr	r1, [sp, #0]
 8029332:	4605      	mov	r5, r0
 8029334:	4630      	mov	r0, r6
 8029336:	f7ff fbaf 	bl	8028a98 <_malloc_r>
 802933a:	b948      	cbnz	r0, 8029350 <__smakebuf_r+0x44>
 802933c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029340:	059a      	lsls	r2, r3, #22
 8029342:	d4ef      	bmi.n	8029324 <__smakebuf_r+0x18>
 8029344:	f023 0303 	bic.w	r3, r3, #3
 8029348:	f043 0302 	orr.w	r3, r3, #2
 802934c:	81a3      	strh	r3, [r4, #12]
 802934e:	e7e3      	b.n	8029318 <__smakebuf_r+0xc>
 8029350:	4b0d      	ldr	r3, [pc, #52]	; (8029388 <__smakebuf_r+0x7c>)
 8029352:	62b3      	str	r3, [r6, #40]	; 0x28
 8029354:	89a3      	ldrh	r3, [r4, #12]
 8029356:	6020      	str	r0, [r4, #0]
 8029358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802935c:	81a3      	strh	r3, [r4, #12]
 802935e:	9b00      	ldr	r3, [sp, #0]
 8029360:	6163      	str	r3, [r4, #20]
 8029362:	9b01      	ldr	r3, [sp, #4]
 8029364:	6120      	str	r0, [r4, #16]
 8029366:	b15b      	cbz	r3, 8029380 <__smakebuf_r+0x74>
 8029368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802936c:	4630      	mov	r0, r6
 802936e:	f000 fcd7 	bl	8029d20 <_isatty_r>
 8029372:	b128      	cbz	r0, 8029380 <__smakebuf_r+0x74>
 8029374:	89a3      	ldrh	r3, [r4, #12]
 8029376:	f023 0303 	bic.w	r3, r3, #3
 802937a:	f043 0301 	orr.w	r3, r3, #1
 802937e:	81a3      	strh	r3, [r4, #12]
 8029380:	89a3      	ldrh	r3, [r4, #12]
 8029382:	431d      	orrs	r5, r3
 8029384:	81a5      	strh	r5, [r4, #12]
 8029386:	e7cd      	b.n	8029324 <__smakebuf_r+0x18>
 8029388:	08029179 	.word	0x08029179

0802938c <__malloc_lock>:
 802938c:	4770      	bx	lr

0802938e <__malloc_unlock>:
 802938e:	4770      	bx	lr

08029390 <__ssputs_r>:
 8029390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029394:	688e      	ldr	r6, [r1, #8]
 8029396:	429e      	cmp	r6, r3
 8029398:	4682      	mov	sl, r0
 802939a:	460c      	mov	r4, r1
 802939c:	4690      	mov	r8, r2
 802939e:	4699      	mov	r9, r3
 80293a0:	d837      	bhi.n	8029412 <__ssputs_r+0x82>
 80293a2:	898a      	ldrh	r2, [r1, #12]
 80293a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80293a8:	d031      	beq.n	802940e <__ssputs_r+0x7e>
 80293aa:	6825      	ldr	r5, [r4, #0]
 80293ac:	6909      	ldr	r1, [r1, #16]
 80293ae:	1a6f      	subs	r7, r5, r1
 80293b0:	6965      	ldr	r5, [r4, #20]
 80293b2:	2302      	movs	r3, #2
 80293b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80293b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80293bc:	f109 0301 	add.w	r3, r9, #1
 80293c0:	443b      	add	r3, r7
 80293c2:	429d      	cmp	r5, r3
 80293c4:	bf38      	it	cc
 80293c6:	461d      	movcc	r5, r3
 80293c8:	0553      	lsls	r3, r2, #21
 80293ca:	d530      	bpl.n	802942e <__ssputs_r+0x9e>
 80293cc:	4629      	mov	r1, r5
 80293ce:	f7ff fb63 	bl	8028a98 <_malloc_r>
 80293d2:	4606      	mov	r6, r0
 80293d4:	b950      	cbnz	r0, 80293ec <__ssputs_r+0x5c>
 80293d6:	230c      	movs	r3, #12
 80293d8:	f8ca 3000 	str.w	r3, [sl]
 80293dc:	89a3      	ldrh	r3, [r4, #12]
 80293de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80293e2:	81a3      	strh	r3, [r4, #12]
 80293e4:	f04f 30ff 	mov.w	r0, #4294967295
 80293e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80293ec:	463a      	mov	r2, r7
 80293ee:	6921      	ldr	r1, [r4, #16]
 80293f0:	f7ff fae3 	bl	80289ba <memcpy>
 80293f4:	89a3      	ldrh	r3, [r4, #12]
 80293f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80293fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80293fe:	81a3      	strh	r3, [r4, #12]
 8029400:	6126      	str	r6, [r4, #16]
 8029402:	6165      	str	r5, [r4, #20]
 8029404:	443e      	add	r6, r7
 8029406:	1bed      	subs	r5, r5, r7
 8029408:	6026      	str	r6, [r4, #0]
 802940a:	60a5      	str	r5, [r4, #8]
 802940c:	464e      	mov	r6, r9
 802940e:	454e      	cmp	r6, r9
 8029410:	d900      	bls.n	8029414 <__ssputs_r+0x84>
 8029412:	464e      	mov	r6, r9
 8029414:	4632      	mov	r2, r6
 8029416:	4641      	mov	r1, r8
 8029418:	6820      	ldr	r0, [r4, #0]
 802941a:	f000 fca3 	bl	8029d64 <memmove>
 802941e:	68a3      	ldr	r3, [r4, #8]
 8029420:	1b9b      	subs	r3, r3, r6
 8029422:	60a3      	str	r3, [r4, #8]
 8029424:	6823      	ldr	r3, [r4, #0]
 8029426:	441e      	add	r6, r3
 8029428:	6026      	str	r6, [r4, #0]
 802942a:	2000      	movs	r0, #0
 802942c:	e7dc      	b.n	80293e8 <__ssputs_r+0x58>
 802942e:	462a      	mov	r2, r5
 8029430:	f000 fcb1 	bl	8029d96 <_realloc_r>
 8029434:	4606      	mov	r6, r0
 8029436:	2800      	cmp	r0, #0
 8029438:	d1e2      	bne.n	8029400 <__ssputs_r+0x70>
 802943a:	6921      	ldr	r1, [r4, #16]
 802943c:	4650      	mov	r0, sl
 802943e:	f7ff fadd 	bl	80289fc <_free_r>
 8029442:	e7c8      	b.n	80293d6 <__ssputs_r+0x46>

08029444 <_svfiprintf_r>:
 8029444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029448:	461d      	mov	r5, r3
 802944a:	898b      	ldrh	r3, [r1, #12]
 802944c:	061f      	lsls	r7, r3, #24
 802944e:	b09d      	sub	sp, #116	; 0x74
 8029450:	4680      	mov	r8, r0
 8029452:	460c      	mov	r4, r1
 8029454:	4616      	mov	r6, r2
 8029456:	d50f      	bpl.n	8029478 <_svfiprintf_r+0x34>
 8029458:	690b      	ldr	r3, [r1, #16]
 802945a:	b96b      	cbnz	r3, 8029478 <_svfiprintf_r+0x34>
 802945c:	2140      	movs	r1, #64	; 0x40
 802945e:	f7ff fb1b 	bl	8028a98 <_malloc_r>
 8029462:	6020      	str	r0, [r4, #0]
 8029464:	6120      	str	r0, [r4, #16]
 8029466:	b928      	cbnz	r0, 8029474 <_svfiprintf_r+0x30>
 8029468:	230c      	movs	r3, #12
 802946a:	f8c8 3000 	str.w	r3, [r8]
 802946e:	f04f 30ff 	mov.w	r0, #4294967295
 8029472:	e0c8      	b.n	8029606 <_svfiprintf_r+0x1c2>
 8029474:	2340      	movs	r3, #64	; 0x40
 8029476:	6163      	str	r3, [r4, #20]
 8029478:	2300      	movs	r3, #0
 802947a:	9309      	str	r3, [sp, #36]	; 0x24
 802947c:	2320      	movs	r3, #32
 802947e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029482:	2330      	movs	r3, #48	; 0x30
 8029484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029488:	9503      	str	r5, [sp, #12]
 802948a:	f04f 0b01 	mov.w	fp, #1
 802948e:	4637      	mov	r7, r6
 8029490:	463d      	mov	r5, r7
 8029492:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029496:	b10b      	cbz	r3, 802949c <_svfiprintf_r+0x58>
 8029498:	2b25      	cmp	r3, #37	; 0x25
 802949a:	d13e      	bne.n	802951a <_svfiprintf_r+0xd6>
 802949c:	ebb7 0a06 	subs.w	sl, r7, r6
 80294a0:	d00b      	beq.n	80294ba <_svfiprintf_r+0x76>
 80294a2:	4653      	mov	r3, sl
 80294a4:	4632      	mov	r2, r6
 80294a6:	4621      	mov	r1, r4
 80294a8:	4640      	mov	r0, r8
 80294aa:	f7ff ff71 	bl	8029390 <__ssputs_r>
 80294ae:	3001      	adds	r0, #1
 80294b0:	f000 80a4 	beq.w	80295fc <_svfiprintf_r+0x1b8>
 80294b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80294b6:	4453      	add	r3, sl
 80294b8:	9309      	str	r3, [sp, #36]	; 0x24
 80294ba:	783b      	ldrb	r3, [r7, #0]
 80294bc:	2b00      	cmp	r3, #0
 80294be:	f000 809d 	beq.w	80295fc <_svfiprintf_r+0x1b8>
 80294c2:	2300      	movs	r3, #0
 80294c4:	f04f 32ff 	mov.w	r2, #4294967295
 80294c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80294cc:	9304      	str	r3, [sp, #16]
 80294ce:	9307      	str	r3, [sp, #28]
 80294d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80294d4:	931a      	str	r3, [sp, #104]	; 0x68
 80294d6:	462f      	mov	r7, r5
 80294d8:	2205      	movs	r2, #5
 80294da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80294de:	4850      	ldr	r0, [pc, #320]	; (8029620 <_svfiprintf_r+0x1dc>)
 80294e0:	f7f2 ff36 	bl	801c350 <memchr>
 80294e4:	9b04      	ldr	r3, [sp, #16]
 80294e6:	b9d0      	cbnz	r0, 802951e <_svfiprintf_r+0xda>
 80294e8:	06d9      	lsls	r1, r3, #27
 80294ea:	bf44      	itt	mi
 80294ec:	2220      	movmi	r2, #32
 80294ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80294f2:	071a      	lsls	r2, r3, #28
 80294f4:	bf44      	itt	mi
 80294f6:	222b      	movmi	r2, #43	; 0x2b
 80294f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80294fc:	782a      	ldrb	r2, [r5, #0]
 80294fe:	2a2a      	cmp	r2, #42	; 0x2a
 8029500:	d015      	beq.n	802952e <_svfiprintf_r+0xea>
 8029502:	9a07      	ldr	r2, [sp, #28]
 8029504:	462f      	mov	r7, r5
 8029506:	2000      	movs	r0, #0
 8029508:	250a      	movs	r5, #10
 802950a:	4639      	mov	r1, r7
 802950c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029510:	3b30      	subs	r3, #48	; 0x30
 8029512:	2b09      	cmp	r3, #9
 8029514:	d94d      	bls.n	80295b2 <_svfiprintf_r+0x16e>
 8029516:	b1b8      	cbz	r0, 8029548 <_svfiprintf_r+0x104>
 8029518:	e00f      	b.n	802953a <_svfiprintf_r+0xf6>
 802951a:	462f      	mov	r7, r5
 802951c:	e7b8      	b.n	8029490 <_svfiprintf_r+0x4c>
 802951e:	4a40      	ldr	r2, [pc, #256]	; (8029620 <_svfiprintf_r+0x1dc>)
 8029520:	1a80      	subs	r0, r0, r2
 8029522:	fa0b f000 	lsl.w	r0, fp, r0
 8029526:	4318      	orrs	r0, r3
 8029528:	9004      	str	r0, [sp, #16]
 802952a:	463d      	mov	r5, r7
 802952c:	e7d3      	b.n	80294d6 <_svfiprintf_r+0x92>
 802952e:	9a03      	ldr	r2, [sp, #12]
 8029530:	1d11      	adds	r1, r2, #4
 8029532:	6812      	ldr	r2, [r2, #0]
 8029534:	9103      	str	r1, [sp, #12]
 8029536:	2a00      	cmp	r2, #0
 8029538:	db01      	blt.n	802953e <_svfiprintf_r+0xfa>
 802953a:	9207      	str	r2, [sp, #28]
 802953c:	e004      	b.n	8029548 <_svfiprintf_r+0x104>
 802953e:	4252      	negs	r2, r2
 8029540:	f043 0302 	orr.w	r3, r3, #2
 8029544:	9207      	str	r2, [sp, #28]
 8029546:	9304      	str	r3, [sp, #16]
 8029548:	783b      	ldrb	r3, [r7, #0]
 802954a:	2b2e      	cmp	r3, #46	; 0x2e
 802954c:	d10c      	bne.n	8029568 <_svfiprintf_r+0x124>
 802954e:	787b      	ldrb	r3, [r7, #1]
 8029550:	2b2a      	cmp	r3, #42	; 0x2a
 8029552:	d133      	bne.n	80295bc <_svfiprintf_r+0x178>
 8029554:	9b03      	ldr	r3, [sp, #12]
 8029556:	1d1a      	adds	r2, r3, #4
 8029558:	681b      	ldr	r3, [r3, #0]
 802955a:	9203      	str	r2, [sp, #12]
 802955c:	2b00      	cmp	r3, #0
 802955e:	bfb8      	it	lt
 8029560:	f04f 33ff 	movlt.w	r3, #4294967295
 8029564:	3702      	adds	r7, #2
 8029566:	9305      	str	r3, [sp, #20]
 8029568:	4d2e      	ldr	r5, [pc, #184]	; (8029624 <_svfiprintf_r+0x1e0>)
 802956a:	7839      	ldrb	r1, [r7, #0]
 802956c:	2203      	movs	r2, #3
 802956e:	4628      	mov	r0, r5
 8029570:	f7f2 feee 	bl	801c350 <memchr>
 8029574:	b138      	cbz	r0, 8029586 <_svfiprintf_r+0x142>
 8029576:	2340      	movs	r3, #64	; 0x40
 8029578:	1b40      	subs	r0, r0, r5
 802957a:	fa03 f000 	lsl.w	r0, r3, r0
 802957e:	9b04      	ldr	r3, [sp, #16]
 8029580:	4303      	orrs	r3, r0
 8029582:	3701      	adds	r7, #1
 8029584:	9304      	str	r3, [sp, #16]
 8029586:	7839      	ldrb	r1, [r7, #0]
 8029588:	4827      	ldr	r0, [pc, #156]	; (8029628 <_svfiprintf_r+0x1e4>)
 802958a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802958e:	2206      	movs	r2, #6
 8029590:	1c7e      	adds	r6, r7, #1
 8029592:	f7f2 fedd 	bl	801c350 <memchr>
 8029596:	2800      	cmp	r0, #0
 8029598:	d038      	beq.n	802960c <_svfiprintf_r+0x1c8>
 802959a:	4b24      	ldr	r3, [pc, #144]	; (802962c <_svfiprintf_r+0x1e8>)
 802959c:	bb13      	cbnz	r3, 80295e4 <_svfiprintf_r+0x1a0>
 802959e:	9b03      	ldr	r3, [sp, #12]
 80295a0:	3307      	adds	r3, #7
 80295a2:	f023 0307 	bic.w	r3, r3, #7
 80295a6:	3308      	adds	r3, #8
 80295a8:	9303      	str	r3, [sp, #12]
 80295aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80295ac:	444b      	add	r3, r9
 80295ae:	9309      	str	r3, [sp, #36]	; 0x24
 80295b0:	e76d      	b.n	802948e <_svfiprintf_r+0x4a>
 80295b2:	fb05 3202 	mla	r2, r5, r2, r3
 80295b6:	2001      	movs	r0, #1
 80295b8:	460f      	mov	r7, r1
 80295ba:	e7a6      	b.n	802950a <_svfiprintf_r+0xc6>
 80295bc:	2300      	movs	r3, #0
 80295be:	3701      	adds	r7, #1
 80295c0:	9305      	str	r3, [sp, #20]
 80295c2:	4619      	mov	r1, r3
 80295c4:	250a      	movs	r5, #10
 80295c6:	4638      	mov	r0, r7
 80295c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80295cc:	3a30      	subs	r2, #48	; 0x30
 80295ce:	2a09      	cmp	r2, #9
 80295d0:	d903      	bls.n	80295da <_svfiprintf_r+0x196>
 80295d2:	2b00      	cmp	r3, #0
 80295d4:	d0c8      	beq.n	8029568 <_svfiprintf_r+0x124>
 80295d6:	9105      	str	r1, [sp, #20]
 80295d8:	e7c6      	b.n	8029568 <_svfiprintf_r+0x124>
 80295da:	fb05 2101 	mla	r1, r5, r1, r2
 80295de:	2301      	movs	r3, #1
 80295e0:	4607      	mov	r7, r0
 80295e2:	e7f0      	b.n	80295c6 <_svfiprintf_r+0x182>
 80295e4:	ab03      	add	r3, sp, #12
 80295e6:	9300      	str	r3, [sp, #0]
 80295e8:	4622      	mov	r2, r4
 80295ea:	4b11      	ldr	r3, [pc, #68]	; (8029630 <_svfiprintf_r+0x1ec>)
 80295ec:	a904      	add	r1, sp, #16
 80295ee:	4640      	mov	r0, r8
 80295f0:	f3af 8000 	nop.w
 80295f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80295f8:	4681      	mov	r9, r0
 80295fa:	d1d6      	bne.n	80295aa <_svfiprintf_r+0x166>
 80295fc:	89a3      	ldrh	r3, [r4, #12]
 80295fe:	065b      	lsls	r3, r3, #25
 8029600:	f53f af35 	bmi.w	802946e <_svfiprintf_r+0x2a>
 8029604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029606:	b01d      	add	sp, #116	; 0x74
 8029608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802960c:	ab03      	add	r3, sp, #12
 802960e:	9300      	str	r3, [sp, #0]
 8029610:	4622      	mov	r2, r4
 8029612:	4b07      	ldr	r3, [pc, #28]	; (8029630 <_svfiprintf_r+0x1ec>)
 8029614:	a904      	add	r1, sp, #16
 8029616:	4640      	mov	r0, r8
 8029618:	f000 f9c2 	bl	80299a0 <_printf_i>
 802961c:	e7ea      	b.n	80295f4 <_svfiprintf_r+0x1b0>
 802961e:	bf00      	nop
 8029620:	0802dc08 	.word	0x0802dc08
 8029624:	0802dc0e 	.word	0x0802dc0e
 8029628:	0802dc12 	.word	0x0802dc12
 802962c:	00000000 	.word	0x00000000
 8029630:	08029391 	.word	0x08029391

08029634 <__sfputc_r>:
 8029634:	6893      	ldr	r3, [r2, #8]
 8029636:	3b01      	subs	r3, #1
 8029638:	2b00      	cmp	r3, #0
 802963a:	b410      	push	{r4}
 802963c:	6093      	str	r3, [r2, #8]
 802963e:	da08      	bge.n	8029652 <__sfputc_r+0x1e>
 8029640:	6994      	ldr	r4, [r2, #24]
 8029642:	42a3      	cmp	r3, r4
 8029644:	db01      	blt.n	802964a <__sfputc_r+0x16>
 8029646:	290a      	cmp	r1, #10
 8029648:	d103      	bne.n	8029652 <__sfputc_r+0x1e>
 802964a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802964e:	f7ff bbff 	b.w	8028e50 <__swbuf_r>
 8029652:	6813      	ldr	r3, [r2, #0]
 8029654:	1c58      	adds	r0, r3, #1
 8029656:	6010      	str	r0, [r2, #0]
 8029658:	7019      	strb	r1, [r3, #0]
 802965a:	4608      	mov	r0, r1
 802965c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029660:	4770      	bx	lr

08029662 <__sfputs_r>:
 8029662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029664:	4606      	mov	r6, r0
 8029666:	460f      	mov	r7, r1
 8029668:	4614      	mov	r4, r2
 802966a:	18d5      	adds	r5, r2, r3
 802966c:	42ac      	cmp	r4, r5
 802966e:	d101      	bne.n	8029674 <__sfputs_r+0x12>
 8029670:	2000      	movs	r0, #0
 8029672:	e007      	b.n	8029684 <__sfputs_r+0x22>
 8029674:	463a      	mov	r2, r7
 8029676:	f814 1b01 	ldrb.w	r1, [r4], #1
 802967a:	4630      	mov	r0, r6
 802967c:	f7ff ffda 	bl	8029634 <__sfputc_r>
 8029680:	1c43      	adds	r3, r0, #1
 8029682:	d1f3      	bne.n	802966c <__sfputs_r+0xa>
 8029684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029688 <_vfiprintf_r>:
 8029688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802968c:	460c      	mov	r4, r1
 802968e:	b09d      	sub	sp, #116	; 0x74
 8029690:	4617      	mov	r7, r2
 8029692:	461d      	mov	r5, r3
 8029694:	4606      	mov	r6, r0
 8029696:	b118      	cbz	r0, 80296a0 <_vfiprintf_r+0x18>
 8029698:	6983      	ldr	r3, [r0, #24]
 802969a:	b90b      	cbnz	r3, 80296a0 <_vfiprintf_r+0x18>
 802969c:	f7ff fd88 	bl	80291b0 <__sinit>
 80296a0:	4b7c      	ldr	r3, [pc, #496]	; (8029894 <_vfiprintf_r+0x20c>)
 80296a2:	429c      	cmp	r4, r3
 80296a4:	d158      	bne.n	8029758 <_vfiprintf_r+0xd0>
 80296a6:	6874      	ldr	r4, [r6, #4]
 80296a8:	89a3      	ldrh	r3, [r4, #12]
 80296aa:	0718      	lsls	r0, r3, #28
 80296ac:	d55e      	bpl.n	802976c <_vfiprintf_r+0xe4>
 80296ae:	6923      	ldr	r3, [r4, #16]
 80296b0:	2b00      	cmp	r3, #0
 80296b2:	d05b      	beq.n	802976c <_vfiprintf_r+0xe4>
 80296b4:	2300      	movs	r3, #0
 80296b6:	9309      	str	r3, [sp, #36]	; 0x24
 80296b8:	2320      	movs	r3, #32
 80296ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80296be:	2330      	movs	r3, #48	; 0x30
 80296c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80296c4:	9503      	str	r5, [sp, #12]
 80296c6:	f04f 0b01 	mov.w	fp, #1
 80296ca:	46b8      	mov	r8, r7
 80296cc:	4645      	mov	r5, r8
 80296ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80296d2:	b10b      	cbz	r3, 80296d8 <_vfiprintf_r+0x50>
 80296d4:	2b25      	cmp	r3, #37	; 0x25
 80296d6:	d154      	bne.n	8029782 <_vfiprintf_r+0xfa>
 80296d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80296dc:	d00b      	beq.n	80296f6 <_vfiprintf_r+0x6e>
 80296de:	4653      	mov	r3, sl
 80296e0:	463a      	mov	r2, r7
 80296e2:	4621      	mov	r1, r4
 80296e4:	4630      	mov	r0, r6
 80296e6:	f7ff ffbc 	bl	8029662 <__sfputs_r>
 80296ea:	3001      	adds	r0, #1
 80296ec:	f000 80c2 	beq.w	8029874 <_vfiprintf_r+0x1ec>
 80296f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80296f2:	4453      	add	r3, sl
 80296f4:	9309      	str	r3, [sp, #36]	; 0x24
 80296f6:	f898 3000 	ldrb.w	r3, [r8]
 80296fa:	2b00      	cmp	r3, #0
 80296fc:	f000 80ba 	beq.w	8029874 <_vfiprintf_r+0x1ec>
 8029700:	2300      	movs	r3, #0
 8029702:	f04f 32ff 	mov.w	r2, #4294967295
 8029706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802970a:	9304      	str	r3, [sp, #16]
 802970c:	9307      	str	r3, [sp, #28]
 802970e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029712:	931a      	str	r3, [sp, #104]	; 0x68
 8029714:	46a8      	mov	r8, r5
 8029716:	2205      	movs	r2, #5
 8029718:	f818 1b01 	ldrb.w	r1, [r8], #1
 802971c:	485e      	ldr	r0, [pc, #376]	; (8029898 <_vfiprintf_r+0x210>)
 802971e:	f7f2 fe17 	bl	801c350 <memchr>
 8029722:	9b04      	ldr	r3, [sp, #16]
 8029724:	bb78      	cbnz	r0, 8029786 <_vfiprintf_r+0xfe>
 8029726:	06d9      	lsls	r1, r3, #27
 8029728:	bf44      	itt	mi
 802972a:	2220      	movmi	r2, #32
 802972c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8029730:	071a      	lsls	r2, r3, #28
 8029732:	bf44      	itt	mi
 8029734:	222b      	movmi	r2, #43	; 0x2b
 8029736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802973a:	782a      	ldrb	r2, [r5, #0]
 802973c:	2a2a      	cmp	r2, #42	; 0x2a
 802973e:	d02a      	beq.n	8029796 <_vfiprintf_r+0x10e>
 8029740:	9a07      	ldr	r2, [sp, #28]
 8029742:	46a8      	mov	r8, r5
 8029744:	2000      	movs	r0, #0
 8029746:	250a      	movs	r5, #10
 8029748:	4641      	mov	r1, r8
 802974a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802974e:	3b30      	subs	r3, #48	; 0x30
 8029750:	2b09      	cmp	r3, #9
 8029752:	d969      	bls.n	8029828 <_vfiprintf_r+0x1a0>
 8029754:	b360      	cbz	r0, 80297b0 <_vfiprintf_r+0x128>
 8029756:	e024      	b.n	80297a2 <_vfiprintf_r+0x11a>
 8029758:	4b50      	ldr	r3, [pc, #320]	; (802989c <_vfiprintf_r+0x214>)
 802975a:	429c      	cmp	r4, r3
 802975c:	d101      	bne.n	8029762 <_vfiprintf_r+0xda>
 802975e:	68b4      	ldr	r4, [r6, #8]
 8029760:	e7a2      	b.n	80296a8 <_vfiprintf_r+0x20>
 8029762:	4b4f      	ldr	r3, [pc, #316]	; (80298a0 <_vfiprintf_r+0x218>)
 8029764:	429c      	cmp	r4, r3
 8029766:	bf08      	it	eq
 8029768:	68f4      	ldreq	r4, [r6, #12]
 802976a:	e79d      	b.n	80296a8 <_vfiprintf_r+0x20>
 802976c:	4621      	mov	r1, r4
 802976e:	4630      	mov	r0, r6
 8029770:	f7ff fbc0 	bl	8028ef4 <__swsetup_r>
 8029774:	2800      	cmp	r0, #0
 8029776:	d09d      	beq.n	80296b4 <_vfiprintf_r+0x2c>
 8029778:	f04f 30ff 	mov.w	r0, #4294967295
 802977c:	b01d      	add	sp, #116	; 0x74
 802977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029782:	46a8      	mov	r8, r5
 8029784:	e7a2      	b.n	80296cc <_vfiprintf_r+0x44>
 8029786:	4a44      	ldr	r2, [pc, #272]	; (8029898 <_vfiprintf_r+0x210>)
 8029788:	1a80      	subs	r0, r0, r2
 802978a:	fa0b f000 	lsl.w	r0, fp, r0
 802978e:	4318      	orrs	r0, r3
 8029790:	9004      	str	r0, [sp, #16]
 8029792:	4645      	mov	r5, r8
 8029794:	e7be      	b.n	8029714 <_vfiprintf_r+0x8c>
 8029796:	9a03      	ldr	r2, [sp, #12]
 8029798:	1d11      	adds	r1, r2, #4
 802979a:	6812      	ldr	r2, [r2, #0]
 802979c:	9103      	str	r1, [sp, #12]
 802979e:	2a00      	cmp	r2, #0
 80297a0:	db01      	blt.n	80297a6 <_vfiprintf_r+0x11e>
 80297a2:	9207      	str	r2, [sp, #28]
 80297a4:	e004      	b.n	80297b0 <_vfiprintf_r+0x128>
 80297a6:	4252      	negs	r2, r2
 80297a8:	f043 0302 	orr.w	r3, r3, #2
 80297ac:	9207      	str	r2, [sp, #28]
 80297ae:	9304      	str	r3, [sp, #16]
 80297b0:	f898 3000 	ldrb.w	r3, [r8]
 80297b4:	2b2e      	cmp	r3, #46	; 0x2e
 80297b6:	d10e      	bne.n	80297d6 <_vfiprintf_r+0x14e>
 80297b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80297bc:	2b2a      	cmp	r3, #42	; 0x2a
 80297be:	d138      	bne.n	8029832 <_vfiprintf_r+0x1aa>
 80297c0:	9b03      	ldr	r3, [sp, #12]
 80297c2:	1d1a      	adds	r2, r3, #4
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	9203      	str	r2, [sp, #12]
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	bfb8      	it	lt
 80297cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80297d0:	f108 0802 	add.w	r8, r8, #2
 80297d4:	9305      	str	r3, [sp, #20]
 80297d6:	4d33      	ldr	r5, [pc, #204]	; (80298a4 <_vfiprintf_r+0x21c>)
 80297d8:	f898 1000 	ldrb.w	r1, [r8]
 80297dc:	2203      	movs	r2, #3
 80297de:	4628      	mov	r0, r5
 80297e0:	f7f2 fdb6 	bl	801c350 <memchr>
 80297e4:	b140      	cbz	r0, 80297f8 <_vfiprintf_r+0x170>
 80297e6:	2340      	movs	r3, #64	; 0x40
 80297e8:	1b40      	subs	r0, r0, r5
 80297ea:	fa03 f000 	lsl.w	r0, r3, r0
 80297ee:	9b04      	ldr	r3, [sp, #16]
 80297f0:	4303      	orrs	r3, r0
 80297f2:	f108 0801 	add.w	r8, r8, #1
 80297f6:	9304      	str	r3, [sp, #16]
 80297f8:	f898 1000 	ldrb.w	r1, [r8]
 80297fc:	482a      	ldr	r0, [pc, #168]	; (80298a8 <_vfiprintf_r+0x220>)
 80297fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029802:	2206      	movs	r2, #6
 8029804:	f108 0701 	add.w	r7, r8, #1
 8029808:	f7f2 fda2 	bl	801c350 <memchr>
 802980c:	2800      	cmp	r0, #0
 802980e:	d037      	beq.n	8029880 <_vfiprintf_r+0x1f8>
 8029810:	4b26      	ldr	r3, [pc, #152]	; (80298ac <_vfiprintf_r+0x224>)
 8029812:	bb1b      	cbnz	r3, 802985c <_vfiprintf_r+0x1d4>
 8029814:	9b03      	ldr	r3, [sp, #12]
 8029816:	3307      	adds	r3, #7
 8029818:	f023 0307 	bic.w	r3, r3, #7
 802981c:	3308      	adds	r3, #8
 802981e:	9303      	str	r3, [sp, #12]
 8029820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029822:	444b      	add	r3, r9
 8029824:	9309      	str	r3, [sp, #36]	; 0x24
 8029826:	e750      	b.n	80296ca <_vfiprintf_r+0x42>
 8029828:	fb05 3202 	mla	r2, r5, r2, r3
 802982c:	2001      	movs	r0, #1
 802982e:	4688      	mov	r8, r1
 8029830:	e78a      	b.n	8029748 <_vfiprintf_r+0xc0>
 8029832:	2300      	movs	r3, #0
 8029834:	f108 0801 	add.w	r8, r8, #1
 8029838:	9305      	str	r3, [sp, #20]
 802983a:	4619      	mov	r1, r3
 802983c:	250a      	movs	r5, #10
 802983e:	4640      	mov	r0, r8
 8029840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029844:	3a30      	subs	r2, #48	; 0x30
 8029846:	2a09      	cmp	r2, #9
 8029848:	d903      	bls.n	8029852 <_vfiprintf_r+0x1ca>
 802984a:	2b00      	cmp	r3, #0
 802984c:	d0c3      	beq.n	80297d6 <_vfiprintf_r+0x14e>
 802984e:	9105      	str	r1, [sp, #20]
 8029850:	e7c1      	b.n	80297d6 <_vfiprintf_r+0x14e>
 8029852:	fb05 2101 	mla	r1, r5, r1, r2
 8029856:	2301      	movs	r3, #1
 8029858:	4680      	mov	r8, r0
 802985a:	e7f0      	b.n	802983e <_vfiprintf_r+0x1b6>
 802985c:	ab03      	add	r3, sp, #12
 802985e:	9300      	str	r3, [sp, #0]
 8029860:	4622      	mov	r2, r4
 8029862:	4b13      	ldr	r3, [pc, #76]	; (80298b0 <_vfiprintf_r+0x228>)
 8029864:	a904      	add	r1, sp, #16
 8029866:	4630      	mov	r0, r6
 8029868:	f3af 8000 	nop.w
 802986c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029870:	4681      	mov	r9, r0
 8029872:	d1d5      	bne.n	8029820 <_vfiprintf_r+0x198>
 8029874:	89a3      	ldrh	r3, [r4, #12]
 8029876:	065b      	lsls	r3, r3, #25
 8029878:	f53f af7e 	bmi.w	8029778 <_vfiprintf_r+0xf0>
 802987c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802987e:	e77d      	b.n	802977c <_vfiprintf_r+0xf4>
 8029880:	ab03      	add	r3, sp, #12
 8029882:	9300      	str	r3, [sp, #0]
 8029884:	4622      	mov	r2, r4
 8029886:	4b0a      	ldr	r3, [pc, #40]	; (80298b0 <_vfiprintf_r+0x228>)
 8029888:	a904      	add	r1, sp, #16
 802988a:	4630      	mov	r0, r6
 802988c:	f000 f888 	bl	80299a0 <_printf_i>
 8029890:	e7ec      	b.n	802986c <_vfiprintf_r+0x1e4>
 8029892:	bf00      	nop
 8029894:	0802dbc8 	.word	0x0802dbc8
 8029898:	0802dc08 	.word	0x0802dc08
 802989c:	0802dbe8 	.word	0x0802dbe8
 80298a0:	0802dba8 	.word	0x0802dba8
 80298a4:	0802dc0e 	.word	0x0802dc0e
 80298a8:	0802dc12 	.word	0x0802dc12
 80298ac:	00000000 	.word	0x00000000
 80298b0:	08029663 	.word	0x08029663

080298b4 <_printf_common>:
 80298b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80298b8:	4691      	mov	r9, r2
 80298ba:	461f      	mov	r7, r3
 80298bc:	688a      	ldr	r2, [r1, #8]
 80298be:	690b      	ldr	r3, [r1, #16]
 80298c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80298c4:	4293      	cmp	r3, r2
 80298c6:	bfb8      	it	lt
 80298c8:	4613      	movlt	r3, r2
 80298ca:	f8c9 3000 	str.w	r3, [r9]
 80298ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80298d2:	4606      	mov	r6, r0
 80298d4:	460c      	mov	r4, r1
 80298d6:	b112      	cbz	r2, 80298de <_printf_common+0x2a>
 80298d8:	3301      	adds	r3, #1
 80298da:	f8c9 3000 	str.w	r3, [r9]
 80298de:	6823      	ldr	r3, [r4, #0]
 80298e0:	0699      	lsls	r1, r3, #26
 80298e2:	bf42      	ittt	mi
 80298e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80298e8:	3302      	addmi	r3, #2
 80298ea:	f8c9 3000 	strmi.w	r3, [r9]
 80298ee:	6825      	ldr	r5, [r4, #0]
 80298f0:	f015 0506 	ands.w	r5, r5, #6
 80298f4:	d107      	bne.n	8029906 <_printf_common+0x52>
 80298f6:	f104 0a19 	add.w	sl, r4, #25
 80298fa:	68e3      	ldr	r3, [r4, #12]
 80298fc:	f8d9 2000 	ldr.w	r2, [r9]
 8029900:	1a9b      	subs	r3, r3, r2
 8029902:	42ab      	cmp	r3, r5
 8029904:	dc28      	bgt.n	8029958 <_printf_common+0xa4>
 8029906:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802990a:	6822      	ldr	r2, [r4, #0]
 802990c:	3300      	adds	r3, #0
 802990e:	bf18      	it	ne
 8029910:	2301      	movne	r3, #1
 8029912:	0692      	lsls	r2, r2, #26
 8029914:	d42d      	bmi.n	8029972 <_printf_common+0xbe>
 8029916:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802991a:	4639      	mov	r1, r7
 802991c:	4630      	mov	r0, r6
 802991e:	47c0      	blx	r8
 8029920:	3001      	adds	r0, #1
 8029922:	d020      	beq.n	8029966 <_printf_common+0xb2>
 8029924:	6823      	ldr	r3, [r4, #0]
 8029926:	68e5      	ldr	r5, [r4, #12]
 8029928:	f8d9 2000 	ldr.w	r2, [r9]
 802992c:	f003 0306 	and.w	r3, r3, #6
 8029930:	2b04      	cmp	r3, #4
 8029932:	bf08      	it	eq
 8029934:	1aad      	subeq	r5, r5, r2
 8029936:	68a3      	ldr	r3, [r4, #8]
 8029938:	6922      	ldr	r2, [r4, #16]
 802993a:	bf0c      	ite	eq
 802993c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029940:	2500      	movne	r5, #0
 8029942:	4293      	cmp	r3, r2
 8029944:	bfc4      	itt	gt
 8029946:	1a9b      	subgt	r3, r3, r2
 8029948:	18ed      	addgt	r5, r5, r3
 802994a:	f04f 0900 	mov.w	r9, #0
 802994e:	341a      	adds	r4, #26
 8029950:	454d      	cmp	r5, r9
 8029952:	d11a      	bne.n	802998a <_printf_common+0xd6>
 8029954:	2000      	movs	r0, #0
 8029956:	e008      	b.n	802996a <_printf_common+0xb6>
 8029958:	2301      	movs	r3, #1
 802995a:	4652      	mov	r2, sl
 802995c:	4639      	mov	r1, r7
 802995e:	4630      	mov	r0, r6
 8029960:	47c0      	blx	r8
 8029962:	3001      	adds	r0, #1
 8029964:	d103      	bne.n	802996e <_printf_common+0xba>
 8029966:	f04f 30ff 	mov.w	r0, #4294967295
 802996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802996e:	3501      	adds	r5, #1
 8029970:	e7c3      	b.n	80298fa <_printf_common+0x46>
 8029972:	18e1      	adds	r1, r4, r3
 8029974:	1c5a      	adds	r2, r3, #1
 8029976:	2030      	movs	r0, #48	; 0x30
 8029978:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802997c:	4422      	add	r2, r4
 802997e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029982:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029986:	3302      	adds	r3, #2
 8029988:	e7c5      	b.n	8029916 <_printf_common+0x62>
 802998a:	2301      	movs	r3, #1
 802998c:	4622      	mov	r2, r4
 802998e:	4639      	mov	r1, r7
 8029990:	4630      	mov	r0, r6
 8029992:	47c0      	blx	r8
 8029994:	3001      	adds	r0, #1
 8029996:	d0e6      	beq.n	8029966 <_printf_common+0xb2>
 8029998:	f109 0901 	add.w	r9, r9, #1
 802999c:	e7d8      	b.n	8029950 <_printf_common+0x9c>
	...

080299a0 <_printf_i>:
 80299a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80299a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80299a8:	460c      	mov	r4, r1
 80299aa:	7e09      	ldrb	r1, [r1, #24]
 80299ac:	b085      	sub	sp, #20
 80299ae:	296e      	cmp	r1, #110	; 0x6e
 80299b0:	4617      	mov	r7, r2
 80299b2:	4606      	mov	r6, r0
 80299b4:	4698      	mov	r8, r3
 80299b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80299b8:	f000 80b3 	beq.w	8029b22 <_printf_i+0x182>
 80299bc:	d822      	bhi.n	8029a04 <_printf_i+0x64>
 80299be:	2963      	cmp	r1, #99	; 0x63
 80299c0:	d036      	beq.n	8029a30 <_printf_i+0x90>
 80299c2:	d80a      	bhi.n	80299da <_printf_i+0x3a>
 80299c4:	2900      	cmp	r1, #0
 80299c6:	f000 80b9 	beq.w	8029b3c <_printf_i+0x19c>
 80299ca:	2958      	cmp	r1, #88	; 0x58
 80299cc:	f000 8083 	beq.w	8029ad6 <_printf_i+0x136>
 80299d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80299d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80299d8:	e032      	b.n	8029a40 <_printf_i+0xa0>
 80299da:	2964      	cmp	r1, #100	; 0x64
 80299dc:	d001      	beq.n	80299e2 <_printf_i+0x42>
 80299de:	2969      	cmp	r1, #105	; 0x69
 80299e0:	d1f6      	bne.n	80299d0 <_printf_i+0x30>
 80299e2:	6820      	ldr	r0, [r4, #0]
 80299e4:	6813      	ldr	r3, [r2, #0]
 80299e6:	0605      	lsls	r5, r0, #24
 80299e8:	f103 0104 	add.w	r1, r3, #4
 80299ec:	d52a      	bpl.n	8029a44 <_printf_i+0xa4>
 80299ee:	681b      	ldr	r3, [r3, #0]
 80299f0:	6011      	str	r1, [r2, #0]
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	da03      	bge.n	80299fe <_printf_i+0x5e>
 80299f6:	222d      	movs	r2, #45	; 0x2d
 80299f8:	425b      	negs	r3, r3
 80299fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80299fe:	486f      	ldr	r0, [pc, #444]	; (8029bbc <_printf_i+0x21c>)
 8029a00:	220a      	movs	r2, #10
 8029a02:	e039      	b.n	8029a78 <_printf_i+0xd8>
 8029a04:	2973      	cmp	r1, #115	; 0x73
 8029a06:	f000 809d 	beq.w	8029b44 <_printf_i+0x1a4>
 8029a0a:	d808      	bhi.n	8029a1e <_printf_i+0x7e>
 8029a0c:	296f      	cmp	r1, #111	; 0x6f
 8029a0e:	d020      	beq.n	8029a52 <_printf_i+0xb2>
 8029a10:	2970      	cmp	r1, #112	; 0x70
 8029a12:	d1dd      	bne.n	80299d0 <_printf_i+0x30>
 8029a14:	6823      	ldr	r3, [r4, #0]
 8029a16:	f043 0320 	orr.w	r3, r3, #32
 8029a1a:	6023      	str	r3, [r4, #0]
 8029a1c:	e003      	b.n	8029a26 <_printf_i+0x86>
 8029a1e:	2975      	cmp	r1, #117	; 0x75
 8029a20:	d017      	beq.n	8029a52 <_printf_i+0xb2>
 8029a22:	2978      	cmp	r1, #120	; 0x78
 8029a24:	d1d4      	bne.n	80299d0 <_printf_i+0x30>
 8029a26:	2378      	movs	r3, #120	; 0x78
 8029a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029a2c:	4864      	ldr	r0, [pc, #400]	; (8029bc0 <_printf_i+0x220>)
 8029a2e:	e055      	b.n	8029adc <_printf_i+0x13c>
 8029a30:	6813      	ldr	r3, [r2, #0]
 8029a32:	1d19      	adds	r1, r3, #4
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	6011      	str	r1, [r2, #0]
 8029a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029a40:	2301      	movs	r3, #1
 8029a42:	e08c      	b.n	8029b5e <_printf_i+0x1be>
 8029a44:	681b      	ldr	r3, [r3, #0]
 8029a46:	6011      	str	r1, [r2, #0]
 8029a48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029a4c:	bf18      	it	ne
 8029a4e:	b21b      	sxthne	r3, r3
 8029a50:	e7cf      	b.n	80299f2 <_printf_i+0x52>
 8029a52:	6813      	ldr	r3, [r2, #0]
 8029a54:	6825      	ldr	r5, [r4, #0]
 8029a56:	1d18      	adds	r0, r3, #4
 8029a58:	6010      	str	r0, [r2, #0]
 8029a5a:	0628      	lsls	r0, r5, #24
 8029a5c:	d501      	bpl.n	8029a62 <_printf_i+0xc2>
 8029a5e:	681b      	ldr	r3, [r3, #0]
 8029a60:	e002      	b.n	8029a68 <_printf_i+0xc8>
 8029a62:	0668      	lsls	r0, r5, #25
 8029a64:	d5fb      	bpl.n	8029a5e <_printf_i+0xbe>
 8029a66:	881b      	ldrh	r3, [r3, #0]
 8029a68:	4854      	ldr	r0, [pc, #336]	; (8029bbc <_printf_i+0x21c>)
 8029a6a:	296f      	cmp	r1, #111	; 0x6f
 8029a6c:	bf14      	ite	ne
 8029a6e:	220a      	movne	r2, #10
 8029a70:	2208      	moveq	r2, #8
 8029a72:	2100      	movs	r1, #0
 8029a74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029a78:	6865      	ldr	r5, [r4, #4]
 8029a7a:	60a5      	str	r5, [r4, #8]
 8029a7c:	2d00      	cmp	r5, #0
 8029a7e:	f2c0 8095 	blt.w	8029bac <_printf_i+0x20c>
 8029a82:	6821      	ldr	r1, [r4, #0]
 8029a84:	f021 0104 	bic.w	r1, r1, #4
 8029a88:	6021      	str	r1, [r4, #0]
 8029a8a:	2b00      	cmp	r3, #0
 8029a8c:	d13d      	bne.n	8029b0a <_printf_i+0x16a>
 8029a8e:	2d00      	cmp	r5, #0
 8029a90:	f040 808e 	bne.w	8029bb0 <_printf_i+0x210>
 8029a94:	4665      	mov	r5, ip
 8029a96:	2a08      	cmp	r2, #8
 8029a98:	d10b      	bne.n	8029ab2 <_printf_i+0x112>
 8029a9a:	6823      	ldr	r3, [r4, #0]
 8029a9c:	07db      	lsls	r3, r3, #31
 8029a9e:	d508      	bpl.n	8029ab2 <_printf_i+0x112>
 8029aa0:	6923      	ldr	r3, [r4, #16]
 8029aa2:	6862      	ldr	r2, [r4, #4]
 8029aa4:	429a      	cmp	r2, r3
 8029aa6:	bfde      	ittt	le
 8029aa8:	2330      	movle	r3, #48	; 0x30
 8029aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029aae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029ab2:	ebac 0305 	sub.w	r3, ip, r5
 8029ab6:	6123      	str	r3, [r4, #16]
 8029ab8:	f8cd 8000 	str.w	r8, [sp]
 8029abc:	463b      	mov	r3, r7
 8029abe:	aa03      	add	r2, sp, #12
 8029ac0:	4621      	mov	r1, r4
 8029ac2:	4630      	mov	r0, r6
 8029ac4:	f7ff fef6 	bl	80298b4 <_printf_common>
 8029ac8:	3001      	adds	r0, #1
 8029aca:	d14d      	bne.n	8029b68 <_printf_i+0x1c8>
 8029acc:	f04f 30ff 	mov.w	r0, #4294967295
 8029ad0:	b005      	add	sp, #20
 8029ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029ad6:	4839      	ldr	r0, [pc, #228]	; (8029bbc <_printf_i+0x21c>)
 8029ad8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8029adc:	6813      	ldr	r3, [r2, #0]
 8029ade:	6821      	ldr	r1, [r4, #0]
 8029ae0:	1d1d      	adds	r5, r3, #4
 8029ae2:	681b      	ldr	r3, [r3, #0]
 8029ae4:	6015      	str	r5, [r2, #0]
 8029ae6:	060a      	lsls	r2, r1, #24
 8029ae8:	d50b      	bpl.n	8029b02 <_printf_i+0x162>
 8029aea:	07ca      	lsls	r2, r1, #31
 8029aec:	bf44      	itt	mi
 8029aee:	f041 0120 	orrmi.w	r1, r1, #32
 8029af2:	6021      	strmi	r1, [r4, #0]
 8029af4:	b91b      	cbnz	r3, 8029afe <_printf_i+0x15e>
 8029af6:	6822      	ldr	r2, [r4, #0]
 8029af8:	f022 0220 	bic.w	r2, r2, #32
 8029afc:	6022      	str	r2, [r4, #0]
 8029afe:	2210      	movs	r2, #16
 8029b00:	e7b7      	b.n	8029a72 <_printf_i+0xd2>
 8029b02:	064d      	lsls	r5, r1, #25
 8029b04:	bf48      	it	mi
 8029b06:	b29b      	uxthmi	r3, r3
 8029b08:	e7ef      	b.n	8029aea <_printf_i+0x14a>
 8029b0a:	4665      	mov	r5, ip
 8029b0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029b10:	fb02 3311 	mls	r3, r2, r1, r3
 8029b14:	5cc3      	ldrb	r3, [r0, r3]
 8029b16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8029b1a:	460b      	mov	r3, r1
 8029b1c:	2900      	cmp	r1, #0
 8029b1e:	d1f5      	bne.n	8029b0c <_printf_i+0x16c>
 8029b20:	e7b9      	b.n	8029a96 <_printf_i+0xf6>
 8029b22:	6813      	ldr	r3, [r2, #0]
 8029b24:	6825      	ldr	r5, [r4, #0]
 8029b26:	6961      	ldr	r1, [r4, #20]
 8029b28:	1d18      	adds	r0, r3, #4
 8029b2a:	6010      	str	r0, [r2, #0]
 8029b2c:	0628      	lsls	r0, r5, #24
 8029b2e:	681b      	ldr	r3, [r3, #0]
 8029b30:	d501      	bpl.n	8029b36 <_printf_i+0x196>
 8029b32:	6019      	str	r1, [r3, #0]
 8029b34:	e002      	b.n	8029b3c <_printf_i+0x19c>
 8029b36:	066a      	lsls	r2, r5, #25
 8029b38:	d5fb      	bpl.n	8029b32 <_printf_i+0x192>
 8029b3a:	8019      	strh	r1, [r3, #0]
 8029b3c:	2300      	movs	r3, #0
 8029b3e:	6123      	str	r3, [r4, #16]
 8029b40:	4665      	mov	r5, ip
 8029b42:	e7b9      	b.n	8029ab8 <_printf_i+0x118>
 8029b44:	6813      	ldr	r3, [r2, #0]
 8029b46:	1d19      	adds	r1, r3, #4
 8029b48:	6011      	str	r1, [r2, #0]
 8029b4a:	681d      	ldr	r5, [r3, #0]
 8029b4c:	6862      	ldr	r2, [r4, #4]
 8029b4e:	2100      	movs	r1, #0
 8029b50:	4628      	mov	r0, r5
 8029b52:	f7f2 fbfd 	bl	801c350 <memchr>
 8029b56:	b108      	cbz	r0, 8029b5c <_printf_i+0x1bc>
 8029b58:	1b40      	subs	r0, r0, r5
 8029b5a:	6060      	str	r0, [r4, #4]
 8029b5c:	6863      	ldr	r3, [r4, #4]
 8029b5e:	6123      	str	r3, [r4, #16]
 8029b60:	2300      	movs	r3, #0
 8029b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029b66:	e7a7      	b.n	8029ab8 <_printf_i+0x118>
 8029b68:	6923      	ldr	r3, [r4, #16]
 8029b6a:	462a      	mov	r2, r5
 8029b6c:	4639      	mov	r1, r7
 8029b6e:	4630      	mov	r0, r6
 8029b70:	47c0      	blx	r8
 8029b72:	3001      	adds	r0, #1
 8029b74:	d0aa      	beq.n	8029acc <_printf_i+0x12c>
 8029b76:	6823      	ldr	r3, [r4, #0]
 8029b78:	079b      	lsls	r3, r3, #30
 8029b7a:	d413      	bmi.n	8029ba4 <_printf_i+0x204>
 8029b7c:	68e0      	ldr	r0, [r4, #12]
 8029b7e:	9b03      	ldr	r3, [sp, #12]
 8029b80:	4298      	cmp	r0, r3
 8029b82:	bfb8      	it	lt
 8029b84:	4618      	movlt	r0, r3
 8029b86:	e7a3      	b.n	8029ad0 <_printf_i+0x130>
 8029b88:	2301      	movs	r3, #1
 8029b8a:	464a      	mov	r2, r9
 8029b8c:	4639      	mov	r1, r7
 8029b8e:	4630      	mov	r0, r6
 8029b90:	47c0      	blx	r8
 8029b92:	3001      	adds	r0, #1
 8029b94:	d09a      	beq.n	8029acc <_printf_i+0x12c>
 8029b96:	3501      	adds	r5, #1
 8029b98:	68e3      	ldr	r3, [r4, #12]
 8029b9a:	9a03      	ldr	r2, [sp, #12]
 8029b9c:	1a9b      	subs	r3, r3, r2
 8029b9e:	42ab      	cmp	r3, r5
 8029ba0:	dcf2      	bgt.n	8029b88 <_printf_i+0x1e8>
 8029ba2:	e7eb      	b.n	8029b7c <_printf_i+0x1dc>
 8029ba4:	2500      	movs	r5, #0
 8029ba6:	f104 0919 	add.w	r9, r4, #25
 8029baa:	e7f5      	b.n	8029b98 <_printf_i+0x1f8>
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	d1ac      	bne.n	8029b0a <_printf_i+0x16a>
 8029bb0:	7803      	ldrb	r3, [r0, #0]
 8029bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029bb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029bba:	e76c      	b.n	8029a96 <_printf_i+0xf6>
 8029bbc:	0802dc19 	.word	0x0802dc19
 8029bc0:	0802dc2a 	.word	0x0802dc2a

08029bc4 <_putc_r>:
 8029bc4:	b570      	push	{r4, r5, r6, lr}
 8029bc6:	460d      	mov	r5, r1
 8029bc8:	4614      	mov	r4, r2
 8029bca:	4606      	mov	r6, r0
 8029bcc:	b118      	cbz	r0, 8029bd6 <_putc_r+0x12>
 8029bce:	6983      	ldr	r3, [r0, #24]
 8029bd0:	b90b      	cbnz	r3, 8029bd6 <_putc_r+0x12>
 8029bd2:	f7ff faed 	bl	80291b0 <__sinit>
 8029bd6:	4b13      	ldr	r3, [pc, #76]	; (8029c24 <_putc_r+0x60>)
 8029bd8:	429c      	cmp	r4, r3
 8029bda:	d112      	bne.n	8029c02 <_putc_r+0x3e>
 8029bdc:	6874      	ldr	r4, [r6, #4]
 8029bde:	68a3      	ldr	r3, [r4, #8]
 8029be0:	3b01      	subs	r3, #1
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	60a3      	str	r3, [r4, #8]
 8029be6:	da16      	bge.n	8029c16 <_putc_r+0x52>
 8029be8:	69a2      	ldr	r2, [r4, #24]
 8029bea:	4293      	cmp	r3, r2
 8029bec:	db02      	blt.n	8029bf4 <_putc_r+0x30>
 8029bee:	b2eb      	uxtb	r3, r5
 8029bf0:	2b0a      	cmp	r3, #10
 8029bf2:	d110      	bne.n	8029c16 <_putc_r+0x52>
 8029bf4:	4622      	mov	r2, r4
 8029bf6:	4629      	mov	r1, r5
 8029bf8:	4630      	mov	r0, r6
 8029bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029bfe:	f7ff b927 	b.w	8028e50 <__swbuf_r>
 8029c02:	4b09      	ldr	r3, [pc, #36]	; (8029c28 <_putc_r+0x64>)
 8029c04:	429c      	cmp	r4, r3
 8029c06:	d101      	bne.n	8029c0c <_putc_r+0x48>
 8029c08:	68b4      	ldr	r4, [r6, #8]
 8029c0a:	e7e8      	b.n	8029bde <_putc_r+0x1a>
 8029c0c:	4b07      	ldr	r3, [pc, #28]	; (8029c2c <_putc_r+0x68>)
 8029c0e:	429c      	cmp	r4, r3
 8029c10:	bf08      	it	eq
 8029c12:	68f4      	ldreq	r4, [r6, #12]
 8029c14:	e7e3      	b.n	8029bde <_putc_r+0x1a>
 8029c16:	6823      	ldr	r3, [r4, #0]
 8029c18:	1c5a      	adds	r2, r3, #1
 8029c1a:	6022      	str	r2, [r4, #0]
 8029c1c:	701d      	strb	r5, [r3, #0]
 8029c1e:	b2e8      	uxtb	r0, r5
 8029c20:	bd70      	pop	{r4, r5, r6, pc}
 8029c22:	bf00      	nop
 8029c24:	0802dbc8 	.word	0x0802dbc8
 8029c28:	0802dbe8 	.word	0x0802dbe8
 8029c2c:	0802dba8 	.word	0x0802dba8

08029c30 <__sread>:
 8029c30:	b510      	push	{r4, lr}
 8029c32:	460c      	mov	r4, r1
 8029c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c38:	f000 f8d4 	bl	8029de4 <_read_r>
 8029c3c:	2800      	cmp	r0, #0
 8029c3e:	bfab      	itete	ge
 8029c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029c42:	89a3      	ldrhlt	r3, [r4, #12]
 8029c44:	181b      	addge	r3, r3, r0
 8029c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029c4a:	bfac      	ite	ge
 8029c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8029c4e:	81a3      	strhlt	r3, [r4, #12]
 8029c50:	bd10      	pop	{r4, pc}

08029c52 <__swrite>:
 8029c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029c56:	461f      	mov	r7, r3
 8029c58:	898b      	ldrh	r3, [r1, #12]
 8029c5a:	05db      	lsls	r3, r3, #23
 8029c5c:	4605      	mov	r5, r0
 8029c5e:	460c      	mov	r4, r1
 8029c60:	4616      	mov	r6, r2
 8029c62:	d505      	bpl.n	8029c70 <__swrite+0x1e>
 8029c64:	2302      	movs	r3, #2
 8029c66:	2200      	movs	r2, #0
 8029c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c6c:	f000 f868 	bl	8029d40 <_lseek_r>
 8029c70:	89a3      	ldrh	r3, [r4, #12]
 8029c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029c7a:	81a3      	strh	r3, [r4, #12]
 8029c7c:	4632      	mov	r2, r6
 8029c7e:	463b      	mov	r3, r7
 8029c80:	4628      	mov	r0, r5
 8029c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029c86:	f000 b817 	b.w	8029cb8 <_write_r>

08029c8a <__sseek>:
 8029c8a:	b510      	push	{r4, lr}
 8029c8c:	460c      	mov	r4, r1
 8029c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c92:	f000 f855 	bl	8029d40 <_lseek_r>
 8029c96:	1c43      	adds	r3, r0, #1
 8029c98:	89a3      	ldrh	r3, [r4, #12]
 8029c9a:	bf15      	itete	ne
 8029c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8029c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029ca6:	81a3      	strheq	r3, [r4, #12]
 8029ca8:	bf18      	it	ne
 8029caa:	81a3      	strhne	r3, [r4, #12]
 8029cac:	bd10      	pop	{r4, pc}

08029cae <__sclose>:
 8029cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029cb2:	f000 b813 	b.w	8029cdc <_close_r>
	...

08029cb8 <_write_r>:
 8029cb8:	b538      	push	{r3, r4, r5, lr}
 8029cba:	4c07      	ldr	r4, [pc, #28]	; (8029cd8 <_write_r+0x20>)
 8029cbc:	4605      	mov	r5, r0
 8029cbe:	4608      	mov	r0, r1
 8029cc0:	4611      	mov	r1, r2
 8029cc2:	2200      	movs	r2, #0
 8029cc4:	6022      	str	r2, [r4, #0]
 8029cc6:	461a      	mov	r2, r3
 8029cc8:	f7f6 ff65 	bl	8020b96 <_write>
 8029ccc:	1c43      	adds	r3, r0, #1
 8029cce:	d102      	bne.n	8029cd6 <_write_r+0x1e>
 8029cd0:	6823      	ldr	r3, [r4, #0]
 8029cd2:	b103      	cbz	r3, 8029cd6 <_write_r+0x1e>
 8029cd4:	602b      	str	r3, [r5, #0]
 8029cd6:	bd38      	pop	{r3, r4, r5, pc}
 8029cd8:	20032e4c 	.word	0x20032e4c

08029cdc <_close_r>:
 8029cdc:	b538      	push	{r3, r4, r5, lr}
 8029cde:	4c06      	ldr	r4, [pc, #24]	; (8029cf8 <_close_r+0x1c>)
 8029ce0:	2300      	movs	r3, #0
 8029ce2:	4605      	mov	r5, r0
 8029ce4:	4608      	mov	r0, r1
 8029ce6:	6023      	str	r3, [r4, #0]
 8029ce8:	f7f6 ff7e 	bl	8020be8 <_close>
 8029cec:	1c43      	adds	r3, r0, #1
 8029cee:	d102      	bne.n	8029cf6 <_close_r+0x1a>
 8029cf0:	6823      	ldr	r3, [r4, #0]
 8029cf2:	b103      	cbz	r3, 8029cf6 <_close_r+0x1a>
 8029cf4:	602b      	str	r3, [r5, #0]
 8029cf6:	bd38      	pop	{r3, r4, r5, pc}
 8029cf8:	20032e4c 	.word	0x20032e4c

08029cfc <_fstat_r>:
 8029cfc:	b538      	push	{r3, r4, r5, lr}
 8029cfe:	4c07      	ldr	r4, [pc, #28]	; (8029d1c <_fstat_r+0x20>)
 8029d00:	2300      	movs	r3, #0
 8029d02:	4605      	mov	r5, r0
 8029d04:	4608      	mov	r0, r1
 8029d06:	4611      	mov	r1, r2
 8029d08:	6023      	str	r3, [r4, #0]
 8029d0a:	f7f6 ff70 	bl	8020bee <_fstat>
 8029d0e:	1c43      	adds	r3, r0, #1
 8029d10:	d102      	bne.n	8029d18 <_fstat_r+0x1c>
 8029d12:	6823      	ldr	r3, [r4, #0]
 8029d14:	b103      	cbz	r3, 8029d18 <_fstat_r+0x1c>
 8029d16:	602b      	str	r3, [r5, #0]
 8029d18:	bd38      	pop	{r3, r4, r5, pc}
 8029d1a:	bf00      	nop
 8029d1c:	20032e4c 	.word	0x20032e4c

08029d20 <_isatty_r>:
 8029d20:	b538      	push	{r3, r4, r5, lr}
 8029d22:	4c06      	ldr	r4, [pc, #24]	; (8029d3c <_isatty_r+0x1c>)
 8029d24:	2300      	movs	r3, #0
 8029d26:	4605      	mov	r5, r0
 8029d28:	4608      	mov	r0, r1
 8029d2a:	6023      	str	r3, [r4, #0]
 8029d2c:	f7f6 ff64 	bl	8020bf8 <_isatty>
 8029d30:	1c43      	adds	r3, r0, #1
 8029d32:	d102      	bne.n	8029d3a <_isatty_r+0x1a>
 8029d34:	6823      	ldr	r3, [r4, #0]
 8029d36:	b103      	cbz	r3, 8029d3a <_isatty_r+0x1a>
 8029d38:	602b      	str	r3, [r5, #0]
 8029d3a:	bd38      	pop	{r3, r4, r5, pc}
 8029d3c:	20032e4c 	.word	0x20032e4c

08029d40 <_lseek_r>:
 8029d40:	b538      	push	{r3, r4, r5, lr}
 8029d42:	4c07      	ldr	r4, [pc, #28]	; (8029d60 <_lseek_r+0x20>)
 8029d44:	4605      	mov	r5, r0
 8029d46:	4608      	mov	r0, r1
 8029d48:	4611      	mov	r1, r2
 8029d4a:	2200      	movs	r2, #0
 8029d4c:	6022      	str	r2, [r4, #0]
 8029d4e:	461a      	mov	r2, r3
 8029d50:	f7f6 ff54 	bl	8020bfc <_lseek>
 8029d54:	1c43      	adds	r3, r0, #1
 8029d56:	d102      	bne.n	8029d5e <_lseek_r+0x1e>
 8029d58:	6823      	ldr	r3, [r4, #0]
 8029d5a:	b103      	cbz	r3, 8029d5e <_lseek_r+0x1e>
 8029d5c:	602b      	str	r3, [r5, #0]
 8029d5e:	bd38      	pop	{r3, r4, r5, pc}
 8029d60:	20032e4c 	.word	0x20032e4c

08029d64 <memmove>:
 8029d64:	4288      	cmp	r0, r1
 8029d66:	b510      	push	{r4, lr}
 8029d68:	eb01 0302 	add.w	r3, r1, r2
 8029d6c:	d807      	bhi.n	8029d7e <memmove+0x1a>
 8029d6e:	1e42      	subs	r2, r0, #1
 8029d70:	4299      	cmp	r1, r3
 8029d72:	d00a      	beq.n	8029d8a <memmove+0x26>
 8029d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029d78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8029d7c:	e7f8      	b.n	8029d70 <memmove+0xc>
 8029d7e:	4283      	cmp	r3, r0
 8029d80:	d9f5      	bls.n	8029d6e <memmove+0xa>
 8029d82:	1881      	adds	r1, r0, r2
 8029d84:	1ad2      	subs	r2, r2, r3
 8029d86:	42d3      	cmn	r3, r2
 8029d88:	d100      	bne.n	8029d8c <memmove+0x28>
 8029d8a:	bd10      	pop	{r4, pc}
 8029d8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029d90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8029d94:	e7f7      	b.n	8029d86 <memmove+0x22>

08029d96 <_realloc_r>:
 8029d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029d98:	4607      	mov	r7, r0
 8029d9a:	4614      	mov	r4, r2
 8029d9c:	460e      	mov	r6, r1
 8029d9e:	b921      	cbnz	r1, 8029daa <_realloc_r+0x14>
 8029da0:	4611      	mov	r1, r2
 8029da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8029da6:	f7fe be77 	b.w	8028a98 <_malloc_r>
 8029daa:	b922      	cbnz	r2, 8029db6 <_realloc_r+0x20>
 8029dac:	f7fe fe26 	bl	80289fc <_free_r>
 8029db0:	4625      	mov	r5, r4
 8029db2:	4628      	mov	r0, r5
 8029db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029db6:	f000 f827 	bl	8029e08 <_malloc_usable_size_r>
 8029dba:	42a0      	cmp	r0, r4
 8029dbc:	d20f      	bcs.n	8029dde <_realloc_r+0x48>
 8029dbe:	4621      	mov	r1, r4
 8029dc0:	4638      	mov	r0, r7
 8029dc2:	f7fe fe69 	bl	8028a98 <_malloc_r>
 8029dc6:	4605      	mov	r5, r0
 8029dc8:	2800      	cmp	r0, #0
 8029dca:	d0f2      	beq.n	8029db2 <_realloc_r+0x1c>
 8029dcc:	4631      	mov	r1, r6
 8029dce:	4622      	mov	r2, r4
 8029dd0:	f7fe fdf3 	bl	80289ba <memcpy>
 8029dd4:	4631      	mov	r1, r6
 8029dd6:	4638      	mov	r0, r7
 8029dd8:	f7fe fe10 	bl	80289fc <_free_r>
 8029ddc:	e7e9      	b.n	8029db2 <_realloc_r+0x1c>
 8029dde:	4635      	mov	r5, r6
 8029de0:	e7e7      	b.n	8029db2 <_realloc_r+0x1c>
	...

08029de4 <_read_r>:
 8029de4:	b538      	push	{r3, r4, r5, lr}
 8029de6:	4c07      	ldr	r4, [pc, #28]	; (8029e04 <_read_r+0x20>)
 8029de8:	4605      	mov	r5, r0
 8029dea:	4608      	mov	r0, r1
 8029dec:	4611      	mov	r1, r2
 8029dee:	2200      	movs	r2, #0
 8029df0:	6022      	str	r2, [r4, #0]
 8029df2:	461a      	mov	r2, r3
 8029df4:	f7f6 fec1 	bl	8020b7a <_read>
 8029df8:	1c43      	adds	r3, r0, #1
 8029dfa:	d102      	bne.n	8029e02 <_read_r+0x1e>
 8029dfc:	6823      	ldr	r3, [r4, #0]
 8029dfe:	b103      	cbz	r3, 8029e02 <_read_r+0x1e>
 8029e00:	602b      	str	r3, [r5, #0]
 8029e02:	bd38      	pop	{r3, r4, r5, pc}
 8029e04:	20032e4c 	.word	0x20032e4c

08029e08 <_malloc_usable_size_r>:
 8029e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029e0c:	1f18      	subs	r0, r3, #4
 8029e0e:	2b00      	cmp	r3, #0
 8029e10:	bfbc      	itt	lt
 8029e12:	580b      	ldrlt	r3, [r1, r0]
 8029e14:	18c0      	addlt	r0, r0, r3
 8029e16:	4770      	bx	lr

08029e18 <_init>:
 8029e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e1a:	bf00      	nop
 8029e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029e1e:	bc08      	pop	{r3}
 8029e20:	469e      	mov	lr, r3
 8029e22:	4770      	bx	lr

08029e24 <_fini>:
 8029e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029e26:	bf00      	nop
 8029e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029e2a:	bc08      	pop	{r3}
 8029e2c:	469e      	mov	lr, r3
 8029e2e:	4770      	bx	lr
